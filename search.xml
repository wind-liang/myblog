<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>【限免】0基础入门前端系列课程</title>
    <url>/2023/08/13/0%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%E5%89%8D%E7%AB%AF%E7%B3%BB%E5%88%97%E8%AF%BE%E7%A8%8B/</url>
    <content><![CDATA[<p>免费学详细规则：<a href="https://mp.weixin.qq.com/s/0X8l9VeEp0VizlUTSgVmqg" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/0X8l9VeEp0VizlUTSgVmqg</a></p>
<p>前端存在<strong>知识点杂多、技术迭代快</strong>的特点，对于初学者或者非前端开发者往往会一脸懵逼。</p>
<p>这个系列会逐个介绍前端各个知识点，最后再详细介绍「课程减减」这个网站如何从零开始开发，包含前后端的开发，以及最后部署上线，预览地址 <a href="https://coursesub.top/" target="_blank" rel="noopener">https://coursesub.top/</a></p>
<h1 id="课程介绍"><a href="#课程介绍" class="headerlink" title="课程介绍"></a>课程介绍</h1><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/1686402092795-4d35181e-ba66-47cb-b46f-f96ecdf3ddbf.png" style="zoom:50%;"></p>
<p>前端整体结构可以理解为上边的图，底层的硬件、操作系统部分我们不关心，谷歌开源了 V8 引擎，它可以运行 js 语言，基于此又有了 <strong>Chrome</strong> 浏览器和 <strong>Node.js</strong>。</p>
<ul>
<li>浏览器可以运行 html/css/js 的代码，渲染网页并且提供交互能力。在原生的 js 的基础上，又诞生了Vue/React，可以提升网页开发效率。</li>
<li>Node.js 目前有两方面作用，一方面是写脚手架或者一些命令行工具，比如 Webpack。另一方面可以搭建 HTTP 服务器，提供后端接口，比如使用 koa 框架。</li>
</ul>
<p>课程会详细介绍各个知识点的来龙去脉，目录如下：</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20230807080036010.png" alt=""></p>
<h1 id="适合人群"><a href="#适合人群" class="headerlink" title="适合人群"></a>适合人群</h1><p>前端初学者：简单学习了 html、css、js，对其他概念还不太了解，也没有独立开发项目的经验。</p>
<p>其他开发人员：不管是后端、算法、测开等，只要有过编程经验，都可以轻松地跟上课程。</p>
<h1 id="收获什么"><a href="#收获什么" class="headerlink" title="收获什么"></a>收获什么</h1><p>会了解前端的整体架构，各个部分的作用，跟着教程可以搭建出「课程减减」这个网站。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/1686401004503-ed8d2a90-1519-47aa-86f9-f2db5623ff1a.png" style="zoom:50%;"></p>
<p>包含前后端整个开发过程的详细介绍，以及最后通过 nginx 将网站部署上线。</p>
<p>整个课程下来，<strong>会对前端有一个大体的认知</strong>，未来想写其他的网站也不再迷茫，该干什么， 需要做什么都做到心中有数。</p>
<h1 id="购买须知"><a href="#购买须知" class="headerlink" title="购买须知"></a>购买须知</h1><ol>
<li>本系列为图文形式内容服务，文章会由微信公众号文章的形式发布，共计 14 篇(已完结)；</li>
<li>购买用户可享有永久的阅读权限；</li>
<li>教程为虚拟内容服务，一经购买成功概不退款；</li>
<li>版权归本公众号所有，任何机构、媒体、网站或个人未经本网协议授权不得转载、链接、转贴或以其他方式复制发布/发表，违者将依法追究责任；</li>
</ol>
<h1 id="购买优惠"><a href="#购买优惠" class="headerlink" title="购买优惠"></a>购买优惠</h1><p>安卓用户进这里 <a href="https://mp.weixin.qq.com/s/xvfdXNSOKyMp--X-h_WE_Q" target="_blank" rel="noopener">安卓用户购买</a> 点击文章下方「合集详情」购买即可，苹果用户看这里 <a href="https://mp.weixin.qq.com/s/oOu--D69edllkoHbpD-3Qg" target="_blank" rel="noopener">ios 用户购买</a> 。</p>
<p>购买后添加下边微信可以领取返现红包，具体返现红包以 <a href="https://coursesub.top/" target="_blank" rel="noopener">https://coursesub.top/</a> 这里展示的为准，目前返现 20 元</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/640.jpeg" style="zoom:50%;"></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
  </entry>
  <entry>
    <title>21岁的你，生日快乐</title>
    <url>/2017/01/07/21%E5%B2%81%E7%9A%84%E4%BD%A0%EF%BC%8C%E7%94%9F%E6%97%A5%E5%BF%AB%E4%B9%90/</url>
    <content><![CDATA[<p>&ensp;&ensp;&ensp;&ensp;96,97,98,99,00,01,02,03,04,05,06,07,08,09,10,11,12,13,14,15,16,17,转眼间自己的年龄手脚并用也数不够了，为了使这一天变得有纪念意义，就搭个博客吧，写写随想，总结技术，突然觉得这种感觉很棒。自己本来不喜欢去总结什么，一直认为该记住的自然会记住，无需去记什么，但这几天的编程感觉记博客有时不是为了自己，看到其他人写的博客对自己的帮助那么大，自己也想去帮助后来的人，写个博客与大家共勉吧。<br>&ensp;&ensp;&ensp;&ensp;记得高中的时候自己很喜欢在空间发日志写写自己的思想，现在回去看，觉得又有些许幼稚，但没什么嘛，人总是在成长，1秒前的自己，和现在的自己就完全不同了，好几年没写过了，这里再梳理下自己的世界观人生观价值观？？差不多吧， 可以关注下我以后的技术文章。(<em>^__^</em>) 嘻嘻……</p>
<ul>
<li>信仰<br>&ensp;&ensp;&ensp;&ensp;每个人都会有自己的 信仰，不管是宗教也好，还是其他也好，都是神圣的，一些理念会深入到我们的心里，去指引行动。而我是相信心理作用的强大，一些东西，只要你想去实现，迫切的想实现，它就会实现了，哈哈哈哈哈哈哈哈哈。似乎我们是剧本的导演，一切都是自己的导演，不要说怎么可能，没有实现，只是因为自己内心还不够坚定，一旦坚定了，你会毫不迟疑的去为这件事做，慢慢的引导实现这件事。</li>
<li>爱情<br><del>&ensp;&ensp;&ensp;&ensp;“和我一起长大的发下孩子都有了，而我却还单身”，哈哈哈哈哈哈，没想到我们都已经过了早恋的年纪，不再会有老师说好好学习，不要早恋哦，也不用瞒着家长干这干那，一切都似乎倒了过来，一些家长都开始说媒了，哈哈。那么问题来了，我为什么还单身？QAQ只是因为对代码爱得深沉——。开个玩笑，讲真，感觉自己丧失了恋爱的能力，谁比较强就收了我吧。我觉得，爱情这东西吧，是挺神秘的，2333，完全猜不透它。依旧无法想象两个人在一起后，随着彼此的熟悉，当有了柴米油盐，当神秘感消失后，会剩下什么，但是吧，我觉得应该是这样，就多玩儿吧，两个人一起多出去看看走走玩玩，做些没做过的事，有了矛盾就吵一架，吵完不需要道歉，该做啥就做啥，彼此不需要掩饰什么，做最本真的自己，彼此深信对方一定会在自己身边，开开玩笑，打打闹闹，就很好了吧。</del><br>脱单了，<a href="http://love.windliang.wang/" target="_blank" rel="noopener">爱你</a></li>
<li>学习<br>&ensp;&ensp;&ensp;&ensp;在大学居然成了别人眼中的学霸，大神，然而也只有自己知道自己有多渺小，有多么长的路没有走。学习这种东西我是觉得没有学不会的东西，一遍不行两遍，两遍不行三遍，今天不行明天，明天不行后天，总会搞懂的，唯一缺的是坚持，我们不需要看最后的结果，真的，只要做了，坚持了，我相信一定会有变化的。而所有的知识都不重要，重要的是学会学知识的方法，遇到问题解决问题的能力，我想这才是我们上这么多学最重要的东西吧。</li>
<li><p>生活<br>&ensp;&ensp;&ensp;&ensp;“我的世界只有代码和婧仪”，真的喜欢，发自内心的喜欢。生活这东西，我觉得找到一件自己喜欢的事情去做就好了，看书也好，游戏也好，运动也好，没什么区别，反正人是不能闲着，不然会发疯。然后其他的呢，多和朋友聚聚，彼此吹个牛，鄙视一下，和家人没事聊几句，毕竟大学已经成了一年回两次家，以后不会多，反而会越来越少。多尝试些没做过的事情，美滋滋啊。然而在这物质的世界，还是得有钱，所以还是，嘿嘿嘿，好好学习吧，当然这里学习已经不再是狭义的学课本了，活到老，学到老嘛，360行。</p>
</li>
<li><p>end<br>&ensp;&ensp;&ensp;&ensp;每个人都有了自己的想法，再去改变一个人的想法太难了，唯有自己主动去学习自己认为对的想法，  明确自己一个最终的目标即可，做这做那有什么用呢，我的是“快乐就好了”！</p>
</li>
</ul>
]]></content>
      <categories>
        <category>随想</category>
      </categories>
      <tags>
        <tag>随想</tag>
      </tags>
  </entry>
  <entry>
    <title>QQ小程序「神奇字体」从注册到发布</title>
    <url>/2019/08/14/QQ%E5%B0%8F%E7%A8%8B%E5%BA%8F%E3%80%8C%E7%A5%9E%E5%A5%87%E5%AD%97%E4%BD%93%E3%80%8D%E4%BB%8E%E6%B3%A8%E5%86%8C%E5%88%B0%E5%8F%91%E5%B8%83/</url>
    <content><![CDATA[<p>QQ 小程序最开始是邀请制的，在上个月差不多快中旬的时候对开发者全面开放了，把之前的微信小程序「神奇字体」搬了过去，关于微信小程序详见 <a href="https://mp.weixin.qq.com/s/CQTk6KMV6sWlF3A2hYEF1Q" target="_blank" rel="noopener">小程序神奇字体的从零到一</a>。</p>
<p>这里分享下 QQ 小程序从零到一的搬移过程。</p>
<h1 id="认证"><a href="#认证" class="headerlink" title="认证"></a>认证</h1><p>首先是去注册 QQ 小程序，进行认证开发者，然后才能发布小程序，大概认证了快一周左右吧。</p>
<h1 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h1><p>和微信小程序一样，先下了客户端。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/qqmini.jpg" alt=""></p>
<p>再看下微信小程序的开发界面。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/wxmini.jpg" alt=""></p>
<p>有没有发现不同之处。本来下完 QQ 小程序后直接想把代码粘贴过去，然后发现 QQ 小程序的开发工具竟然没有编辑器，也可能是我没找到，但我找了好久，没办法就用其他编辑器新建了代码。</p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p>代码的话，命名上基本上是把微信小程序的 wx 啥啥啥，改成了 q 啥啥啥。举几个例子。</p>
<p>文件的后缀名。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/qq2.jpg" alt=""></p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/wx2.jpg" alt=""></p>
<p>库函数的调用。</p>
<p>QQ 小程序的代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">click(e) &#123;</span><br><span class="line">    var message = e.currentTarget.dataset.message;</span><br><span class="line">    qq.setClipboardData(&#123;</span><br><span class="line">        data: message,</span><br><span class="line">        success: function (res) &#123;</span><br><span class="line">            qq.showToast(&#123;</span><br><span class="line">                title: <span class="string">"复制成功"</span>,</span><br><span class="line">                duration: <span class="number">1000</span></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;,</span><br><span class="line">        fail: function (res) &#123;</span><br><span class="line">            qq.showToast(&#123;</span><br><span class="line">                title: <span class="string">"复制失败"</span>,</span><br><span class="line">                duration: <span class="number">2000</span></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p>微信小程序的代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">click(e) &#123;</span><br><span class="line">    var message = e.currentTarget.dataset.message;</span><br><span class="line">    wx.setClipboardData(&#123;</span><br><span class="line">        data: message,</span><br><span class="line">        success: function (res) &#123;</span><br><span class="line">            wx.showToast(&#123;</span><br><span class="line">                title: <span class="string">"复制成功"</span>,</span><br><span class="line">                duration: <span class="number">2000</span></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;,</span><br><span class="line">        fail: function (res) &#123;</span><br><span class="line">            wx.showToast(&#123;</span><br><span class="line">                title: <span class="string">"复制失败"</span>,</span><br><span class="line">                duration: <span class="number">2000</span></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p>另外说个神奇的事情，开始的时候这里其实忘了把 <code>wx</code> 改成 <code>qq</code> 了，然后编译和预览竟然都是成功的。</p>
<p>此外，相比于微信小程序的代码，QQ 小程序粘贴过来的代码去掉了一句代码，不然会有 <code>bug</code>，但并不知道为什么。而且同样的代码， QQ 小程序给我一种卡卡的感觉，不够流畅。</p>
<h1 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h1><p>开发的话，如果遇到问题去搜索的话，会发现个无奈的事情。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/qq22.jpg" alt=""></p>
<p>搜到的都是微信小程序解决方案，所以我们只能去他的 <a href="https://q.qq.com/wiki/" target="_blank" rel="noopener">官方文档</a> 去看了 。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/qq23.jpg" alt=""></p>
<p>或者就是搜索的时候利用 <code>site</code> 关键字限定在官方文档。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/qq24.jpg" alt=""></p>
<p>当然 QQ 小程序和微信小程序这么像，其实微信小程序的相关解决方案也可以照搬到 QQ 小程序。</p>
<h1 id="接入广告"><a href="#接入广告" class="headerlink" title="接入广告"></a>接入广告</h1><p>微信小程序流量主开通的条件是</p>
<blockquote>
<p> 累计独立访客（UV）不低于 1000</p>
</blockquote>
<p>QQ 小程序流量主开通的条件是</p>
<blockquote>
<p>DAU （日活跃用户数量）峰值 &gt; 500</p>
</blockquote>
<p>然而神奇的事情又出现了，我还没上线小程序的时候，就可以接入广告，大概是个 BUG。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/qq3.jpg" alt=""></p>
<p>甚至上线前竟然有了收入</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/qq4.jpg" alt=""></p>
<p>但现在进入流量主，会提示我没有权限接入广告，太迷了</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/qq6.jpg" alt=""></p>
<h1 id="审核"><a href="#审核" class="headerlink" title="审核"></a>审核</h1><p>当开发完后，就该提交审核了，关于审核时间的话，微信小程序在工作时间一般几个小时就有结果了，然而 QQ 小程序每次提交完就得等几天了。</p>
<p>然后和微信小程序一样的界面，一样的代码，在 QQ 小程序这里审核被拒了三次。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/qq7.png" alt=""></p>
<p>第一次的原因说是因为我接入了第三方广告。</p>
<p>然而我是莫名其妙接上的官方的广告呀，然后我没改代码就又重新提交了。</p>
<p>第二次的原因说是不具备可用性。</p>
<p>微信小程序都用的那么久了，一样的代码为什么不具备可用性呢，然后我没改代码就又重新提交了。</p>
<p>第三次的原因，请看图，我都震惊了，你们难道不是一家的吗？</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/qq8.png" alt=""></p>
<p>我都觉得他是在难为我胖虎了，我猜他的原因是因为小程序里边的轮播图？</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/qq9.jpg" alt=""></p>
<p>没办法呀，接着改呗，于是改了轮播图和文案。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/qq10.jpg" alt=""></p>
<p>并且我真的有些暴躁了，然后提交审核的时候加了一段话。。。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/qq11.png" alt=""></p>
<p>最后，在今天，终于通过了，从最开始到现在历时大约三周吧，和微信小程序形成了鲜明对比，微信 <a href="https://mp.weixin.qq.com/s/CQTk6KMV6sWlF3A2hYEF1Q" target="_blank" rel="noopener">小程序</a> 从开发到上线仅仅用了<code>3</code> 天。</p>
<h1 id="入口"><a href="#入口" class="headerlink" title="入口"></a>入口</h1><p>仅仅手机端 QQ 可以使用，TIM 和 PC 端都不能打开，同样是下拉消息列表。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/qq12.jpg" alt=""></p>
<p>然后提供了搜索小程序的功能。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/qq13.jpg" alt=""></p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/qq14.jpg" alt=""></p>
<p>另外可以通过扫描二维码进入，这里又发现了神奇的事情。</p>
<p>在设置界面提供了一个二维码。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/qq15.jpg" alt=""></p>
<p>也就是下边的二维码。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/qq16.png" alt=""></p>
<p>然而这个二维码在 QQ 中扫描成功，在微信中却不识别。</p>
<p>在开发管理中又找到了一个二维码。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/qq18.jpg" alt=""></p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/qq19.png" alt=""></p>
<p>上边的二维码就是正常的了，在微信中也可以识别，扫描后自动跳转到 QQ 打开小程序。</p>
<p>此外增加了分享到 QQ 空间的能力，可以在 QQ 空间直接打开。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/qq20.jpg" alt=""></p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/qq21.jpg" alt=""></p>
<h1 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h1><p>顺便给大家分享下微信小程序目前的数据吧。</p>
<p>目前累计用户是 3 万。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/qq26.jpg" alt=""></p>
<p>总添加用户 4.3 K.</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/qq27.png" alt=""></p>
<p>有一天访问量暴增，然后最近稳定在了每天 2k+ 。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/qq28.png" alt=""></p>
<p>最后再分享下最近微薄的收入。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/qq25.jpg" alt=""></p>
<p>每天平均收入 1 块钱，目前 80 多块钱。</p>
<p>自已一直也没有专门去推广，都是靠大家的传播，为了表示感谢，在这里就给大家劈个叉吧。</p>
<h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>通过从注册到发布 QQ 小程序，我这里体验的感觉不是很好，尤其是审核时间和规则上，很莫名其妙。另外开发工具没提供编辑器不知道是怎么考虑的，离微信小程序的开发体验还有些距离。不过 QQ 的流量目前主要是 00 后居多，所以对于某些小程序发布在 QQ 可能会有些优势。</p>
]]></content>
      <categories>
        <category>随想</category>
      </categories>
      <tags>
        <tag>随想</tag>
        <tag>前端</tag>
        <tag>小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue2剥丝抽茧-响应式系统完善</title>
    <url>/2022/04/03/Vue2%E5%89%A5%E4%B8%9D%E6%8A%BD%E8%8C%A7-%E5%93%8D%E5%BA%94%E5%BC%8F%E7%B3%BB%E7%BB%9F%E5%AE%8C%E5%96%84/</url>
    <content><![CDATA[<p>接 <a href="https://windliang.wang/2022/03/27/Vue2%E5%89%A5%E4%B8%9D%E6%8A%BD%E8%8C%A7-%E5%93%8D%E5%BA%94%E5%BC%8F%E7%B3%BB%E7%BB%9F/">Vue2剥丝抽茧-响应式系统</a>、<a href="https://windliang.wang/2022/03/31/Vue2%E5%89%A5%E4%B8%9D%E6%8A%BD%E8%8C%A7-%E5%93%8D%E5%BA%94%E5%BC%8F%E7%B3%BB%E7%BB%9F%E4%B9%8B%E5%88%86%E6%94%AF%E5%88%87%E6%8D%A2/">Vue2剥丝抽茧-响应式系统之分支切换</a>，<a href="https://windliang.wang/2022/04/02/Vue2%E5%89%A5%E4%B8%9D%E6%8A%BD%E8%8C%A7-%E5%93%8D%E5%BA%94%E5%BC%8F%E7%B3%BB%E7%BB%9F%E4%B9%8B%E5%B5%8C%E5%A5%97/">Vue2剥丝抽茧-响应式系统之嵌套</a> 还没有看过的同学需要看一下。</p>
<p>这篇文章主要修之前代码存在的一个问题，废话不多说，上代码！</p>
<h1 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; observe &#125; <span class="keyword">from</span> <span class="string">"./reactive"</span>;</span><br><span class="line"><span class="keyword">import</span> Watcher <span class="keyword">from</span> <span class="string">"./watcher"</span>;</span><br><span class="line"><span class="keyword">const</span> data = &#123;</span><br><span class="line">    text: <span class="string">"hello, world"</span>,</span><br><span class="line">&#125;;</span><br><span class="line">observe(data);</span><br><span class="line"><span class="keyword">let</span> show = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">const</span> updateComponent = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (show) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(data.text);</span><br><span class="line">        show = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Watcher(updateComponent);</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Watcher(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">"依赖"</span>, data.text));</span><br><span class="line"></span><br><span class="line">data.text = <span class="string">"123"</span>;</span><br></pre></td></tr></table></figure>
<p>先可以 <code>1</code> 分钟思考一下会输出什么。</p>
<ul>
<li><p><code>new Watcher(updateParentComponent);</code> </p>
<p>执行 <code>updateParentComponent</code> 函数，输出 <code>hello, world</code>，并且 <code>text</code> 的  <code>Dep</code>    收集该 <code>Watcher</code> 。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220403121307975.png" alt="image-20220403121307975"></p>
</li>
<li><p><code>new Watcher(() =&gt; console.log(&quot;依赖&quot;, data.text));</code></p>
<p>执行匿名函数，输出 <code>依赖 hello, world</code> ，并且 <code>text</code> 的  <code>Dep</code> 收集该 <code>Watcher</code> 。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220403121807211.png" alt="image-20220403121807211"></p>
</li>
<li><p><code>data.text = &quot;123&quot;;</code> 。</p>
<p>触发 <code>text</code> 的 <code>set</code>，依次执行 <code>Dep</code> 中的 <code>Watcher</code> 。</p>
<p>先执行 <code>updateParentComponent</code> 。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> updateComponent = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (show) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(data.text);</span><br><span class="line">        show = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>由于之前已经执行过一次了，此时 <code>show</code> 就是 <code>false</code> 了，什么都不会输出。</p>
<p>再执行 <code>() =&gt; console.log(&quot;依赖&quot;, data.text)</code> ，输出 <code>依赖 hello, world</code>。</p>
</li>
</ul>
<p>是的，上边是我们所期望的样子，但事实上输出结果如下：</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220403122245290.png" alt="image-20220403122245290"></p>
<p>出错代码 <code>dep.js:37:26</code> 如下：</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220403122317871.png" alt="image-20220403122317871"></p>
<p>调用 <code>update</code> 的时候是，遍历过程中 <code>subs[i]</code> 变成了 <code>undefined</code> ，导致了报错。</p>
<p>需要回忆下 <a href="https://windliang.wang/2022/03/31/Vue2%E5%89%A5%E4%B8%9D%E6%8A%BD%E8%8C%A7-%E5%93%8D%E5%BA%94%E5%BC%8F%E7%B3%BB%E7%BB%9F%E4%B9%8B%E5%88%86%E6%94%AF%E5%88%87%E6%8D%A2/">Vue2剥丝抽茧-响应式系统之分支切换</a> 这篇文章里我们做了什么。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220331091857522.png" alt="image-20220331091857522"></p>
<p>如果 <code>Watcher</code> 中的函数不再依赖当前属性，我们就把当前 <code>Watcher</code> 从该属性的 <code>Dep</code> 中移除。</p>
<p>而移除其实就是调用了数组的 <code>splice</code> 方法，直接将 <code>Dep</code> 中的 <code>subs</code> 数组元素进行删除。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">removeSub(sub) &#123;</span><br><span class="line">  remove(<span class="keyword">this</span>.subs, sub);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">remove</span>(<span class="params">arr, item</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (arr.length) &#123;</span><br><span class="line">    <span class="keyword">const</span> index = arr.indexOf(item);</span><br><span class="line">    <span class="keyword">if</span> (index &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> arr.splice(index, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>而此时我们正在遍历 <code>subs</code> 数组：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">notify() &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, l = <span class="keyword">this</span>.subs.length; i &lt; l; i++) &#123;</span><br><span class="line">    <span class="keyword">this</span>.subs[i].update();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>对应上边的例子，原本 <code>subs</code> 数组两个 <code>Watcher</code>，第一个 <code>Watcher</code> 执行的时候没有访问 <code>data.text</code> 属性，就要把这一个 <code>Watcher</code> 删除了，第二个就移动到第一个的位置了，此时 <code>for</code> 循环中访问第二个位置的 <code>Watcher</code> 因为被移到前边自然就报错了。</p>
<p>修改起来也很容易，我们只需要在循环前，将原有的 <code>subs</code> 数组保存给一个新的数组即可。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">notify() &#123;</span><br><span class="line">  <span class="comment">// stabilize the subscriber list first</span></span><br><span class="line">  <span class="keyword">const</span> subs = <span class="keyword">this</span>.subs.slice();</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, l = subs.length; i &lt; l; i++) &#123;</span><br><span class="line">    subs[i].update();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="总"><a href="#总" class="headerlink" title="总"></a>总</h1><p>这篇文章比较简单，主要就是循环通知 <code>Watcher</code> 之前把列表另存起来，防止遍历过程中被修改。</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>vue2</tag>
      </tags>
  </entry>
  <entry>
    <title>VuePress博客优化访问速度</title>
    <url>/2022/04/27/Vuepress%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96%E8%AE%BF%E9%97%AE%E9%80%9F%E5%BA%A6/</url>
    <content><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>最近用 <a href="https://vuepress.vuejs.org/" target="_blank" rel="noopener">Vupress</a> 搭了两个静态的网站，设计模式的 <a href="https://vuepress.vuejs.org/" target="_blank" rel="noopener">pattern.windliang.wang</a> 和 <code>Vue</code> 源码的 <a href="https://vue.windliang.wang/" target="_blank" rel="noopener">vue.windliang.wang</a>，但会发现有时候打开网站会特别特别慢，终止请求才会加载出来。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comvue.gif" alt="vue"></p>
<p>从搭博客到现在一个多月了，实在不能忍受，这篇文章就来解决下这个问题。</p>
<h1 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h1><p>让我们看一下网络请求：</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220427091248116.png" alt="image-20220427091248116"></p>
<p>会发现 <code>all.min.css</code> 耗时近 <code>10s</code>，另外两个字体文件甚至到了 <code>20</code> 多秒，看一下具体请求：</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220427090411397.png" alt="image-20220427090411397"></p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220427091304292.png" alt="image-20220427091304292"></p>
<p><code>css</code> 和 <code>woff</code> 的共同点都是从 <code>jsdelivr</code> 的 <code>cdn</code> 拿资源，理论上 <code>cdn</code> 是根据地区分发来加速的，这怎么还减速了呢？</p>
<p>网上搜到了 <code>2021.12.20</code> 官方 <a href="https://github.com/jsdelivr/jsdelivr/issues/18348#issuecomment-997777996" target="_blank" rel="noopener">issues</a> 的一个回应：</p>
<blockquote>
<p>Unfortunately today jsDelivr unexpectedly lost its ICP license in China. As effect the regional CDN disabled our account.</p>
<p>This resulted in the extended outage we had in mainland China and Taiwan.</p>
<p>Other regions were unaffected.</p>
<p>We understand how difficult it was for our users to experience this unique situation.</p>
<p>From now on all Chinese traffic will be served by “near China” locations provided by global CDN providers.</p>
<p>This will have the additional benefit of better failover logic in the future.</p>
</blockquote>
<p>大意就是中国的 <code>CDN</code> 没了，解析的话只能走中国附近国家地区的 <code>CDN</code>，这就是变慢的原因了。</p>
<h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><h2 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h2><p>把 <code>css</code> 文件直接丢到自己的云服务器上，然后修改原来的引用路径。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220427094509671.png" alt="image-20220427094509671"></p>
<p>上边的地址改成本地路径即可。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220427094533495.png" alt="image-20220427094533495"></p>
<p>但我们如果进入 <code>fontawesome.min.css</code> 去看会发现，这里面又引了好多文件。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220427094748497.png" alt="image-20220427094748497"></p>
<p>其中就有我们的字体文件。</p>
<p>如果为了保证完整使用，还要把这些文件也搞下来。</p>
<p>但实际测了下，替换完 <code>css</code> 后，这些 <code>url</code> 不处理对网站也没看出什么影响。</p>
<h2 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h2><p>换个 <code>cdn</code> ，找到了 <a href="https://staticfile.org/" target="_blank" rel="noopener">staticfile</a>，由七牛云和掘金提供。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220427095023458.png" alt="image-20220427095023458"></p>
<h1 id="替换"><a href="#替换" class="headerlink" title="替换"></a>替换</h1><p>我们只需要做一件事情，将 <code>VuePress</code> 打包出来的 <code>.css</code> 文件中  <code>jsdelivr</code>  的路径替换为 <code>staticfile</code>。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220428065601633.png" alt="image-20220428065601633"></p>
<p>即，<code>https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@5.14.0/css/all.min.css</code> 换为 <code>https://cdn.staticfile.org/font-awesome/5.14.0/css/all.min.css</code>。</p>
<p>我们可以用 <code>sed</code> 命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sed -i  <span class="string">'s/https.*\/all\.min\.css/https:\/\/cdn\.staticfile\.org\/font-awesome\/5\.14\.0\/css\/all\.min\.css/'</span> ./docs/.vuepress/dist/assets/css/*.css</span><br></pre></td></tr></table></figure>
<p>其中，<code>-i</code> 表示直接替换原文件，接下来的 <code>&#39;s/XXXXX/YYYYY/&#39;</code>  ，<code>s</code> 表示进行替换，紧跟两个正则表达式 <code>XXXXX</code> 和 <code>YYYYY</code>。</p>
<p><code>XXXXX</code> 我们直接写成 <code>https.*\/all\.min\.css</code>，匹配原来的 <code>url</code>。</p>
<p><code>YYYYY</code> 就是我们替换后的字符串，其中 <code>url</code> 中的 <code>/</code> 需要加 <code>\</code> 进行转义，就变成了 <code>https:\/\/cdn\.staticfile\.org\/font-awesome\/5\.14\.0\/css\/all\.min\.css</code>。</p>
<p>最后跟的是文件的名字，因为每次生成的 <code>css</code> 文件名 <code>0.styles.cf4c95b7.css</code> 可能会变化，又因为 <code>css</code> 文件夹下只有一个文件，所以我们直接用 <code>*.css</code> 进行通配。最后就是 <code>./docs/.vuepress/dist/assets/css/*.css</code> 了。</p>
<p>那么把这行命令加到哪里呢？</p>
<p>之前我们配置了 <code>github</code> 的 <code>webhook</code> ，当执行 <code>push</code> 代码的时候，我们服务器会自动执行下边的代码，详见 <a href="https://zhuanlan.zhihu.com/p/108720935" target="_blank" rel="noopener">云服务器搭建全过程</a>。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span></span><br><span class="line">cd ../vue2</span><br><span class="line">git pull</span><br><span class="line">npm i</span><br><span class="line">npm run build</span><br></pre></td></tr></table></figure>
<p>我们只需要在 <code>build</code> 之后进行替换即可。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span></span><br><span class="line">cd ../vue2</span><br><span class="line">git pull</span><br><span class="line">npm i</span><br><span class="line">npm run build</span><br><span class="line">sed -i  's/https.*\/all\.min\.css/https:\/\/cdn\.staticfile\.org\/font-awesome\/5\.14\.0\/css\/all\.min\.css/' ./docs/.vuepress/dist/assets/css/*.css</span><br></pre></td></tr></table></figure>
<h1 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h1><p>让我们再来访问一下网站。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comvue2.gif" alt="vue2"></p>
<p>成功实现了秒开，让我们看下之前 <code>css</code> 和 <code>woff</code> 的加载时间：</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220428070818711.png" alt="image-20220428070818711"></p>
<p>只能说快的飞起！</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>最近如果发现一些常用的网站打开变慢了，比如 <a href="https://echarts.apache.org/zh/option.html#title" target="_blank" rel="noopener">echarts</a> ，一个可能的原因就是它们使用了 <code>jsdelivr</code> 的 <code>cdn</code>，只能让 <code>*.jsdelivr.net</code> 去走代理了。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220427105232197.png" alt="image-20220427105232197"></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue中props是Object可以直接修改吗</title>
    <url>/2023/07/06/Vue%E4%B8%ADprops%E6%98%AFObject%E5%8F%AF%E4%BB%A5%E7%9B%B4%E6%8E%A5%E4%BF%AE%E6%94%B9%E5%90%97/</url>
    <content><![CDATA[<p>好久没有在知乎上看到好问题了，前几天<a href="https://www.zhihu.com/question/609822540/answer/3099837968" target="_blank" rel="noopener">看到一个</a>，把回答同步过来。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20230706080412256.png" alt=""></p>
<p>确实是一个很有争议的问题，团队里也经常讨论这个问题，下边分享下我的想法，也不一定是最佳实践。</p>
<p>首先，不要修改 prop 的值肯定是一条比较好的实践，保证数据的流向明确。</p>
<p><a href="https://vuejs.org/guide/components/props.html#one-way-data-flow" target="_blank" rel="noopener">官方文档</a>中也有明确指出：</p>
<h1 id="One-Way-Data-Flow"><a href="#One-Way-Data-Flow" class="headerlink" title="One-Way Data Flow"></a>One-Way Data Flow</h1><p>All props form a <strong>one-way-down binding</strong> between the child property and the parent one: when the parent property updates, it will flow down to the child, but not the other way around. This prevents child components from accidentally mutating the parent’s state, which can make your app’s data flow harder to understand.</p>
<p>In addition, every time the parent component is updated, all props in the child component will be refreshed with the latest value. This means you should <strong>not</strong> attempt to mutate a prop inside a child component. If you do, Vue will warn you in the console:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  props: [<span class="string">'foo'</span>],</span><br><span class="line">  created() &#123;</span><br><span class="line">    <span class="comment">// ❌ 警告！prop 是只读的！</span></span><br><span class="line">    <span class="keyword">this</span>.foo = <span class="string">'bar'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>There are usually two cases where it’s tempting to mutate a prop:</p>
<p><strong>1.The prop is used to pass in an initial value; the child component wants to use it as a local data property afterwards.</strong> In this case, it’s best to define a local data property that uses the prop as its initial value:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Vue3</span></span><br><span class="line"><span class="keyword">const</span> props = defineProps([<span class="string">'initialCounter'</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">// counter only uses props.initialCounter as the initial value;</span></span><br><span class="line"><span class="comment">// it is disconnected from future prop updates.</span></span><br><span class="line"><span class="keyword">const</span> counter = ref(props.initialCounter)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Vue2</span></span><br><span class="line">props: [<span class="string">'initialCounter'</span>],</span><br><span class="line">data: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    counter: <span class="keyword">this</span>.initialCounter</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>2. The prop is passed in as a raw value that needs to be transformed.</strong> In this case, it’s best to define a computed property using the prop’s value:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Vue3</span></span><br><span class="line"><span class="keyword">const</span> props = defineProps([<span class="string">'size'</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">// computed property that auto-updates when the prop changes</span></span><br><span class="line"><span class="keyword">const</span> normalizedSize = computed(<span class="function"><span class="params">()</span> =&gt;</span> props.size.trim().toLowerCase())</span><br><span class="line"></span><br><span class="line"><span class="comment">// Vue2</span></span><br><span class="line">props: [<span class="string">'size'</span>],</span><br><span class="line">computed: &#123;</span><br><span class="line">  normalizedSize: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.size.trim().toLowerCase()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>为了避免修改 prop 的值，可以在 data 中初始化为 prop 的值然后再去使用或者定义 computed 属性拿到 prop 值再去使用。</p>
<p>当然，上边的写法也仅仅对原始值生效，如果 props 定义成一个 Array 或者 Object，如果把 Object 的值直接赋值给 data：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">props: [<span class="string">'initialCounterObj'</span>],</span><br><span class="line">data: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    counterObj: <span class="keyword">this</span>.initialCounterObj</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当去修改 <code>counterObj</code> 中的值，虽然看起来没有修改 props 的值，但因为 Object 传递进来的是引用，修改 <code>counterObj</code> 的值的时候外部的相应的对象也跟着修改了。</p>
<p>针对这种情况，可以将 Object 摊开，变为一个个原始值。</p>
<h2 id="通过-sync"><a href="#通过-sync" class="headerlink" title="通过 .sync"></a>通过 .sync</h2><p>父组件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">child</span> <span class="attr">field1.sync</span>=<span class="string">"obj.field1"</span> <span class="attr">field2.sync</span>=<span class="string">"obj.field2"</span>&gt;</span><span class="tag">&lt;/<span class="name">child</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>子组件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  props: [<span class="string">'field1'</span>, <span class="string">'field2'</span>],</span><br><span class="line">  methods: &#123;</span><br><span class="line">      updateField1(newVal)&#123;</span><br><span class="line">           <span class="keyword">this</span>.$emit(<span class="string">'update:field1'</span>, newVal)</span><br><span class="line">      &#125;,</span><br><span class="line">      updateField2(newVal)&#123;</span><br><span class="line">           <span class="keyword">this</span>.$emit(<span class="string">'update:field2'</span>, newVal)</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="通过-get-set"><a href="#通过-get-set" class="headerlink" title="通过 get set"></a><a href="https://stackoverflow.com/questions/59992698/vuejs-best-practices-for-passing-form-data-to-child-and-back-to-parent?rq=4" target="_blank" rel="noopener">通过 get set</a></h2><p>父组件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">child</span> <span class="attr">v-model</span>=<span class="string">"obj"</span>&gt;</span><span class="tag">&lt;/<span class="name">child</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>子组件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  props: &#123;</span><br><span class="line">    value: &#123;</span><br><span class="line">      type: <span class="built_in">Object</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="function"><span class="params">()</span> =&gt;</span> (&#123;&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  computed: &#123;</span><br><span class="line">    field1: &#123;</span><br><span class="line">      get() &#123; <span class="keyword">return</span> <span class="keyword">this</span>.value.field1 &#125;,</span><br><span class="line">      set(field1) &#123; <span class="keyword">this</span>.$emit(<span class="string">'input'</span>, &#123;...this.value, field1 &#125;)&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    field2: &#123;</span><br><span class="line">      get() &#123; <span class="keyword">return</span> <span class="keyword">this</span>.value.field1 &#125;,</span><br><span class="line">      set(field2) &#123; <span class="keyword">this</span>.$emit(<span class="string">'input'</span>, &#123;...this.value, field2 &#125;)&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>另外一种更暴力的写法就是题主讲到的方案三 「<strong>不可变对象型」，</strong>每次修改前都把整个对象（或数组）克隆一遍，修改新的对象，再通过 emit 事件把新的对象（这里最好也再克隆一下）传出去。</p>
<p>上边的方案都可以保证不去修改 props 的值。</p>
<p>看下<a href="https://vuejs.org/guide/components/props.html#one-way-data-flow" target="_blank" rel="noopener">官方</a>对于 props 是 Object/Array 的态度：</p>
<h1 id="Mutating-Object-Array-Props"><a href="#Mutating-Object-Array-Props" class="headerlink" title="Mutating Object / Array Props"></a>Mutating Object / Array Props</h1><p>When objects and arrays are passed as props, while the child component cannot mutate the prop binding, it <strong>will</strong> be able to mutate the object or array’s nested properties. This is because in JavaScript objects and arrays are passed by reference, and it is unreasonably expensive for Vue to prevent such mutations.</p>
<p>The main drawback of such mutations is that it allows the child component to affect parent state in a way that isn’t obvious to the parent component, potentially making it more difficult to reason about the data flow in the future. As a best practice, you should avoid such mutations unless the parent and child are tightly coupled by design. In most cases, the child should emit an event to let the parent perform the mutation.</p>
<p>关键句：<strong>you should avoid such mutations unless the parent and child are tightly coupled by design.</strong></p>
<p>因此对于表单场景，我认为符合 parent and child are tightly coupled by design ，很多时候由于表单越来越大，一个 Vue 文件会变得巨大，此时想要拆部分表单出来成为一个组件，这种情况下采用题主所说的方案一「直接修改型」我认为是更佳的，不然的话不管采用什么方式保证不修改 props 都会增加很多代码，反而增加了很多理解成本。</p>
<p>更进一步，对于 Object/Array，是否修改 props 取决于当前组件的通用性，如果这个组件专门为了某个父组件使用或者专门服务于某个页面，并且为了不修改 props 会增加很多工作量，这种情况下直接修改 props 我认为是合适的。</p>
<p>但如果这个组件可能用给其他人，此时修改 props ，如果使用方不清楚的话就可能引发问题。</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>html的lang属性有什么用吗</title>
    <url>/2020/08/16/html%E7%9A%84lang%E5%B1%9E%E6%80%A7%E6%9C%89%E4%BB%80%E4%B9%88%E7%94%A8%E5%90%97/</url>
    <content><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>商家反馈，某个页面的列表数据错乱了，并且列表展示了很多条数据，但是标题写的是当前有 <code>0</code> 条数据。本地无法复现，于是联系了商家远程。</p>
<ul>
<li><p>检查了后端接口，返回数据是正常的。</p>
</li>
<li><p>检查了 <code>Chrome</code> 版本，是最新版本。</p>
</li>
<li><p>检查了控制台，无任何报错。</p>
</li>
<li><p>重新理了代码的逻辑，一切正常</p>
</li>
</ul>
<p>当一切陷入瓶颈的时候，检查了一下 <code>html</code> 标签，发现多出了很多 <code>font</code> 标签，但代码从来没有写过 <code>&lt;font&gt;&lt;/font&gt;</code> 这种标签。谷歌搜索 「多出 font 标签」，有很多人中招，问题最终解决。</p>
<h1 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h1><p>这里写一个 <code>demo</code> ，复现一下上边的错误，通过 <code>Vue</code> 演示，</p>
<p>直接通过 <code>&lt;script&gt;</code> 引入 <code>Vue.js</code>，然后简单的展示一个数字，通过一个 <code>button</code> 将数字改为 <code>6</code> 。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>测试demo<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">      &#123;&#123; message &#125;&#125;<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">      &#123;&#123; num &#125;&#125;条数据</span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">        @<span class="attr">click</span>=<span class="string">"setNum"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">style</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">          border: 1px solid red;</span></span></span><br><span class="line"><span class="tag"><span class="string">          width: 80px;</span></span></span><br><span class="line"><span class="tag"><span class="string">          cursor: pointer;</span></span></span><br><span class="line"><span class="tag"><span class="string">          text-align: center;</span></span></span><br><span class="line"><span class="tag"><span class="string">        "</span></span></span><br><span class="line"><span class="tag">      &gt;</span></span><br><span class="line">        得到数量</span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">"#app"</span>,</span></span><br><span class="line"><span class="undefined">      data: &#123;</span></span><br><span class="line"><span class="javascript">        message: <span class="string">"Hello Vue!"</span>,</span></span><br><span class="line"><span class="undefined">        num: 0,</span></span><br><span class="line"><span class="undefined">      &#125;,</span></span><br><span class="line"><span class="undefined">      methods: &#123;</span></span><br><span class="line"><span class="undefined">        setNum() &#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(<span class="string">'click'</span>);</span></span><br><span class="line"><span class="javascript">          <span class="keyword">this</span>.num = <span class="number">6</span>;</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">      &#125;,</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>界面就是下边的样子。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/htmllang1.png" alt=""></p>
<p>当我们点击「得到数量」，很明显 <code>0</code> 就会变成 <code>6</code>。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/htmllang2.png" alt=""></p>
<p>一切都是这么正常，但如果用户的 <code>Chrome</code> 在设置 -&gt; 高级 -&gt; 语言，勾选了 「询问是否翻译非您所用语言的网页」，如下图。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/htmllang3.png" alt=""></p>
<p>然后再打开刚才写的 <code>demo</code>，<code>Chrome</code> 就会提示用户是否要翻译当前网页，如下图。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/htmllang4.png" alt=""></p>
<p>如果用户把「一律翻译英语」进行了勾选，开始的时候不会有什么异常。</p>
<p>但用户一旦刷新页面，或者重新打开这个网页，此时再点击「得到数量」，会发现我们再也得不到数量了。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/htmllang5.png" alt=""></p>
<p>点击了 <code>13</code> 次，但 <code>0</code> 永远是 <code>0</code>。</p>
<h1 id="原因分析"><a href="#原因分析" class="headerlink" title="原因分析"></a>原因分析</h1><p>根本原因就是 <code>Chrome</code> 翻译的时候，会在所有的文本外层包一个 <code>&lt;font&gt;</code> 标签。</p>
<p>右键查看源代码，发现元素并没有变化。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/htmllang7.png" alt=""></p>
<p>检查元素的话，就会发现端倪了。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/htmllang6.png" alt=""></p>
<p>由于 <code>dom</code> 树的变化，<code>vue</code> 之前绑定的 <code>dom</code> 发生了改变，但这个是浏览器直接改的， <code>vue</code> 并不知道，所以设定值的时候就无法设置成功了。</p>
<h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><h2 id="最快方案"><a href="#最快方案" class="headerlink" title="最快方案"></a>最快方案</h2><p>让用户选择「一律不翻译此网站」。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/htmllang8.png" alt=""></p>
<p>然后用户刷新页面，就一切恢复正常了。</p>
<h2 id="根治方案"><a href="#根治方案" class="headerlink" title="根治方案"></a>根治方案</h2><p>如果不弹出翻译的选项，用户就没有选择的机会，也就不会出问题了。有两种方式。</p>
<ol>
<li><p>改浏览器的设置，也就是文章开头的图片。将「询问是否翻译非您所用语言的网页」取消勾选。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/htmllang3.png" alt=""></p>
</li>
<li><p>改代码，想一下为什么会弹出这个翻译的选项？</p>
<p>我们一般会默认生成下边的 <code>html</code> 模版。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>最关键的地方，<code>lang=&quot;en&quot;</code>，这个会告诉浏览器我们是英文网页（但其实是中文网页），然后浏览器检测用户用的语言是中文，就会弹出翻译选项询问用户是否翻译成中文。</p>
<p>所以这里把 <code>lang</code> 属性设置成 <code>zh</code> 就可以了。但这里其实有很多争议的地方，可以看下 <a href="https://www.zhihu.com/question/20797118" target="_blank" rel="noopener">网页头部的声明应该是用 lang=”zh” 还是 lang=”zh-cn”？</a> 这里的讨论，最后也不清楚到底哪个正确，但实践中设置成 <code>zh</code> 是可行的，此时 <code>Chrome</code> 就不会弹出翻译选项了。</p>
<p>看了一些常逛的中文网站的 <code>lang</code> 是怎么设置的。知乎是 <code>zh</code>，阿里云、豆瓣是 <code>zh-CN</code>，大众点评是 <code>en</code>，美团没有设置 <code>lang</code> 属性。</p>
</li>
</ol>
<h1 id="lang-更多特性"><a href="#lang-更多特性" class="headerlink" title="lang 更多特性"></a>lang 更多特性</h1><p><code>lang</code> 属性还会对文字的字形、双引号等产生影响，感兴趣的话可以看知乎的这个 <a href="https://www.zhihu.com/question/20797118/answer/1045722170" target="_blank" rel="noopener">回答</a>。这里截图几个有意思的。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/htmllang9.png" alt=""></p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/htmllang10.png" alt=""></p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/htmllang11.png" alt=""></p>
<h1 id="总"><a href="#总" class="headerlink" title="总"></a>总</h1><p>这种只在某个用户出现的 <code>bug</code> ，找起来太难了，尤其还不是代码的问题。另外吐槽一下谷歌的这个翻译，不知道坑了多少程序员，哈哈。</p>
<p>以后遇到无法理解的问题的时候，除了浏览器类型、版本的问题，这个翻译问题也可以作为一个排查方向。</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title>java 的回调机制</title>
    <url>/2017/04/19/java%E7%9A%84%E5%9B%9E%E8%B0%83%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<h3 id="先抛一段代码"><a href="#先抛一段代码" class="headerlink" title="先抛一段代码"></a>先抛一段代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CourseActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Button OkBtn;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">        </span><br><span class="line">        OkBtn= (Button) findViewById(R.id.ok_btn);</span><br><span class="line">        OkBtn.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">                 <span class="comment">//do something</span></span><br><span class="line"></span><br><span class="line">             &#125;</span><br><span class="line">         &#125;);</span><br><span class="line">         </span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//直接继承接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CourseActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnClickListener</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Button OkBtn;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">        </span><br><span class="line">        OkBtn= (Button) findViewById(R.id.ok_btn);</span><br><span class="line">        OkBtn.setOnClickListener(<span class="keyword">this</span>);  </span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//do something</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这段代码写了无数次，却对其内部的逻辑一直也没理会，现在总结下。</p>
<h3 id="回调"><a href="#回调" class="headerlink" title="回调"></a>回调</h3><blockquote>
<p>在计算机程序设计中，回调函数，或简称回调（Callback 即call then back 被主函数调用运算后会返回主函数），是指通过函数参数传递到其它代码的，某一块可执行代码的引用。这一设计允许了底层代码调用在高层定义的子程序。 <a href="https://zh.wikipedia.org/wiki/%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0" target="_blank" rel="noopener">维基百科</a></p>
</blockquote>
<p>通俗来讲，就是在 A 类 ( CourseActivity 类 ) 里调用 B 类 ( Button 类) 的 b 方法（setOnClickListener)，然后在 B 类里的 b  方法（setOnClickListener)，再回调 A 类里的 a 方法( onClick(View view) )。</p>
<h3 id="现实中的例子"><a href="#现实中的例子" class="headerlink" title="现实中的例子"></a>现实中的例子</h3><p>点外卖为例<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 首先定义 We 类，代表我们本身</span></span><br><span class="line"><span class="comment"> * 定义 TakeAway 类，代表外卖</span></span><br><span class="line"><span class="comment"> * 定义 CallBack 接口，当外卖送到楼下后用于回调</span></span><br><span class="line"><span class="comment"> * Main 函数中进行测试</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">We</span> <span class="keyword">implements</span> <span class="title">CallBack</span></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> TakeAway takeAway=<span class="keyword">new</span> TakeAway();  <span class="comment">//外卖</span></span><br><span class="line">	<span class="comment">//模仿一个人叫外卖</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">callTakeAway</span><span class="params">()</span></span>&#123;</span><br><span class="line">	    <span class="comment">//开启一个线程，用于调用外卖自己的方法，制作外卖，并且把自己类的实例传过去，让外卖回调自己</span></span><br><span class="line">		<span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            	takeAway.makeTakeAway(We.<span class="keyword">this</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">        <span class="comment">//点完外卖后，开始做其他事情，等待回调</span></span><br><span class="line">		System.out.println(<span class="string">"我开始玩耍,静待外卖"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//外卖做好后会回调这个方法</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getTakeAway</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		System.out.println(<span class="string">"我拿到外卖了！开始吃吃吃！"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TakeAway</span> </span>&#123;</span><br><span class="line">    <span class="comment">//将接口作为入口参数，方便回调</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">makeTakeAway</span><span class="params">(CallBack cb)</span></span>&#123;</span><br><span class="line">        <span class="comment">//睡眠 1 秒，模仿耗时工作</span></span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">			<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(<span class="string">"take-away:开始做外卖"</span>);</span><br><span class="line">		System.out.println(<span class="string">"take-away:打包外卖"</span>);</span><br><span class="line">		System.out.println(<span class="string">"take-away:送外卖"</span>);</span><br><span class="line">		System.out.println(<span class="string">"take-away:到了楼下，\n开始回调「您好，您的外卖到了下来拿一下」"</span>);</span><br><span class="line">		<span class="comment">//外卖做好，进行回调</span></span><br><span class="line">		cb.getTakeAway();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CallBack</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">getTakeAway</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		We I=<span class="keyword">new</span> We();</span><br><span class="line">		I.callTakeAway();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>运行结果如下图<br><img src="/2017/04/19/java的回调机制/result.png" alt=" "></p>
<h3 id="探究源码"><a href="#探究源码" class="headerlink" title="探究源码"></a>探究源码</h3><p>相关函数均定义在View类中</p>
<ul>
<li><p>首先是回调的接口 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Interface definition for a callback to be invoked when a view is clicked.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OnClickListener</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Called when a view has been clicked.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v The view that was clicked.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>传递要进行回调的对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Register a callback to be invoked when this view is clicked. If this view is not</span></span><br><span class="line"><span class="comment"> * clickable, it becomes clickable.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> l The callback that will run</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #setClickable(boolean)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOnClickListener</span><span class="params">(@Nullable OnClickListener l)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!isClickable()) &#123;</span><br><span class="line">        setClickable(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    getListenerInfo().mOnClickListener = l; <span class="comment">//将传过来的对象保存</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>执行回调函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Call this view's OnClickListener, if it is defined.  Performs all normal</span></span><br><span class="line"><span class="comment"> * actions associated with clicking: reporting accessibility event, playing</span></span><br><span class="line"><span class="comment"> * a sound, etc.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> True there was an assigned OnClickListener that was called, false</span></span><br><span class="line"><span class="comment"> *         otherwise is returned.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">performClick</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> result;</span><br><span class="line">    <span class="keyword">final</span> ListenerInfo li = mListenerInfo;</span><br><span class="line">    <span class="keyword">if</span> (li != <span class="keyword">null</span> &amp;&amp; li.mOnClickListener != <span class="keyword">null</span>) &#123;</span><br><span class="line">        playSoundEffect(SoundEffectConstants.CLICK);</span><br><span class="line">        li.mOnClickListener.onClick(<span class="keyword">this</span>); <span class="comment">//这里进行了回调</span></span><br><span class="line">        result = <span class="keyword">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        result = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sendAccessibilityEvent(AccessibilityEvent.TYPE_VIEW_CLICKED);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>要执行的东西就是我们继承了 View.OnClickListener 接口，实现的 onCLick() 方法了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>源码只找了相关的部分，再细致自己目前也不会，慢慢学 QAQ ，总之，回调感觉就是利用多线程，先去完成一些事情，当事情完成后再利用传过来的对象，调用原来类的方法。</p>
]]></content>
      <categories>
        <category>android</category>
      </categories>
      <tags>
        <tag>android</tag>
        <tag>java</tag>
        <tag>回调</tag>
      </tags>
  </entry>
  <entry>
    <title>leetCode_1_Two_Sum</title>
    <url>/2018/07/13/leetCode-1-Two-Sum/</url>
    <content><![CDATA[<h2 id="题目描述-（简单难度）"><a href="#题目描述-（简单难度）" class="headerlink" title="题目描述    （简单难度）"></a>题目描述    （简单难度）</h2><p><img src="http://windliang.oss-cn-beijing.aliyuncs.com/1_two_sum.jpg" alt=""></p>
<p>给定一个数组和一个目标和，从数组中找两个数字相加等于目标和，输出这两个数字的下标。</p>
<h2 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h2><p>简单粗暴些，两重循环，遍历所有情况看相加是否等于目标和，如果符合直接输出。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] twoSum1(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">		<span class="keyword">int</span> []ans=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=(i+<span class="number">1</span>);j&lt;nums.length;j++)&#123;</span><br><span class="line">				<span class="keyword">if</span>(nums[i]+nums[j]==target)&#123;</span><br><span class="line">					ans[<span class="number">0</span>]=i;</span><br><span class="line">					ans[<span class="number">1</span>]=j;</span><br><span class="line">					<span class="keyword">return</span> ans;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>时间复杂度：两层 for 循环，O（n²）</p>
<p>空间复杂度：O（1）</p>
<h2 id="解法二"><a href="#解法二" class="headerlink" title="解法二"></a>解法二</h2><p>在上边的解法中看下第二个 for 循环步骤。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=(i+<span class="number">1</span>);j&lt;nums.length;j++)&#123;</span><br><span class="line">	<span class="keyword">if</span>(nums[i]+nums[j]==target)&#123;</span><br></pre></td></tr></table></figure>
<p>我们换个理解方式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=(i+<span class="number">1</span>);j&lt;nums.length;j++)&#123; </span><br><span class="line">	sub=target-nums[i]</span><br><span class="line"> 	<span class="keyword">if</span>(nums[j]==sub)&#123;</span><br></pre></td></tr></table></figure>
<p>第二层 for 循环无非是遍历所有的元素，看哪个元素等于 sub ，时间复杂度为 O（n）。</p>
<p>有没有一种方法，不用遍历就可以找到元素里有没有等于 sub 的？</p>
<p>hash table ！！！</p>
<p>我们可以把数组的每个元素保存为 hash 的 key，下标保存为 hash 的 value 。</p>
<p>这样只需判断 sub 在不在 hash 的 key 里就可以了，而此时的时间复杂度仅为 O（1）！</p>
<p>需要注意的地方是，还需判断找到的元素不是当前元素，因为题目里讲一个元素只能用一次。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] twoSum2(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">		Map&lt;Integer,Integer&gt; map=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">			map.put(nums[i],i);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">			<span class="keyword">int</span> sub=target-nums[i];</span><br><span class="line">			<span class="keyword">if</span>(map.containsKey(sub)&amp;&amp;map.get(sub)!=i)&#123;</span><br><span class="line">				<span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;i,map.get(sub)&#125;;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"No two sum solution"</span>);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<p>时间复杂度：比解法一少了一个 for 循环，降为 O（n）</p>
<p>空间复杂度：所谓的空间换时间，这里就能体现出来， 开辟了一个 hash table ，空间复杂度变为 O（n）</p>
<h2 id="解法三"><a href="#解法三" class="headerlink" title="解法三"></a>解法三</h2><p>看解法二中，两个 for 循环，他们长的一样，我们当然可以把它合起来。复杂度上不会带来什么变化，变化仅仅是不需要判断是不是当前元素了，因为当前元素还没有添加进 hash 里。    </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] twoSum3(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">		Map&lt;Integer,Integer&gt; map=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">	    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">		    <span class="keyword">int</span> sub=target-nums[i];</span><br><span class="line">		    <span class="keyword">if</span>(map.containsKey(sub))&#123;</span><br><span class="line">			    <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;i,map.get(sub)&#125;;</span><br><span class="line">		&#125;</span><br><span class="line">		map.put(nums[i], i);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"No two sum solution"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>题目比较简单，毕竟暴力的方法也可以解决。唯一闪亮的点就是，时间复杂度从 O（n²）降为 O（n） 的时候，对 hash 的应用，有眼前一亮的感觉。</p>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>leetCode_2_Add_Two_Numbers</title>
    <url>/2018/07/14/leetCode-2-Add-Two-Numbers/</url>
    <content><![CDATA[<h2 id="题目描述（中等难度）"><a href="#题目描述（中等难度）" class="headerlink" title="题目描述（中等难度）"></a>题目描述（中等难度）</h2><p><img src="http://windliang.oss-cn-beijing.aliyuncs.com/TIM%E6%88%AA%E5%9B%BE20180714105005.jpg" alt=""></p>
<p>就是两个链表表示的数相加，这样就可以实现两个很大的数相加了，无需考虑数值 int ，float 的限制了。</p>
<p>由于自己实现的很乱，直接按答案的讲解了。</p>
<h2 id="图示"><a href="#图示" class="headerlink" title="图示"></a>图示</h2><p><img src="http://windliang.oss-cn-beijing.aliyuncs.com/2_pic.jpg" alt=""></p>
<p>链表最左边表示个位数，代表 342 + 465 =807 。</p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>首先每一位相加肯定会产生进位，我们用 carry 表示。进位最大会是 1 ，因为最大的情况是无非是 9 + 9 + 1 = 19 ，也就是两个最大的数相加，再加进位，这样最大是 19 ，不会产生进位 2 。下边是伪代码。</p>
<ul>
<li>初始化一个节点的头，dummy head ，但是这个头不存储数字。并且将 curr 指向它。</li>
<li>初始化进位 carry 为 0 。</li>
<li>初始化 p 和 q 分别为给定的两个链表 l1 和 l2 的头，也就是个位。</li>
<li>循环，直到 l1 和 l2 全部到达 null 。<ul>
<li>设置 x 为 p 节点的值，如果 p 已经到达了 null，设置 x 为 0 。</li>
<li>设置 y 为 q 节点的值，如果 q 已经到达了 null，设置 y 为 0 。</li>
<li>设置 sum = x + y + carry 。</li>
<li>更新 carry = sum / 10 。</li>
<li>创建一个值为 sum mod 10 的节点，并将 curr 的 next 指向它，同时 curr 指向变为当前的新节点。</li>
<li>向前移动 p 和 q 。</li>
</ul>
</li>
<li>判断 carry 是否等于 1 ，如果等于 1 ，在链表末尾增加一个为 1 的节点。</li>
<li>返回 dummy head 的 next ，也就是个位数开始的地方。</li>
</ul>
<p>初始化的节点 dummy head 没有存储值，最后返回 dummy head 的 next 。这样的好处是不用单独对 head 进行判断改变值。也就是如果一开始的 head 就是代表个位数，那么开始初始化的时候并不知道它的值是多少，所以还需要在进入循环前单独对它进行值的更正，不能像现在一样只用一个循环简洁。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListNode</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> val;</span><br><span class="line">	ListNode next;</span><br><span class="line">	ListNode(<span class="keyword">int</span> x) &#123; val = x; &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">addTwoNumbers</span><span class="params">(ListNode l1, ListNode l2)</span> </span>&#123;</span><br><span class="line">    ListNode dummyHead = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">    ListNode p = l1, q = l2, curr = dummyHead;</span><br><span class="line">    <span class="keyword">int</span> carry = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (p != <span class="keyword">null</span> || q != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> x = (p != <span class="keyword">null</span>) ? p.val : <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> y = (q != <span class="keyword">null</span>) ? q.val : <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> sum = carry + x + y;</span><br><span class="line">        carry = sum / <span class="number">10</span>;</span><br><span class="line">        curr.next = <span class="keyword">new</span> ListNode(sum % <span class="number">10</span>);</span><br><span class="line">        curr = curr.next;</span><br><span class="line">        <span class="keyword">if</span> (p != <span class="keyword">null</span>) p = p.next;</span><br><span class="line">        <span class="keyword">if</span> (q != <span class="keyword">null</span>) q = q.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (carry &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        curr.next = <span class="keyword">new</span> ListNode(carry);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dummyHead.next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>时间复杂度：O（max（m，n）），m 和 n 代表 l1 和 l2 的长度。</p>
<p>空间复杂度：O（max（m，n）），m 和 n 代表 l1 和 l2 的长度。而其实新的 List 最大长度是 O（max（m，n））+ 1，因为我们的 head 没有存储值。</p>
<h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><p><img src="http://windliang.oss-cn-beijing.aliyuncs.com/2_add.jpg" alt=""></p>
<p>如果链表存储的顺序反过来怎么办？</p>
<p>我首先想到的是链表先逆序计算，然后将结果再逆序呗，这就转换到我们之前的情况了。不知道还有没有其他的解法。下边分析下单链表逆序的思路。</p>
<h2 id="迭代思想"><a href="#迭代思想" class="headerlink" title="迭代思想"></a>迭代思想</h2><p>首先看一下原链表。</p>
<p><img src="http://windliang.oss-cn-beijing.aliyuncs.com/l0.jpg" alt=""></p>
<p>总共需要添加两个指针，pre  和 next。</p>
<p>初始化 pre 指向 NULL 。</p>
<p><img src="http://windliang.oss-cn-beijing.aliyuncs.com/l00.jpg" alt=""></p>
<p>然后就是迭代的步骤，总共四步，顺序一步都不能错。</p>
<ul>
<li><p>next 指向 head 的 next ，防止原链表丢失</p>
<p><img src="http://windliang.oss-cn-beijing.aliyuncs.com/l1.jpg" alt=""></p>
</li>
<li><p>head 的 next 从原来链表脱离，指向 pre 。</p>
<p><img src="http://windliang.oss-cn-beijing.aliyuncs.com/l2.jpg" alt=""></p>
</li>
<li><p>pre 指向 head</p>
<p><img src="http://windliang.oss-cn-beijing.aliyuncs.com/l3.jpg" alt=""></p>
</li>
<li><p>head 指向 next</p>
<p><img src="http://windliang.oss-cn-beijing.aliyuncs.com/l4.jpg" alt=""></p>
</li>
</ul>
<p>一次迭代就完成了，如果再进行一次迭代就变成下边的样子。</p>
<p><img src="http://windliang.oss-cn-beijing.aliyuncs.com/l5.jpg" alt=""></p>
<p>可以看到整个过程无非是把旧链表的 head 取下来，添加的新的链表上。代码怎么写呢？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">next = head -&gt; next; <span class="comment">//保存 head 的 next , 以防取下 head 后丢失</span></span><br><span class="line">head -&gt; next = pre; <span class="comment">//将 head 从原链表取下来，添加到新链表上</span></span><br><span class="line">pre = head;<span class="comment">// pre 右移</span></span><br><span class="line">head = next; <span class="comment">// head 右移</span></span><br></pre></td></tr></table></figure>
<p>接下来就是停止条件了，我们再进行一次循环。</p>
<p><img src="http://windliang.oss-cn-beijing.aliyuncs.com/l6.jpg" alt=""></p>
<p>可以发现当 head 或者 next  指向 null 的时候，我们就可以停止了。此时将 pre 返回，便是逆序了的链表了。</p>
<h2 id="迭代代码"><a href="#迭代代码" class="headerlink" title="迭代代码"></a>迭代代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">reverseList</span><span class="params">(ListNode head)</span></span>&#123;</span><br><span class="line">    	<span class="keyword">if</span>(head==<span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    	ListNode pre=<span class="keyword">null</span>;</span><br><span class="line">    	ListNode next;</span><br><span class="line">    	<span class="keyword">while</span>(head!=<span class="keyword">null</span>)&#123;</span><br><span class="line">    		next=head.next;</span><br><span class="line">    		head.next=pre;</span><br><span class="line">    		pre=head;</span><br><span class="line">    		head=next;</span><br><span class="line">    	&#125;</span><br><span class="line">    	<span class="keyword">return</span> pre;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="递归思想"><a href="#递归思想" class="headerlink" title="递归思想"></a>递归思想</h2><ul>
<li><p>首先假设我们实现了将单链表逆序的函数，ListNode reverseListRecursion(ListNode head) ，传入链表头，返回逆序后的链表头。</p>
</li>
<li><p>接着我们确定如何把问题一步一步的化小，我们可以这样想。</p>
<p>把 head 结点拿出来，剩下的部分我们调用函数 reverseListRecursion ，这样剩下的部分就逆序了，接着我们把 head 结点放到新链表的尾部就可以了。这就是整个递归的思想了。</p>
<p>​</p>
<p><img src="http://windliang.oss-cn-beijing.aliyuncs.com/ll0.jpg" alt=""></p>
<ul>
<li><p>head 结点拿出来</p>
<p><img src="http://windliang.oss-cn-beijing.aliyuncs.com/ll1.jpg" alt=""></p>
</li>
<li><p>剩余部分调用逆序函数 reverseListRecursion ，并得到了 newhead</p>
<p><img src="http://windliang.oss-cn-beijing.aliyuncs.com/ll2.jpg" alt=""></p>
</li>
<li><p>将 2 指向 1 ，1 指向 null，将 newhead 返回即可。</p>
<p><img src="http://windliang.oss-cn-beijing.aliyuncs.com/ll3.jpg" alt=""></p>
</li>
</ul>
</li>
<li><p>找到递归出口</p>
<p>当然就是如果结点的个数是一个，那么逆序的话还是它本身，直接 return 就够了。怎么判断结点个数是不是一个呢？它的 next 等于 null 就说明是一个了。但如果传进来的本身就是 null，那么直接找它的 next 会报错，所以先判断传进来的是不是 null ，如果是，也是直接返回就可以了。</p>
<h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">reverseListRecursion</span><span class="params">(ListNode head)</span></span>&#123; </span><br><span class="line">    	ListNode newHead;</span><br><span class="line">    	<span class="keyword">if</span>(head==<span class="keyword">null</span>||head.next==<span class="keyword">null</span> )&#123;</span><br><span class="line">    		<span class="keyword">return</span> head;</span><br><span class="line">    	&#125;</span><br><span class="line">    	newHead=reverseListRecursion(head.next); <span class="comment">//head.next 作为剩余部分的头指针</span></span><br><span class="line">    	head.next.next=head; <span class="comment">//head.next 代表新链表的尾，将它的 next 置为 head，就是将 head 加到最后了。</span></span><br><span class="line">    	head.next=<span class="keyword">null</span>;</span><br><span class="line">    	<span class="keyword">return</span> newHead;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>leetCode_3_Longest_Substring_Without_Repeating_Characters</title>
    <url>/2018/07/16/leetCode-3-Longest-Substring-Without-Repeating-Characters/</url>
    <content><![CDATA[<h2 id="题目描述（中等难度）"><a href="#题目描述（中等难度）" class="headerlink" title="题目描述（中等难度）"></a>题目描述（中等难度）</h2><p><img src="http://windliang.oss-cn-beijing.aliyuncs.com/3_long.jpg" alt=""></p>
<p>给定一个字符串，找到没有重复字符的最长子串，返回它的长度。</p>
<h2 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h2><p>简单粗暴些，找一个最长子串，那么我们用两个循环穷举所有子串，然后再用一个函数判断该子串中有没有重复的字符。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = s.length();</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;<span class="comment">//保存当前得到满足条件的子串的最大值</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt;= n; j++) <span class="comment">//之所以 j&lt;= n，是因为我们子串是 [i,j),左闭右开</span></span><br><span class="line">            <span class="keyword">if</span> (allUnique(s, i, j)) ans = Math.max(ans, j - i); <span class="comment">//更新 ans</span></span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">allUnique</span><span class="params">(String s, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">    Set&lt;Character&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();<span class="comment">//初始化 hash set</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = start; i &lt; end; i++) &#123;<span class="comment">//遍历每个字符</span></span><br><span class="line">        Character ch = s.charAt(i);</span><br><span class="line">        <span class="keyword">if</span> (set.contains(ch)) <span class="keyword">return</span> <span class="keyword">false</span>; <span class="comment">//判断字符在不在 set 中</span></span><br><span class="line">        set.add(ch);<span class="comment">//不在的话将该字符添加到 set 里边</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>时间复杂度：两个循环，加上判断子串满足不满足条件的函数中的循环，O（n³）。</p>
<p>空间复杂度：使用了一个 set，判断子串中有没有重复的字符。由于 set 中没有重复的字符，所以最长就是整个字符集，假设字符集的大小为 m ，那么 set 最长就是 m 。另一方面，如果字符串的长度小于 m ，是 n 。那么 set 最长也就是 n 了。综上，空间复杂度为 O（min（m，n））。</p>
<h2 id="解法二"><a href="#解法二" class="headerlink" title="解法二"></a>解法二</h2><p>遗憾的是上边的算法没有通过 leetCode，时间复杂度太大，造成了超时。我们怎么来优化一下呢？</p>
<p>上边的算法中，我们假设当 i 取 0 的时候，</p>
<p>j 取 1，判断字符串 str[0,1) 中有没有重复的字符。</p>
<p>j 取 2，判断字符串 str[0,2) 中有没有重复的字符。</p>
<p>j 取 3，判断字符串 str[0,3) 中有没有重复的字符。</p>
<p>j 取 4，判断字符串 str[0,4) 中有没有重复的字符。</p>
<p>做了很多重复的工作，因为如果 str[0,3) 中没有重复的字符，我们不需要再判断整个字符串 str[0,4) 中有没有重复的字符，而只需要判断 str[3] 在不在 str[0,3) 中，不在的话，就表明 str[0,4) 中没有重复的字符。</p>
<p>如果在的话，那么 str[0,5) ，str[0,6) ，str[0,7)  一定有重复的字符，所以此时后边的 j 也不需要继续增加了。i ++ 进入下次的循环就可以了。</p>
<p>此外，我们的 j 也不需要取 j + 1，而只需要从当前的 j 开始就可以了。</p>
<p>综上，其实整个关于 j 的循环我们完全可以去掉了，此时可以理解变成了一个「滑动窗口」。</p>
<p><img src="http://windliang.oss-cn-beijing.aliyuncs.com/slide.jpg" alt=""></p>
<p>整体就是橘色窗口在依次向右移动。</p>
<p>判断一个字符在不在字符串中，我们需要可以遍历整个字符串，遍历需要的时间复杂度就是 O（n），加上最外层的 i 的循环，总体复杂度就是 O（n²）。我们可以继续优化，判断字符在不在一个字符串，我们可以将已有的字符串存到 Hash 里，这样的时间复杂度是 O（1），总的时间复杂度就变成了 O（n）。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = s.length();</span><br><span class="line">        Set&lt;Character&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>, i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; n &amp;&amp; j &lt; n) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!set.contains(s.charAt(j)))&#123;</span><br><span class="line">                set.add(s.charAt(j++));</span><br><span class="line">                ans = Math.max(ans, j - i);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                set.remove(s.charAt(i++));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>时间复杂度：在最坏的情况下，while 循环中的语句会执行 2n 次，例如 abcdefgg，开始的时候 j 一直后移直到到达第二个 g 的时候固定不变 ，然后 i 开始一直后移直到 n ，所以总共执行了 2n 次，时间复杂度为 O（n）。</p>
<p>空间复杂度：和上边的类似，需要一个 Hash 保存子串，所以是  O（min（m，n））。</p>
<h2 id="解法三"><a href="#解法三" class="headerlink" title="解法三"></a>解法三</h2><p>继续优化，我们看上边的算法的一种情况。</p>
<p><img src="http://windliang.oss-cn-beijing.aliyuncs.com/slide11.jpg" alt=""></p>
<p>当 j 指向的 c 存在于前边的子串 abcd 中，此时 i 向前移到 b ,此时子串中仍然含有 c，还得继续移动，所以这里其实可以优化。我们可以一步到位，直接移动到子串 c 的位置的下一位！</p>
<p><img src="http://windliang.oss-cn-beijing.aliyuncs.com/slide22.jpg" alt=""></p>
<p>实现这样的话，我们将 set 改为 map ，将字符存为 key ，将对应的下标存到 value 里就实现了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = s.length(), ans = <span class="number">0</span>;</span><br><span class="line">        Map&lt;Character, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;(); </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>, i = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (map.containsKey(s.charAt(j))) &#123;</span><br><span class="line">                i = Math.max(map.get(s.charAt(j)), i); </span><br><span class="line">            &#125;</span><br><span class="line">            ans = Math.max(ans, j - i + <span class="number">1</span>);</span><br><span class="line">            map.put(s.charAt(j), j + <span class="number">1</span>);<span class="comment">//下标 + 1 代表 i 要移动的下个位置</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>与解法二相比</p>
<p>由于采取了 i 跳跃的形式，所以 map 之前存的字符没有进行 remove ，所以 if 语句中进行了Math.max ( map.get ( s.charAt ( j ) ) ,  i )，要确认得到的下标不是 i 前边的。</p>
<p>还有个不同之处是 j 每次循环都进行了自加 1 ，因为 i 的跳跃已经保证了 str[ i , j]  内没有重复的字符串，所以 j 直接可以加 1 。而解法二中，要保持 j 的位置不变，因为不知道和 j 重复的字符在哪个位置。</p>
<p>最后个不同之处是， ans 在每次循环中都进行更新，因为 ans 更新前 i 都进行了更新，已经保证了当前的子串符合条件，所以可以更新 ans 。而解法二中，只有当当前的子串不包含当前的字符时，才进行更新。</p>
<p>时间复杂度：我们将 2n 优化到了 n ，但最终还是和之前一样，O（n）。</p>
<p>空间复杂度：也是一样的，O（min（m，n)）。</p>
<h2 id="解法四"><a href="#解法四" class="headerlink" title="解法四"></a>解法四</h2><p>和解法三思路一样，区别的地方在于，我们不用 Hash ，而是直接用数组，字符的 ASCII 码值作为数组的下标，数组存储该字符所在字符串的位置。适用于字符集比较小的情况，因为我们会直接开辟和字符集等大的数组。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = s.length(), ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span>[] index = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">128</span>];   </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>, i = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">            i = Math.max(index[s.charAt(j)], i);</span><br><span class="line">            ans = Math.max(ans, j - i + <span class="number">1</span>);</span><br><span class="line">            index[s.charAt(j)] = j + <span class="number">1</span>;<span class="comment">//（下标 + 1） 代表 i 要移动的下个位置</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>和解法 3 不同的地方在于，没有了 if 的判断，因为如果 index[ s.charAt ( j ) ] 不存在的话，它的值会是 0 ，对最终结果不会影响。</p>
<p>时间复杂度：O（n）。</p>
<p>空间复杂度：O（m），m 代表字符集的大小。这次不论原字符串多小，都会利用这么大的空间。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>综上，我们一步一步的寻求可优化的地方，对算法进行了优化。又加深了 Hash 的应用，以及利用数组巧妙的实现了 Hash 的作用。</p>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>leetCode_6_ZigZag_Conversion</title>
    <url>/2018/08/12/leetCode-6-ZigZag-Conversion/</url>
    <content><![CDATA[<h2 id="题目描述（中等难度）"><a href="#题目描述（中等难度）" class="headerlink" title="题目描述（中等难度）"></a>题目描述（中等难度）</h2><p><img src="http://windliang.oss-cn-beijing.aliyuncs.com/6_zig.jpg" alt=""></p>
<p>就是给定一个字符串，然后按写竖着的 「z」的方式排列字符，就是下边的样子。</p>
<p><img src="http://windliang.oss-cn-beijing.aliyuncs.com/6_1.jpg" alt=""></p>
<p>然后按行的方式输出每个字符，第 0 行，第 1 行，第 2 行 ….</p>
<h2 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h2><p>按照写 Z 的过程，遍历每个字符，然后将字符存到对应的行中。用 goningDown 保存当前的遍历方向，如果遍历到两端，就改变方向。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">convert</span><span class="params">(String s, <span class="keyword">int</span> numRows)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> (numRows == <span class="number">1</span>) <span class="keyword">return</span> s;</span><br><span class="line"></span><br><span class="line">       List&lt;StringBuilder&gt; rows = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Math.min(numRows, s.length()); i++)</span><br><span class="line">           rows.add(<span class="keyword">new</span> StringBuilder());</span><br><span class="line"></span><br><span class="line">       <span class="keyword">int</span> curRow = <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">boolean</span> goingDown = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">char</span> c : s.toCharArray()) &#123;</span><br><span class="line">           rows.get(curRow).append(c);</span><br><span class="line">           <span class="keyword">if</span> (curRow == <span class="number">0</span> || curRow == numRows - <span class="number">1</span>) goingDown = !goingDown; <span class="comment">//遍历到两端，改变方向</span></span><br><span class="line">           curRow += goingDown ? <span class="number">1</span> : -<span class="number">1</span>;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       StringBuilder ret = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">       <span class="keyword">for</span> (StringBuilder row : rows) ret.append(row);</span><br><span class="line">       <span class="keyword">return</span> ret.toString();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<p>时间复杂度：O（n），n 是字符串的长度。</p>
<p>空间复杂度：O（n），保存每个字符需要的空间。</p>
<h2 id="解法二"><a href="#解法二" class="headerlink" title="解法二"></a>解法二</h2><p>找出按 Z 形排列后字符的规律，然后直接保存起来。</p>
<p><img src="http://windliang.oss-cn-beijing.aliyuncs.com/6_3.jpg" alt=""></p>
<p>我们可以看到，图形其实是有周期的，0，1，2 … 7 总过 8 个，然后就又开始重复相同的路径。周期的计算就是 cycleLen = 2 × numRows - 2 = 2 × 5 - 2 = 8 个。</p>
<p>我们发现第 0 行和最后一行一个周期内有一个字符，所以第一个字符下标是 0 ，第二个字符下标是 0 + cycleLen = 8，第三个字符下标是 8 + cycleLen = 16 。 </p>
<p>其他行都是两个字符。</p>
<p>第 1 个字符和第 0 行的规律是一样的。</p>
<p>第 2 个字符其实就是下一个周期的第 0 行的下标减去当前行。什么意思呢？</p>
<p>我们求一下第 1 行第 1 个周期内的第 2 个字符，下一个周期的第 0 行的下标是 8 ，减去当前行 1 ，就是 7 了。</p>
<p>我们求一下第 1 行第 2 个而周期内的第 2 个字符，下一个周期的第 0 行的下标是 16 ，减去当前行 1 ，就是 15 了。</p>
<p>我们求一下第 2 行第 1 个周期内的第 2 个字符，下一个周期的第 0 行的下标是 8 ，减去当前行 2 ，就是 6 了。</p>
<p>当然期间一定要保证下标小于 n ，防止越界。</p>
<p>可以写代码了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">convert</span><span class="params">(String s, <span class="keyword">int</span> numRows)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (numRows == <span class="number">1</span>)</span><br><span class="line">		<span class="keyword">return</span> s;</span><br><span class="line"></span><br><span class="line">	StringBuilder ret = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">	<span class="keyword">int</span> n = s.length();</span><br><span class="line">	<span class="keyword">int</span> cycleLen = <span class="number">2</span> * numRows - <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numRows; i++) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j + i &lt; n; j += cycleLen) &#123; <span class="comment">//每次加一个周期</span></span><br><span class="line">			ret.append(s.charAt(j + i));</span><br><span class="line">			<span class="keyword">if</span> (i != <span class="number">0</span> &amp;&amp; i != numRows - <span class="number">1</span> &amp;&amp; j + cycleLen - i &lt; n) <span class="comment">//除去第 0 行和最后一行</span></span><br><span class="line">				ret.append(s.charAt(j + cycleLen - i));</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ret.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>时间复杂度：O（n），虽然是两层循环，但第二次循环每次加的是 cycleLen ，无非是把每个字符遍历了 1 次，所以两层循环内执行的次数肯定是字符串的长度。</p>
<p>空间复杂度：O（n），保存字符串。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这次算是总结起来最轻松的了，这道题有些找规律的意思。解法一顺着排列的方式遍历，解法二直接从答案入口找出下标的规律。</p>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>leetCode_7_Reverse_Integer</title>
    <url>/2018/08/13/leetCode-7-Reverse-Integer/</url>
    <content><![CDATA[<h2 id="题目描述（简单难度）"><a href="#题目描述（简单难度）" class="headerlink" title="题目描述（简单难度）"></a>题目描述（简单难度）</h2><p><img src="http://windliang.oss-cn-beijing.aliyuncs.com/7_rev.jpg" alt=""></p>
<p>很简单，就是输入整数，输出它的倒置。</p>
<p>第一反应就是， 取余得到个位数，然后除以 10 去掉个位数，然后用一个变量保存倒置的数。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> rev = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (x != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> pop = x % <span class="number">10</span>;</span><br><span class="line">        x /= <span class="number">10</span>;</span><br><span class="line">        rev = rev * <span class="number">10</span> + pop;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> rev;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后似乎不是那么理想。</p>
<p><img src="http://windliang.oss-cn-beijing.aliyuncs.com/7_1.jpg" alt=""></p>
<p>为什么呢？倒置过来不应该是 9646324351 吗。其实题目里讲了，int 的范围是 $[-2^{31} ,2^{31}-1]$ 也就是 $[-2147483648,2147483647] $ 。明显 9646324351 超出了范围，造成了溢出。所以我们需要在输出前，判断是否溢出。</p>
<p>问题的关键就是下边的一句了。</p>
<p> rev = rev * 10 + pop;</p>
<p>为了区分两个 rev ，更好的说明，我们引入 temp 。</p>
<p>temp = rev * 10 + pop;</p>
<p>rev = temp;</p>
<p>我们对 temp = rev * 10 + pop; 进行讨论。intMAX = 2147483647 , intMin = -  2147483648 。</p>
<p>对于大于 intMax 的讨论，此时 x 一定是正数，pop 也是正数。</p>
<ul>
<li>如果 rev &gt; intMax / 10 ，那么没的说，此时肯定溢出了。</li>
<li>如果 rev == intMax / 10 = 2147483647 / 10 = 214748364 ，此时 rev * 10 就是 2147483640 如果 pop 大于 7 ，那么就一定溢出了。但是！如果假设 pop 等于 8，那么意味着原数 x 是 8463847412 了，输入的是 int ，而此时是溢出的状态，所以不可能输入，所以意味着 pop 不可能大于 7 ，也就意味着 rev == intMax / 10 时不会造成溢出。</li>
<li>如果 rev &lt; intMax / 10 ，意味着 rev 最大是 214748363 ， rev * 10 就是 2147483630 , 此时再加上 pop ，一定不会溢出。 </li>
</ul>
<p>对于小于 intMin 的讨论同理。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> rev = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (x != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> pop = x % <span class="number">10</span>;</span><br><span class="line">        x /= <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">if</span> (rev &gt; Integer.MAX_VALUE/<span class="number">10</span> ) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (rev &lt; Integer.MIN_VALUE/<span class="number">10</span> ) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        rev = rev * <span class="number">10</span> + pop;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> rev;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>时间复杂度：循环多少次呢？数字有多少位，就循环多少次，也就是 $log_{10}(x) + 1$ 次，所以时间复杂度是 O（log（x））。</p>
<p>空间复杂度：O（1）。</p>
<p>当然我们可以不用思考那么多，用一种偷懒的方式 AC ，我们直接把 rev 定义成 long ，然后输出前判断 rev 是不是在范围内，不在的话直接输出 0 。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> rev = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (x != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> pop = x % <span class="number">10</span>;</span><br><span class="line">        x /= <span class="number">10</span>;</span><br><span class="line">        rev = rev * <span class="number">10</span> + pop;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (rev &gt; Integer.MAX_VALUE || rev &lt; Integer.MIN_VALUE ) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">int</span>)rev;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>比较简单的一道题，主要是在考判断是不是溢出，又是轻松的一天！</p>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>leetCode_8_String_to_Integer</title>
    <url>/2018/08/14/leetCode-8-String-to-Integer/</url>
    <content><![CDATA[<h1 id="题目描述（中等难度）"><a href="#题目描述（中等难度）" class="headerlink" title="题目描述（中等难度）"></a>题目描述（中等难度）</h1><p><img src="http://windliang.oss-cn-beijing.aliyuncs.com/8_atoi.png" alt=""></p>
<p>将一个字符串转为整型。</p>
<p>这道题，难度其实不大，和<a href="http://windliang.cc/2018/08/13/leetCode-7-Reverse-Integer/" target="_blank" rel="noopener">上道题</a>有很多重合的地方。整体的思路就是遍历字符串，然后依次取出一个字符就可以了。无非是考虑一些特殊情况，还有就是理解题目意思。</p>
<p>经过多次试错，题目的意思是这样的。</p>
<p>从左遍历字符串，可以遇到空格，直到遇到 ‘ + ‘ 或者数字或者 ‘ - ‘ 就表示要转换的数字开始，如果之后遇到除了数字的其他字符（包括空格）就结束遍历，输出结果，不管后边有没有数字了，例如 “   - 32332ada2323” 就输出 “- 32332”。</p>
<p>如果遇到空格或者  ‘ + ‘ 或者数字或者 ‘ - ‘  之前遇到了其他字符，就直接输出 0 ，例如 “  we1332”。</p>
<p>如果转换的数字超出了 int ，就返回 intMax 或者 intMin。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">myAtoi</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> sign = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">int</span> ans = <span class="number">0</span>, pop = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">boolean</span> hasSign = <span class="keyword">false</span>; <span class="comment">//代表是否开始转换数字</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.length(); i++) &#123;</span><br><span class="line">			<span class="keyword">if</span> (str.charAt(i) == <span class="string">'-'</span> &amp;&amp; !hasSign) &#123;</span><br><span class="line">				sign = -<span class="number">1</span>;</span><br><span class="line">				hasSign = <span class="keyword">true</span>;</span><br><span class="line">				<span class="keyword">continue</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (str.charAt(i) == <span class="string">'+'</span> &amp;&amp; !hasSign) &#123;</span><br><span class="line">				sign = <span class="number">1</span>;</span><br><span class="line">				hasSign = <span class="keyword">true</span>;</span><br><span class="line">				<span class="keyword">continue</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (str.charAt(i) == <span class="string">' '</span> &amp;&amp; !hasSign) &#123;</span><br><span class="line">				<span class="keyword">continue</span>;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">if</span> (str.charAt(i) &gt;= <span class="string">'0'</span> &amp;&amp; str.charAt(i) &lt;= <span class="string">'9'</span>) &#123;</span><br><span class="line">				hasSign = <span class="keyword">true</span>;</span><br><span class="line">				pop = str.charAt(i) - <span class="string">'0'</span>;</span><br><span class="line">                 <span class="comment">//和上道题判断出界一个意思只不过记得乘上 sign 。</span></span><br><span class="line">				<span class="keyword">if</span> (ans * sign &gt; Integer.MAX_VALUE / <span class="number">10</span> || (ans * sign == Integer.MAX_VALUE / <span class="number">10</span> &amp;&amp; pop * sign &gt; <span class="number">7</span>))</span><br><span class="line">					<span class="keyword">return</span> <span class="number">2147483647</span>;</span><br><span class="line">				<span class="keyword">if</span> (ans * sign &lt; Integer.MIN_VALUE / <span class="number">10</span> || (ans * sign == Integer.MIN_VALUE / <span class="number">10</span> &amp;&amp; pop * sign &lt; -<span class="number">8</span>))</span><br><span class="line">					<span class="keyword">return</span> -<span class="number">2147483648</span>;</span><br><span class="line">				ans = ans * <span class="number">10</span> + pop;</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				<span class="keyword">return</span> ans * sign;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> ans * sign;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<p>时间复杂度：O（n），n 是字符串的长度。</p>
<p>空间复杂度：O（1）。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这道题让自己有点感到莫名其妙，好像没有 get 到出题人的点？？？</p>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>leetCode系列转到gitbook</title>
    <url>/2018/08/15/leetCode%E7%B3%BB%E5%88%97%E8%BD%AC%E5%88%B0gitbook/</url>
    <content><![CDATA[<p>为了方便 LeetCode 每道题更好的整理，所以把 LeetCode 准备持续更新到 gitbook ，争取在 1 年内都总结完。</p>
<p>下边是地址：</p>
<p>github：<a href="https://github.com/wind-liang/leetcode" target="_blank" rel="noopener">https://github.com/wind-liang/leetcode</a></p>
<p>gitbook：<a href="https://leetcode.wang/" target="_blank" rel="noopener">https://leetcode.wang/</a></p>
<p>如果觉得对你有帮助，记得在 github 给一个 star 哦 ^ ^ 。</p>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>python利用flask，gunicorn部署接口全过程</title>
    <url>/2017/10/06/python%E5%88%A9%E7%94%A8flask%EF%BC%8Cgunicorn%EF%BC%8Cnginx%E9%83%A8%E7%BD%B2%E6%8E%A5%E5%8F%A3%E5%85%A8%E8%BF%87%E7%A8%8B/</url>
    <content><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>无论开发 Android 还是 Web 端程序，有时候不免需要一些接口供自己调用进行测试，这里记录一下详细的过程。</p>
<h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><ol>
<li>阿里云的 9.9 的学生特惠机, Ubuntu 14.04 64位<br><img src="/2017/10/06/python利用flask，gunicorn，nginx部署接口全过程/ali.png" alt=" "></li>
<li><p>利用 putty 输入公网 ip 登录到服务器<br> <strong>先配置编码为 utf-8</strong></p>
<p><img src="/2017/10/06/python利用flask，gunicorn，nginx部署接口全过程/utf8.png" alt=" "><br><img src="/2017/10/06/python利用flask，gunicorn，nginx部署接口全过程/putty.png" alt=" "><br>输入账号密码</p>
<p><img src="/2017/10/06/python利用flask，gunicorn，nginx部署接口全过程/root.png" alt=" "></p>
</li>
<li><p>要利用 apt-get 包管理工具下载各种包，所以先更新下源,随手把  git 也安一下,安装中途输入 Y 即可</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt-get update</span><br><span class="line">apt-get install git</span><br></pre></td></tr></table></figure>
<p><img src="/2017/10/06/python利用flask，gunicorn，nginx部署接口全过程/apt.png" alt=" "></p>
</li>
</ol>
<h2 id="Flask-flɑ-sk"><a href="#Flask-flɑ-sk" class="headerlink" title="Flask [flɑ:sk]"></a>Flask [flɑ:sk]</h2><blockquote>
<p> Flask是一个使用Python编写的轻量级Web应用框架。基于Werkzeug WSGI工具箱和Jinja2 模板引擎。 <a href="http://docs.jinkan.org/docs/flask/index.html" target="_blank" rel="noopener">Flask 官方教程</a></p>
</blockquote>
<p> 我已经在本地写了一个简单的 Flask ,并且传到了 <a href="https://coding.net/" target="_blank" rel="noopener">Coding</a><br> <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,jsonify,request</span><br><span class="line">app = Flask(__name__) <span class="comment">#获得 Flask 实例</span></span><br><span class="line"> <span class="comment">#写一个 POST 的方法，传一个 name 的参数，返回一个  json 数据</span></span><br><span class="line"><span class="meta">@app.route('/getJson', methods=['POST'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getJson</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#bala bala,下边随便返回点东西</span></span><br><span class="line">    name=request.form.get(<span class="string">'name'</span>, default=<span class="string">'windliang'</span>)</span><br><span class="line">    data=&#123;</span><br><span class="line">    <span class="string">'name'</span>:name,</span><br><span class="line">    <span class="string">'place'</span>:<span class="string">'wuhan'</span></span><br><span class="line">    &#125;</span><br><span class="line">    msg=<span class="string">'get success'</span></span><br><span class="line">    code=<span class="keyword">True</span></span><br><span class="line">    <span class="keyword">return</span> getBaseReturnValue(data,msg,code)</span><br><span class="line"><span class="comment">#返回 json 数据    </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getBaseReturnValue</span><span class="params">(data,msg,code)</span>:</span></span><br><span class="line">  json_data = jsonify(&#123;<span class="string">'data'</span>:data,<span class="string">'msg'</span>:msg,<span class="string">'success'</span>:code&#125;)</span><br><span class="line">  <span class="keyword">return</span> json_data</span><br><span class="line">  </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run(host=<span class="string">'0.0.0.0'</span>) <span class="comment">#在服务器上运行</span></span><br></pre></td></tr></table></figure></p>
<p>依次执行下边的指令,‘//’后边的仅做注释不用复制<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https://git.coding.net/wind_liang/flasktest.git  //将 coding 上的代码克隆到本地</span><br><span class="line">pip install virtualenv  //python 的一个创建隔离环境的工具</span><br><span class="line">mkdir api  //创建一个新目录 api，virtualenv 直接用 clone 下的目录会出问题，原因不清楚</span><br><span class="line">cp -i flasktest/api.py api  //将 coding 下载下来的 api.py 复制到新目录 api 中</span><br><span class="line">cd api   // 进入 api 目录</span><br><span class="line">virtualenv venv // 创建虚拟环境安包的文件夹</span><br><span class="line">source venv/bin/activate //激活虚拟环境 ，这时会看到在最前边有 (venv) 标识 ,以后进入前都得先激活环境</span><br><span class="line">pip install flask // 安装 flask 包</span><br><span class="line">pip freeze &gt; requirements.txt  // 将安装的包列表写到 reqirements.txt 中，</span><br><span class="line">以后每次 pip 安装了新的库的时候，都需freeze 一次，</span><br><span class="line">既能知道自己安装了什么库，也方便别人部署时，安装相应的库。</span><br><span class="line">python api.py  // 运行程序 </span><br><span class="line">ctrl+C 用于终止当前 python 程序</span><br><span class="line">deactivate 用于关闭当前虚拟环境 ，先不用执行此句</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>virtualenv 是一个将不同项目所需求的依赖分别放在独立的地方的一个工具，它给这些工程创建虚拟的Python环境。它解决了“项目X依赖于版本1.x，而项目Y需要项目4.x”的两难问题，而且使你的全局site-packages目录保持干净和可管理。<a href="http://pythonguidecn.readthedocs.io/zh/latest/dev/virtualenvs.html" target="_blank" rel="noopener">官方教程</a></p>
</blockquote>
<p>阿里云还得设定开放 5000端口<br> <img src="/2017/10/06/python利用flask，gunicorn，nginx部署接口全过程/s.png" alt=" "><br> <img src="/2017/10/06/python利用flask，gunicorn，nginx部署接口全过程/5000.png" alt=" "></p>
<p> 此时利用 postman （谷歌浏览器的一个插件)，或者 curl 等其他能发 post 请求的工具进行测试<br>  <img src="/2017/10/06/python利用flask，gunicorn，nginx部署接口全过程/postman.png" alt=" "><br>   <img src="/2017/10/06/python利用flask，gunicorn，nginx部署接口全过程/post.png" alt=" "></p>
<p>   ctrl+C 终止程序，进入下一步</p>
<h2 id="gunicorn"><a href="#gunicorn" class="headerlink" title="gunicorn"></a>gunicorn</h2><blockquote>
<p>Gunicorn是一个Python WSGI UNIX的HTTP服务器。这是一个预先叉工人模式，从Ruby的独角兽（Unicorn）项目移植。该Gunicorn服务器与各种Web框架兼容，我们只要简单配置执行，轻量级的资源消耗，以及相当迅速。现在我们使用 flask 自带的服务器，完成了 web 服务的启动。生产环境下，flask 自带的服务器，无法满足性能要求。我们这里采用 gunicorn 做 wsgi容器，用来部署 python</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install gunicorn  //安装 gunicorn</span><br><span class="line">pip freeze &gt; requirements.txt //保存到当前安装的包的列表中</span><br><span class="line">gunicorn -w4 -b0.0.0.0:8000 api:app</span><br><span class="line">此时，我们需要用 8000 的端口进行访问，</span><br><span class="line">原先的5000并没有启用。</span><br><span class="line">其中 gunicorn 的部署中，</span><br><span class="line">-w 表示开启多少个 worker，-b</span><br><span class="line">表示 gunicorn  的访问地址 ，</span><br><span class="line">api 是程序进入的文件名， </span><br><span class="line">app 是代码中获得的 flask 实例</span><br><span class="line">进入阿里云记得开放8000端口</span><br></pre></td></tr></table></figure>
<p><img src="/2017/10/06/python利用flask，gunicorn，nginx部署接口全过程/postman2.png" alt=" "></p>
<p><img src="/2017/10/06/python利用flask，gunicorn，nginx部署接口全过程/post2.png" alt=" "><br>ctrl + c 终止当前程序</p>
<h2 id="微信公众号服务器端-Flask-源码"><a href="#微信公众号服务器端-Flask-源码" class="headerlink" title="微信公众号服务器端 Flask 源码"></a>微信公众号服务器端 Flask 源码</h2><p>python 2.7<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># filename: main.py</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,g,request,make_response</span><br><span class="line"><span class="keyword">import</span> xml.etree.ElementTree <span class="keyword">as</span> ET</span><br><span class="line"><span class="keyword">import</span> requests </span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line">app = Flask(__name__)</span><br><span class="line">BASE_DIR = os.path.dirname(__file__) <span class="comment">#获取当前文件夹的绝对路径</span></span><br><span class="line">warnings.filterwarnings(<span class="string">"ignore"</span>) <span class="comment">#忽略警告</span></span><br><span class="line"><span class="meta">@app.route("/wx",methods=["GET","POST"])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wx</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">"GET"</span>:       <span class="comment"># 判断请求方式是GET请求</span></span><br><span class="line">        my_signature = request.args.get(<span class="string">'signature'</span>)     <span class="comment"># 获取携带的signature参数</span></span><br><span class="line">        my_timestamp = request.args.get(<span class="string">'timestamp'</span>)     <span class="comment"># 获取携带的timestamp参数</span></span><br><span class="line">        my_nonce = request.args.get(<span class="string">'nonce'</span>)        <span class="comment"># 获取携带的nonce参数</span></span><br><span class="line">        my_echostr = request.args.get(<span class="string">'echostr'</span>)         <span class="comment"># 获取携带的echostr参数</span></span><br><span class="line"></span><br><span class="line">        token = <span class="string">'helloworld'</span>     <span class="comment"># 一定要跟微信端填写的token一致</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 进行字典排序</span></span><br><span class="line">        data = [token,my_timestamp ,my_nonce ]</span><br><span class="line">        data.sort()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 拼接成字符串</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            temp = <span class="string">''</span>.join(data)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"success"</span></span><br><span class="line">        <span class="comment"># 进行sha1加密</span></span><br><span class="line">        mysignature = hashlib.sha1(temp).hexdigest()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 加密后的字符串可与signature对比，标识该请求来源于微信</span></span><br><span class="line">        <span class="keyword">if</span> my_signature == mysignature:</span><br><span class="line">            <span class="keyword">return</span> my_echostr</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        rec = request.stream.read()</span><br><span class="line">        xml_rec = ET.fromstring(rec)</span><br><span class="line">        msgType=xml_rec.find(<span class="string">"MsgType"</span>).text </span><br><span class="line">        <span class="keyword">if</span> msgType != <span class="string">'text'</span>: <span class="comment">#只对文字进行回复</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">"success"</span></span><br><span class="line">        tou = xml_rec.find(<span class="string">'ToUserName'</span>).text</span><br><span class="line">        fromu = xml_rec.find(<span class="string">'FromUserName'</span>).text</span><br><span class="line">        content = xml_rec.find(<span class="string">'Content'</span>).text</span><br><span class="line">        cc=content.encode(<span class="string">'UTF-8'</span>) <span class="comment"># 用户发送的文字</span></span><br><span class="line">        t=<span class="string">"狼吃羊"</span></span><br><span class="line">        <span class="keyword">if</span>(cc==t):</span><br><span class="line">            content=<span class="string">"http://windliang.oschina.io/worfeatsheep/"</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"success"</span></span><br><span class="line">        xml_rep = <span class="string">"&lt;xml&gt;&lt;ToUserName&gt;&lt;![CDATA[%s]]&gt;&lt;/ToUserName&gt;&lt;FromUserName&gt;&lt;![CDATA[%s]]&gt;&lt;/FromUserName&gt;&lt;CreateTime&gt;%s&lt;/CreateTime&gt;&lt;MsgType&gt;&lt;![CDATA[text]]&gt;&lt;/MsgType&gt;&lt;Content&gt;&lt;![CDATA[%s]]&gt;&lt;/Content&gt;&lt;FuncFlag&gt;0&lt;/FuncFlag&gt;&lt;/xml&gt;"</span></span><br><span class="line">        response = make_response(xml_rep % (fromu,tou,str(int(time.time())), content))</span><br><span class="line">        response.content_type=<span class="string">'application/xml'</span></span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="meta">@app.route("/",methods=["GET"])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"hello,world"</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run(host=<span class="string">'0.0.0.0'</span>,debug=<span class="string">'true'</span>)</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>flask</tag>
        <tag>后端</tag>
        <tag>gunicorn</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode100斩回顾</title>
    <url>/2019/07/11/leetcode100%E6%96%A9%E5%9B%9E%E9%A1%BE/</url>
    <content><![CDATA[<p>leetcode 100 斩！从第 1 题开始，到现在也差不多快一年了，回顾纪念一下。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/submit.jpg" alt=""></p>
<h1 id="为什么开始刷题？"><a href="#为什么开始刷题？" class="headerlink" title="为什么开始刷题？"></a>为什么开始刷题？</h1><p>从大一就知道了 leetcode，但刷题总是三天打鱼，两天晒网，会发现刷过的题，隔一段时间再看还是需要很久才能再想起来，于是就萌发了刷一题总结一题的想法。</p>
<p>另一方面，leetcode 上的 discuss 里一些解，有时候讲解的很少，甚至只丢一些代码，对于我等这种菜鸟有时候看的太废劲了，所以不如自己把各种解法都理清楚，然后详细的总结出来，也方便其他人更好的理解。</p>
<h1 id="刚开始的感觉"><a href="#刚开始的感觉" class="headerlink" title="刚开始的感觉"></a>刚开始的感觉</h1><p>大一的时候，听过 ACM，然后暑假也去学校的 ACM 集训试了试，但当时基础太差了，栈和队列都不知道是什么，所以也就没有走上 ACM 的道路。之后就各种学安卓、web、后端的应用开发的一些东西了。后来准备开始刷题是大四毕业的时候了吧。</p>
<p>当时对回溯、动态规划也都只是上课的时候学过，也并不熟练。开始几题的时候，也都很慢，很多都自己想不出来。然后就去看别人的题解。看完以后，就什么都不看，然后按自己的思路再写一遍代码。</p>
<p>尤其是<a href="https://leetcode.wang/leetCode-5-Longest-Palindromic-Substring.html" target="_blank" rel="noopener">第 5 题</a>，求最长回文序列，现在都印象深刻，记得当时用了好几天才把所有解法总结了出来。</p>
<p>所以大家如果想刷题的话，也不用怕自己基础不好，大不了哪些名词不会就去查，一点点积累就可以，重要的是<strong>开始</strong>和<strong>坚持</strong>。</p>
<h1 id="现在的感觉"><a href="#现在的感觉" class="headerlink" title="现在的感觉"></a>现在的感觉</h1><p>从开始可能只是觉得该刷一刷题，到现在可能真的是爱上了刷题。</p>
<p>现在刷题基本可以想出一种思路，有时候甚至和最优解想到了一起，还会想出一些别人没有想到的解法，这种成就感可能就是打游戏超神的感觉吧，哈哈。</p>
<p>此外，看 discuss 的时候，每当看到令人拍案称奇的思路的时候，真的是让人心旷神怡，开心的不得了，就像中了彩票一样的开心，赶快去和同学分享。</p>
<p>有时候也会看到一些让人捧腹的评论，题目是输入一个字符串，输出所有可能的 ip 地址。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Input: <span class="string">"25525511135"</span>  </span><br><span class="line">Output: [<span class="string">"255.255.11.135"</span>,<span class="string">"255.255.111.35"</span>]</span><br></pre></td></tr></table></figure>
<p><img src="https://windliang.oss-cn-beijing.aliyuncs.com/93_2.png" alt=""></p>
<p><img src="https://windliang.oss-cn-beijing.aliyuncs.com/93_3.jpg" alt=""></p>
<h1 id="刷题的收获"><a href="#刷题的收获" class="headerlink" title="刷题的收获"></a>刷题的收获</h1><p>在总结的过程中，因为力求给他人讲懂，在理清思路的动机的过程中，会发现之前的想法可能是错的，会总结着总结着就明白了另一种解法，或者产生新的想法，或者明白各个解法相互之间的联系，会比仅仅 AC 多出很多收获。</p>
<p>从理清他人的想法，再到自己写出代码，再到把各个解法用自己的理解串起来，会有一种「纸上得来终觉浅，绝知此事要躬行」的感觉。有时候虽然大的框架有了，但是小的细节方面还是需要自己去体会。为什么加这个 if？为什么是小于等于？每一句代码的产生都是有原因的，绝不会是可有可无的代码。</p>
<p>所以虽然一道题从看题，理解，自己考虑，看别人解法，到重新实现，再到总结出来，可能需要 3、4 个小时，甚至 5、6 个小时或者更多，但我觉得是值得的。</p>
<p>此外，也有很多人加自己的微信过来亦或是感谢自己，亦或是指出错误，亦或是询问问题，亦或是没说过话的，哈哈。有微软、谷歌、百度、阿里、腾讯的大佬，有各个大学的学生，甚至巧的是还能加上高中的校友，世界真小，哈哈。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/addchat1.jpg" alt=""></p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/addchat2.jpg" alt=""></p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/addchat3.jpg" alt=""></p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/addchat4.jpg" alt=""></p>
<p>上边是最近加的一些人，每次收到别人的称赞自己也会很开心。此外，博客是直接放在 github 上的，目前也有 280 stars 了，是自己 github 上 start 数最多的项目了，说来也惭愧，希望以后自己努力可以有一个好的开源项目。</p>
<h1 id="刷题的理解"><a href="#刷题的理解" class="headerlink" title="刷题的理解"></a>刷题的理解</h1><p>一些人可能会纠结用什么语言去刷，其实没必要纠结的。刷题需要考虑的是算法，而不是语言。算法就像是从家里到超市该怎么走？出门左拐，右拐直走….而语言是我们选择的交通工具，骑车？步行？开车？平衡车？每种交通工具都有自己的优点和缺点，语言也是如此。而好的算法可能更像是，我们偶然发现了一条近路，降低了我们的时间复杂度或者是空间复杂度。</p>
<p>刷了 100 道题了，我觉得必须要掌握的就是递归的思想了，利用这个思想可以解大部分的题了。计算机擅长的就是记忆以及速度，而递归可以把这两个优势发挥到极致。遇到问题以后，我们可以考虑如何把大问题分解成小问题，想出来以后，代码很容易就出来了。</p>
<p>此外，一些递归可以用动态规划的思想改写，从而优化递归压栈所消耗的时间，递归是顶部到底部再回到顶部，而动态规划通过存储，直接从底部到顶部解决问题。</p>
<p>最经典的例子就是斐波那契数列了，求第 n 项数列的值。</p>
<blockquote>
<p>斐波那契数列，指的是这样一个数列：1、1、2、3、5、8、13、21、34 …… 在数学上，斐波纳契数列定义如下：F ( 0 ) = 0，F ( 1 ) = 1 , F ( n ) = F ( n - 1 ) + F ( n - 2 )（n &gt;= 2，n ∈ N*）；</p>
</blockquote>
<p>如果用递归的思想去写，代码简洁而优雅。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">Fibonacci</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">   <span class="keyword">if</span> (n == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">   <span class="keyword">else</span> <span class="keyword">if</span> (n == <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">   <span class="keyword">else</span></span><br><span class="line">       <span class="keyword">return</span> Fibonacci(n-<span class="number">1</span>) + Fibonacci(n-<span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当然，这样的话太慢了，优化的话，就是把递归过程的结果保存起来，或者就是改写成动态规划，最强的是其实是有一个公式的，直接利用公式就可以。</p>
<p>此外，还有一些题目就是根据题目的理解去写代码了，没有什么特殊的技巧。</p>
<h1 id="未来的打算"><a href="#未来的打算" class="headerlink" title="未来的打算"></a>未来的打算</h1><p>当然是继续刷下去了，很开心，每天不刷一刷题会不习惯的，希望大家也早日感受到刷题的乐趣，哈哈。</p>
<p>在线地址：<a href="https://leetcode.wang" target="_blank" rel="noopener">https://leetcode.wang</a>，域名也比较好记，希望对大家会有帮助。</p>
<p>我是用 gitbook 搭建的，我觉得上边「搜索」的插件很好用，可以直接根据关键字搜出来自己想做的题。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/search.jpg" alt=""></p>
<p>知乎专栏也会同步更新：<a href="https://zhuanlan.zhihu.com/leetcode1024" target="_blank" rel="noopener"><a href="https://zhuanlan.zhihu.com/leetcode1024" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/leetcode1024</a></a>。</p>
<p>越努力，越幸运，共勉。</p>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>x86,x64,x86-64,amd64,arm指令集架构之间的关系</title>
    <url>/2020/03/11/x86-x64-x86-64-amd64-arm%E6%8C%87%E4%BB%A4%E9%9B%86%E6%9E%B6%E6%9E%84%E4%B9%8B%E9%97%B4%E7%9A%84%E5%85%B3%E7%B3%BB/</url>
    <content><![CDATA[<p>在 <a href="https://www.zhihu.com/question/63040129/answer/1070349368" target="_blank" rel="noopener">知乎</a> 看到下边的问题，之前自己对这些概念也是迷迷糊糊，索性总结一下吧。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/intel3.jpg" alt=""></p>
<p>没有 <code>x32</code> 的说法， <code>x86</code>、<code>x64</code> 都指的是 <code>CPU</code> 的指令集架构。</p>
<h1 id="指令集"><a href="#指令集" class="headerlink" title="指令集"></a>指令集</h1><p>所谓指令集，可以理解成硬件对外的接口。我们运行程序是通过操作系统调度，操作系统然后让硬件去计算。</p>
<p>让硬件计算的话，比如一些加法乘法，循环之类的，就需要硬件提供的接口，也就是指令集。这个就是我们常说的机器语言，已经到了计算机的最底层了。</p>
<p>指令集架构主要分两大类。</p>
<ul>
<li><p>复杂指令集运算（Complex Instruction Set Computing，CISC）</p>
<p>简单的理解就是提供的指令很多，也都很复杂。</p>
<p>以 <code>intel</code> 的 <code>x86</code> 架构为代表，主要针对的操作系统是微软的 <code>Windows</code> 和苹果的 <code>maxOS</code>。另外 <code>Linux</code>，一些 <code>UNIX</code> 等，都可以运行在复杂指令集架构的微处理器。</p>
</li>
<li><p>精简指令集运算（Reduced Instruction Set Computing，RISC）</p>
<p>简单的理解就是提供的指令很少，也都比较简单，只是一些基础的指令。</p>
<p>以 <code>ARM</code> 公司的 <code>arm</code> 架构为代表。当前有 <code>UNIX</code>、<code>Linux</code> 以及包括 <code>iOS</code>、<code>Android</code>、<code>Windows Phone</code> 等在内的大多数移动操作系统运行在精简指令集的处理器上。</p>
</li>
</ul>
<p>复杂指令集和精简指令集比较的话，区别在于我们编程（直接写机器语言代码在 <code>CPU</code>上运行）的时候，比如实现乘法。根据提供的指令，复杂指令集可能一条命令就够了，而简单指令集我们可能需要加法、循环等多条指令。</p>
<p>硬件和软件也就是互补的过程，当硬件提供功能简单了，写软件就复杂些。当硬件提供的功能多了，写软件就简单些。</p>
<h1 id="x86-架构发展"><a href="#x86-架构发展" class="headerlink" title="x86 架构发展"></a>x86 架构发展</h1><p><code>x86</code> 架构于 <code>1978</code> 年推出的 <code>Intel 8086</code> 中央处理器中首度出现，<code>8086</code> 在三年后为 <code>IBM PC</code> 所选用，之后 <code>x86</code> 便成为了个人电脑的标准平台，成为了历来最成功的 <code>CPU</code> 架构。<code>8086</code> 是 <code>16</code> 位处理器，接着一系列的处理器进行了 <code>32</code> 位架构的改进，现在 <code>x86</code> 一般指 <code>32</code> 位的架构。</p>
<p>该系列较早期的处理器名称是以数字来表示 <code>80x86</code>。由于以 <code>86</code> 作为结尾，包括 <code>Intel 8086</code>、<code>80186</code>、<code>80286</code>、<code>80386</code> 以及 <code>80486</code>，因此其架构被称为 <code>x86</code>。</p>
<p>生产 <code>x86</code> 架构的 <code>CPU</code> 除了因特尔，它还把专利授权给了现在比较出名的超微（AMD）。然后在 <code>1999</code> 年 <code>AMD</code> 首次公开 <code>64</code> 位集以扩展 <code>x86</code>，此架构称为 <code>AMD64</code>。后来英特尔也推出了与之兼容的处理器，并命名<code>Intel 64</code>。两者一般被统称为 <code>x86-64</code> 或 <code>x64</code>，开创了 <code>x86</code> 的 <code>64</code> 位时代。</p>
<p>这里会有一个疑问 ，<code>Intel</code> 去哪里了，为什么没有率先做 <code>64</code> 位的？其实 <code>intel</code> 做了，为了不让其他厂商模仿，申请了很多专利，与惠普联合设计了全新的架构 <code>IA-64</code> ，但最大的问题就是它与之前的 <code>x86</code> 不兼容，且市场反应较冷淡，然后就凉凉了。</p>
<p>苹果公司和 <code>RPM</code> 包管理员以 <code>x86-64</code> 或 <code>x86_64</code> 称呼此 <code>64</code> 位架构。甲骨文公司及 <code>Microsoft</code> 称之为<code>x64</code>。<code>BSD</code> 家族及其他 <code>Linux</code> 发行版则使用 <code>amd64</code>，<code>32</code> 位版本则称为<code>i386</code>（或 <code>i486/586/686</code>），<code>Arch Linux</code> 用<code>x86_64</code> 称呼此 <code>64</code> 位架构。</p>
<p>现在 <code>x86</code> 架构的<code>CPU</code> 的话基本上就是 <code>Intel</code> 和 <code>AMD</code> 两家公司了。</p>
<h1 id="arm-架构发展"><a href="#arm-架构发展" class="headerlink" title="arm 架构发展"></a>arm 架构发展</h1><p><code>arm</code> 架构的话就是 <code>ARM</code> 公司的，这家公司不生产芯片，而是以授权的方式盈利。具体发展可以参考 <a href="https://dongka.github.io/2018/11/17/cpu/arm体系架构的发展/" target="_blank" rel="noopener">这里</a> 和 <a href="https://www.eefocus.com/mcu-dsp/409079/r0" target="_blank" rel="noopener">这里</a> 。从诺基亚到苹果手机、安卓手机，奠定了其在智能手机市场的霸主地位。<code>16</code> 年的时候 <code>ARM</code> 公司被日本软银收购了。</p>
<p>现在常听到的高通骁龙系列就是 <code>arm</code> 架构。</p>
<h1 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h1><p>有时候在 <code>github</code> 上下载安装包的时候需要选择自己 <code>CPU</code> 的架构情况了。会提供不同操作系统的三种架构， <code>x86</code> 的 <code>32</code> 位架构和 <code>64</code> 位架构，以及 <code>arm</code> 架构。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/intel1.jpg" alt=""></p>
<p>我的 CPU 的话是 <code>intel</code> 的酷睿 <code>i5</code>，架构的话现在基本上是 <code>x64</code>，或者说是 <code>amd64</code> 了。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/intel2.jpg" alt=""></p>
<p><code>linux</code> 中使用命令 <code>uname -a</code> 可以查看 <code>CPU</code> 的架构。</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">Linux DESKTOP-68NS8J3 3.4.0+ #1 PREEMPT Thu Aug 1 17:06:05 CST 2013 x86_64 x86_64 x86_64 GNU/Linux</span><br></pre></td></tr></table></figure>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>CPU 指令集架构目前主要是两大类。</p>
<p>复杂指令集是 <code>x86</code>、<code>x64(也叫 x86-64, amd64)</code> 两种架构，专利在 <code>Intel</code> 和 <code>AMD</code> 两家公司手里， 该架构 <code>CPU</code> 主要是 <code>Intel</code> 和 <code>AMD</code> 两家公司，这种 <code>CPU</code> 常用在 <code>PC</code> 机上，包括 <code>Windows</code>，<code>macOS</code> 和 <code>Linux</code>。</p>
<p>简单指令集是 <code>arm</code> 一种架构，专利在 <code>ARM</code> 公司手里，该架构 <code>CPU</code> 主要有高通、三星、苹果、华为海思、联发科等公司。这种 <code>CPU</code> 常用在手机上，包括安卓和苹果。</p>
<p>再多说一句，之前也写过 <a href="https://zhuanlan.zhihu.com/p/66605252" target="_blank" rel="noopener">linux</a> 发展的一些历史，就和操作系统一样，我们能设计出一个全新的操作系统，但是各种软件都需要在新的系统上重新开发，软件商愿不愿意就不一定了。</p>
<p>同样的，我们也能设计出一个新的指令集架构，但是还是生态的问题，现在安卓、苹果的操作系统都是在 <code>arm</code> 架构上的，所以你的新指令集架构还需要安卓再适配一个新的操作系统，安卓不愿意的话，你可以自己出一个新的操作系统，但又回到了最初的问题，各种软件也需要重写。</p>
<p>如果兼容之前的指令集架构或者操作系统的话，那可能就绕不开各种专利的问题了。</p>
<p>所以现在各种公司利益都是紧密相连的，合作才能共赢。</p>
]]></content>
      <categories>
        <category>计算机</category>
      </categories>
      <tags>
        <tag>CPU</tag>
        <tag>指令集</tag>
      </tags>
  </entry>
  <entry>
    <title>windows方便的批处理-批量修改文件夹名</title>
    <url>/2019/08/08/windows%E6%96%B9%E4%BE%BF%E7%9A%84%E6%89%B9%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<h1 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h1><p>今天同学有一个批量改文件夹名字的需求，因为非计算机专业的同学电脑肯定不会有 <code>python</code> 或者 <code>java</code> 的环境了，那么 <code>windows</code> 自带的批处理编程一定是最好的选择了，新建一个 <code>.txt</code>，改后缀命为 <code>.bat</code>，双击就可以运行了。</p>
<p>利用批处理的一些命令，可以做很多事情，之前在知乎回答过一个问题，<a href="https://www.zhihu.com/question/285586045/answer/445364909" target="_blank" rel="noopener">一行代码可以做什么</a>。</p>
<p>里边提到了锁屏和 <code>windows</code> 计划任务的结合。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">rundll32.exe user32.dll,LockWorkStation</span><br></pre></td></tr></table></figure>
<p>定时关机，<code>1800</code> 秒后关机。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">shutdown -s -t <span class="number">1800</span></span><br></pre></td></tr></table></figure>
<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>他想把很多个文件夹的名字从 <code>abcd1233-afdasfs</code> 改成 <code>1233 abcd1233-afdasfs</code>，所有文件夹的格式都是 <code>4</code>个字母，<code>4</code> 个数字，然后一个<code>-</code>，最后再跟一些字符。需要做的就是把<code>4</code>个数字添加到文件夹名字的最前面，并且跟一个空格。</p>
<h1 id="尝试一"><a href="#尝试一" class="headerlink" title="尝试一"></a>尝试一</h1><p>我也是第一次写批处理的程序，但是不慌，编程嘛，重要的是算法，语言的语法查一查就可以了。所以需要解决下边几个问题。</p>
<ul>
<li><p>定义变量</p>
<p><code>set name=XXX</code></p>
<p>注意的是，默认赋值就是赋值字符串，而且也不用加双引号</p>
<p>如果想赋值数字，需要再 <code>set</code> 后边添加命令参数 <code>/a</code>。</p>
<p><code>set /a num=1</code></p>
</li>
<li><p>取出变量的值，百分号包裹变量名</p>
<p><code>%name%</code></p>
</li>
<li><p>输出变量的值</p>
<p><code>echo %name%</code></p>
</li>
<li><p><code>for</code>循环遍历所有文件夹名，所有变量都保存在了 <code>%%i</code>变量里，至于为啥加了两百分号，不要问，问的话，我也不知道 2333，就是规定而已。此外加了 <code>/d</code> 命令参数，表示遍历文件夹</p>
<p><code>for /d  %%i in (*) do (</code> </p>
</li>
<li><p>因为我们要取到文件夹名字中的数字，所以要进行切割</p>
<p><code>set newname=%name:~4,4%</code><br>语法就是，字符串变量加冒号加<code>~</code>，然后两个数字的含义分别是字符串开始的位置以及字符的个数，开始位置从零开始计数</p>
</li>
<li><p>更改文件夹名字</p>
<p><code>ren oldname newname</code></p>
</li>
<li><p>还有一个一定会用的，注释代码</p>
<p>两种， <code>::</code> 加语句，或者 <code>rem</code> 加语句，推荐<code>rem</code>吧，因为<code>::</code> 我遇到了不知道什么原因的错误。</p>
</li>
</ul>
<p>知道了上边的一切，就可以写出代码了，但写完之后发现个问题，我们用 <code>%name%</code>并不能得到变量的值，查了查，原来在 <code>for</code> 循环中要用 <code>!name!</code>。并且开头加上<code>setlocal enabledelayedexpansion</code>。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rem ehco 设置为 off，不然的话运行会显示每条语句</span><br><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line">rem 防止中文乱码的</span><br><span class="line">chcp 65001 </span><br><span class="line">setlocal enabledelayedexpansion </span><br><span class="line"><span class="keyword">for</span> /d  %%i <span class="keyword">in</span> (*) <span class="keyword">do</span> (   </span><br><span class="line">    <span class="built_in">set</span> name=%%i</span><br><span class="line">    <span class="built_in">echo</span> !name! </span><br><span class="line">    rem 字符串合并，四个数字加上空格再加上之前的名字，不用双引号</span><br><span class="line">    <span class="built_in">set</span> newname=!name:~4,4! !name!   </span><br><span class="line">    rem 因为 newname 中有空格，所以要加双引号</span><br><span class="line">    ren !name! <span class="string">"!newname!"</span></span><br><span class="line">    </span><br><span class="line">)   </span><br><span class="line"><span class="built_in">echo</span> 处理完成 </span><br><span class="line">pause</span><br></pre></td></tr></table></figure>
<p>假如我们有下边的文件夹</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/bat1.jpg" alt=""></p>
<p>然后把上边的代码复制保存为 <code>.bat</code>，执行</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/bat2.jpg" alt=""></p>
<p>很完美，达到预期。</p>
<h1 id="问题升级"><a href="#问题升级" class="headerlink" title="问题升级"></a>问题升级</h1><p>写完代码以后和同学确认了一下需求，出现了一个问题，有的文件夹名字是 <code>（啊）abcd1233-afdasfs</code> 、<code>（啊啊）abcd1233-afdasfs</code> 这样的形式，也就是说数字开始的位置不一定是 <code>4</code> 了。怎么办呢？</p>
<h1 id="尝试二"><a href="#尝试二" class="headerlink" title="尝试二"></a>尝试二</h1><p>我们只要知道 <code>-</code> 的下标，往前数 <code>4</code> 个数字就可以了，没有找到什么直接的方法，找到一种利用 <code>goto</code> 的方案。</p>
<p><code>goto</code> 语法就是先用 <code>:label</code>定义一个位置，然后 <code>goto label</code> 就可以实现循环了。</p>
<p>所以我们的想法就是遍历文件夹的名字的字符串，得到 <code>-</code> 的位置。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@echo off</span><br><span class="line">chcp 65001 </span><br><span class="line">setlocal enabledelayedexpansion </span><br><span class="line">for /d  %%i in (*) do (   </span><br><span class="line">    set name=%%i</span><br><span class="line">    echo !name!</span><br><span class="line">    set str=%%i </span><br><span class="line">    set /a num=0 </span><br><span class="line">  	:next</span><br><span class="line">    if  not !str!==&quot;&quot; ( </span><br><span class="line">       set /a num+=1</span><br><span class="line">  	   if &quot;!str:~0,1!&quot;==&quot;-&quot; goto last</span><br><span class="line">       set str=!str:~1!  </span><br><span class="line">       goto next</span><br><span class="line">    )</span><br><span class="line">    set /a num=0 </span><br><span class="line">    :last</span><br><span class="line">    echo 字符-在字符串&quot;!name!&quot;中的首次出现位置为!num!</span><br><span class="line">    set newname=!name:~4,4! !name!   </span><br><span class="line">    </span><br><span class="line">)   </span><br><span class="line">echo 处理完成 </span><br><span class="line">pause</span><br></pre></td></tr></table></figure>
<p>理想是美满的，现实是残酷的，本以为解决了，然后运行测试了一下。</p>
<p>比如我们有下边样子的文件夹</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/bat1.jpg" alt=""></p>
<p>然后把上边的代码保存成 <code>.bat</code> 执行会发现结果是下边的样子</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/bat3.jpg" alt=""></p>
<p><code>-</code> 的位置找对了，但是…为什么只找了一次，我们的<code>for</code>循环怎么没用了 。</p>
<p>几经试探，搜索。发现微软的批处理命令不知道基于什么考虑，如果我们在 <code>for</code> 循环中用了 <code>goto</code>，那么 <code>for</code> 循环就会自动结束。没办法，我们得换思路了。</p>
<h1 id="最终尝试"><a href="#最终尝试" class="headerlink" title="最终尝试"></a>最终尝试</h1><p>网上找了找，找到一种截取某一个字符前的字符串的方法。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> /f <span class="string">"delims=-"</span> %%n <span class="keyword">in</span> (<span class="string">'echo %%i'</span>) <span class="keyword">do</span> ( </span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>这里的 <code>%%n</code> 就会保存 <code>-</code> 前边的字符串了。然后我们保存倒数四个的字符串就可以了。而倒数其实也提供了方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">截取通过倒数方式指定开始位置的整个字符串：%key:~-<span class="number">2</span>%，表示截取从倒数第 <span class="number">2</span> 个字符开始的整个字符串</span><br><span class="line">正数倒数方式相结合：%key:~<span class="number">2</span>,-<span class="number">2</span>%，表示截取从下标 <span class="number">2</span> 开始到倒数第 <span class="number">2</span> 个之间的字符串</span><br></pre></td></tr></table></figure>
<p>所以我们最后的代码就是下边的了，注意用等号赋值的时候可能习惯左右加空格，这里就不要加了，会出错。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line">chcp 65001 </span><br><span class="line">setlocal enabledelayedexpansion </span><br><span class="line"><span class="keyword">for</span> /d  %%i <span class="keyword">in</span> (*) <span class="keyword">do</span> (    </span><br><span class="line">    <span class="built_in">echo</span> %%i</span><br><span class="line">  	rem <span class="built_in">set</span> newname=%%i </span><br><span class="line">    <span class="keyword">for</span> /f <span class="string">"delims=-"</span> %%n <span class="keyword">in</span> (<span class="string">'echo %%i'</span>) <span class="keyword">do</span> ( </span><br><span class="line">       <span class="built_in">set</span> name=%%n</span><br><span class="line">       <span class="built_in">set</span> newname=!name:~-4! %%i</span><br><span class="line">   )</span><br><span class="line">   ren <span class="string">"%%i"</span> <span class="string">"!newname!"</span></span><br><span class="line">)   </span><br><span class="line"><span class="built_in">echo</span> 处理完成 </span><br><span class="line">pause</span><br></pre></td></tr></table></figure>
<p>执行前的文件夹</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/bat4.jpg" alt=""></p>
<p>执行上边的代码</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/bat5.jpg" alt=""></p>
<p>执行后的文件夹</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/bat6.jpg" alt=""></p>
<p>完美！</p>
<h1 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h1><p>大功告成了。只能说批处理的命令坑太多了，非常不习惯，和现代编程语言太多的不同了。唯一的好处就是不用搭环境，写个文本文件直接运行。但对于这些文件处理，推荐学一下 <code>python</code> ，就会体会到优雅了。</p>
]]></content>
      <categories>
        <category>计算机</category>
      </categories>
      <tags>
        <tag>批处理</tag>
        <tag>bat</tag>
      </tags>
  </entry>
  <entry>
    <title>保研全过程</title>
    <url>/2017/12/30/%E4%BF%9D%E7%A0%94%E5%85%A8%E8%BF%87%E7%A8%8B/</url>
    <content><![CDATA[<p>我是中国地质大学（武汉）计算机学院的大四学生，现在保研到华中科技大学计算机学院，经历了保研前的各种不知所措，现在结合自己的经历写一篇保研的过程，给学弟学妹们一些参考。</p>
<p>首先我们学校的保研率大概在 10% 到 16% ，拿我所在的计算机科学与技术专业来讲，我们专业一共有 126 人，保研人数是 16 人，比率是 12.7% 。一般自己学校的教务网站可以找到历年的保研人数，或者询问学长学姐。</p>
<p>保研基本是有五个过程，材料准备 → 夏令营 → 预报名 → 联系导师 → 国家推免系统。</p>
<h2 id="材料准备"><a href="#材料准备" class="headerlink" title="材料准备"></a>材料准备</h2><p>一般需要的材料有前 5 个学期（大一上、大一下、大二上、大二下、大三上）的成绩单（加盖教务章），前 5 个学期的专业排名及排名证明（如果是预报名阶段学校一般会要求前 6 个学期），专家推荐信（一般是你自己拟，然后给教授签字），获奖证书或论文发表证明（与学术或专业知识有关的获奖证书），英语四六级证书复印件（六级能过尽量过能高分尽量高分，导师一般都会问到这个）和其他英语等级测试复印件，以上的都需要电子资料（手机拍摄即可）以及个人陈述（Word）、一寸电子照。</p>
<p>以上材料不一定全部需要，具体看各个学校的通知，有的需要的多，有的需要的少。</p>
<p>你要对你研究生要去的学校以及专业明确，因为后面申请的每个步骤都需要填写。如果没有明确的学校，你可以采用广撒网的方式。</p>
<h2 id="夏令营"><a href="#夏令营" class="headerlink" title="夏令营"></a>夏令营</h2><p>保研夏令营是一些高校抢夺优质生源的一种方式，如果通过夏令营，那么在 9 月正式推免的时候，你只要拿到本校的推免资格，基本就可以万事大吉了。</p>
<p>夏令营的时间一般是从 4 月可以开始申请，有的学校可能会更早，具体可以从它的学校官网或者学校的招生网或者学校的研究生网或者学校的具体院系的网站找到通知，然后在暑假 7 、8 月的时候去你所报的学校进行 3 天到一周的旅程。学校一般会有个夏令营报名的系统，按照它上边的提示填写即可，有的学校同时是需要自己去邮寄纸质档过去的。</p>
<p>夏令营一般都是招每个学校专业的前几名，我当时是第十，报的几个夏令营全部没有音讯。我建议自己专业准备保研的同学可以建立个群，方便共享交流信息。因为年级前几如果广撒网，那由于一个专业也就录 1 到 3 个，后边的人基本也就没有希望。</p>
<p>夏令营一般去了会有笔试、机试、面试、和教授交流等形式，不同学校也是不同的，具体可以从官网了解或学长学姐了解。</p>
<h2 id="预报名"><a href="#预报名" class="headerlink" title="预报名"></a>预报名</h2><p>预报名就想当于后边的国家报名系统了，只不过是高校提前进行，还是为了抢夺生源。如果拿到了夏令营，就看具体学校的通知，需不需要再进行预报名的填写。如果没拿到夏令营，如果你想要的学校有预报名，那么就必须参加了。</p>
<p>预报名一般是在夏令营结束，8 月各个学校会有预报名的通知。这步我没有参加，具体做什么我也不知道了，大家仔细查看学校的通知就可以了。</p>
<h2 id="联系导师"><a href="#联系导师" class="headerlink" title="联系导师"></a>联系导师</h2><p>这步可以说是最重要的了，我是在预报名阶段开始联系导师的，因为华科没有预报名，而夏令营我也没有被录。</p>
<p>联系导师，最主要的就是从学校官网找到你感兴趣的导师，然后给老师发邮件，表达你想当他的研究生的想法，附上你自己的资料。每个老师回复的速度不一样，有的是干脆不回，有的几个小时。我联系的一个导师，8月底发的邮件，9月初收到的回复。</p>
<p>一般联系导师，不要给同一个专业导师同时发，因为他们可能是同一个实验室的，如果他们互相交流了，那可以说就是十分的尴尬了。如果一个导师一星期没有给你回复，这时候你再寻找下一个导师再进行联系。导师回复后可能会和你电话面试，如果离得近也会让你去找他，当面聊。</p>
<h2 id="国家推免系统"><a href="#国家推免系统" class="headerlink" title="国家推免系统"></a>国家推免系统</h2><p>一般每个学校在 9 月初就开始确定保研名额了，此时你只要按照自己学校的保研规定提交申请，拿到推免资格即可。</p>
<p>如果此时你夏令营和预报名都没有拿到名额，那就只能靠联系的导师了，例如我。当然如果你拿到了，那这步也是必须必须进行的。</p>
<p>到 9 月底的时候，国家的推免系统会开启，你需要注册账号然后去填写自己的相关资料。在 9 月底某天（今年是28号）的凌晨 12 点会开启报学校。那天是保研人的「狂欢」，是考验心脏承受能力的一天。</p>
<p>首先你需要填报你要报学校以及研究生方向，可以填三个「平行志愿」，但听说学校可以看到你把所报的学校放在了第几位。然后就一直等待吧，等待所报学校给你发待复试通知，收到待复试通知后你必须确认待复试，会有一个在某个时间内确定的提示，如果没确定就自动认为放弃。</p>
<p>接下来如果你确认了待复试，可能有的学校会进行电话或者其他的复试，不是很清楚，华科计算机是如果你联系的导师，过一会儿你就会收到「待录取」通知，只要你点击了确定，那么保研之路就将画上完美的句号了。</p>
<p>推免系统一直会持续到 10 月底，期间会有一些没招满人的学校发通知，我在 QQ 群里看到过好多还需要的人的。</p>
<h2 id="公众号"><a href="#公众号" class="headerlink" title="公众号"></a>公众号</h2><p>这期间我主要使用了两个公众号，可以说十分良心了，这里推荐一下。<br><img src="/2017/12/30/保研全过程/1.jpg" alt=" "><br><img src="/2017/12/30/保研全过程/2.jpg" alt=" "></p>
<p>大体过程基本是这样了，当然每个人可能遇到的情况会不一样，但总之希望可以帮到准备保研的你。</p>
]]></content>
      <categories>
        <category>随想</category>
      </categories>
      <tags>
        <tag>随想</tag>
      </tags>
  </entry>
  <entry>
    <title>关于 TypeScript 的一点点思考</title>
    <url>/2023/08/12/%E5%85%B3%E4%BA%8ETypeScript/</url>
    <content><![CDATA[<p>平常写 ts 比较少，用了几天时间刷完了阮一峰老师新写的 ts 教程，依旧通俗易懂，对于入门或者查漏补缺还是挺有帮助的。</p>
<p><a href="https://wangdoc.com/typescript/" target="_blank" rel="noopener">wangdoc.com/typescript/</a></p>
<p>加深了两点收获：</p>
<ol>
<li>ts 是一门独立的语言，利用它的类型推导可以做很多事情。</li>
<li>ts 又是一门特殊的语言，杂糅到了 js 中去使用。混合使用过程中，一不小心就会被绕进去。</li>
</ol>
<p>上次详细看 ts 还是写斐波那契的时候，<a href="https://zhuanlan.zhihu.com/p/427849482" target="_blank" rel="noopener">用 TypeScript 实现斐波那契数列</a></p>
<p>混了 Anthony Fu ts 类型体操项目的一道题：</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20230812084112082.png" alt=""></p>
<p><a href="https://github.com/type-challenges/type-challenges" target="_blank" rel="noopener">https://github.com/type-challenges/type-challenges</a> </p>
<p>正因为 ts 是一门独立的语言，所以可以用 ts 实现菲波那切数列、实现中国象棋，甚至实现编译器，也就有了上边的类型体操项目。</p>
<p>我 ts 平常用的比较少，猜测有下边的原因：</p>
<ol>
<li><p>大家对 ts 的了解深浅不一，ts 说简单也简单，说复杂也复杂，平常快速的业务迭代中很少有时间说专门去刷一遍 ts。</p>
</li>
<li><p>第一次开发的时候会多花时间。 定一个接口需要写类型，函数参数需要写类型，如果参数是对象套对象再套对象，那简直要疯掉。</p>
</li>
<li><p>未来迭代也花时间。后端接口有变动，除了改逻辑代码，还要再把相应的类型也都改了。</p>
</li>
<li><p>写逻辑的时候会被限制，经常遇到动态修改变量的情况，如果有 ts 还需要多考虑下。</p>
</li>
<li><p>收益不明显，如果说为了类型提示，编辑器通过插件一定程度上也可以。如果为了减少 bug，但用 js 写也很少因为类型问题出现 bug，基本上都是逻辑问题。</p>
<p>一般都会通过问号操作符或者 || 操作进行兜底，因为影响范围太广了，一不小心直接影响几千万用户，所以写的时候都会很谨慎，会考虑各种极端情况。比如之前总结的 <a href="https://zhuanlan.zhihu.com/p/561275198" target="_blank" rel="noopener">提升前端开发质量的十点经验沉淀</a>。</p>
</li>
</ol>
<p>当然以上仅我自己的看法，ts 这么火也肯定是有原因的，等未来 ts 写的多了再来补充它的好处。</p>
<p>现在项目达成的共识是新建文件的时候建成 ts，至于里边代码多少用 ts 就不做太多限制了，anyScript 由此诞生 \狗头。</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>TypeScript</tag>
      </tags>
  </entry>
  <entry>
    <title>中后台系统提升质量和效率的一个思路</title>
    <url>/2022/10/27/%E4%B8%AD%E5%90%8E%E5%8F%B0%E7%B3%BB%E7%BB%9F%E6%8F%90%E5%8D%87%E8%B4%A8%E9%87%8F%E5%92%8C%E6%95%88%E7%8E%87%E7%9A%84%E4%B8%80%E4%B8%AA%E6%80%9D%E8%B7%AF/</url>
    <content><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>中后台项目中会存在一些配置页面需求的开发，这些需求高度相似，迭代频率低，基本结构为「搜索区域」、「表格区域」、「包含表单的弹窗」三部分组成。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20221027060647741.png" alt="image-20221027060647741"></p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20221027060711024.png" alt="image-20221027060711024"></p>
<p>其中「搜索区域」和「表格区域」的操作区交互固化，比如查询、添加、查看、删除、上线、下线。</p>
<p>当前开发时大都采用复制类似需求页面继而修改的方式，如下图所示。每个人都形成了自己的代码组织结构，导致虽属同一团队，但代码风格、交互实现逻辑变为了多条平行线。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20221027060727389.png" alt="image-20221027060727389"></p>
<p>这种迭代方式存在两点坏处：</p>
<p>a. 重复劳动较多，同时存在漏改的风险。易变的地方分布在页面中各个部分，修改起来不够方便，改动后存在影响到正常逻辑的风险。</p>
<p>b. 团队内各自抽离的不同交互方式，接手他人页面的时候需要耗费一定的理解成本，同时 <code>code review</code> 时无法快速的理清逻辑。</p>
<h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>中后台项目提效一个直接的想法就是低代码的思路：</p>
<p>a. 初态：抽离各个组件，定义 <code>json</code> 的格式，通过 <code>json</code> 渲染出页面。</p>
<p>b. 终态：开发搭建平台，通过拖拽生成 <code>json</code> 并且实时预览页面，开发者也可以通过预定的协议接入自己的组件。</p>
<p>上述两种方案除去搭建成本大之外，最大的问题就是业务开发灵活性将大大降低。</p>
<p>开发者将在新的规范下进行开发，不管是通过 <code>json</code> 配置还是配置平台生成页面，上手难度大大增加，不亚于去学习一个新的前端框架。如果新需求的交互框架没有考虑到，将花费大量的时间进行适配， 甚至超过了从零开发需求的时间。极端情况下，如果无法满足需求的交互，还存在推倒重来的风险。</p>
<p>基于以上考虑，我们采取一个更轻便的方案，以模版代码为基础进行后续开发，并通过脚手架进行模版的配置、拉取。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20221027060745695.png" alt="image-20221027060745695"></p>
<p>如上图，大家的开发流程从之前的平行线变为了网状，未来的页面的目录格式和交互方式都会统一。</p>
<p>由于是生成的模版代码页面而且不强依赖于模版，未来需求有大的变化也可以正常迭代。</p>
<h1 id="方案设计"><a href="#方案设计" class="headerlink" title="方案设计"></a>方案设计</h1><h2 id="1-模板设计"><a href="#1-模板设计" class="headerlink" title="1.模板设计"></a>1.模板设计</h2><p>考虑到今后有可能增加其他场景模版，设计模版要考虑到未来可以进行无缝扩展，有两种方案：</p>
<p>a. 按分支来保存不同场景下的模版：</p>
<p>优点：不同场景下通过分支来拉取不同模版，模版之间完全隔离。</p>
<p>缺点：缺少了 <code>master</code> 分支，各模版都需要自己的 <code>master</code> 分支进行迭代。分支之间差异较大，完全违背了 <code>git</code> 的迭代初心。</p>
<p>b. 按文件夹来保存不同场景下的模版：</p>
<p>优点：所有模版都存在于 <code>master</code> 分支，和普通项目的方式一样从 <code>master</code> 切出分支进行迭代。</p>
<p>缺点：脚手架需要一次性拉取所有模版，然后复制自己需要的模版。</p>
<p>考虑到拉取文件速度较快，最终选取了方案 <code>b</code>。</p>
<p>各个配置页面之间虽然相似，但也会因实际情况存在细微差异，所以模版不能完全写死，需要支持动态编译，这里采用 <code>EJS</code> 进行编译。</p>
<p><code>EJS</code> 是一套简单的模板语言，它没有再造一套迭代和控制流语法，只需正常的 <code>JavaScript</code> 语法即可实现一些条件编译、变量替换等，因此可以快速上手。</p>
<p>关于模版内容，核心思想是将<strong>变化与不变的内容进行抽离</strong>。</p>
<p>我们可以将后端的接口、权限的配置、搜索框的配置、常量抽离出配置文件，将表格、搜索框、表单之间的联动方式预先写好，目录格式如下。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20221027060919512.png" alt="image-20221027060919512"></p>
<p>开发者只需进行后端接口的配置、搜索框的配置、表单的开发即可快速完成整个需求。</p>
<h2 id="2-架构设计"><a href="#2-架构设计" class="headerlink" title="2. 架构设计"></a>2. 架构设计</h2><p>考虑到一方面脚手架整体架构和功能实现后迭代频率会逐渐降低，另一方面更新脚手架需要走 <code>npm</code> 包的发布流程，如果将模版内容耦合到脚手架中，每次更新都重新进行发包较为繁琐。</p>
<p>因此将模版单独放一个仓库，从脚手架中解耦出来，实现脚手架仓库和模版仓库分离，独立迭代，降低更新成本。</p>
<p>使用者通过输入命令和参数即可生成模版页面代码，脚手架内部实现拉取模版和编译，生成最终页面，架构如下：</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20221027060851382.png" alt="image-20221027060851382"></p>
<h2 id="3-脚手架实现"><a href="#3-脚手架实现" class="headerlink" title="3. 脚手架实现"></a>3. 脚手架实现</h2><p>提供 <code>ce-cli</code> 命令，结合用户的参数进行进行模版的编译生成，同时提供交互式的形式选择参数，降低使用者的上手难度，交互形式如下：</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20221027060958575.png" alt="image-20221027060958575"></p>
<p>考虑到模版和脚手架存在强绑定关系，即如果模版更新了，但脚手架没有更新会造成一些模版逻辑未被编译的情况。因此执行命令时需要检查脚手架是否为最新版本，如果版本较低必须强制升级，中断程序的执行。（对于团队内部工具来说，始终保持最新版本才可以及时用到最新功能，这也是强制升级的原因之一）</p>
<p>为提高命令的执行速度，执行命令时将拉取的模版缓存到本地，并且将最新的 <code>commit</code> 名保存起来。第二次执行命令的时候将目前最新的 <code>commit</code> 和此前保存的 <code>commit</code> 进行比对，如果不相等则覆盖原来的模版，否则使用原来的模版即可，减少一次网络请求耗时。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>经过一段时间的迭代，后续有近 <code>20</code> 个页面用到脚手架，每需求可降低 <code>0.5pd</code> 的时间，更重要的是团队内相关需求的代码结构、交互实现均已统一，提升了代码质量 和 <code>code review</code> 的效率，团队间交替开发需求时的代码认知难度将大大降低。</p>
<p>在 <code>code review</code> 过程中，团队内提供相关建议，<a href="https://zhuanlan.zhihu.com/p/561275198" target="_blank" rel="noopener">沉淀最佳实践</a>，例如默认对象通过函数返回、公共方法的使用、项目框架一些特有操作都内置到模版中，不断提升代码质量，磨平大家之间的认知差异。</p>
<p>未来有新同学加入，可以在模版的基础上更快的进入开发，极大的降低对系统框架一些特有操作的认知时间，同时保证代码质量。</p>
<p>脚手架中的模版对主要对表格和搜索区域固化了代码逻辑，对于表单的使用我们还是通过原始的 <code>element</code> 表单进行开发，一些常用的规则校验、表单的逻辑每次都需要重复进行开发，经过调研目前公司内已经有多种封装好的表单，未来可以进行详细了解，最终引进到模版代码中，进一步提升开发效率。</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>分享两个好玩的编程项目</title>
    <url>/2019/06/30/%E5%88%86%E4%BA%AB%E4%B8%A4%E4%B8%AA%E5%A5%BD%E7%8E%A9%E7%9A%84%E7%BC%96%E7%A8%8B%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<h1 id="Scratch"><a href="#Scratch" class="headerlink" title="Scratch"></a>Scratch</h1><blockquote>
<p>Scratch 是麻省理工媒体实验室终身幼稚园组开发的一套计算机程序开发平台，旨在让程序设计语言初学者不需先学习语言语法便能设计产品。</p>
</blockquote>
<p>是的，你没有看错，它是给幼儿园的小朋友准备的编程软件，我是大二的时候在上哈佛<a href="http://open.163.com/special/opencourse/cs50.html" target="_blank" rel="noopener">CS50</a>公开课知道的，网易公开课上有翻译完的版本，讲的课很有意思。</p>
<p>让我们看一下这款编程软件的界面。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/scratch-example.jpg" alt=""></p>
<p>就像拼图一样，把 if else，repeat 语句拼接在一起，然后还可以导入声音，图片。看起来简单，但能做出很多有趣的东西。让我们看一下一些作品。</p>
<p align="center"><iframe frameborder="0" src="https://v.qq.com/txp/iframe/player.html?vid=b07075zeldg" allowfullscreen="true" width="640" height="498"></iframe></p>

<p>当时知道这个的时候印象深刻，人家幼儿园就接触了，而自己大学才知道。后来，上数据结构课的时候，老师要求每个人做一个 PPT 讲一个排序算法。自己突发灵感，就用 Scratch 写了一个讲解归并排序的。</p>
<h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><p>先不要考虑怎么排序，让我们想一下归并，就是如果是两个有序的数组，怎么合并成一个大的有序的数组。</p>
<p>我们只需要遍历两个数组，然后每次选较小的数放到新数组中就可以。看个例子</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">初始状态，两个指针指向开头元素</span><br><span class="line"><span class="number">1</span> <span class="number">3</span> <span class="number">6</span></span><br><span class="line">^</span><br><span class="line">i</span><br><span class="line"></span><br><span class="line"><span class="number">2</span> <span class="number">5</span> <span class="number">10</span> <span class="number">11</span></span><br><span class="line">^</span><br><span class="line">j</span><br><span class="line"></span><br><span class="line">上边，i 指向的更小，把当前元素放到新数组， i 后移</span><br><span class="line"><span class="number">1</span> <span class="number">3</span> <span class="number">6</span></span><br><span class="line">  ^</span><br><span class="line">  i</span><br><span class="line"></span><br><span class="line"><span class="number">2</span> <span class="number">5</span> <span class="number">10</span> <span class="number">11</span></span><br><span class="line">^</span><br><span class="line">j</span><br><span class="line"></span><br><span class="line"><span class="number">1</span></span><br><span class="line"></span><br><span class="line">上边，j 指向的更小，把当前元素放到新数组， j 后移</span><br><span class="line"><span class="number">1</span> <span class="number">3</span> <span class="number">6</span></span><br><span class="line">  ^</span><br><span class="line">  i</span><br><span class="line"></span><br><span class="line"><span class="number">2</span> <span class="number">5</span> <span class="number">10</span> <span class="number">11</span></span><br><span class="line">  ^</span><br><span class="line">  j</span><br><span class="line"></span><br><span class="line"><span class="number">1</span> <span class="number">2</span></span><br><span class="line"> </span><br><span class="line">上边 i 指向的更小，把当前元素放到新数组， j 后移</span><br><span class="line"><span class="number">1</span> <span class="number">3</span> <span class="number">6</span></span><br><span class="line">  ^</span><br><span class="line">  i</span><br><span class="line"></span><br><span class="line"><span class="number">2</span> <span class="number">5</span> <span class="number">10</span> <span class="number">11</span></span><br><span class="line">  ^</span><br><span class="line">  j</span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span></span><br><span class="line">...... 就这样一直比下去就是一个有序的大数组了</span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">6</span> <span class="number">10</span> <span class="number">11</span></span><br></pre></td></tr></table></figure>
<p>是的，上边这个就是归并排序的基础了，前提就是有两个有序数组，我们就可以得到一个大的有序数组。知道了这个，就可以解决 1 43 4 3 66 这样乱序的数组怎么排序了，下边就是我当时用 Scratch 做的。做好的 Scratch 可以传到官方的网页，也可以转成 .exe 可执行程序。</p>
<p align="center"><iframe frameborder="0" src="https://v.qq.com/txp/iframe/player.html?vid=k0891mxusgl" allowfullscreen="true" width="640" height="498"></iframe></p>

<h1 id="TensorFlow-js"><a href="#TensorFlow-js" class="headerlink" title="TensorFlow.js"></a>TensorFlow.js</h1><p>做过深度学习的一定知道，TensorFlow 这个 python 框架。在上学期深度学习结课的时候，同学介绍了 TensorFlow.js 这个框架，为什么加了 .js 呢？是的，深度学习也可以用 js 来写了，也就意味着深度学习的一些模型可以直接在浏览器或者服务器端 node.js 上跑了。甚至可以直接把 python 的模型转为 js。</p>
<p>深度学习加前端，想想是不是还有一些小激动呢，而官网给的一些 Demo 也是让人觉得想象空间非常大。最令我印象深刻就是下边的这款吃豆人游戏了，它可以通过视频识别来自定义键位，然后实时的通过视频来控制吃豆人。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/pac.jpg" alt=""></p>
<p>现在说到 PAC ，就总是想到电影《黑镜：潘达斯奈基》，看的第一部交互式电影，和电影中的人物互动的感觉不错，里边关于吃豆人的解释，令人回味无穷。</p>
<blockquote>
<p>There’s messages in every game.<br><strong>在每个游戏中，都有信息。</strong></p>
<p>Like Pac-Man. Do you know what PAC stands for? “Program and Control.”<br><strong>比如吃豆人。你知道吃豆人（Pac-Man）名称里的“PAC”代表什么吗？“编程与操控”。</strong></p>
<p>He’s Program and Control Man. The whole thing’s a metaphor. He thinks he’s got free will but really he’s trapped in a maze, in a system. All he can do is consume. He’s pursued by demons that are probably just in his own head. And even if he does manage to escape by slipping out one side of the maze, what happens? he comes right back in the other side.<br><strong>吃豆人就是“编程与操控人”。这整个事情就是一个比喻。吃豆人以为自己拥有自由意志，但其实他被困在一个迷宫里，一个系统里。他所能做的一切就是消耗。他被魔鬼追赶，但这些魔鬼可能只在他的头脑里存在。即便他成功逃出迷宫，从迷宫的一侧悄悄溜出去，接下来发生什么？他又在另一侧直接回来了。</strong></p>
<p>People think it’s a happy game. It’s not a happy game. It’s a fucking nightmare world, and worst thing is it’s real and we live in it. It’s all code. If you listen closely, you can hear the numbers. There’s a cosmic flowchart that dictates where you can and where you can’t go.<br><strong>人们以为这是一个快乐的游戏。但这并不是一个快乐的游戏。这他喵的是一个噩梦的世界，而更恶心的是它是真实的，并且我们就生活在其中。所有一切都是代码。如果你仔细聆听，你会听到数字。存在一个宇宙流程图，它告诉你能去哪里，不能去哪里。</strong></p>
<p>I’ve given you the knowledge. I’ve set you free.<br><strong>我已经将知识传授给你。我已经解放了你。</strong></p>
</blockquote>
<p>哈哈哈，扯远了，回到重点。看了这个 Demo 以后，小组讨论中，我突然想到小时候玩的打砖块的游戏，这个也可以很好的结合在一起呀。</p>
<p>使用的是 MobileNet 模型，是谷歌 17 年 4 月针对手机等嵌入式设备提出的一种轻量级的深层神经网络，于是就有了下边的程序。</p>
<p align="center"><iframe frameborder="0" src="https://v.qq.com/txp/iframe/player.html?vid=c0891igy5tk" allowfullscreen="true" width="640" height="498"></iframe></p>

<p>线上体验地址是 <a href="https://wind-liang.github.io/tfjsboard/" target="_blank" rel="noopener">https://wind-liang.github.io/tfjsboard/</a>，用电脑打开。</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>scratch</tag>
        <tag>tensorflow.js</tag>
      </tags>
  </entry>
  <entry>
    <title>云服务器搭建网站全过程</title>
    <url>/2020/02/23/%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA%E7%BD%91%E7%AB%99%E5%85%A8%E8%BF%87%E7%A8%8B/</url>
    <content><![CDATA[<p>最近收到反馈说自己的刷题博客 <a href="https://leetcode.wang/" target="_blank" rel="noopener">https://leetcode.wang/</a> 无法访问，但我这里是正常的。</p>
<p>博客的话之前用的是 <code>pages</code> 服务，国内用户是解析到 <code>coding</code> 上，国外用户解析到 <code>github</code> 上，大概可能是 <code>coding</code> 的原因导致的一部分人打不开网站。</p>
<p>之前买了个阿里云的轻量云服务器，索性把刷题博客转移到上边吧。</p>
<p>如果网站放到国内的服务器上，域名的话是需要备案的，之前的话我已经备案过了，在阿里云上按流程一步一步走即可。</p>
<p>本着不求甚解的态度，下边仅仅记录过程了，看懂的前提是已经用过域名解析，<code>CNAME</code> 记录，了解过 <code>Nginx</code>，知道静态网站，会基本的 <code>linux</code> 命令操作。</p>
<p>系统版本是，CentOS 7.3 。</p>
<h1 id="Nginx-基本配置"><a href="#Nginx-基本配置" class="headerlink" title="Nginx 基本配置"></a>Nginx 基本配置</h1><p>首先安装 <code>Nginx</code>。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install nginx</span><br></pre></td></tr></table></figure>
<p>然后运行 <code>nginx</code>。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nginx</span><br></pre></td></tr></table></figure>
<p>这时用浏览器访问服务器的 <code>ip</code> 地址就可以看到一个默认的网站了。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/nginx1.jpg" alt=""></p>
<p>将 <code>github</code> 上的网站代码下载下来。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> XXX</span><br></pre></td></tr></table></figure>
<p>进入 <code>nginx</code> 的配置目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/nginx/conf.d/</span><br></pre></td></tr></table></figure>
<p>新建一个配置文件，如果添加多个网站，在这里继续新建 <code>.conf</code> 文件即可。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim leetcode.conf</span><br></pre></td></tr></table></figure>
<p>编辑配置文件，目录设置成刚刚在 <code>github</code> 下载下来的网站</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        server_name  leetcode.wang;</span><br><span class="line">        location / &#123;</span><br><span class="line">            root   /root/leetcode;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>编辑 <code>nginx</code> 的主配置文件，修改其权限为 <code>root</code> 。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">vim /etc/nginx/nginx.conf</span><br></pre></td></tr></table></figure>
<p>原值 <code>#user  nobody;</code> 修改为  <code>user  root;</code></p>
<p>重新加载 <code>nginx</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure>
<p>去域名商将域名解析为配置文件中设置的 <code>server_name</code>，如果之前设置了 <code>CNAME</code>，记得删除。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/nginx2.jpg" alt=""></p>
<p>此时访问 <a href="http://leetcode.wang/" target="_blank" rel="noopener">http://leetcode.wang/</a> 就发现成功了。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/nginx3.jpg" alt=""></p>
<p>为了提高国外访问的速度，国外解析可以继续设置 <code>github pages</code>。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/nginx8.jpg" alt=""></p>
<h1 id="webhook-配置"><a href="#webhook-配置" class="headerlink" title="webhook 配置"></a>webhook 配置</h1><p><code>github</code> 收到更新后自动更新服务器端代码，参考了同学的一个教程 <a href="https://blog.cugxuan.cn/2019/03/23/Git/Use-Webhook-To-Update-Blog/" target="_blank" rel="noopener">这里</a>，帮助很大。</p>
<p>基本原理就是服务器监听一个端口，然后当 <code>github</code> 收到 <code>push</code> 以后，发送一条 <code>get</code> 请求给服务器，服务器收到以后执行已经写好的命令。</p>
<p>从 <a href="https://github.com/adnanh/webhook" target="_blank" rel="noopener">官方仓库</a> 找到适合自己的包进行下载。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://github.com/adnanh/webhook/releases/download/2.6.11/webhook-linux-amd64.tar.gz</span><br></pre></td></tr></table></figure>
<p>解压</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar xzvf webhook-linux-amd64.tar.gz</span><br></pre></td></tr></table></figure>
<p>编写要执行的命令脚本，随意新建一个文件夹，然后在里边编写 <code>pull.sh</code> 和 <code>leetcode.json</code>，这两个名字是随意的。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir hook</span><br><span class="line"><span class="built_in">cd</span> hook</span><br><span class="line">vim pull.sh</span><br></pre></td></tr></table></figure>
<p>内容如下。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line">cd ../leetcode</span><br><span class="line">git reset --hard</span><br><span class="line">git pull</span><br></pre></td></tr></table></figure>
<p>编写 <code>webhook</code> 的配置文件，名字随意</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim leetcode.json</span><br></pre></td></tr></table></figure>
<p>内容如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">        &#123;</span><br><span class="line">                <span class="string">"id"</span>: <span class="string">"leetcode"</span>,</span><br><span class="line">                <span class="string">"execute-command"</span>: <span class="string">"/root/hook/pull.sh"</span>,</span><br><span class="line">        &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>然后回到 <code>webhook</code> 解压出来的文件夹中，执行 <code>webhook</code> 命令。</p>
<p>首先开启一个 <code>screen</code> 窗口。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">screen -S hook</span><br></pre></td></tr></table></figure>
<p>执行 <code>webhook</code> 命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./webhook -hooks ../hook/leetcode.json -verbose</span><br></pre></td></tr></table></figure>
<p>然后显示如下。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/nginx4.jpg" alt=""></p>
<p>接下来按下 <code>ctrl + a + d</code> 将程序运行到后台。</p>
<p>将 <code>http://ip:9000/hooks/{id}</code> 这个加到 <code>github</code> 的 <code>webhook</code> 中。<code>id</code>  是上边配置的 <code>leetcode</code>，<code>ip</code> 是服务器的 <code>ip</code>。</p>
<p><code>github</code> 添加路径是 <code>Settings -&gt; Webhooks -&gt; Add webhooks</code></p>
<p>加完以后是下边的样子。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/nginx5.jpg" alt=""></p>
<h1 id="开启压缩"><a href="#开启压缩" class="headerlink" title="开启压缩"></a>开启压缩</h1><p>编辑 <code>nginx</code> 的主配置文件。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/nginx/nginx.conf</span><br></pre></td></tr></table></figure>
<p>将下边的代码加入其中，在 <code>http</code>  大括号内。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 开启gzip</span></span><br><span class="line">gzip on;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启用gzip压缩的最小文件，小于设置值的文件将不会压缩</span></span><br><span class="line">gzip_min_length 1k;</span><br><span class="line"></span><br><span class="line"><span class="comment"># gzip 压缩级别，1-10，数字越大压缩的越好，也越占用CPU时间</span></span><br><span class="line">gzip_comp_level 6;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进行压缩的文件类型。javascript有多种形式。</span></span><br><span class="line"><span class="comment"># 其中的值可以在 mime.types 文件中找到。</span></span><br><span class="line">gzip_types text/plain application/javascript application/json application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否在http header中添加Vary: Accept-Encoding，建议开启</span></span><br><span class="line">gzip_vary on;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 禁用IE 6 gzip</span></span><br><span class="line">gzip_disable <span class="string">"MSIE [1-6]\."</span>;</span><br></pre></td></tr></table></figure>
<p>就是下图的位置。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/nginx6.jpg" alt=""></p>
<p>配置完记得重新加载配置。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure>
<p>然后可以在 <a href="http://tool.chinaz.com/Gzips" target="_blank" rel="noopener">这里</a> 测试下是否压缩成功。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/nginx7.jpg" alt=""></p>
<h1 id="添加-HTTPS"><a href="#添加-HTTPS" class="headerlink" title="添加 HTTPS"></a>添加 HTTPS</h1><p>在阿里云买一个免费的 SSL 证书，过几个小时就会通过验证。</p>
<p>然后把证书放到服务器上，可以通过 <code>ftp</code> 或者 <code>github</code>。</p>
<p>按照阿里云提供的教程配置即可。</p>
<p><a href="https://help.aliyun.com/document_detail/98728.html" target="_blank" rel="noopener">https://help.aliyun.com/document_detail/98728.html</a></p>
<p>在 <code>/etc/nginx</code> 新建一个文件夹 <code>cert</code> ，把证书的两个文件放入。</p>
<p>然后把之前的 <code>leetcode.conf</code> 修改成下边的样子即可。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        server_name  leetcode.wang;</span><br><span class="line">        location / &#123;</span><br><span class="line">            root   /root/leetcode;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">        rewrite ^(.*)$ https://<span class="variable">$host</span><span class="variable">$1</span> permanent;   <span class="comment">#将所有http请求通过rewrite重定向到https。</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">        listen 443 ssl;   <span class="comment">#SSL协议访问端口号为443。此处如未添加ssl，可能会造成Nginx无法启动。</span></span><br><span class="line">        server_name localhost;  <span class="comment">#将localhost修改为您证书绑定的域名，例如：www.example.com。</span></span><br><span class="line">        root html;</span><br><span class="line">        index index.html index.htm;</span><br><span class="line">        ssl_certificate cert/domain name.pem;   <span class="comment">#将domain name.pem替换成您证书的文&gt;件名。</span></span><br><span class="line">        ssl_certificate_key cert/domain name.key;   <span class="comment">#将domain name.key替换成您证书&gt;的密钥文件名。</span></span><br><span class="line">        ssl_session_timeout 5m;</span><br><span class="line">        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;  <span class="comment">#使用此加密套件。</span></span><br><span class="line">        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;   <span class="comment">#使用该协议进行配置。</span></span><br><span class="line">        ssl_prefer_server_ciphers on;</span><br><span class="line">        location / &#123;</span><br><span class="line">                root /root/leetcode;   <span class="comment">#站点目录。</span></span><br><span class="line">                index index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="总"><a href="#总" class="headerlink" title="总"></a>总</h1><p>最后成功上岸，国内速度飞起。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/nginx9.jpg" alt=""></p>
]]></content>
      <categories>
        <category>网站</category>
      </categories>
      <tags>
        <tag>网站</tag>
        <tag>云服务器</tag>
      </tags>
  </entry>
  <entry>
    <title>分辨率，像素，dpi，ppi简谈</title>
    <url>/2017/02/15/%E5%88%86%E8%BE%A8%E7%8E%87%EF%BC%8C%E5%83%8F%E7%B4%A0%EF%BC%8Cdpi%EF%BC%8Cppi%E7%AE%80%E8%B0%88/</url>
    <content><![CDATA[<p>一直对分辨率这些东西看了忘，忘了看，傻傻不分清楚，这次索性查些资料，自己也总结下。有些是自己的理解，如有错误感谢指出。</p>
<h2 id="像素"><a href="#像素" class="headerlink" title="像素"></a>像素</h2><p>译自英文“pixel”，pix是英语单词picture的常用简写，加上英语单词“元素”element，就得到pixel。<br>描述一张位图图片的最小单位可以说就是像素了，就是一个一个带有颜色的点，或者说是正方形，也可以是长方形，把一张图片放大再放大变可以看到了。<br>但是像素它是没有固定大小的，每个像素只是有一些颜色信息，在不同显示屏上同一个点的大小当然会不同，相同之处就是他们的颜色一样。<br><img src="/2017/02/15/分辨率，像素，dpi，ppi简谈/pix.png" alt=" "></p>
<h2 id="分辨率"><a href="#分辨率" class="headerlink" title="分辨率"></a>分辨率</h2><p>有的地方讲分辨率是用ppi表示，但我看到手机参数，显示器分辨率都用类似1920×1080这样的方式表示，所以按后者讲吧。1920×1080也就是表示电脑显示屏或者手机显示屏横向可以显示1920个像素，纵向可以显示1080个像素，也就是横向有1920个点，纵向有1080个点。<br>常见的就是一直说的1080p(1920×1080,16:9),720p(1280×720,16:9），4k(3840X2160)其他的也没注意，附一个链接<a href="http://design.yesky.com/137/8183137.shtml" target="_blank" rel="noopener">常见分辨率</a>，<a href="http://blog.sina.com.cn/s/blog_48744dcb0101bne9.html" target="_blank" rel="noopener">常见尺寸</a></p>
<h2 id="ppi"><a href="#ppi" class="headerlink" title="ppi"></a>ppi</h2><p>最让人头疼的一个概念<br>Pixels Per Inch，每英寸长度的像素个数。<br>首先一英寸是2.54厘米，其次注意是<strong>长度</strong>，不是面积，意思就是2.54厘米长度的直线通过多少个像素，就是多少ppi。假如一个显示器的的长是2英寸，宽是1英寸，而他的ppi是5。那他的分辨率就是10×5。<br><img src="/2017/02/15/分辨率，像素，dpi，ppi简谈/ppi.png" alt=" "><br>不要被我的图所误解，一般要是正方形就都是正方形。<br>ppi其实就是像素密度，当长宽固定了，ppi越高，显示器所能显示的像素就越多，可以想象上边的图，如果ppi是三百，也就是2.54厘米的宽会有300个小正方形，几乎就是个点了，300ppi几乎是人眼的极限了，再高，人眼已经分辨不出差别了。<br>所以对于显示器，分辨率=[长乘上ppi] × [宽乘上ppi],<br>长度，ppi，分辨率三者制约。<br>所以对于一个显示器，如果大小确定，当然分辨率越高越好，因为这样ppi就越高，但高于300再高意义也不是很大了。<br>一个很大的显示器，为了达到300ppi,就需要好多好多的像素了。</p>
<h2 id="图像与显示器"><a href="#图像与显示器" class="headerlink" title="图像与显示器"></a>图像与显示器</h2><p>如果图片的分辨率是10×20，显示器的分辨率高于他，那么没问题，可以正常显示这个图，如果低于它，那显示的时候显示器会自动用一些算法忽略一些像素了。<br>所以一幅图清不清晰，还得看在哪显示他，如果显示器的分辨率也是10×20，图片是不是就清晰呢，答案当时是否定的，还得看显示器的什么？对，ppi，或者说屏幕大小，因为两者互相决定，如果ppi是1，那么显示器就是25.4cm × 50.9cm，可以想象这幅图肯定是马赛克那样了。</p>
<h2 id="dpi"><a href="#dpi" class="headerlink" title="dpi"></a>dpi</h2><p> Dots Per Inch，每英寸点数，概念和ppi差不多，但多用于打印机等打印设备。比如打印机是300dpi,我们需要打印一张1寸照片1寸 × 1.4寸，那么我们至少需要多大像素的照片才不会看到马赛克，很好算<br>就是 1×300=300,1.4×300=420，也就是300 × 420=126000 像素的照片即可了。<br>补充下照片大小的算法</p>
<blockquote>
<p>如1寸相片其规格为1X1.4,用1.4长那边的尺寸来表示，即1寸;<br>5寸相规格是尺寸5X3.5,用长边尺寸5表示其照片的规格。<br>而国际上还有一种通行的表示照片尺寸的方法，即取照片短的一边的英寸整数数值加字母R来表示。<br>比如5寸照片，规格为5X3.5英寸，即3R；<br>6寸照片，规格为6×4英寸，即4R。<br>所以像素再高其实也没什么用，除非你想要一张好大好大的照片。</p>
</blockquote>
<h2 id="手机ppi计算"><a href="#手机ppi计算" class="headerlink" title="手机ppi计算"></a>手机ppi计算</h2><p>显示器的尺寸是用对角线表示的，比如iphone 7的尺寸为4.7寸，那么其实是说他的对角线长度为4.7寸。<br><img src="/2017/02/15/分辨率，像素，dpi，ppi简谈/iphone.png" alt=" "><br>有了像素和尺寸，我们完全可以算ppi，可以勾股定理算出对角线的像素数，然后除以4.7即可。<br>也可以因为iphone 7的屏幕尺寸比大约为16比9，根据这个算出长宽，再除以长或者宽的像素也就求出来了。</p>
<h2 id="dip"><a href="#dip" class="headerlink" title="dip"></a>dip</h2><p>dip（dp)是安卓里为了适配屏幕专门提出的概念，简单说就是一个公式<br>px = dp * (dpi / 160)<br>也就是说如果图片宽2dp，那么如果手机的ppi是320，那么图片宽将是4个像素。<br>对安卓感兴趣的，我再专门详细写一下。</p>
]]></content>
      <categories>
        <category>设计</category>
      </categories>
      <tags>
        <tag>分辨率</tag>
        <tag>像素</tag>
        <tag>dpi</tag>
        <tag>ppi</tag>
      </tags>
  </entry>
  <entry>
    <title>前端js的设计模式系列-总结篇</title>
    <url>/2022/02/06/%E5%89%8D%E7%AB%AFjs%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B3%BB%E5%88%97-%E6%B1%87%E6%80%BB/</url>
    <content><![CDATA[<p>从 <code>1</code> 月 <code>6</code> 号的第一篇设计模式文章 <a href="https://pattern.windliang.wang/posts/%E5%89%8D%E7%AB%AF%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B3%BB%E5%88%97-%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F.html" target="_blank" rel="noopener">策略模式</a>，截止到 <code>3</code> 月 <code>8</code>  号的最后一篇 <a href="https://pattern.windliang.wang/posts/%E5%89%8D%E7%AB%AF%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B3%BB%E5%88%97-%E5%9F%BA%E6%9C%AC%E5%8E%9F%E5%88%99.html" target="_blank" rel="noopener">基本原则</a>，利用两个月的时间把二十三个设计模式都过了一遍，其中在平时开发中用到的都结合实际场景总结了一遍。</p>
<p>之所以开始总结设计模式，还是每篇文章开头所说的：</p>
<p>代码也写了几年了，设计模式处于看了忘，忘了看的状态，最近对设计模式有了点感觉，索性就再学习总结下吧。</p>
<p>大部分讲设计模式的文章都是使用的 <code>Java</code>、<code>C++</code> 这样的以类为基础的静态类型语言，作为前端开发者，<code>js</code> 这门基于原型的动态语言，函数成为了一等公民，在实现一些设计模式上稍显不同，甚至简单到不像使用了设计模式，有时候也会产生些困惑。</p>
<p>设计模式最初的总结来自于 <code>GoF</code> 书，但书讲的比较晦涩，就不建议看了，<code>GoF</code> 名字的来源是：</p>
<blockquote>
<p>The authors of the <a href="http://wiki.c2.com/?DesignPatternsBook" target="_blank" rel="noopener">DesignPatternsBook (opens new window)</a>came to be known as the “Gang of Four.” The name of the book (“Design Patterns: Elements of Reusable Object-Oriented Software”) is too long for e-mail, so “book by the gang of four” became a shorthand name for it. After all, it isn’t the ONLY book on patterns. That got shortened to “GOF book”, which is pretty cryptic the first time you hear it.</p>
</blockquote>
<p>大意就是本来的书名太长了，然后就简写为 <code>book by the gang of four</code> ，由四个作者共同写的，然后简写为 <code>GoF</code> 了，我们常说的「四人帮」设计模式。</p>
<p>总结过程中除了搜索出来的零星的文章，看的比较多的是下边几个：</p>
<ul>
<li><p><code>Alloy Team</code> 曾探的「JavaScript 设计模式开发与实战」，第一章的基础知识将 <code>js</code> 有别于其他语言的特性讲的很好，其中设计模式的一些例子也是作者业务开发中实际应用的。</p>
</li>
<li><p>张容铭的「JavaScript 设计模式」，虽然每个设计模式都讲了，但很多场景是虚构出来的，只是起到理解设计模式的作用，如果要看的话推荐先看曾探的。</p>
</li>
</ul>
<p>上边两本共同的缺点是作者的时代还是在 <code>jQuery</code> ，举的例子也都还是在操纵 <code>dom</code> ， <code>Vue</code>/<code>React</code> 的时代到来后，平常开发中我们已经不去操纵 <code>dom</code> 了，这也是我为什么又总结了一遍的原因之一。</p>
<ul>
<li>极客时间王争的 <a href="http://gk.link/a/11c3E" target="_blank" rel="noopener">设计模式之美</a>，总结的很好，但遗憾的是更适合后端来看，很多场景也都是 <code>java</code> 开发中的场景。</li>
<li>一个 <code>Youtube</code> 帅哥总结的 <a href="https://www.youtube.com/watch?v=BWprw8UHIzA&amp;list=PLZlA0Gpn_vH_CthENcPCM0Dww6a5XYC7f&amp;index=2" target="_blank" rel="noopener">设计模式系列</a>，这个比较新了，都是结合 <code>ES6</code> 语法，缺点还是没有开发中的实际场景。</li>
<li>还有一个 <a href="https://refactoringguru.cn/design-patterns" target="_blank" rel="noopener">大而全的网站</a>， 各种语言都实现了，很多设计模式总结的也非常棒，配图丰富。</li>
</ul>
<p>设计模式的话，在平常开发中，其实都会有意无意的用到过，只是没有专门总结出来。通过总结，当遇到类似场景的时候，我们就可以更快的编写，提升编程效率。</p>
<p>但设计模式最忌讳的就是过度设计了，但这个度又很难把握，可以结合 <code>KISS</code> 原则，我们先以简单、快速的方式实现需求，然后当后边需要修改的时候，贯彻「再一再二没有再三」的原则，再对原有的代码进行重构。</p>
<p>我们也没必要完全去套设计模式，而是去理解它们共同的思想，保持初心–提升代码的可读性、可扩展性、可维护性，最终达到「还记着没有，我现在全忘了，忘得干干净净的了」的境界。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220310082243222.png" alt="image-20220310082243222" style="width:50%;"></p>
<p>我们需要做的就是先有一定理论知识的储备，比如熟练掌握各种设计原则、思想、编码规范、设计模式，然后在平时开发、阅读源码过程中有代码质量意识、设计意识，慢慢的进行巩固、学习。</p>
<p>为了方便大家更好的阅读，我把之前总结的和没有总结的都放到了  <a href="https://pattern.windliang.wang/" target="_blank" rel="noopener">pattern.windliang.wang/</a>  网站和 <a href="https://github.com/wind-liang/design-pattern" target="_blank" rel="noopener">github</a> 上。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220310090250470.png" alt="image-20220310090250470"></p>
<p>每个设计模式的原始定义其实很好理解，直接打开维基百科看看定义、看看代码十几分钟估计就能了解一个，最重要的地方在于实际开发场景中的到底有哪些例子。</p>
<p>这方面的话前端相关的例子很少很少，我自己的力量有限，非常欢迎大家在  <a href="https://github.com/wind-liang/design-pattern/issues" target="_blank" rel="noopener">github</a> 给我提 issues，把大家应用过或者见过的设计模式写一下，一起学习，一起进步！</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>提升前端开发质量的十点经验沉淀</title>
    <url>/2022/09/05/%E5%89%8D%E7%AB%AF%E5%AE%9E%E9%99%85%E5%BC%80%E5%8F%91%E7%9A%84%E4%B8%80%E4%BA%9B%E7%BB%8F%E9%AA%8C%E6%B2%89%E6%B7%80/</url>
    <content><![CDATA[<p>分享一下平常开发经常出现问题，增加代码质量的十个小点：</p>
<h1 id="记得错误处理"><a href="#记得错误处理" class="headerlink" title="记得错误处理"></a>记得错误处理</h1><p>特别是网络请求或者其他异步操作中，<code>await</code> 记得包裹 <code>try catch</code>，可以给用户一个友好提示，同时可以考虑 <code>catch</code> 中需要做什么兜底处理，必要时进行上传日志。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="keyword">this</span>.loading = <span class="keyword">this</span>.$loading(&#123;</span><br><span class="line">    lock: <span class="literal">true</span>,</span><br><span class="line">    text: <span class="string">'加载中...'</span>,</span><br><span class="line">    spinner: <span class="string">'el-icon-loading'</span>,</span><br><span class="line">    background: <span class="string">'rgba(0, 0, 0, 0.7)'</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">const</span> info = <span class="keyword">await</span> resDistributeService(&#123; <span class="attr">taskTicketId</span>: <span class="keyword">this</span>.id &#125;);</span><br><span class="line">  ...</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">  <span class="keyword">this</span>.$message(&#123;</span><br><span class="line">    type: <span class="string">'error'</span>,</span><br><span class="line">    message: e.msg || e.message || <span class="string">'失败'</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">  <span class="keyword">this</span>.loading.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以结合 <code>finally</code>，处理 <code>loading</code> 等。</p>
<h1 id="数字-0-的校验"><a href="#数字-0-的校验" class="headerlink" title="数字 0 的校验"></a>数字 0 的校验</h1><p>前端经常使用 <code>!v</code> ，来判断 <code>v</code> 是不是有值。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(!v)&#123;</span><br><span class="line">  <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">doSomething()</span><br></pre></td></tr></table></figure>
<p>但如果 <code>0</code> 是 <code>v</code> 的有效值 ，此时本该处理，但会提前结束，最终引发错误。此时需要显示的判断是否是 <code>null</code> 或者 <code>undefined</code> 。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(v === <span class="literal">null</span> || v=== <span class="literal">undefined</span>)&#123;</span><br><span class="line">  <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">doSomething()</span><br></pre></td></tr></table></figure>
<h1 id="默认对象采用函数返回"><a href="#默认对象采用函数返回" class="headerlink" title="默认对象采用函数返回"></a>默认对象采用函数返回</h1><p>由于 <code>js</code> 中的对象是引用，因此赋默认值的时候最好通过函数，每次都返回一个新对象。</p>
<p>bad:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> defaultCondition = &#123;</span><br><span class="line">  name: <span class="string">''</span>,</span><br><span class="line">  conditionList: [</span><br><span class="line">    &#123;</span><br><span class="line">      conditionCode: <span class="string">''</span>,</span><br><span class="line">      conditionValue: <span class="literal">null</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            condition: &#123;...defaultCondition&#125;,</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        closeDialog() &#123;</span><br><span class="line">            <span class="keyword">this</span>.condition =  &#123;...defaultCondition&#125;;</span><br><span class="line">            <span class="keyword">this</span>.configId = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">this</span>.$refs.form.resetFields();</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>good:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> getDefaultCondition = <span class="function"><span class="params">()</span> =&gt;</span> (&#123;</span><br><span class="line">  name: <span class="string">''</span>,</span><br><span class="line">  conditionList: [</span><br><span class="line">    &#123;</span><br><span class="line">      conditionCode: <span class="string">''</span>,</span><br><span class="line">      conditionValue: <span class="literal">null</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            condition: getDefaultCondition(),</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        closeDialog() &#123;</span><br><span class="line">            <span class="keyword">this</span>.condition = getDefaultCondition();</span><br><span class="line">            <span class="keyword">this</span>.configId = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">this</span>.$refs.form.resetFields();</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h1 id="接口地址单独存放"><a href="#接口地址单独存放" class="headerlink" title="接口地址单独存放"></a>接口地址单独存放</h1><p>将接口的定义放到统一文件中，未来变动改动起来会比较方便，如果各个 <code>url</code> 都写死在页面中以后就很麻烦了。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// service.js</span></span><br><span class="line"><span class="keyword">import</span> request <span class="keyword">from</span> <span class="string">'utils/request'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> service = <span class="keyword">new</span> (request(<span class="string">'/api/m/mallorder/exp/compensation/customer'</span>))();</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> listService = <span class="function">(<span class="params">params</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> service.post(<span class="string">'/queryRuleList'</span>, params);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> listDataKey = <span class="string">'ruleVOList'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> idKey = <span class="string">'ruleId'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> dialogEnumService = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> service.get(<span class="string">'/info'</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> saveService = <span class="function">(<span class="params">params</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> service.post(<span class="string">'/saveRule'</span>, params);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> detailService = <span class="function">(<span class="params">params</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> service.get(<span class="string">'/detail'</span>, params);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>此外，网络请求一般都会在 <code>npm</code> 包的基础上自己再包一层，一方面可以注入共用参数，另一方面可以对返回数据进行统一的错误处理。</p>
<h1 id="函数多参数采用对象"><a href="#函数多参数采用对象" class="headerlink" title="函数多参数采用对象"></a>函数多参数采用对象</h1><p>如果定义一个函数需要 3 个以上的参数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params">a,b,c,d</span>)</span>&#123;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>此时可以考虑采用对象解构，改为</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params">&#123;a=<span class="number">1</span>,b,c,d&#125;=&#123;&#125;</span>)</span>&#123;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>好处是未来需要扩展参数的时候，不需要太担心其他地方调用时候传参是否会引起问题。</p>
<p>当然，如果参数过多也需要思考一下当前函数是否承载了太多的功能，进行一下功能上的拆分。</p>
<h1 id="函数单一职责"><a href="#函数单一职责" class="headerlink" title="函数单一职责"></a>函数单一职责</h1><p>当我们已经定义了一个函数，比如去初始一些变量。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initOptions</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  a = xxx</span><br><span class="line">  b = xxx</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>此时我们需要做另一件无关的事 【A】，虽然它和 <code>initOptions</code> 调用的时机一致，但最好不要直接放到 <code>initOptions</code> 中，而是新建一个函数单独调用。</p>
<p>不然未来如果其他地方也要调 <code>initOptions</code>，但此时可能并不需要做【A】这件事情就会引起 <code>bug</code>。</p>
<h1 id="参数合法性判断"><a href="#参数合法性判断" class="headerlink" title="参数合法性判断"></a>参数合法性判断</h1><p>由于 <code>js</code> 语言的灵活性，函数传入的参数很可能不符合预期，必要时我们需要进行判断并且进行兜底处理，不可完全信任调用方。</p>
<p>团队合作中，该函数在未来极大可能会被其他人调用。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doSomeThing</span>(<span class="params">params1, params2</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(params1 === <span class="literal">null</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(params2)&#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 再去做我们的事情</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果后边的流程强依赖于 <code>params</code>，我们可以直接 <code>return</code>，必要时也可以上报日志或者 <code>throw Error</code>。</p>
<h1 id="整数的处理"><a href="#整数的处理" class="headerlink" title="整数的处理"></a>整数的处理</h1><p><code>js</code> 中没有整数类型，即 <code>java</code> 中的 <code>int</code>、<code>long</code> 这些，所有数字都遵循 <code>IEEE 754</code> 标准，即 <code>java</code> 中的 <code>double</code> 类型，详细的可参考 <a href="https://zhuanlan.zhihu.com/p/75581822" target="_blank" rel="noopener">浮点数详解。</a></p>
<p>可以精确表示的最大整数是 <code>9007199254740991</code>，共 <code>16</code> 位，超过这个数精度可能会丢失，对于新接口，可以问一下后端相应数字字段的最大值会是多少。</p>
<p>对于浮点数的处理，除了众所周知的 <code>0.1 + 0.2 === 0.3</code> 的值为<code>false</code> 外，当我们对数字进行运算的时候也需要注意。</p>
<p>常见的将 <code>9.04</code> 元转为 <code>904</code> 分：</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.com1661472877631-d41092fa-913c-40f8-89a0-154c7fd2fcc8.png" alt="img"></p>
<p>我们需要对结果进行取整处理。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.com1661472888799-0efa6ca3-5337-42ef-b623-1f999757f209.png" alt="img"></p>
<h1 id="可选链"><a href="#可选链" class="headerlink" title="可选链"></a>可选链</h1><p>可选链操作符，参考 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Optional_chaining" target="_blank" rel="noopener">MDN</a> ，用的比较多。</p>
<p>和后端定的数组或者对象，后端有时候返回来的很可能是 <code>null</code> 甚至没有该字段，因此前端可以用可选链操作符用于数组、对象、函数，防止出现错误直接阻断后续流程。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> nestedProp = obj.first?.second; <span class="comment">// 等效于 obj.first &amp;&amp; obj.fisrt.second</span></span><br><span class="line"><span class="comment">//后续流程</span></span><br></pre></td></tr></table></figure>
<p>但不要过度使用可选链，如果某些地方理论上不会出问题，比如 <code>let test = obj.first?.second</code>，如果 <code>second</code> 一定能取到，我们直接 <code>let test = obj.first.second</code> 即可。</p>
<p>不然未来如果这里由于某种原因出了问题导致 <code>obj.first</code> 是 <code>null</code>，但我们使用了可选链，所以 <code>obj.first?.second</code> 也不会报错，我们就永远不会知道这里出现问题了。</p>
<p>当然也需要权衡下，不加可选链造成<code>js Error</code> 会不会影响业务逻辑。</p>
<h1 id="对象or数组引用"><a href="#对象or数组引用" class="headerlink" title="对象or数组引用"></a>对象or数组引用</h1><p>修改或者使用对象、数组时，时刻切记它们为引用，一处修改会造成处处修改。</p>
<h1 id="总"><a href="#总" class="headerlink" title="总"></a>总</h1><p>以上的点应该算已经融入血液中了，平常开发和帮同事过 <code>pr</code> 的时候会格外注意，和业务逻辑没有关系，但可以提升代码质量。还有 <code>Vue</code> 一些常见的点也总结了一下，在语雀建了一个文档，未来有其他想法也会再更新一下，感兴趣的同学可以收藏一下，<a href="https://www.yuque.com/books/share/4946f854-2cac-4918-b70f-223fb173b7c2" target="_blank" rel="noopener">前端实践沉淀</a>。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220905081810640.png" alt="image-20220905081810640"></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
  </entry>
  <entry>
    <title>在美团工作的第二年</title>
    <url>/2022/06/30/%E5%9C%A8%E7%BE%8E%E5%9B%A2%E5%B7%A5%E4%BD%9C%E7%9A%84%E7%AC%AC%E4%BA%8C%E5%B9%B4/</url>
    <content><![CDATA[<p>不知不觉入职两周年了，<a href="https://windliang.wang/2021/05/29/%E5%9C%A8%E7%BE%8E%E5%9B%A2%E5%B7%A5%E4%BD%9C%E7%9A%84%E7%AC%AC%E4%B8%80%E5%B9%B4/">在美团工作的第一年</a> 里主要介绍了一下平时的工作内容，这次就记录下当下的感受和一些思考吧。</p>
<h2 id="互联网低谷"><a href="#互联网低谷" class="headerlink" title="互联网低谷"></a>互联网低谷</h2><p>自己 <code>20</code> 年入职那几个月可谓互联网巅峰了，之后随着疫情的持续和政策的影响，互联网就开始一泄千丈。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220630074404498.png" alt="image-20220630074404498"></p>
<p>网上的裁员消息也是不停歇，今年即将秋招的同学应该会感受更加强烈。</p>
<p>互联网就此不行了吗？股市除了公司的盈利外，也反映着大家对未来发展的信心程度。互联网本身其实没有变化，反而大家越来越依赖于互联网，微信、短视频、游戏、快递外卖，互联网的应用已经和生活交融在了一起。随着疫情的结束，当大家的生活重新恢复正常，重拾信心，相信互联网依旧会继续向上发展。</p>
<p>自己 <code>14</code> 年进入大学接触计算机的时候，其实当前互联网并不火爆，计算机学院很多同学是调剂过来的，但到毕业的时候计算机学院的录取分反而成了学校最高的学院。因此，大家选专业、选行业的时候，第一位一定要基于兴趣，没有人能准确预测这个行业未来会怎么样。</p>
<p>准备进入互联网技术岗位的话，需要做好随时学习新技术的准备，<code>PHP</code>、<code>Flash</code> 、<code>.NET</code> 开发，过去也都火爆一时，但现在也逐步走向小众甚至消失，对于前端，从 <code>jQuery</code> ，到 <code>React</code> 、<code>Vue</code>，到现在的小程序，也就十几年，框架却不断更迭。</p>
<p>未来漫漫几十年出现新旧技术的更迭是必然的，我们能做的就是持续学习，不要过于关心外部环境的变化，终会有自己的一席之地。当然最重要还是热爱，不管是工作还是什么，唯有热爱，方能抵御岁月漫长。</p>
<h2 id="技术方向"><a href="#技术方向" class="headerlink" title="技术方向"></a>技术方向</h2><p>从前端的角度来看，可以分为技术前端和业务前端。</p>
<p>技术前端做的事情主要是公司的一些基础设施，比如 CI/CD 流水线、小程序编辑器、项目的编译优化、UI 组件库，做的东西更像是地基，不面向具体业务。公司的各个业务团队都会用到这些基建，有问题的话就去向相应负责人反馈。</p>
<p>换句话讲，技术前端面对的用户更多的是开发者。</p>
<p>业务前端更多的会跟产品经理交流，围绕具体的业务，比如营销活动、直播、发票、内部系统等，产品经理会进行业务数据的分析，然后提出相应的需求，交由业务前端来实现。bug 由测试人员或者开发者自己寻找，或者通过大盘监控异常，最差的情况就是由用户反馈上来。</p>
<p>相应的，业务前端的产品面向的就是普通人。</p>
<p>对于找工作的话，这两个大方向就可以确定一个，面试的时候也可以向面试官询问具体的方向。</p>
<h2 id="业务与技术"><a href="#业务与技术" class="headerlink" title="业务与技术"></a>业务与技术</h2><p>说到业务与技术的关系， @冴羽 <a href="https://mp.weixin.qq.com/s/M9YS_S2uDt3xhYdtDeclkw" target="_blank" rel="noopener">这篇文章</a> 写的非常详细，我就不班门弄斧了。</p>
<p>一句话总结就是除了技术，我们需要有意识的去理解当前业务各项指标，理解各个需求的目的和联系，从技术的角度为产品赋能。</p>
<p>除了日常的需求迭代外，我们还需要寻找平时业务或者开发上的痛点，比如开发效率、日志排查、质量建设等，从技术的角度提出解决方案，最终落地实施。</p>
<p>当然上边说的东西我也还没做到，只能说朝上边的方向努力吧，哈哈。</p>
<h2 id="关于英语"><a href="#关于英语" class="headerlink" title="关于英语"></a>关于英语</h2><p>英语真的是从小学开始接触到现在也一直在学的东西，虽然现在还是很菜，但值得安慰的是心里一直有这个事情。</p>
<p>自己看过真的是很多很多关于英语学习的方法了，女朋友每次看到我看英文学习的英文视频就调侃一次，「你现在看这些视频是不是都能无字幕」，哈哈，确实有那么点，毕竟教英语学习方法的单词就那么些。</p>
<p>多年学习怎么学习英语的方法经验有两点。</p>
<p>第一点就是坚持，英语不像程序一样有实时反馈，注定就是一个慢慢积累的过程，甚至很长时间看不到进步，但还是需要坚持。</p>
<p>第二点就是去用，要把英语当成工具，需要自己构造英文环境。简单的比如逛 quora、Twitter 等一些国外应用，再比如看到生活中的物品去想想英语怎么说，看美剧遮住英文字幕，看中文字幕一句一句去翻译校对等。方法很多，重要的还是第一点。</p>
<p>为什么学英语呢？因为全世界都是在用英语交流，翻译出来的东西和原文一定是有 gap 的，最生动的例子就是古诗翻译成英语，很大程度失去了韵味。从技术来讲，当迈出中文圈的那一步，一定是技术继续向上迈进的必经之步。</p>
<p>把英语当成工具去探索世界，无论是网上探索还是实地探索，不管是技术还是价值观一定都会有新的认识。</p>
<p>对于我的话，未来如果我的博客变成了英文来写，那一定是人生中一个值得纪念的时刻。</p>
<h2 id="关于人生"><a href="#关于人生" class="headerlink" title="关于人生"></a>关于人生</h2><p>当每天重复的两点一线，工作吃饭回家睡觉工作…总会情不自禁的去思考人生的意义是什么。过去一年看了些哲学、心理学方面的东西，人确实是一个神奇的存在，即使是自己也不一定完全了解自己。</p>
<p>三年前秋招的过程中也产生过迷茫，详见 <a href="https://mp.weixin.qq.com/s/o5U4YG101IJXVsgBiMG_xw" target="_blank" rel="noopener">面完腾讯阿里后对人生的思考</a>。当时对于人生意义有了一定的感触，三年过去了当时的观念也没有变化。仔细探讨的话，人生确实没有意义，一切都需要我们自己赋予。我们现在可以感受身边的一切，就已经是最大的幸福了。</p>
<p>至于世俗上的成功，每个人的定义也会不一样，人的欲望是无止境的，成功了一次，又想着下一次成功。我们不妨多听听内心的声音，保持 stay hungry stay foolish ，寻找自己的节奏。</p>
<p>自己太菜了也讲不了太多的东西，这里就推荐几个书吧。「得到」的「刘擎西方现代思想」、「刘玮存在主义哲学20讲」，微信读书的「哲学家们都干了些什么」、「五种时间：重建人生秩序」，「认知觉醒：开启自我改变的原动力」。</p>
<p>心理学方面的：「思考，快与慢」，「稀缺：我们是如何陷入贫穷与忙碌的」。</p>
<h2 id="总"><a href="#总" class="headerlink" title="总"></a>总</h2><p>零零碎碎记录了一下，如果对你有所启发，那就更好了。越努力，越幸运，共勉～</p>
]]></content>
      <categories>
        <category>随想</category>
      </categories>
      <tags>
        <tag>美团</tag>
      </tags>
  </entry>
  <entry>
    <title>大学的科研之路</title>
    <url>/2019/11/13/%E5%A4%A7%E5%AD%A6%E7%9A%84%E7%A7%91%E7%A0%94%E4%B9%8B%E8%B7%AF/</url>
    <content><![CDATA[<p>之前在知乎 <a href="https://www.zhihu.com/question/345429819/answer/825839114" target="_blank" rel="noopener">有一些超级难的算法比如遗传算法，蚁群算法，看了数学建模国赛感觉好难写，那些人怎么写出来的?</a> 的回答。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/zhihuy.jpg" alt=""></p>
<p>原文如下。</p>
<p>想起了大一下学期，和老师一起做遗传算法的日子，经过一年多的努力，最后在老师帮助下还发了一篇会议论文</p>
<blockquote>
<p>L. Wang, W. Gong: Ensemble of different parameter adaptation techniques in differential evolution. BIC-TA (2) 2016: 73-79</p>
</blockquote>
<p>还和老师当时去西安参加了会议，周围都是研究生、博士生，自己一个本科生还是有些自豪的。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/yichuan1.jpg" alt=""></p>
<p>当然现在自己已经研二了，就回忆下当时的过程吧。</p>
<p>认识老师是在一门「计算机导论」的课上，当时老师讲到「大学生，大家要多做东西，可以找院里的老师帮助，老师会和热心的，不要怕自己什么都不会，要敢于尝试，balabala」</p>
<p>然后过了一段时间，自己一直记着这个事。有一天终于鼓起勇气去找了老师，哈哈，就是去找了上课的老师。</p>
<p>因为自己是上大学才接触到编程的，当时选择计算机专业也只是一种感觉，就是感觉自己喜欢计算机，当时也还没上够一学期课，真的是还什么都不会。然后和老师说，自己现在只会一些基础的 C++，别的也不会什么，但是很喜欢编程，想和老师做点东西。</p>
<p>老师说，喜欢就好，我会给你定期布置任务，每周也要向我汇报做了什么。</p>
<p>于是，科研的生活就开始了。</p>
<p>大一的寒假，老师就给我发来一篇论文。</p>
<blockquote>
<p>Storn R , Price K . Differential Evolution – A Simple and Efficient Heuristic for global Optimization over Continuous Spaces[J]. Journal of Global Optimization, 1997, 11(4):341-359.</p>
</blockquote>
<p>当我打开这篇 pdf 的时候，懵逼了。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/yichuan2.jpg" alt=""></p>
<p>天呐，纯英文的，我的四级还没考呢，，，</p>
<p>但也没办法，只能硬着头皮看呗，有道的划词翻译用起来，把不会的单词用 pdf 的注释起来，然后就这样一点点的自己慢慢读，慢慢理解。</p>
<p>大二开始，老师又问自己会不会 Matlab ，那时候当然不会了，然后就又去学，不过网上资料也很多，学的也很快。</p>
<p>再接下来，就是看了一本讲遗传算法的书，还有 Matlab 工具箱。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/yichuan3.jpg" alt=""></p>
<p>然后在书里对遗传算法有了大概的认识，以及可以用别人写好的一些遗传算法的工具箱做一些简单的最优值问题。</p>
<p>接着就又回到了之前的论文</p>
<blockquote>
<p>Storn R , Price K . Differential Evolution – A Simple and Efficient Heuristic for global Optimization over Continuous Spaces[J]. Journal of Global Optimization, 1997, 11(4):341-359.</p>
</blockquote>
<p>我主要做的是差分演化计算，而这篇可以看做是最基础的算法，简称 DE 算法。然后老师让我自己用 C++ 去实现论文中提供的算法。其实就是初始化种群、变异、交叉这几个步骤。然后自己就尝试写了一下，并且算了一些简单的函数的最优值，发现结果还可以，现在都记得当时写出来的开心。</p>
<p>再接下来，就是一篇又一篇的论文。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/yichuan4.jpg" alt=""></p>
<p>jADE，jDE 等等，看完以后老师还是让自己尝试着实现。之后给了我老师自己封装好的一个差分演化计算的框架，扩展性或者鲁棒性都会更强一些，让我自己研究一下怎么用，去跑一些数据。</p>
<p>之后问自己看了论文之后有没有什么想法，自己当时也提不出来什么好的 idea。然后老师就会讲一下他的想法，让我在老师的已有的框架下把它写出来，自己去跑一下公开数据集的数据，然后再用之前的算法跑一下，作对比。又学了一下统计软件 Origin 。</p>
<p>当时记忆深刻呀，因为演化计算会设置一个种群迭代的次数，所以得出一次结果其实还是很慢的。当时为了更快得到结果，用舍友的电脑跑，用云服务器 24 小时的跑，不停的跑啊跑。</p>
<p>反正不停的尝试，然后和老师交流，最后找到了一种可以优化的方案，最后把最终的结果以及分析给老师，老师帮忙完成了论文。</p>
<p>一年多最大的收获就是，基本了解了科研的全过程，其实就是看论文，因为论文一般不提供源代码，然后需要自己用代码实现论文里的思想，然后跑数据，然后优化，然后跑数据，然后优化，当优化成功的时候，就可以做一篇论文了。</p>
<p>以至于对后来自己毕业设计也有很大帮助，当时是写深度学习相关的，上手会很快，当老师给一些英文论文的时候也不再害怕了。</p>
<p>其实编程的话不管什么，做之前都会觉得好难呀，当接触一个新的东西的时候又会觉得好难呀。但每当完成以后，再回过头来看，其实也并不难。然后就这样一次一次的战胜自己，再后来看到新的的东西也就不会害怕了，因为已经深信自己一定可以完成的，就像以前一次又一次的成功。</p>
]]></content>
      <categories>
        <category>计算机</category>
      </categories>
      <tags>
        <tag>科研</tag>
        <tag>遗传算法</tag>
      </tags>
  </entry>
  <entry>
    <title>建立博客系列（一）：域名相关知识</title>
    <url>/2017/01/18/%E5%BB%BA%E7%AB%8B%E5%8D%9A%E5%AE%A2%E7%B3%BB%E5%88%97%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E5%9F%9F%E5%90%8D%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<p>ip，域名，DNS（Domain Name System）域名系统，三者可以理解成如下的关系：</p>
<blockquote>
<p>ip - - - - - - 电话号码<br>域名 - - - - 姓名<br>DNS - - - - 记录电话号码和姓名对应关系的电话簿</p>
</blockquote>
<p>每台联网的计算机都会有一个ip地址，一些计算机（服务器），它提供网页服务，我们想看这个网页，就必须知道它的ip，但网站多了，知乎，豆瓣，百度，我们总不能把所有的ip都记下来，所以出现了DNS,有了域名解析的服务器，查对应关系只需要交给服务器去做，我们只需要记住简单的域名，例如百度的 <a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a> ,石墨的 shimo.im, 但后来有了搜索引擎，似乎域名都不是很关注了，直接在百度搜然后去打开自己想要的网站就可以了，但经常去的网站记一下域名直接输入，会省下很多时间的。下面我们看一下百度的ip，</p>
<ol>
<li>ping <a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a> ,得到它的ip地址为 220.181.112.244<br><img src="/2017/01/18/建立博客系列（一）：域名相关知识/ping.png"></li>
<li>在浏览器输入ip地址<br><img src="/2017/01/18/建立博客系列（一）：域名相关知识/web.png"></li>
</ol>
<p>另外补充几点</p>
<ul>
<li>我们访问一种服务在输入域名的时候其实还得指明端口号，因为一台服务器上可以有各种各样的服务，每一种服务都会有一个端口号，例如一些固定的，网页服务为80，FTP端口为21，因为我们一般是使用网页服务，所以浏览器会帮我们自动加上80端口，输入<a href="http://www.baidu.com,其实相当于输入了" target="_blank" rel="noopener">www.baidu.com,其实相当于输入了</a> <a href="http://www.baidu.com:80" target="_blank" rel="noopener">www.baidu.com:80</a></li>
<li>一般web服务器还会有一个默认加载的页面，我们输了<a href="http://www.baidu.com，其实是web服务器会自动加载了www.baidu.com/index.html，当然也可以是其他的默认名字。" target="_blank" rel="noopener">www.baidu.com，其实是web服务器会自动加载了www.baidu.com/index.html，当然也可以是其他的默认名字。</a></li>
<li>当我们打开某个页面的时候，域名后面的东西其实就是资源所在的路径，例如<a href="https://movie.douban.com/subject/26879060/" target="_blank" rel="noopener">https://movie.douban.com/subject/26879060/</a>,<br>其实是服务器上subject文件夹，26879060文件夹，里的某一个默认加载的页面，可能是index.html，也可能是其他的。<h4 id="域名详细解释"><a href="#域名详细解释" class="headerlink" title="域名详细解释"></a>域名详细解释</h4>我们一般可以购买到一级域名，例如我的是windliang.cc,是不区分大小写的<br>而 <a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a> 是一个二级域名，只要有了一级域名，我们可以随便加二级域名，<br>而www表示World Wide Web(万维网)，表示是网页服务，只要开心也可以用abc.baidu.com，但网页一般用www;<br>其实有了一级域名，我们就可以解析很多二级域名用作不同的用途，blog.windliang.cc, life.windliang.cc ，等等，甚至也可以是三级域名a.blog.windliang.cc,但因为现在域名也不是很贵,其实也没必要解析那么多二级域名，多买一些一级域名就可以了，这样可以使得网址短一些，便于记忆。下面是一些常见的域名后缀。</li>
<li>.com：表示商业机构</li>
<li>.net：表示网络服务机构</li>
<li>.org：表示非营利性组织</li>
<li>.gov：表示政府机构</li>
<li>.edu：表示教育机构</li>
<li>.cn : 中国</li>
</ul>
<p>所以一些诈骗网站我们可以观察他的域名,比如QQ的一级域名是qq.com，QQ有什么中奖信息你发现它的一级域名不是qq.com，那就一定是骗人的了。还有淘宝那些也是。一些不确定的网站，去搜搜它的顶级域名，看看它的官网便知道了。<br>现在我们个人注册的网站通常是.me,.top,.cc,当然看自己喜好了，现在开放注册.cn了，但最好不要用吧，网上是这样讲的。</p>
]]></content>
      <categories>
        <category>建立博客</category>
      </categories>
      <tags>
        <tag>域名</tag>
        <tag>url</tag>
      </tags>
  </entry>
  <entry>
    <title>建立博客系列（二）：git，coding，购买域名相关</title>
    <url>/2017/01/19/%E5%BB%BA%E7%AB%8B%E5%8D%9A%E5%AE%A2%E7%B3%BB%E5%88%97%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9Agit%EF%BC%8Ccoding%EF%BC%8C%E8%B4%AD%E4%B9%B0%E5%9F%9F%E5%90%8D%E7%9B%B8%E5%85%B3/</url>
    <content><![CDATA[<p>此系列教程采用hexo+coding搭建博客，所以首先介绍下git和coding。</p>
<h2 id="git"><a href="#git" class="headerlink" title="git"></a>git</h2><p>搭建博客使用的git知识不多，这里仅介绍我们需要的知识，git的详细知识推荐<br><a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="noopener">廖雪峰老师的git教程</a><br>git多用于版本管理，多人合作，但如果用hexo写博客，git的命令几乎不用。</p>
<h3 id="安装git-这里仅介绍windows的"><a href="#安装git-这里仅介绍windows的" class="headerlink" title="安装git,这里仅介绍windows的"></a>安装git,这里仅介绍windows的</h3><p>首先在  <a href="https://github.com/waylau/git-for-win" target="_blank" rel="noopener">git下载</a> ， 选择最新版的 64-bit Git for Windows Setup ，如果电脑是32位的找到下面的 32-bit Git for Windows Setup，下载即可。<br>安装过程中，安装位置自己选择，还有就是把添加到桌面勾选上<br><img src="/2017/01/19/建立博客系列（二）：git，coding，购买域名相关/gitsetup.png" alt=" "><br>其他一路Next就可以了。</p>
<h3 id="git默认路径调整"><a href="#git默认路径调整" class="headerlink" title="git默认路径调整"></a>git默认路径调整</h3><p>打开git bash,输入命令pwd(Print working directory),显示当前路径，我们可以看到是在C盘里。<br><img src="/2017/01/19/建立博客系列（二）：git，coding，购买域名相关/pwd.png" alt=" "><br>虽然现在硬盘空间很大了，放到C盘也不影响什么，但一些软件增加删除会引起文件碎片化严重，影响C盘文件的读写速度，还有就是为了数据的安全，以免忘记备份，我们现在将它的默认路径改到非系统盘。我以D盘为例讲一下。<br>1.运行命令<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;windliang&quot;</span><br></pre></td></tr></table></figure></p>
<p>  windliang 改成你自己的名字<br>2.再运行命令 git<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global user.email windliang@example.com</span><br></pre></td></tr></table></figure></p>
<p>  <a href="mailto:windliang@example.com" target="_blank" rel="noopener">windliang@example.com</a> 改成你自己的邮箱<br>3.运行命令<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --list</span><br></pre></td></tr></table></figure></p>
<p> 看一下配置是否成功，如下图,红色部分输对即可<br><img src="/2017/01/19/建立博客系列（二）：git，coding，购买域名相关/config.png" alt=" "><br>4.在D盘新建文件夹，取名git<br>5.找到pwd后显示的路径，我的是c:\用户\asus,然后将其目录下的.gitconfig复制到上一步建立的文件夹中<br><img src="/2017/01/19/建立博客系列（二）：git，coding，购买域名相关/gitconfig.png" alt=" "><br>6.配置环境变量，以win7 为例，在我的电脑点击右键，属性，高级系统设置，环境变量，在系统变量里看一下有没有HOME变量，没有的话自己新建一个，并且添加值 D:\git<br><img src="/2017/01/19/建立博客系列（二）：git，coding，购买域名相关/home.png" alt=" "><br>不同系统可能不一样，但只要最后是这样的效果即成功<br><img src="/2017/01/19/建立博客系列（二）：git，coding，购买域名相关/home2.png" alt=" "><br>7.找到桌面的gitbash，右键属性，起始位置改为 %HOME%<br><img src="/2017/01/19/建立博客系列（二）：git，coding，购买域名相关/desk.png" alt=" "><br>8.打开gitbash,运行pwd命令，看一下当前路径，如果为下图，代表着就成功了！<br><img src="/2017/01/19/建立博客系列（二）：git，coding，购买域名相关/success.png" alt=" "></p>
<h2 id="Coding"><a href="#Coding" class="headerlink" title="Coding"></a>Coding</h2><p>Coding可以类比于国外的github，可以理解为一个远程仓库，可以把我们的代码什么的放进去，这里之所以用到它，我们可以把文章放进去，这样的话，就不需要再额外购买服务器了，由于是国内的，访问速度也比github强。</p>
<h3 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h3><p>进入 <a href="https://coding.net" target="_blank" rel="noopener">Coding</a> ，按照提示注册即可。</p>
<h3 id="创建一个项目"><a href="#创建一个项目" class="headerlink" title="创建一个项目"></a>创建一个项目</h3><p>点击添加项目<br><img src="/2017/01/19/建立博客系列（二）：git，coding，购买域名相关/c1.png" alt=" "><br>输入名称blog,其他不用改，点击创建项目即可。<br><img src="/2017/01/19/建立博客系列（二）：git，coding，购买域名相关/c2.png" alt=" "></p>
<h3 id="添加SSH公钥"><a href="#添加SSH公钥" class="headerlink" title="添加SSH公钥"></a>添加SSH公钥</h3><p>我们从Coding克隆一个项目可以用https方式和SSH两种，https每次操作都需要输入Coding的账号和密码，比较繁琐，所以我们采用SSH方式。<br><img src="/2017/01/19/建立博客系列（二）：git，coding，购买域名相关/c3.png" alt=" "><br>1.打开gitbash,输入命令 ssh-keygen -t rsa -C “<a href="mailto:your_email@youremail.com" target="_blank" rel="noopener">your_email@youremail.com</a>“<br>双引号里的邮箱改成你自己的邮箱，然后一路回车，会出现一张萌萌哒图<br><img src="/2017/01/19/建立博客系列（二）：git，coding，购买域名相关/c4.png" alt=" "><br>2.打开D:\git\ssh目录，用文本编辑器打开id_rsa.pub,将里边的内容复制<br><img src="/2017/01/19/建立博客系列（二）：git，coding，购买域名相关/c5.png" alt=" "><br>3.打开Coding,点击账户，SSH公钥，将刚才复制的内容加到公钥内容中，名称自己写。<br><img src="/2017/01/19/建立博客系列（二）：git，coding，购买域名相关/c6.png" alt=" "><br>4.打开gitbash,输入命令 ssh -T <a href="mailto:git@git.coding.net" target="_blank" rel="noopener">git@git.coding.net</a>，中间需要输入yes,然后出现successfully即代表配置成功。<br><img src="/2017/01/19/建立博客系列（二）：git，coding，购买域名相关/c7.png" alt=" "></p>
<h2 id="购买域名"><a href="#购买域名" class="headerlink" title="购买域名"></a>购买域名</h2><p>不购买域名的话，以后访问自己的博客会是这样的链接  wind_liang.coding.me/blog， 好长好长，购买了域名就可以关联成自己购买的例如我的 windliang.cc<br>我知道购买域名的地方有两家，<a href="https://dnspod.qcloud.com/" target="_blank" rel="noopener">腾讯云</a>，<a href="https://wanwang.aliyun.com/domain" target="_blank" rel="noopener">阿里云</a>，我开始买的是腾讯云，但免费的DNS解析比较慢，花钱的DNS又比较贵，而阿里花钱的DNS解析还可以接受，所以域名解析我用的阿里的，所以后边教程也将以阿里云的域名进行讲解。<br>如果大家准备购买的话，点开链接后注册账号即可，然后输入自己想购买的域名，再选择自己能接受的价格购买即可，购买的时候会提示实名认证，按流程进行即可，实名认证通过一般为3到5天。</p>
]]></content>
      <categories>
        <category>建立博客</category>
      </categories>
      <tags>
        <tag>域名</tag>
        <tag>coding</tag>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>建立博客系列（五）：发布第一篇文章</title>
    <url>/2017/01/28/%E5%BB%BA%E7%AB%8B%E5%8D%9A%E5%AE%A2%E7%B3%BB%E5%88%97%EF%BC%88%E4%BA%94%EF%BC%89%EF%BC%9A%E5%8F%91%E5%B8%83%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/</url>
    <content><![CDATA[<h2 id="相关配置"><a href="#相关配置" class="headerlink" title="相关配置"></a>相关配置</h2><p>打开hexo的配置文件，将post_asset_folder设置为true,设置后生成文章的时候会生成一个同名文件夹，供我们放图片。<br><img src="/2017/01/28/建立博客系列（五）：发布第一篇文章/post.png" alt=" "><br><img src="/2017/01/28/建立博客系列（五）：发布第一篇文章/mulu.png" alt=" "><br>打开git bash 进入blog目录，执行下边的命令<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cnpm install https://github.com/CodeFalling/hexo-asset-image --save</span><br></pre></td></tr></table></figure></p>
<p>打开next的配置文件，将摘要打开<br><img src="/2017/01/28/建立博客系列（五）：发布第一篇文章/auto.png" alt=" "></p>
<p>打开source/_posts文件夹，可以把自动生成的Hello World.md删除</p>
<h2 id="MarkDown"><a href="#MarkDown" class="headerlink" title="MarkDown"></a>MarkDown</h2><p>我们写文章是用MarkDown语法写的，它的语法兼容html，这个语言的目的是希望大家使用“易于阅读、易于撰写的纯文字格式，并选择性的转换成有效的 XHTML (或是HTML)”，下边讲一下常用的语法，来自<a href="https://zh.wikipedia.org/wiki/Markdown" target="_blank" rel="noopener">维基百科</a></p>
<h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><p>我们将需要到图片放到\source_posts\文章名，目录中，然后用下边的语法<br>![ ](文章名\图片名）</p>
<p><img src="/2017/01/28/建立博客系列（五）：发布第一篇文章/pic.png" alt=" "></p>
<h3 id="换行"><a href="#换行" class="headerlink" title="换行"></a>换行</h3><p>在文本中输入的换行会从最终生成的结果中删除，浏览器会根据可用空间自动换行。如果想强迫换行，可以在行尾插入至少两个空格。</p>
<h3 id="强调"><a href="#强调" class="headerlink" title="强调"></a>强调</h3><p>用*或者_将要强调的字引起来<br><img src="/2017/01/28/建立博客系列（五）：发布第一篇文章/qiang.png" alt=" "></p>
<h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><p>一个井号加空格是一级标题，依次类推<br><img src="/2017/01/28/建立博客系列（五）：发布第一篇文章/title.png" alt=" "></p>
<h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p>大于号加空格加内容，两个大于号也用于嵌套引用</p>
<blockquote>
<p>这是一个引用。这是第一行<br>这是第二行。</p>
<blockquote>
<p>这是一个嵌套的引用。这是第一行。<br>这是第二行</p>
</blockquote>
<p>外层引用的第三行。前面需要一个视觉上的空行表示内层嵌套的结束，空行前面的(‘&gt;’)可以有可以没有。</p>
</blockquote>
<p><img src="/2017/01/28/建立博客系列（五）：发布第一篇文章/yin.png" alt=" "></p>
<h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p>[我的博客]（<a href="http://windliang.cc）" target="_blank" rel="noopener">http://windliang.cc）</a><br>中括号里写说明，小括号里写地址<br><a href="http://windliang.cc" target="_blank" rel="noopener">我的博客</a></p>
<h3 id="水平分区线"><a href="#水平分区线" class="headerlink" title="水平分区线"></a>水平分区线</h3><p>要生成水平分区线，可以在单独一行里输入3个或以上的短横线、星号或者下划线实现。短横线和星号之间可以输入任意空格。以下每一行都产生一条水平分区线。</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"hello"</span></span><br></pre></td></tr></table></figure>
<p>ESC下边那个键三个点引起来，语言名称可写可不写<br><img src="/2017/01/28/建立博客系列（五）：发布第一篇文章/code.png" alt=" "></p>
<h3 id="空格"><a href="#空格" class="headerlink" title="空格"></a>空格</h3><p>可以用html的 &amp;ensp;  记住分号</p>
<h2 id="编辑器"><a href="#编辑器" class="headerlink" title="编辑器"></a>编辑器</h2><p>有很多在线的markdown编辑器，这里推荐<a href="http://soft.xiaoshujiang.com/download.html" target="_blank" rel="noopener">小书匠</a>，可以本地编辑，而且对MarkDown语法的支持也很好，下了好几个才找到的这个。</p>
<h2 id="开始写作"><a href="#开始写作" class="headerlink" title="开始写作"></a>开始写作</h2><p>打开git bash<br>cd blog<br>hexo new “文章标题”<br>用小书匠打开source/_posts目录下的文章md文件<br>增加categories，冒号后是空格，写自己的分类名字<br>增加tags,冒号回车，然后两个空格，横线，标签名，可添加多个标签<br><img src="/2017/01/28/建立博客系列（五）：发布第一篇文章/tags.png" alt=" "><br>然后在下边用MarkDown的语法写文章即可<br>写完之后ctrl+S 保存<br>然后 hexo g,hexo d，就可以发布到自己的博客了！！！！！</p>
]]></content>
      <categories>
        <category>建立博客</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>建立博客系列（四）：Next主题相关配置</title>
    <url>/2017/01/28/%E5%BB%BA%E7%AB%8B%E5%8D%9A%E5%AE%A2%E7%B3%BB%E5%88%97%EF%BC%88%E5%9B%9B%EF%BC%89%EF%BC%9ANext%E4%B8%BB%E9%A2%98%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h2 id="Hexo的目录结构，-详细介绍"><a href="#Hexo的目录结构，-详细介绍" class="headerlink" title="Hexo的目录结构， 详细介绍"></a>Hexo的目录结构， <a href="https://hexo.io/zh-cn/docs/index.html" target="_blank" rel="noopener">详细介绍</a></h2><blockquote>
<p>.<br>|– _config.yml  &ensp;&ensp;//<strong>hexo的配置文件</strong><br>&ensp;– package.json<br>&ensp;– public&ensp;&ensp;//根据md文件生成html文件<br>&ensp;– source<br>&ensp;&ensp;&ensp;|– _drafts<br>&ensp;&ensp;&ensp;|– _posts  &ensp;&ensp;//写文章的时候md所在目录<br>&ensp;– themes<br>&ensp;&ensp;&ensp;|– landscape<br>&ensp;&ensp;&ensp;|– next<br>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;|– _config.yml&ensp;&ensp;//<strong>主题的配置文件</strong></p>
</blockquote>
<p>配置主题的时候要分清hexo的配置文件和next主题的配置文件,以下均是用Notepad++打开编辑,<strong>所有的操作后记得保存</strong>，<strong>冒号后边有空格</strong></p>
<h2 id="next主题安装配置"><a href="#next主题安装配置" class="headerlink" title="next主题安装配置,"></a>next主题安装配置,</h2><p>next主题在github上的star数已经是6503了，非常受欢迎，<a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="noopener">官网</a>也有详细的配置教程，这里介绍些基本的配置过程。</p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>打开github，cd 到blog目录，执行下边的命令<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure></p>
<p>如果下载速度很慢，可以到百度云下载，链接：<a href="http://pan.baidu.com/s/1hsOacYw" target="_blank" rel="noopener">http://pan.baidu.com/s/1hsOacYw</a> 密码：v2fm，解压后将next文件夹放到themes文件夹中。<br>然后打开hexo的配置文件，将theme: 项改为next,记住之后所有的配置中冒号<strong>后边都先有空格</strong><br><img src="/2017/01/28/建立博客系列（四）：Next主题相关配置/next.png" alt=" "><br>运行hexo g（生成静态文件)，hexo s(运行到本地)<br>打开 localhost:4000 ,观察是否更改成功<br>如果成功，然后执行 hexo d（部署到coding），打开自己的域名，观察是否成功。<br>如果没有变化,<strong>先执行hexo clean（以后如果本地和服务器上的不一致，均先执行这步重试</strong>,再执行 hexo g,hexo d</p>
<h3 id="选择next的风格"><a href="#选择next的风格" class="headerlink" title="选择next的风格"></a>选择next的风格</h3><p>next提供了，三种风格供选择，打开next的配置文件（next文件夹下的_config.yml）<br><img src="/2017/01/28/建立博客系列（四）：Next主题相关配置/style.png" alt=" "><br><em>#是注销本行，自己分别试一下，然后hexo s在本地看效果。</em></p>
<h3 id="菜单设置"><a href="#菜单设置" class="headerlink" title="菜单设置"></a>菜单设置</h3><p>打开主题的配置文件<br><img src="/2017/01/28/建立博客系列（四）：Next主题相关配置/menu.png" alt=" "><br>home是主页，categories是分类，archives是归档，即按时间显示文章，tags是标签，将以上几项的#取消。<br>打开git bash到blog目录，<br>hexo new page categories,<br>hexo new page tags<br>打开blog\source\categories\index.md文件，添加comments: false,即把评论关掉,添加type<br><img src="/2017/01/28/建立博客系列（四）：Next主题相关配置/categories.png" alt=" "><br>打开blog\source\tags\index.md文件，添加comments: false,即把评论关掉，添加type<br><img src="/2017/01/28/建立博客系列（四）：Next主题相关配置/tags.png" alt=" "></p>
<h3 id="404公益界面"><a href="#404公益界面" class="headerlink" title="404公益界面"></a>404公益界面</h3><p>在source 目录新建404.html，将格式改为utf-8无BOM格式，内容如下：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE HTML&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html;charset=utf-8;&quot;/&gt;</span><br><span class="line">  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge,chrome=1&quot; /&gt;</span><br><span class="line">  &lt;meta name=&quot;robots&quot; content=&quot;all&quot; /&gt;</span><br><span class="line">  &lt;meta name=&quot;robots&quot; content=&quot;index,follow&quot;/&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;http://www.qq.com/404/search_children.js&quot;</span><br><span class="line">        charset=&quot;utf-8&quot; homePageUrl=&quot;/&quot;</span><br><span class="line">        homePageName=&quot;回到主页&quot;&gt;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p>
<p>测试是否成功，hexo g,hexo d,将代码部署到服务器，然后访问自己的域名，后边随便写点东西，例如我的 windliang.cc/123121231，然后便可以看到公益界面。</p>
<h3 id="设置头像"><a href="#设置头像" class="headerlink" title="设置头像"></a>设置头像</h3><p>将头像放到 source/images/ 目录下<br>在hexo的配置文件 新增avatar 字段添加路径<br><img src="/2017/01/28/建立博客系列（四）：Next主题相关配置/head.png" alt=" "></p>
<h3 id="百度统计"><a href="#百度统计" class="headerlink" title="百度统计"></a>百度统计</h3><p>进入<a href="http://tongji.baidu.com/" target="_blank" rel="noopener">百度统计</a>,注册百度统计站长版账号，然后添加自己的网站，并点击获取代码<br><img src="/2017/01/28/建立博客系列（四）：Next主题相关配置/b.png" alt=" "><br><img src="/2017/01/28/建立博客系列（四）：Next主题相关配置/baidu.png" alt=" "><br>将问号后边的代码复制<br><img src="/2017/01/28/建立博客系列（四）：Next主题相关配置/bcode.png" alt=" "><br>打开hexo的配置文件, 新增字段 baidu_analytics 字段，值设置成刚刚复制的<br><img src="/2017/01/28/建立博客系列（四）：Next主题相关配置/ana.png" alt=" "></p>
<h3 id="搜索服务"><a href="#搜索服务" class="headerlink" title="搜索服务"></a>搜索服务</h3><p>执行命令<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cnpm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure></p>
<p>在next的配置文件任意位置添加<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  limit: 10000</span><br></pre></td></tr></table></figure></p>
<h3 id="不蒜子统计"><a href="#不蒜子统计" class="headerlink" title="不蒜子统计"></a>不蒜子统计</h3><p>打开Next主题的配置文件，进行相关的设置<br><img src="/2017/01/28/建立博客系列（四）：Next主题相关配置/busuan.png" alt=" "><br>因为不蒜子的文章统计在文章标题不显示次数，所以设置成了false，用了下边的leancloud.如果觉得不重要的话也可以将其直接设置成true,但文章阅读量点开文章后才会看到。</p>
<h3 id="leancloud-阅读次数统计"><a href="#leancloud-阅读次数统计" class="headerlink" title="leancloud 阅读次数统计"></a>leancloud 阅读次数统计</h3><p>详见 <a href="https://notes.wanghao.work/2015-10-21-%E4%B8%BANexT%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E6%96%87%E7%AB%A0%E9%98%85%E8%AF%BB%E9%87%8F%E7%BB%9F%E8%AE%A1%E5%8A%9F%E8%83%BD.html#%E9%85%8D%E7%BD%AELeanCloud" target="_blank" rel="noopener">leancloud</a></p>
<p>这里介绍这么多，更多配置见<a href="http://theme-next.iissnan.com/theme-settings.html" target="_blank" rel="noopener">官网</a><br><img src="/2017/01/28/建立博客系列（四）：Next主题相关配置/guanwang.png" alt=" "></p>
<p>配置过程中hexo g,hexo s进行本地预览<br>(hexo clean),hexo g,hexo d,进行部署到服务器</p>
]]></content>
      <categories>
        <category>建立博客</category>
      </categories>
      <tags>
        <tag>Next主题</tag>
      </tags>
  </entry>
  <entry>
    <title>情人节快乐</title>
    <url>/2020/02/14/%E6%83%85%E4%BA%BA%E8%8A%82%E5%BF%AB%E4%B9%90/</url>
    <content><![CDATA[<p>今天就是情人节了，祝我的小可爱情人节快乐！</p>
<p>之前在知乎里回答过一个问题，<a href="https://www.zhihu.com/question/312092622/answer/597069150" target="_blank" rel="noopener">每到情人节，就属于程序员秀恩爱最独特，2019可以有什么新鲜的秀法吗？</a>  ，把原回答整理到这里吧。</p>
<p>前段时间一个节日，突发奇想，先导出之前 qq 之前所有的聊天记录，然后用 python 词云的库，以女朋友背景生成过词云。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/valentine1.jpg" alt=""></p>
<p>还记得最开始，程序员如果找浪漫的程序，一定会找到下边的这个心，是的，我就是这样，哈哈哈。原版左边是一行一行字，或者一行一行代码，被我去掉了。</p>
<p><a href="http://love.windliang.wang/" target="_blank" rel="noopener">http://love.windliang.wang/</a></p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/valentine2.jpg" alt=""></p>
<p>前年一周年的时候，把自己拍过的照片，利用国外的一个服务，也没写代码，放在了时间轴上，但是得科学上网才能预览。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/year.gif" alt=""></p>
<p>这是官方的教程，<a href="https://timeline.knightlab.com/#make" target="_blank" rel="noopener">https://timeline.knightlab.com/#make</a>，主要是结合谷歌表格，把标题，文字，图片写到表格中，然后会自动帮你生成上边的网站。现在再看一遍第一年的点点滴滴，还是很有意义的。</p>
<p>女朋友有选择困难症，就写了个网页，显示「正」「反」让她用，哈哈哈哈。</p>
<p><a href="http://idea.windliang.cc/" target="_blank" rel="noopener">http://idea.windliang.cc/</a></p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/year2.gif" alt=""></p>
<p>源码放到了 <a href="https://github.com/wind-liang/idea" target="_blank" rel="noopener">github</a> 上。</p>
<p>有段时间因为 <a href="https://www.cryptokitties.co/" target="_blank" rel="noopener">云养猫</a>  CryptoKitties，区块链特别火，当时买了比特币换成以太币准备买猫，这是我买到的猫，哈哈。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/valentine4.jpg" alt=""></p>
<p>然后突发灵感，自己把爱写到了区块链交易上，不可更改， 永久有效。</p>
<p><a href="https://etherscan.io/tx/0x49697081f5711f7cddaeb2e2b8e80c75da8d76c44165729da6f49bc75f247f56" target="_blank" rel="noopener">https://etherscan.io/tx/0x49697081f5711f7cddaeb2e2b8e80c75da8d76c44165729da6f49bc75f247f56</a> </p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/valentine3.jpg" alt=""></p>
<p>还有一些其他小事情，整理表格啦，软件上的问题啦，找电影啦，找图片啦，找电视剧啦，我为程序员代言，程序员这个物种，你值得拥有，哈哈！</p>
]]></content>
      <categories>
        <category>随想</category>
      </categories>
      <tags>
        <tag>随想</tag>
      </tags>
  </entry>
  <entry>
    <title>推荐一些常用的软件</title>
    <url>/2017/07/20/%E6%8E%A8%E8%8D%90%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E7%9A%84%E8%BD%AF%E4%BB%B6/</url>
    <content><![CDATA[<blockquote>
<p>更新时间  2017 年 7 月 20 日</p>
</blockquote>
<p>用电脑也好几年了， =.= ，之前推荐东西也就是有机会零零散散和其他人讲一讲，看到好多人写了推荐软件的文章，自己也总结下，好东西就应该更多的人用嘛。</p>
<h2 id="Enounce-MySpeed"><a href="#Enounce-MySpeed" class="headerlink" title="Enounce MySpeed"></a>Enounce MySpeed</h2><p>只要它是 Flash 视频,对所有网站的视频都可以进行加速播放，简直是追剧神器，尤其是那些教学视频说话比较慢，效果更佳。如果谷歌或者其他浏览器不能用，就打开 ie 试一试。破解版百度网盘自取。<br><img src="/2017/07/20/推荐一些常用的软件/speed.png" alt=" "><br><a href="http://pan.baidu.com/s/1hrPVcDu" target="_blank" rel="noopener">百度网盘</a> 密码：mhsw</p>
<h2 id="净网大师"><a href="#净网大师" class="headerlink" title="净网大师"></a>净网大师</h2><p>开始 win7 直接下载的 PC 端的，后来换了 win10 发现对视频广告不能过滤了 ，然后下了 Chrome 插件版的，发现又有效了。可以过滤各种广告，以及爱奇艺，腾讯视频等的广告。<br><a href="http://www.ad-safe.com/" target="_blank" rel="noopener">官网下载</a><br><a href="https://www.google.co.id/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=2&amp;ved=0ahUKEwiCpdLVspfVAhXG2LwKHUirDA0QFggvMAE&amp;url=https%3A%2F%2Fchrome.google.com%2Fwebstore%2Fdetail%2F%25E5%2587%2580%25E7%25BD%2591%25E5%25A4%25A7%25E5%25B8%2588%25E6%258F%2592%25E4%25BB%25B6%25E7%2589%2588%25E2%2580%2594%25E2%2580%2594%25E6%259C%2580%25E5%25A5%25BD%25E7%2594%25A8%25E7%259A%2584%25E5%25B9%25BF%25E5%2591%258A%25E6%258B%25A6%25E6%2588%25AA%25E7%25A5%259E%25E5%2599%25A8%2Fhlbemiiemimimkoidinfdiabbibgaljl%3Fhl%3Dzh-CN&amp;usg=AFQjCNFSJXY1vEi4HJJIMg3dnUZ3tCepGw" target="_blank" rel="noopener">Chrome 插件</a></p>
<h2 id="Strokelt"><a href="#Strokelt" class="headerlink" title="Strokelt"></a>Strokelt</h2><p>鼠标手势软件，支持自定义的手势。全局支持，不止支持浏览器。长按右键进行画。<br>下面是我经常用的一些手势，箭头表示方向。<br><img src="/2017/07/20/推荐一些常用的软件/str.png" alt=" "><br><a href="http://www.tcbmi.com/strokeit/" target="_blank" rel="noopener">官网下载</a><br><a href="http://pan.baidu.com/s/1slpvmNV" target="_blank" rel="noopener">百度网盘安装包</a> 密码：pdae<br><a href="http://pan.baidu.com/s/1mhROL5m" target="_blank" rel="noopener">百度网盘中文语言包</a> 密码：mjb9</p>
<h2 id="f-lux"><a href="#f-lux" class="headerlink" title="f.lux"></a>f.lux</h2><p>根据时间自动调整屏幕色温，屏幕不会那么刺眼。<br><img src="/2017/07/20/推荐一些常用的软件/flux.png" alt=" "><br><a href="https://justgetflux.com/" target="_blank" rel="noopener">官网下载</a><br><a href="http://pan.baidu.com/s/1hsN34lI" target="_blank" rel="noopener">百度网盘</a> 密码：xjek</p>
<h2 id="Everything"><a href="#Everything" class="headerlink" title="Everything"></a>Everything</h2><p>可以快速找到你遗忘的文件，比 Windows 自带的搜索快无数倍。第一次打开建立索引会慢些。<br><img src="/2017/07/20/推荐一些常用的软件/everything.png" alt=" "><br><a href="https://everything.en.softonic.com/" target="_blank" rel="noopener">官网下载</a><br><a href="http://pan.baidu.com/s/1mh6QeZQ" target="_blank" rel="noopener">百度网盘</a> 密码：366p</p>
<h2 id="undelete-360"><a href="#undelete-360" class="headerlink" title="undelete-360"></a>undelete-360</h2><p>误删的数据恢复，有一次把课程设计误删掉，回收站都没有的那种。然后偶然找到这个软件成功恢复。<br><img src="/2017/07/20/推荐一些常用的软件/360.png" alt=" "><br><a href="http://pan.baidu.com/s/1bp3uVb5" target="_blank" rel="noopener">百度网盘</a> 密码：2xb0</p>
<h2 id="OneTab"><a href="#OneTab" class="headerlink" title="OneTab"></a>OneTab</h2><p>Chrome 的一个插件，当你打开了很多标签页，然而你要睡觉了，点一下   OneTab，第二起来打开 Chrome ，可以选择恢复这些标签页。<br><img src="/2017/07/20/推荐一些常用的软件/one.png" alt=" "><br><a href="https://www.google.co.id/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=1&amp;cad=rja&amp;uact=8&amp;ved=0ahUKEwjwkaS8v5fVAhUEe7wKHWqrAJ8QFggmMAA&amp;url=https%3A%2F%2Fchrome.google.com%2Fwebstore%2Fdetail%2Fonetab%2Fchphlpgkkbolifaimnlloiipkdnihall%3Fhl%3Dzh-CN&amp;usg=AFQjCNH_O_-s3g8rAVdY6y3iMt7jTLmipw" target="_blank" rel="noopener">插件地址</a> </p>
<h2 id="Smallpdf"><a href="#Smallpdf" class="headerlink" title="Smallpdf"></a>Smallpdf</h2><p>一个网站，实现 pdf 的合并，分割等等<br><img src="/2017/07/20/推荐一些常用的软件/pdf.png" alt=" "><br><a href="https://smallpdf.com/cn" target="_blank" rel="noopener">https://smallpdf.com/cn</a></p>
<h2 id="下载电影"><a href="#下载电影" class="headerlink" title="下载电影"></a>下载电影</h2><p>百分之八十的电影资源都能找到，再结合迅雷的变下边播功能，简直完美。<br><a href="http://www.80s.tw/" target="_blank" rel="noopener">http://www.80s.tw/</a></p>
<h2 id="科学上网"><a href="#科学上网" class="headerlink" title="科学上网"></a>科学上网</h2><p>推荐一个购买 Shadowsocks 账号的地址，seeworld ,每月 5 块不限流量，比较划算，速度也可以。自己也可以购买 VPS 自己搭建，但没有高要求不如直接购买。<br><a href="http://shadowsocks.blogspot.co.id/2015/01/shadowsocks.html" target="_blank" rel="noopener">搭建 ss 教程</a><br><a href="http://see-world.club/" target="_blank" rel="noopener">seeworld 购买</a></p>
<h2 id="双拼"><a href="#双拼" class="headerlink" title="双拼"></a>双拼</h2><p>自从知道了双拼，感觉发现了新世界。所谓双拼就是，任意一个汉字只需要两个键便可以打出，好处不言而喻。</p>
<blockquote>
<p>例如打「双拼」两个字，全拼的话需要输入「shuangpin」，而双拼只需要输入「ulpb」</p>
</blockquote>
<p>双拼有很多方案，我使用的是「小鹤双拼」。一般全拼转双拼，每天练习半小时左右，4 到 5 天即可上手。搜狗输入法 PC 端和移动端都可以设置双拼方案，不需要下载其它软件。可以到小鹤双拼官网找找练习的软件。<br><img src="/2017/07/20/推荐一些常用的软件/ulpb.png" alt=" "><br><img src="/2017/07/20/推荐一些常用的软件/sou.png" alt=" "><br><a href="http://www.flypy.com/index.html" target="_blank" rel="noopener">小鹤双拼官网</a></p>
]]></content>
      <categories>
        <category>随想</category>
      </categories>
      <tags>
        <tag>随想</tag>
      </tags>
  </entry>
  <entry>
    <title>机器学习理论系列一：Linear Regression(线性回归)</title>
    <url>/2018/01/01/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%90%86%E8%AE%BA%E7%B3%BB%E5%88%97%E4%B8%80%EF%BC%9ALinear-Regression-%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/</url>
    <content><![CDATA[<blockquote>
<p>Linear  Regression 美 [ˈlɪniər] [rɪˈɡrɛʃən] : 线性回归<br> Loss funcition 美 [lɔs] [ˈfʌŋkʃən] : 损失函数<br>Gradient Descent 美[ˈɡrediənt] [dɪˈsɛnt] : 梯度下降<br>Model 美 [ˈmɑdl] : 模型</p>
</blockquote>
<p>本文是对李宏毅教授课程的笔记加上自己的理解重新组织，如有错误，感谢指出。<br>视频及 PPT 原教程：<a href="https://pan.baidu.com/s/1geFro9H" target="_blank" rel="noopener">https://pan.baidu.com/s/1geFro9H</a> 密码：50sc<br>线性回归中<a href="&quot;https://zh.wikipedia.org/zh-hans/%E7%B7%9A%E6%80%A7%E5%9B%9E%E6%AD%B8&quot;">维基百科</a>的定义如下:</p>
<blockquote>
<p>在统计学中，线性回归（Linear regression）是利用称为线性回归方程的最小平方函数对一个或多个自变量和因变量之间关系进行建模的一种回归分析。 这种函数是一个或多个称为回归系数的模型参数的线性组合。<br><img src="/2018/01/01/机器学习理论系列一：Linear-Regression-线性回归/w.png" alt=" "></p>
</blockquote>
<p>线性回归用途最多的地方就是做预测，根据已知的数据建立一个模型（也就是一个很复杂的函数），然后利用这个模型做预测。先举一个例子，即预测进化后神奇宝贝的 cp 值。</p>
<h2 id="数据收集"><a href="#数据收集" class="headerlink" title="数据收集"></a>数据收集</h2><p>假设我们有一些神奇宝贝的数据，他们有种类 ，cp 值，hp 值，weight ，height 以及进化后的 cp 值。我们选取其中的 10 只做训练。</p>
<p><img src="/2018/01/01/机器学习理论系列一：Linear-Regression-线性回归/baby.jpg" alt=" "></p>
<p><img src="/2018/01/01/机器学习理论系列一：Linear-Regression-线性回归/data.jpg" alt=" "></p>
<h2 id="Model"><a href="#Model" class="headerlink" title="Model"></a>Model</h2><p>下边是线性回归的最一般表示：</p>
<p><img src="/2018/01/01/机器学习理论系列一：Linear-Regression-线性回归/1.jpg" alt=" "><br>这里的 $x_i$ 可以是 cp , weight , height 的值， 而 y 代表进化后的 cp 值，我们需要做的工作是确定 $w_i$ 和 b 的值。而 $x_i$ 的选取会直接影响到模型预测的准确性。</p>
<p>进化后的 cp 和什么因素相关？最直接的和进化前的 cp 一定相关，所以我们先用一个最简单的模型试一下：</p>
<p><img src="/2018/01/01/机器学习理论系列一：Linear-Regression-线性回归/2.jpg" alt=" "><br>即 $x_i$ 只取一个 cp 值，w 和 b 的值可以有无数个，例如</p>
<p><img src="/2018/01/01/机器学习理论系列一：Linear-Regression-线性回归/3.jpg" alt=" "><br>那么，我们应该选哪一个的  w 和 b 的值呢？</p>
<h2 id="Goodness-of-Function"><a href="#Goodness-of-Function" class="headerlink" title="Goodness of Function"></a>Goodness of Function</h2><p>我们定义一个函数，来评估当前的模型好不好，也就是 w 和 b 好不好。我们叫他为  Loss funcition ，他越小代表 w 和 b 越好。如果预测的完全正确，那么他将是 0 。</p>
<p><img src="/2018/01/01/机器学习理论系列一：Linear-Regression-线性回归/6.jpg" alt=" "><br>把 f 代入：</p>
<p><img src="/2018/01/01/机器学习理论系列一：Linear-Regression-线性回归/4.jpg" alt=" "><br>$b + w * x{^n_{cp}}$ 就是 f ,也就是预测的 cp 值<br>y 上边一个三角 ( y 帽）指的是进化后的 cp 值。</p>
<h2 id="Best-Function"><a href="#Best-Function" class="headerlink" title="Best  Function"></a>Best  Function</h2><p>求 $f_1$ 的 w 和 cp 的 对应的 loss 值<br> $$ L = \sum_{i=0}^{10} ( \hat{y} - ( 10.0 + 9.0 · x{^n_{cp}} ) )^2$$<br>先把 w = 9.0 和 b = 10.0 的值带入，然后把已知的数据的 cp 值分别带入函数中，然后把预测出来的 cp 值 和原本的 cp 值 $\hat{y}$ 做个差，再平方一下（消除负数的影响），然后把每一个数据都这样做，然后加起来得到 L 。</p>
<p>同理，求出 $f_1$，$f_2$，$f_3$ …… 的 loss 值，然后把它的分布图画出来。</p>
<p><img src="/2018/01/01/机器学习理论系列一：Linear-Regression-线性回归/5.jpg" alt=" "><br>每一个点都代表一个 f<br>颜色深代表 loss 值大，颜色浅代表 loss 值小<br>最小的 f 是叉号的地方，目测 w 是 2.4 ， b 是 -190。</p>
<p>所以我们得到的模型就是<br>$$f = -190 + 2.4 · x_{cp}$$<br>这样，我们就可以愉快的预测进化后的 cp 值了。</p>
<h2 id="Test-amp-重新设计模型"><a href="#Test-amp-重新设计模型" class="headerlink" title="Test &amp; 重新设计模型"></a>Test &amp; 重新设计模型</h2><p>咦？准确率似乎不是很高。原因很简单，我们的模型太简单了。让我们回到 Model 那个阶段，重新设计 Model 。<br><img src="/2018/01/01/机器学习理论系列一：Linear-Regression-线性回归/1.jpg" alt=" "><br>之前的 Model 我们用了最简单的<br>$$ y = b + w · x_{cp}$$<br>我们不妨，再加个 $x{^2_{cp}}$ ，变成<br>$$ y = b + w_1 · x_{cp} + w_2 ·  x{^2_{cp}}$$<br>不是线性回归吗？怎么出现了 2 次项。<br>仔细观察线性回归 Model 的定义 $y = b + \sum w_ix_i$ ，我们可以把 $ x_{cp}$ 和 $ x{^2_{cp}}$ 整体都当做是 $x_i$ 项，不管平不平方，他们都可以看做常数项，而我们的自变量是 $w_i$ ，它是 1 次的，那我们就是线性的。</p>
<p>同理，我们还可以再加入 3 次项， 4 次项，让 Model 更复杂，然后再进行 Test  查看预测的结果的 loss 值够不够小。</p>
<p>当然，我们还可以把其他的因素加入到模型中。<br><img src="/2018/01/01/机器学习理论系列一：Linear-Regression-线性回归/more.jpg" alt=" "><br>我们可以看到，似乎 HP 的值对进化后的 CP 值是有一定影响的，HP 值越大，进化后的 CP 值也越大。<br>我们继续复杂我们的模型。<br>$$ y = b + w_1 · x_{cp} + w_2 ·  x{^2_{cp}}+ w_3·x_{hp} + w_4·x{^2_{hp}}$$<br>然后我们向上边一样穷举 b , $w_1$, $w_2$ ,  $w_3$ , $w_4$ 的值，观察哪一个 b , $w_1$, $w_2$ ,  $w_3$  ,  $w_4$ 会使得 loss 值最小。</p>
<p>那大概是疯了，上边是两个变量能穷举，这 5 个变量或者更多这一辈子也算不完。<br>所以除了穷举的方法，还有其他的方法去求 b 和 $w_i$ 的值吗？<br>没错，就是 Gradient Descent （梯度下降），不管 w 有多少个都可以轻轻松松求出来，且听下篇文章。</p>
<h2 id="总"><a href="#总" class="headerlink" title="总"></a>总</h2><p>其实，步骤就是对现实就行抽象，找到影响预测的因素，找到一批数据，然后设计一个模型，利用数据对模型训练（求出最佳的 b 和 $w_i$) ，然后进行测试，看结果的准确率是否能接受，然后再进行模型的修改，反反复复直到满意。</p>
<p>不如思考下课程中的例子股票预测，无人驾驶，购物推荐，找一下影响预测的因素是什么，理一理具体的过程。</p>
<p><img src="/2018/01/01/机器学习理论系列一：Linear-Regression-线性回归/l.jpg" alt=" "></p>
]]></content>
      <tags>
        <tag>线性回归</tag>
        <tag>机器学习</tag>
        <tag>梯度下降</tag>
      </tags>
  </entry>
  <entry>
    <title>机器学习理论系列三 : Gradient Descent 优化</title>
    <url>/2018/01/14/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%90%86%E8%AE%BA%E7%B3%BB%E5%88%97%E4%B8%89-Gradient-Descent-%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<blockquote>
<p>tuning  美 [‘tjunɪŋ] : 调整<br>learning rate 美[ˈlɚnɪŋ ret] : 学习速率<br>stochastic 美 [stə’kæstɪk]：随机的<br>batch 美 [bætʃ] : 一批<br>dimension 美 [dɪˈmɛnʃən, daɪ-] : 维度<br>mean 美 [min] : 平均数<br>standard deviation美 [ˈstændəd ˌdiviˈeʃən] : 标准差<br>variance 美 [ˈveriəns] : 方差</p>
</blockquote>
<p>本文是对李宏毅教授课程的笔记加上自己的理解重新组织，如有错误，感谢指出。<br>视频及 PPT 原教程：<a href="https://pan.baidu.com/s/1bSs66a" target="_blank" rel="noopener">https://pan.baidu.com/s/1bSs66a</a> 密码：g8e4<br>上篇详细介绍了梯度下降，这篇讲一下对梯度下降的一些优化。</p>
<h2 id="Tuning-your-learning-rate"><a href="#Tuning-your-learning-rate" class="headerlink" title="Tuning your learning rate"></a>Tuning your learning rate</h2><h3 id="Adagrad"><a href="#Adagrad" class="headerlink" title="Adagrad"></a>Adagrad</h3><p>下边是梯度下降的公式。</p>
<p><img src="/2018/01/14/机器学习理论系列三-Gradient-Descent-优化/1.jpg" alt=""><br>这里的 $\eta$ 是一直固定不变的， 而直观上，我们开始离目标点远，$\eta$ 值应该大一些，随着迭代的进行，我们离目标点越来越近，$\eta$ 值应该变小。所以我们得到了第一次优化的版本：</p>
<p><img src="/2018/01/14/机器学习理论系列三-Gradient-Descent-优化/2.jpg" alt=""><br><img src="/2018/01/14/机器学习理论系列三-Gradient-Descent-优化/3.jpg" alt=""><br>t 代表迭代的次数。</p>
<p>还存在一些问题，就是这里的 $\theta$ 代表一组参数，也就意味着我们对不同的参数使用了同一个  $\eta$ 。而每个参数对 Loss 值影响不一定相同，所以我们如何让不同的参数拥有不同的  $\eta$ 呢？</p>
<p>因为每个参数的偏导值肯定是不一样的，我们不妨在上边优化的基础上再除以关于他们偏导值的东西，除以之前迭代的所有导数的平方的平均数再开根号。下边的 w 代表一个参数，其他参数同理，t 同样代表迭代次数。</p>
<p><img src="/2018/01/14/机器学习理论系列三-Gradient-Descent-优化/6.jpg" alt=""></p>
<p><img src="/2018/01/14/机器学习理论系列三-Gradient-Descent-优化/4.jpg" alt=""></p>
<p>我们把它和上边的优化综合在一起</p>
<p><img src="/2018/01/14/机器学习理论系列三-Gradient-Descent-优化/5.jpg" alt=""></p>
<p>这样我们就得到了 Adagrad 的公式，即 $\eta$ 除以之前迭代的所有导数的平方的平均数再开根号，而迭代次数已经被我们约掉了。</p>
<h3 id="Adagrad-原理"><a href="#Adagrad-原理" class="headerlink" title="Adagrad 原理"></a>Adagrad 原理</h3><p>我们简单的理解一下它的原理。</p>
<p><img src="/2018/01/14/机器学习理论系列三-Gradient-Descent-优化/7.jpg" alt=""><br>我们假设 Loss Function 是 y ，对称轴是 - b / 2a ，初值选取了 $x_0$ ，而此时 Best step 如图所示，也就是  $x_0$ 减去它就到了最小值，让我们和 Adagrad 对比一下。</p>
<p><img src="/2018/01/14/机器学习理论系列三-Gradient-Descent-优化/8.jpg" alt=""><br>是的， Adagrad 的想法就是除以一个可以近似代表二次导数的东西，当然我们也可以直接除以二次导数，但那样对于复杂的函数会增加很多计算量。</p>
<p>除了 Adagrad ，还有很多方法都是针对 $\eta$ 进行优化。</p>
<h2 id="Stochastic-Gradient-Descent-（随机梯度下降）"><a href="#Stochastic-Gradient-Descent-（随机梯度下降）" class="headerlink" title="Stochastic Gradient Descent （随机梯度下降）"></a>Stochastic Gradient Descent （随机梯度下降）</h2><p>我们举一个简单的例子，就是前边文章的预测神奇宝贝进化后的 cp 值，假如 Loss Function 是下边的<br> $$ L = \sum_{n=0}^{10} ( \hat{y}^n - ( b+ w · x{^n_{cp}} ) )^2$$<br>我们总共有 10 组已知的数据，$x^n$ 代表第 n 只神奇宝贝进化前的 cp 值，$\hat{y}^n$ 代表第 n 只神奇宝贝进化后的 cp 值。我们计算 Loss 的时候把所有的数据全部用到了。</p>
<p>我们如果计算 Loss 的时候不用全部的数据会怎么样呢？也就是我们每次只随机或者顺序选一只神奇宝贝，即 Loss Function 如下：<br> $$ L = \hat{y} - ( b+ w · x{_{cp}} ) ^2$$<br>这样我们根据其中一个数据直接算 Loss Function 的偏导，利用梯度下降进行更新参数就叫做 Stochastic Gradient Descent 。这样做的好处是可以更快的收敛，它的效果图可能如下：<br> <img src="/2018/01/14/机器学习理论系列三-Gradient-Descent-优化/9.jpg" alt=""><br>10 组数据左边的图只更新了一次，而右边的图就更新了 10 次。</p>
<p>同理如果我们每次同样不选全部数据，而是选择部分数据，例如每次全部数据的十分之一，这样再进行梯度下降，就又是一个新的优化方法，叫做 mini-batch gradient decent ， 小批的梯度下降。batch_size 就代表每次选择多少数据。这种方法用的最多。</p>
<p>而我们一开始使用全部数据的更新方式叫什么呢？Batch gradient descent ，批梯度下降。这种方法每更新一次参数都要把数据集里的所有样本都看一遍，计算量开销大，计算速度慢，不常用。</p>
<h2 id="Feature-Scaling"><a href="#Feature-Scaling" class="headerlink" title="Feature Scaling"></a>Feature Scaling</h2><p>简单的讲，就是把所有参数的取值范围统一到一个范围，如下图。</p>
<p> <img src="/2018/01/14/机器学习理论系列三-Gradient-Descent-优化/10.jpg" alt=""></p>
<p>为什么这样做呢？我们把上边的 y 函数用另一种图示表示。<br> <img src="/2018/01/14/机器学习理论系列三-Gradient-Descent-优化/12.jpg" alt=""><br>$x_1$ 的取值是 1，2…… ， $x_2$ 的取值是 100，200 ……<br>y 代表 Loss Function ,我们往 $w_2$ 的方向看，等高线比较窄，说明 $w_2$ 的变化对 L 的影响大。而看横轴  $w_1$ 的方向比较稀疏，说明  $w_1$ 对 L 的影响小。这显然是不合理的，每个参数对 L 的影响应该同等才可以，我们应该达到下边的效果：</p>
<p> <img src="/2018/01/14/机器学习理论系列三-Gradient-Descent-优化/13.jpg" alt=""><br>这样做的好处很明显，每次参数的更新会直接朝向目标值，而不会向之前每次更新的方向都不同。</p>
<p>那么具体怎么操作呢？</p>
<p> <img src="/2018/01/14/机器学习理论系列三-Gradient-Descent-优化/14.jpg" alt=""><br> 把样本每一维度的参数减去平均值 $m_i$ 除以标准差 $\sigma_i$ 即可。<br> 最后会使得每一维度参数的取值的平均值为 0 ，方差为 1 。</p>
<script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML">
</script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({tex2jax: {inlineMath: [['$','$'], ['\\(','\\)']]}});
</script>]]></content>
      <tags>
        <tag>机器学习</tag>
        <tag>梯度下降</tag>
        <tag>梯度下降优化</tag>
      </tags>
  </entry>
  <entry>
    <title>机器学习理论系列二 : Gradient Descent(梯度下降)</title>
    <url>/2018/01/02/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%90%86%E8%AE%BA%E7%B3%BB%E5%88%97%E4%BA%8C-Gradient-Descent-%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D/</url>
    <content><![CDATA[<blockquote>
<p>Gradient Descent 美[ˈɡrediənt] [dɪˈsɛnt] : 梯度下降<br>Loss funcition 美 [lɔs] [ˈfʌŋkʃən] : 损失函数<br>Local Minima 美 [ˈloʊkl] [‘mɪnɪmə] : 局部最小值<br>Taylor series 美[ˈtelɚ] [ˈsɪriz] : 泰勒级数</p>
</blockquote>
<p>本文是对李宏毅教授课程的笔记加上自己的理解重新组织，如有错误，感谢指出。<br>视频及 PPT 原教程：<a href="https://pan.baidu.com/s/1bSs66a" target="_blank" rel="noopener">https://pan.baidu.com/s/1bSs66a</a> 密码：g8e4</p>
<p>上篇线性回归讲到， $ L = \sum_{n=0}^{10} ( \hat{y}^n - ( b+ w · x{^n_{cp}} ) )^2$ 这个模型中，我们穷举了 w 和 b 的值，然后找到了使得 L 最小的 w 和 b 的值，但对于参数较多的模型，穷举法显然是不合适的，这里我们将用到 Gradient Descent，而 Gradient Descent 这个方法不仅适用于线性回归，其他任何复杂的模型也都适用，就连深度学习也用的 Gradient Descent 。</p>
<p>我们人类只能想象出最高三维空间的场景，所以我们先在二维、三维空间形象的理解下 Gradient Descent ，然后直接把结论推广到高维下，这里不做详细的理论证明。</p>
<h2 id="一维变量"><a href="#一维变量" class="headerlink" title="一维变量"></a>一维变量</h2><p>一维变量下，变量只能在一条直线上移动，向左或向右。</p>
<p>假设 Loss funcition 是有一个参数 w 的函数，例如<br>$$L = sin(w) + w^4 + w + log(w)+x_i$$<br>$x_i$是要输入的数据特征，例如上篇的 cp 值，可以看做常量。<br>而它的图像假如是</p>
<p><img src="/2018/01/02/机器学习理论系列二-Gradient-Descent-梯度下降/1.jpg" alt=" "><br>从图像上可以看到我们要找的使得 Loss 值最小的就是 $w^{min}$</p>
<p>我们如果开始选取的是  $w^0$ ，那么我们需要给 $w^0$ <strong>加上</strong>一个值可以得到 $w^{min}$ 。</p>
<p>我们如果开始选取的是  $w^1$ ，那么我们需要给 $w^1$ <strong>减去</strong>一个值可以得到 $w^{min}$ 。</p>
<p>至于是加上还是减去，我们可以观察到，当 w 的斜率为负的时候就加，斜率为正的时候就减。斜率等于 0 的时候就代表是一个最小值点了。</p>
<p>所以我们可以先把 w 随便取一个值 $w^0$ ，然后求出该点的斜率，也就是 $w^0$ 的导数值 $\frac{dL}{dw}|_{w=w^0}$  ，然后用 $w^0$ 减去这个导数值乘以一个 $\eta$ ，叫做 learning rate ,就是控制它从 $w^0$ 走到 $w^{min}$ 的速度。为什么是减去呢，因为斜率的符号和要加还是要减刚好是反着的。就是下边的数学表达式</p>
<p><img src="/2018/01/02/机器学习理论系列二-Gradient-Descent-梯度下降/2.jpg" alt=" "></p>
<p>根据 $w_0$ 得到 $w_1$ ,再根据 $w_1$ 得到 $w_2$，一直迭代，直到使得 Loss 值最小，当然从图上就可以看到我们可能会到达一个 Local minima ，也就是局部最小，后边再讲这个问题。而线性回归不需要考虑这个问题，因为它如果有极小值，那么这个极小值一定是最小值。</p>
<h2 id="二维变量"><a href="#二维变量" class="headerlink" title="二维变量"></a>二维变量</h2><p>二维变量下，变量则可以在整个平面上移动。</p>
<p>我们再看一下 Loss function 有两个变量的情况，例如<br>$$L = \theta_1 · x_1 + \theta_2 · x_2$$<br>假如它的分布图如下，利用等高线画出来的，可以想象成盆地的等高线，颜色浅代表是底部：</p>
<p><img src="/2018/01/02/机器学习理论系列二-Gradient-Descent-梯度下降/3.jpg" alt=" "></p>
<h3 id="Taylor-series"><a href="#Taylor-series" class="headerlink" title="Taylor series"></a>Taylor series</h3><blockquote>
<p>在数学中，泰勒级数（英语：Taylor series）用无限项连加式——级数来表示一个函数，这些相加的项由函数在某一点的导数求得。泰勒级数是以于1715年发表了泰勒公式的英国数学家布鲁克·泰勒（Sir Brook Taylor）来命名的。通过函数在自变量零点的导数求得的泰勒级数又叫做麦克劳林级数，以苏格兰数学家科林·麦克劳林的名字命名。 –维基百科<br><img src="/2018/01/02/机器学习理论系列二-Gradient-Descent-梯度下降/w.jpg" alt=" "></p>
</blockquote>
<p><img src="/2018/01/02/机器学习理论系列二-Gradient-Descent-梯度下降/4.jpg" alt=" "><br>只要 x 足够接近 $x_0$ ，我们可以近似的取到 h 的一阶导数，后边将用到这个公式。</p>
<h3 id="Multivariable-Taylor-Series"><a href="#Multivariable-Taylor-Series" class="headerlink" title="Multivariable Taylor Series"></a>Multivariable Taylor Series</h3><p>同理，可以推广到多元的泰勒展开。<br><img src="/2018/01/02/机器学习理论系列二-Gradient-Descent-梯度下降/5.jpg" alt=" "><br>分别对自变量求偏导即可。</p>
<h3 id="推导"><a href="#推导" class="headerlink" title="推导"></a>推导</h3><p><img src="/2018/01/02/机器学习理论系列二-Gradient-Descent-梯度下降/6.jpg" alt=" "><br>假设开始我们初始化 $ \theta_1 = a$ , $ \theta_2 = b$ ,然后以 d 为半径画一个很小很小的圆，以便满足泰勒级数中的那个约等于的式子（图上圆看着大，我们假设它很小）。然后我们在这个圆里寻找使得 Loss 值最小的 $\theta_1$ 和 $\theta_2$ 。得到新的$\theta_1$ 和 $\theta_2$ ，继续重复画一个圆，找使得圆内 Loss 值最小的 $\theta_1$ 和 $\theta_2$ ，然后一直迭代下去，慢慢的我们就会得到使得 loss 值全局最小的  $\theta_1$ 和 $\theta_2$ 了。<br>那么，怎么根据已知的点，找到下一个点呢？下边进行一下推导<br>将 L 利用泰勒级数转换。</p>
<p><img src="/2018/01/02/机器学习理论系列二-Gradient-Descent-梯度下降/7.jpg" alt=" "><br>将问题利用转换为几何问题</p>
<p><img src="/2018/01/02/机器学习理论系列二-Gradient-Descent-梯度下降/8.jpg" alt=" "></p>
<p>我们把  L 看做是两个向量的点积，(u,v) 向量是一个固定的向量 ，我们把它的起点移动到圆心 的位置。而 $(\Delta\theta_1 , \Delta\theta_2) $ 向量是任意方向的，长度小于 d 的向量，为了方便计算，我们把它的起点也移动到圆心的位置。</p>
<p><img src="/2018/01/02/机器学习理论系列二-Gradient-Descent-梯度下降/9.jpg" alt=" "><br>我们知道两个向量点积的公式</p>
<p><img src="/2018/01/02/机器学习理论系列二-Gradient-Descent-梯度下降/dian.jpg" alt=" "></p>
<p>所以我们取 $(\Delta\theta_1 , \Delta\theta_2) $ 向量为 &amp;(u,v)&amp;向量的反向，构成 180° ，使得 $cos\theta$ 等于 -1 ，然后使得它的模最大，也就是 d (乘上 $\eta$ 即可），此时 L 由于是他俩的点积，所以 L 达到最小。即</p>
<p><img src="/2018/01/02/机器学习理论系列二-Gradient-Descent-梯度下降/10.jpg" alt=" "></p>
<p>然后我们再把 u 和 v 带回去</p>
<p><img src="/2018/01/02/机器学习理论系列二-Gradient-Descent-梯度下降/11.jpg" alt=" "></p>
<p>！！！ 和一维变量一样，就是初始值，减去 $\eta$ 乘以他们的导数，但这里当然是偏导了。这样再回到开头，我们就先随便找一个初始值 (a , b)，利用这个公式然后一直迭代下去就可以了。</p>
<h2 id="总"><a href="#总" class="headerlink" title="总"></a>总</h2><p>我们把两种情况统一下</p>
<p>也就是找一组参数 $\theta^*$ ，然后使得 Loss function L 取得最小值，即用数学表达式为</p>
<p><img src="/2018/01/02/机器学习理论系列二-Gradient-Descent-梯度下降/12.jpg" alt=" "></p>
<p>我们假设 $\theta$ 有两个参数 ${\theta_1 , \theta_2}$<br>初始化 $\theta_0$</p>
<p><img src="/2018/01/02/机器学习理论系列二-Gradient-Descent-梯度下降/13.jpg" alt=" "></p>
<p>进行迭代</p>
<p><img src="/2018/01/02/机器学习理论系列二-Gradient-Descent-梯度下降/14.jpg" alt=" "></p>
<p>数学里那个大的中括号可以表示为倒三角，即梯度。我们进一步简化表示。</p>
<p><img src="/2018/01/02/机器学习理论系列二-Gradient-Descent-梯度下降/15.jpg" alt=" "></p>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>回到我们开始的问题，直接应用上边的结论。<br> $$ L = \sum_{n=0}^{10} ( \hat{y}^n - ( b+ w · x{^n_{cp}} ) )^2$$</p>
<p> 让我们把他们的偏导分别求一下</p>
<p> <img src="/2018/01/02/机器学习理论系列二-Gradient-Descent-梯度下降/dao.jpg" alt=" "></p>
<p> 有了偏导的公式，我们只需要把 w 和 b 取一个初值，然后利用所有的数据和梯度下降，一直迭代下去就可以了。迭代次数、Loss 值、偏导值都可以作为结束条件。</p>
<p> 至此，一大难题已经被我们解决了！！！！！！！！！！！</p>
]]></content>
      <tags>
        <tag>机器学习</tag>
        <tag>梯度下降</tag>
      </tags>
  </entry>
  <entry>
    <title>极客时间优惠红包返现</title>
    <url>/2020/05/31/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4%E4%BC%98%E6%83%A0%E7%BA%A2%E5%8C%85%E8%BF%94%E7%8E%B0/</url>
    <content><![CDATA[<h1 id="缘起"><a href="#缘起" class="headerlink" title="缘起"></a>缘起</h1><p>极客时间目前主要是互联网方面的一些课，自己一直在用，下边是自己目前买过的一些课。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/geek1.jpg" alt=""></p>
<p>说一下自己的感受吧。</p>
<p>「技术与商业案例解读」每天会在路上听一听，了解了很多商业公司的历史，国外的微软、苹果、亚马逊等，国内的 BAT，还有很多不是很出名的公司，看着企业浮浮沉沉，很开阔眼界。</p>
<p>自己第一门买的课是目前极客时间销量最高的课，王争大佬的「数据结构与算法之美」，自己刚上研究生时候买的，有一说一，绝对是超值的，自己也一直给身边的人安利。下边是两年前的朋友圈，哈哈。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/geek2.jpg" alt=""></p>
<p>因为本科的时候也学过一些数据结构和算法，所以这门课更多的起了查漏补缺的作用，但很多知识点都是自己没有接触过的，还有一些工业上的应用，可以更加明白数据结构的作用，对自己去年找工作面试的帮助很大，能让自己的知识点更加成体系。</p>
<p>然后就是 <a href="https://www.zhihu.com/people/ec03b8e839a6fb763e1b8113455362db" target="_blank" rel="noopener">@winter</a> 大神的「重学前端」 的课程，因为我找的是前端岗的工作，看完以后对前端整体有了更深的理解。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/geek3.jpg" alt=""></p>
<p>上边的图印象深刻，整个课程学完以后对自己未来学习的方向也更加明确了。</p>
<p>还有刘超老师的「网络协议」和「<code>linux</code> 系统」的课，自己是因为研究生期间做的项目设计到这些，就毫不犹豫的从极客时间买了课，自己主要对 <code>linux</code> 网络协议栈那块感兴趣，所以课程只看了一部分，但帮助真的很大很大，对于刚刚入门不知从何入手的时候，可以更好的指引自己。</p>
<p>前段时间来美团提前实习，项目设计到 <code>vue</code>，自己把极客时间上 <code>vue</code> 的课和 <code>webpack</code> 的课的基础部分看了之后，然后公司的项目很快就上手了。当然这些课只是很快的带你入门，让你能很快的开始做项目， <code>vue</code> 或者 <code>webpack</code> 原理的部分还需要花更多的时间去学。</p>
<p>最近自己又买了陈皓老师的「左耳听风」专栏，这是买的课里最贵的了，但只能说相见恨晚，专栏里分享很多陈浩老师多年程序员的经验，不管是编程范式、还是程序员练级等等一些部分，都大大的扩宽了自己的认识。</p>
<h1 id="优惠"><a href="#优惠" class="headerlink" title="优惠"></a>优惠</h1><p>机缘巧合下自己就做了公众号「课程减减」，买课可以帮大家省一些钱。课程大部分会返现 20、24 元，我收到的返现会全部还给大家。</p>
<p>如果是学生的话，可以在「极客时间」 APP 认证学生，之后所有课程都可以半价买，并且上边的优惠依旧有效。</p>
<p>如果实际支付价格（使用了券或者赠币后的价格）少于返现的红包价格，就没有返现红包。</p>
<p>在「极客时间」选好课后，在下边的公众号进行搜索买课。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/geektimemp.png" alt=""></p>
<p>前段时间写了一个网站，包含了极客时间的所有课，可以直接在 <a href="https://coursesub.top/" target="_blank" rel="noopener">https://coursesub.top/</a> 购买，购买后添加 <a href="https://mp.weixin.qq.com/s/Q5aivih0qqEpag7oRkLrXw" target="_blank" rel="noopener">这里文章最后</a> 的微信要红包即可。</p>
<h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>现在知识付费比较火，很多人都调侃说是被割韭菜，但我觉得极客时间上的课真真切切的帮助到了自己很多，虽然网上也很多免费的文章，但是极客时间的话都是一些大佬们多年的经验总结出来的课程，会更加有体系，深度也会更强一些，虽然花了些钱，但其实隐形中帮自己省下了很多时间。</p>
<p>当然，买课和买书一样，不能是光屯着，买完一定是得看，不然真的就变成绿油油的韭菜了，给人家白白送钱。如果认认真真的把买的课程都看完、学懂，我相信一定不会后悔买这个课的。</p>
<p>最后，一起加油吧，越努力，越幸运，共勉。</p>
]]></content>
      <categories>
        <category>随想</category>
      </categories>
      <tags>
        <tag>极客时间</tag>
        <tag>优惠</tag>
      </tags>
  </entry>
  <entry>
    <title>机器学习理论系列四 : Generative Model</title>
    <url>/2018/01/18/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%90%86%E8%AE%BA%E7%B3%BB%E5%88%97%E5%9B%9B-Probabilistic-Generative-Model/</url>
    <content><![CDATA[<blockquote>
<p>Generative 美 [ˈdʒɛnərətɪv, -əˌre-] : 能生产的，有生产力的； 生殖的；<br>Model 美 [ˈmɑdl] : 模型<br>likelihood  [ˈlaɪkliˌhʊd] : 似然函数<br>Maximum  美 [ˈmæksəməm] : 最大值<br>features 美 [‘fitʃəz] : 特征<br>vector 美[ˈvɛktɚ] : 向量<br>matrices 美 [ˈmetrɪˌsiz, ˈmætrɪ-] :矩阵</p>
</blockquote>
<p>本文是对李宏毅教授课程的笔记加上自己的理解重新组织，如有错误，感谢指出。<br>视频及 PPT 原教程：<a href="https://pan.baidu.com/s/1raoObGo" target="_blank" rel="noopener">https://pan.baidu.com/s/1raoObGo</a> 密码：31cw</p>
<p>前边我们讲的线性回归模型主要做预测，而这里的 Generative Model 则主要用于分类问题。</p>
<h2 id="问题提出"><a href="#问题提出" class="headerlink" title="问题提出"></a>问题提出</h2><p>同样我们以神奇宝贝为例，进行分类。</p>
<p><img src="/2018/01/18/机器学习理论系列四-Probabilistic-Generative-Model/baby.jpg" alt=" "><br>假如我们有以下的数据</p>
<p><img src="/2018/01/18/机器学习理论系列四-Probabilistic-Generative-Model/1.jpg" alt=" "><br>假如我们有 79 只 Water , 61 只 Normal 。<br>为了问题的简单化，我们假设神奇宝贝的 attack_strong_type 只有两类，一种是 Normal，一种是 Water。我们先选取它的两组属性 Defense 和 SP Defence（图中未显示） 来预测它是属于 Normal 还是 Water。也就是说每一个个体可以由一个向量表示：</p>
<p><img src="/2018/01/18/机器学习理论系列四-Probabilistic-Generative-Model/2.jpg" alt=" "><br>我们需要找到一个 f ，把 <strong>x</strong> 输入即可输出 <strong>x</strong> 属于哪一类，Class1 ( Water) 还是 Class2 ( Normal )</p>
<h2 id="Model"><a href="#Model" class="headerlink" title="Model"></a>Model</h2><p><img src="/2018/01/18/机器学习理论系列四-Probabilistic-Generative-Model/3.jpg" alt=" "><br>P(C1) 代表属于 Class1 的个体占整个样本比例。<br>P(C1 | x) 代表 x 属于 Class1 的概率。</p>
<p>这个公式其实是贝叶斯公式和全概率公式的结合，具体讲解可以看<a href="http://www.ruanyifeng.com/blog/2011/08/bayesian_inference_part_one.html" target="_blank" rel="noopener">阮一峰老师</a>的推导，非常通俗易懂。</p>
<p>为什么大于 0.5 就是 Class1？否则就是 Class 2。<br>因为这个问题是二元分类，如果 P(C1 | x) 大于 0.5  那么  P(C1 | x) 一定大于 P(C2 | x) ，所以我们判断当前 x 属于 Class1。反之同理。</p>
<p>如果是多元分类该怎么办？<br>把 P(C1 | x)、P(C2 | x)、P(C3 | x)、P(C4 | x)……每个概率都算出来，哪个大就说明它属于哪一类。</p>
<p>观察到公式 P(C1) 和 P(C2) 非常好算，无非是用属于 Class1（Water） 的个体数量处除以总数就是 P(C1)，用属于 Class2（Normal） 的个体数量处除以总数就是 P(C2)。如下图：</p>
<p><img src="/2018/01/18/机器学习理论系列四-Probabilistic-Generative-Model/4.jpg" alt=" "><br>真正的问题是 P( x | C1)怎么进行计算？也就是 P(SP Defense, Defense | C1 ) 怎么计算？</p>
<p>第一种解决方案就是假设 SP Defense 和 Defense 是独立的，然后 P (SP Defense , Defense | C1) = P(SP Defense | C1) · P(Defense | C1) ，利用这个公式和所有数据我们就可以把每个数值都算出来了。这就是朴素贝叶斯分类器，具体还是看<a href="http://www.ruanyifeng.com/blog/2013/12/naive_bayes_classifier.html" target="_blank" rel="noopener">阮一峰大神的博客</a>。</p>
<p>第二种解决方案我们就假设每一类都是一个高斯分布（正态分布）。什么意思呢？</p>
<p>我们先从一维的高斯分布理解。</p>
<p><img src="/2018/01/18/机器学习理论系列四-Probabilistic-Generative-Model/6.jpg" alt=" "><br>假设某正态分布的概率密度分布图如下：</p>
<p><img src="/2018/01/18/机器学习理论系列四-Probabilistic-Generative-Model/5.jpg" alt=" "><br>那么变量等于 0 的概率密度是 0.4 ，那它的概率是多少呢？理论上某个点的概率应该是 0 ，但我们可以求 (0 , 0 + △x) 的概率，那么 (0 , 0 + △x) 的概率可以近似于红色矩形的面积，所以 (0. , 0. + △x) 的概率就是 0.4△x。假如 △x 很小，那么我们就可以近似的把 0 处的概率当做 0.4△x 。</p>
<p>同理，我们再看二维的高斯分布。</p>
<p><img src="/2018/01/18/机器学习理论系列四-Probabilistic-Generative-Model/7.jpg" alt=" "></p>
<p>它有三个参数。<br>如果 x 是 n 维向量，那么D = n ( 相当于常量 )， $\mu$ 是 n 维向量， $\Sigma$ 是 n × n 矩阵。</p>
<p>我们看一下 x 是二维的它的概率密度分布图。</p>
<p><img src="/2018/01/18/机器学习理论系列四-Probabilistic-Generative-Model/8.jpg" alt=" "></p>
<p>而如果求某一点 x 的概率，则可以类似于一维高斯下，近似表示为<br>$$f_{\mu,\Sigma}(x) \cdot (\Delta  x)^2 $$ </p>
<p>所以我们的模型就变成了</p>
<p><img src="/2018/01/18/机器学习理论系列四-Probabilistic-Generative-Model/9.jpg" alt=" "><br>然后我们可以把 $(\Delta x) ^2$ 约掉，就变成了</p>
<p><img src="/2018/01/18/机器学习理论系列四-Probabilistic-Generative-Model/10.jpg" alt=" "></p>
<p>所以我们的问题变成了如何选取一个好的 $\mu ^1 , \Sigma ^1 ， \mu ^2 , \Sigma ^2$ 。</p>
<h2 id="Goodness-of-Function"><a href="#Goodness-of-Function" class="headerlink" title="Goodness of Function"></a>Goodness of Function</h2><p>这一步我们来求解最好的  $\mu ^1 , \Sigma ^1 ， \mu ^2 , \Sigma ^2$ 。<br>我们先分析 Water 类的，即求 $\mu ^1 , \Sigma ^1$。我们把每个样本画到图中。</p>
<p><img src="/2018/01/18/机器学习理论系列四-Probabilistic-Generative-Model/11.jpg" alt=" "><br>我们可以看到 $\Sigma , \mu$ 取不同的值，假如一个圆圈代表一个高斯分布，每个点的概率将会不同，而我们的目的是让所有点的尽量符合当前模型。此时，我们可以用一个 likelihood ( 似然函数 ) 来衡量。</p>
<p><img src="/2018/01/18/机器学习理论系列四-Probabilistic-Generative-Model/12.jpg" alt=" "><br>我们的目的就是找一个 $\Sigma , \mu$ ,使得  likelihood 达到最大，也就是最大似然估计。即</p>
<p><img src="/2018/01/18/机器学习理论系列四-Probabilistic-Generative-Model/13.jpg" alt=" "></p>
<h2 id="Best-Function"><a href="#Best-Function" class="headerlink" title="Best  Function"></a>Best  Function</h2><p>根据统计学的知识，我们可以直接求出 $\mu$ 和 $\Sigma$。</p>
<p><img src="/2018/01/18/机器学习理论系列四-Probabilistic-Generative-Model/14.jpg" alt=" "><br>利用公式</p>
<p><img src="/2018/01/18/机器学习理论系列四-Probabilistic-Generative-Model/15.jpg" alt=" "></p>
<p>我们最终得到的模型就是</p>
<p><img src="/2018/01/18/机器学习理论系列四-Probabilistic-Generative-Model/16.jpg" alt=" "><br>这样我们就可以愉快的做分类了。</p>
<h2 id="Test-amp-重新设计模型"><a href="#Test-amp-重新设计模型" class="headerlink" title="Test &amp; 重新设计模型"></a>Test &amp; 重新设计模型</h2><p>经测试，我们的正确率只有 47% 。</p>
<p>难道是我们的维数太低，我们只选取了 SP Defense , Defense 两个 features，如果我们选  hp , att , sp att , de , sp de , speed 6 个 features 呢？此时</p>
<p><img src="/2018/01/18/机器学习理论系列四-Probabilistic-Generative-Model/17.jpg" alt=" "><br>然而准确率依旧没有怎么提高，变为了 64% 。</p>
<p>我们针对高斯再进行一下优化。</p>
<p>之前我们有四个参数，$\mu ^1 , \Sigma ^1 ， \mu ^2 , \Sigma ^2$ ，我们可不可以把 $\Sigma ^1 , \Sigma ^2  $变为一个，变为 $\mu ^1 , \Sigma  ， \mu ^2 $ 三个参数，简化我们的模型。</p>
<p><img src="/2018/01/18/机器学习理论系列四-Probabilistic-Generative-Model/18.jpg" alt=" "><br>我们计算的公式将变成</p>
<p><img src="/2018/01/18/机器学习理论系列四-Probabilistic-Generative-Model/19.jpg" alt=" "><br>然后我们的模型变成了</p>
<p><img src="/2018/01/18/机器学习理论系列四-Probabilistic-Generative-Model/20.jpg" alt=" "><br>此时，我们的正确率变为了 74% ，有了很大的提高！</p>
<h2 id="总"><a href="#总" class="headerlink" title="总"></a>总</h2><p>类比于线性回归，我们依旧是先提出模型，然后提出计算参数的公式，最后对数据进行测试，继续完善我们的模型。</p>
<script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML">
</script>
<script type="text/x-mathjax-config">
MathJax.Hub.Config({tex2jax: {inlineMath: [['$','$'], ['\\(','\\)']]}});
</script>
]]></content>
      <tags>
        <tag>机器学习</tag>
        <tag>分类</tag>
        <tag>概率生成模型</tag>
      </tags>
  </entry>
  <entry>
    <title>机器学习理论系列零</title>
    <url>/2018/01/01/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%90%86%E8%AE%BA%E7%B3%BB%E5%88%97%E9%9B%B6/</url>
    <content><![CDATA[<p>毕业设计是和深度学习相关，之前零零碎碎的学习了一些相关知识，这里开个系列文章总结一些，以免又看了忘，再看又不方便。</p>
<p>深度学习目前可以说是非常火了，而深度学习是机器学习的一个分支，机器学习也只是人工智能的一个分支。</p>
<p><img src="/2018/01/01/机器学习理论系列零/ai.png" alt=" "></p>
<p>我是跟着李宏毅教授的上课视频一起学，这是地址 <a href="http://speech.ee.ntu.edu.tw/~tlkagk/courses.html" target="_blank" rel="noopener">http://speech.ee.ntu.edu.tw/~tlkagk/courses.html</a> ，我看的是里边的 Machine Learning ( 2017 Spring )。他的 PPT 和 video 比较齐全，也是从比较基础的讲起，老师也比较幽默，非常推荐。</p>
<p>这里再推荐下央视新推的综艺节目「机智过人」，里边许多项目也是基于深度学习的，嘉宾还有图灵奖获得者姚期智。</p>
<p><img src="/2018/01/01/机器学习理论系列零/jivi.jpg" alt=" "><br>里边的做对联，作诗，写歌的机器人不得不让人惊叹。</p>
]]></content>
      <tags>
        <tag>机器学习</tag>
        <tag>深度学习</tag>
      </tags>
  </entry>
  <entry>
    <title>生日快乐</title>
    <url>/2022/12/31/%E7%94%9F%E6%97%A5%E5%BF%AB%E4%B9%90/</url>
    <content><![CDATA[<p>一直过的农历生日腊月初十，农历的腊月是个比较尴尬的月份：</p>
<p>– 你属什么？</p>
<p>– 属猪</p>
<p>– 那你是 <code>95</code> 年生的咯</p>
<p>– 我是 <code>96</code> 年生的</p>
<p>– <code>96</code> 年不是鼠年吗</p>
<p>– <code>96</code> 年 <code>1</code> 月还没过年，所以是 <code>96</code> 年的🐷</p>
<p>因为属相是按农历算的，但腊月一般都是第二年的 <code>1</code> 月了，导致每次都得解释下，哈哈。</p>
<p>今年凑巧和元旦过在了同一天，印象中小时候也有一次赶在了元旦，索性写个小程序来看一下吧。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20221231102025214.png" alt="image-20221231102025214"></p>
<p>上一次生日在元旦已经是快 <code>20</code> 年前的 <code>04</code> 年了，还看到了一个神奇的年份，下一次农历和公历重合的生日是 <code>2033</code> 年。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20221231103536072.png" alt="image-20221231103536072"></p>
<p>因为农历不像公历一样有确切的数学规律，只能由天文台测定后提供，所以一般都是采用「查表法」获取农历数据，我这里就偷懒直接使用别人的库了 <a href="https://www.npmjs.com/package/solarlunar" target="_blank" rel="noopener">https://www.npmjs.com/package/solarlunar</a> 哈哈，这也导致目前只能查 <code>1900 - 2100</code> 年的数据。</p>
<p>感兴趣的同学也可以试试这个小程序 「农历生日转换」。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/%E6%89%AB%E7%A0%81_%E6%90%9C%E7%B4%A2%E8%81%94%E5%90%88%E4%BC%A0%E6%92%AD%E6%A0%B7%E5%BC%8F-%E5%BE%AE%E4%BF%A1%E6%A0%87%E5%87%86%E7%BB%BF%E7%89%88.png" alt="扫码_搜索联合传播样式-微信标准绿版"></p>
<p>说到生日，<a href="https://windliang.wang/2017/01/07/21%E5%B2%81%E7%9A%84%E4%BD%A0%EF%BC%8C%E7%94%9F%E6%97%A5%E5%BF%AB%E4%B9%90/">我的博客</a> 其实也是 <code>17</code> 年生日那天搭建的，现在回过头再看感觉还是很奇妙的，就像和当前的自己产生了连接一样。</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>微信小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>深度学习理论系列一</title>
    <url>/2018/01/21/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%90%86%E8%AE%BA%E7%B3%BB%E5%88%97%E4%B8%80/</url>
    <content><![CDATA[<blockquote>
<p>Neruron 美 [ˈnʊrɑn] : 神经元<br>activation 美 [ˌæktɪ’veɪʃn] : 活化，激活<br>feedforward 美 [‘fɪd’fɔwəd] : 前馈<br>backpropagation 美 [bækprɒpə’ɡeɪʃn] : 反向传播</p>
</blockquote>
<p>本文是对李宏毅教授课程的笔记加上自己的理解重新组织，如有错误，感谢指出。<br>视频及 PPT 原教程：<a href="https://pan.baidu.com/s/1dAFnki" target="_blank" rel="noopener">https://pan.baidu.com/s/1dAFnki</a> 密码：5rsd</p>
<p>还没有看过前几篇机器学习理论的童鞋，推荐先把前几篇看完。<br>这里接着上篇的 Logistic Regression 来讲。</p>
<h2 id="Limitation-of-Logistic-Regression"><a href="#Limitation-of-Logistic-Regression" class="headerlink" title="Limitation of Logistic Regression"></a>Limitation of Logistic Regression</h2><p>看这样一个二元分类问题，假设我们有四个数据。</p>
<p><img src="/2018/01/21/深度学习理论系列一/1.jpg" alt=""></p>
<p><img src="/2018/01/21/深度学习理论系列一/3.jpg" alt=""></p>
<p><img src="/2018/01/21/深度学习理论系列一/2.jpg" alt=""></p>
<p><img src="/2018/01/21/深度学习理论系列一/4.jpg" alt=""><br>y ≥ 0.5 相当于 z ≥ 0 ; y &lt; 0.5 相等于 z &lt; 0 ; 而 z 相当于一条直线。所以 LR 的任务就是找一条直线，把两组数据分到直线的两侧。</p>
<p><img src="/2018/01/21/深度学习理论系列一/5.jpg" alt=""><br>很明显，这是无法做到的。所以此时 LR 是无能为力的，我们怎么改进呢 ？</p>
<p>做 Feature transformation ，举个例子。<br>我们把 x1 变成 x1 到 <img src="/2018/01/21/深度学习理论系列一/7.jpg" alt=""> 的距离<br>x2 变成 x2 到  <img src="/2018/01/21/深度学习理论系列一/8.jpg" alt=""> 的距离<br>这样就改变了原始数据的分布，我们就可以找到一条直线分隔 class1 和 class2 ，从而实现我们的分类任务。</p>
<p><img src="/2018/01/21/深度学习理论系列一/6.jpg" alt=""></p>
<p>我们可不可以用几个 LR 连接起来解决呢？</p>
<p><img src="/2018/01/21/深度学习理论系列一/9.jpg" alt=""><br>带进几个具体的数值看一下。</p>
<p><img src="/2018/01/21/深度学习理论系列一/10.jpg" alt=""><br>然后把每个数据代入，求出新的 x1 ,x2 如下：</p>
<p><img src="/2018/01/21/深度学习理论系列一/11.jpg" alt=""><br>是的，达到了我们的目标！</p>
<p>是的这就是深度学习！！！！每一个 LR 我们叫它 Neruron ( 神经元)。我们再看下它的结构</p>
<p><img src="/2018/01/21/深度学习理论系列一/12.jpg" alt=""></p>
<p>我们依旧举个例子吧，很简单，数字的识别吧。</p>
<p><img src="/2018/01/21/深度学习理论系列一/14.png" alt=""><br>当然，我们会先对它进行一些处理，去噪，二值化等，可以看下<a href="http://windliang.cc/2017/06/30/python%E7%AE%80%E5%8D%95%E9%AA%8C%E8%AF%81%E7%A0%81%E8%AF%86%E5%88%AB/" target="_blank" rel="noopener">这里</a>，让他变成只有黑白两种颜色。这样对于每个像素点就只有两个取值了。</p>
<p><img src="/2018/01/21/深度学习理论系列一/13.jpg" alt=""><br>每个像素点，我们都当做一维，这样我们每个数据就是这样</p>
<p><img src="/2018/01/21/深度学习理论系列一/14.jpg" alt=""></p>
<h2 id="Model"><a href="#Model" class="headerlink" title="Model"></a>Model</h2><p><img src="/2018/01/21/深度学习理论系列一/15.jpg" alt=""><br>深度学习的 Model 不像之前可以有一个固定的式子，它中间的神经元可以随便连接，不同的连接就是一个新的 Model 。可以尝试不同的连接，从而找一个可以满足自己预期的模型。最常见的有下边一种Fully Connect Feedforward Network (前馈全连接神经网络) 。</p>
<p>二维的图</p>
<p><img src="/2018/01/21/深度学习理论系列一/16.jpg" alt=""><br>1 输入后到达第一个神经元会输出 0.98<br>-1 输入后到达第一个神经元会输出 0.12<br>我们的 S 形函数这里有了新的称谓，activation function ( 激励函数 )，当然它也可以不同S 形函数而换成别的函数，以后会讲到。</p>
<p>一般的形式：</p>
<p><img src="/2018/01/21/深度学习理论系列一/17.jpg" alt=""><br>输入 n 维的 x ，输出 m 维的 y ，每一维度代表属于该类的概率。<br>所以输出之前一般做一次 Softmax 。Softmax 是啥子嘞？中文翻译过来叫归一化指数函数 ，很形象，把每个值取 e 的幂次，然后归一一下。<br>假设我们有一个数组 V，Vi表示V中的第i个元素，那么这个元素的Softmax值就是 </p>
<p><img src="/2018/01/21/深度学习理论系列一/18.jpg" alt=""></p>
<h2 id="Goodness-of-Function"><a href="#Goodness-of-Function" class="headerlink" title="Goodness of Function"></a>Goodness of Function</h2><p>我们继续寻找它的 Loss Function ！</p>
<p>我们先看一个数据的 loss ，例如是识别数字 1 。</p>
<p><img src="/2018/01/21/深度学习理论系列一/19.jpg" alt=""><br>是的，我们把 Model 求出的 y 与 $\hat{y}$ 向上篇文章一样做 Cross Entropy ( ( 交叉熵 ) ，忘记的话可以再看一下<a href="http://windliang.cc/2018/01/20/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%90%86%E8%AE%BA%E7%B3%BB%E5%88%97%E4%BA%94-Logistic-Regression-%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92/" target="_blank" rel="noopener">上篇</a> 。</p>
<p>有了一个数据的 loss ，我们要做的就是把所有数据的 loss 求和。</p>
<p><img src="/2018/01/21/深度学习理论系列一/20.jpg" alt=""></p>
<h2 id="Best-Function"><a href="#Best-Function" class="headerlink" title="Best  Function"></a>Best  Function</h2><p>我们得到了 Loss Function ，接下来就是求偏导，然后进行梯度下降。</p>
<p><img src="/2018/01/21/深度学习理论系列一/21.jpg" alt=""><br>是的你没有看错，高大上的深度学习依旧用的梯度下降，就算是 AlphaGo ，意不意外？惊不惊喜？</p>
<p>咦？偏导的公式为什么这次没给推导呀？<br>你知道 L 长这个样子</p>
<p><img src="/2018/01/21/深度学习理论系列一/23.jpg" alt=""><br>可是你知道 y 写出是什么样子吗？</p>
<p>每经过一个神经元，其实就是矩阵相乘</p>
<p><img src="/2018/01/21/深度学习理论系列一/24.jpg" alt=""><br>我们的 y 函数就是这样</p>
<p><img src="/2018/01/21/深度学习理论系列一/25.jpg" alt=""><br>S 形函数一层套了一层，用笔去算偏导大概会疯掉。好在一些平台已经利用 Backpropagation ( 反向传播算法 ) 实现了梯度下降，我们直接去用就好了。</p>
<p><img src="/2018/01/21/深度学习理论系列一/26.jpg" alt=""></p>
<p>Backpropagation 以后我们再讲。</p>
<p>好了，上边就是深度学习 Deep learning 的基本理论了！！！！！！！！！！！！！！</p>
<h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><p>一图胜千言</p>
<p><img src="/2018/01/21/深度学习理论系列一/27.jpg" alt=""><br>谷歌中用到了深度学习技术的项目数目，现在是真的火呀！</p>
<script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML">
</script>
<script type="text/x-mathjax-config">
MathJax.Hub.Config({tex2jax: {inlineMath: [['$','$'], ['\\(','\\)']]}});
</script>
]]></content>
      <tags>
        <tag>机器学习</tag>
        <tag>深度学习</tag>
        <tag>神经网络</tag>
      </tags>
  </entry>
  <entry>
    <title>累计用户50万的小程序可以赚多少钱?</title>
    <url>/2020/08/22/%E7%B4%AF%E8%AE%A1%E7%94%A8%E6%88%B750%E4%B8%87%E7%9A%84%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%8F%AF%E4%BB%A5%E8%B5%9A%E5%A4%9A%E5%B0%91%E9%92%B1/</url>
    <content><![CDATA[<p>去年 <code>5</code> 月的时候写了小程序 <a href="https://mp.weixin.qq.com/s/CQTk6KMV6sWlF3A2hYEF1Q" target="_blank" rel="noopener">神奇字体</a>，可以生成类似这样的字体 𝓘 𝓵𝓸𝓿𝓮 𝔂𝓸𝓾 𝓽𝓱𝓻𝓮𝓮 𝓽𝓱𝓸𝓾𝓼𝓪𝓷𝓭.，到今天 <code>8.22</code> 号的话，累计用户已经破了 <code>50</code> 万。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/mini1.jpg" alt=""></p>
<p>这篇文章的话主要就是分享一下小程序的一些数据和收入，供大家参考。</p>
<h1 id="小程序广告类型"><a href="#小程序广告类型" class="headerlink" title="小程序广告类型"></a>小程序广告类型</h1><p>首先介绍下微信小程序主要的广告类型，主要分为 <code>Banner</code> 广告、激励式广告、插屏广告、视频广告、视频贴片广告、格子广告、原生模版广告。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/mini2.jpg" alt=""></p>
<p><code>banner</code> 广告是最常见的，微信公众号文章下边一般都会有，就是下边的样子。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/mini3.jpg" alt=""></p>
<p>然后是激励式广告，通常出现在游戏中，复活的时候让看一段视频广告那种。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/mini4.jpg" alt=""></p>
<p>插屏广告的话，是那种弹窗广告，一般在某项活动结束的时候，小程序可能会弹出这种广告，会覆盖掉整个屏幕。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/mini5.jpg" alt=""></p>
<p>视频广告和 <code>banner</code> 广告一样，会固定在某个位置，然后播放视频广告。视频贴片广告指的是一些视频类小程序，在播放视频前会播放一些广告。</p>
<p>比较新的是格子广告，我好像也没在小程序里边见到别人用过。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/mini6.jpg" alt=""></p>
<h1 id="用户情况"><a href="#用户情况" class="headerlink" title="用户情况"></a>用户情况</h1><p>下图是今天的访问情况。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/mini7.jpg" alt=""></p>
<p>下图是近 <code>30</code> 天的用户打开次数的情况。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/mini8.jpg" alt=""></p>
<p>下图是近 <code>30</code> 天的用户的新增情况。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/mini10.jpg" alt=""></p>
<p>最后是近 <code>30</code> 天用户进入小程序的途径。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/mini12.jpg" alt=""></p>
<p>很大一部分都是用户主动搜索进来的。我主要是在微信群、朋友圈、知识星球、知乎、我的博客、<code>v</code> 站分享过。</p>
<p>我觉得用户之所以能够持续增长，最主要的原因就是小程序自带传播的属性，当用户使用了小程序中的字体，别人看到以后一定会去询问，从而引起传播。</p>
<h1 id="收入情况"><a href="#收入情况" class="headerlink" title="收入情况"></a>收入情况</h1><p>说出来你可能不信，这一年多，<code>50</code> 多万的用户小程序的广告收入只有两千多，哈哈。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/mini13.jpg" alt=""></p>
<p>下边是刚开通流量主第一个月时候的收入情况。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/mini14.jpg" alt=""></p>
<p>除了刚发布的时候，达到了 <code>10</code> 多块钱，其余都是两块上下浮动。但此时的曝光量是很小的，也就是 <code>500</code> 上下。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/mini16.jpg" alt=""></p>
<p>所以如果这样算的话，当时的 <code>eCPM</code> (每千次曝光的收入) 其实是很高的，有时候甚至超过了 <code>10</code> 元。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/mini15.jpg" alt=""></p>
<p>然后看下上个月的情况。</p>
<p>此时收入差不多在 <code>10</code> 元上下徘徊。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/mini21.jpg" alt=""></p>
<p>此时的曝光量已经稳定在 <code>1</code> 万多了，是当时的十倍了。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/mini19.jpg" alt=""></p>
<p>按照当时的 <code>eCPM</code>，收入应该过百了，然而此时的 <code>eCPM</code> 已经很低了，只在 <code>1</code> 块钱上下浮动了。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/mini20.jpg" alt=""></p>
<p><code>banner</code> 广告的 <code>eCPM</code> 应该调整过很多次，有时候明明用户增长了，收入反而下降了。总之是越来越便宜了。</p>
<h1 id="未来的打算"><a href="#未来的打算" class="headerlink" title="未来的打算"></a>未来的打算</h1><p>目前只接入了 <code>banner</code> 广告，听说激励广告的收入会很多，但我的这个小程序明显很不适用。</p>
<p>在不影响之前体验的情况下，我把 <code>banner</code> 广告换成了视频广告，此外复制成功后会弹出一个插屏广告，看看收益会不会增长。未来的话再把这两种广告类型的收益情况分享给大家，供大家参考。</p>
<p>当然，大家也可以体验下这个小程序「神奇字体」，哈哈，虽然简单，但还是很好用的，发朋友圈、发微博都可以用到。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%A0%81.jpg" alt=""></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>苹果手机大小周闹钟设置</title>
    <url>/2021/03/09/%E8%8B%B9%E6%9E%9C%E6%89%8B%E6%9C%BA%E5%A4%A7%E5%B0%8F%E5%91%A8%E9%97%B9%E9%92%9F%E8%AE%BE%E7%BD%AE/</url>
    <content><![CDATA[<p>继年后从 <code>996</code> 恢复了一周的双休，接下来又要改成大小周了。既然要大小周，身为一名程序员，周六的闹钟总不能自己手动算着日子去打开关闭吧，于是有了下边的过程。</p>
<p><code>iOS</code> 的快捷指令功能从出来以后就火了一次又一次，桌面图标更换、回家前提醒拿快递、自动领外卖红包等等，随着快捷指令能力的一步步释放和社区的强大想象力，只有你想不到的，没有快捷指令做不到的。</p>
<p>自己也一直想着生活上有没有什么需要自动化的，然后用捷径去做一个，这不，大小周闹钟就来了。</p>
<p>回家路上自己构想了两种实现的方式。</p>
<ol>
<li>服务端提供一个接口，返回当前周六是否应该打开闹钟，然后快捷指令每周六凌晨去调这个接口，来打开关闭闹钟。</li>
<li>不使用服务端，手机端自己进行计算，通过当前时间戳和大小周开始的时间做差，算出来当前是第几周，从而决定是否打开周六的闹钟。</li>
</ol>
<p>决定采用方法 <code>2</code>，毕竟不用再部署服务器了。但之前毕竟没有写过捷径，想着能不能直接写脚本，而不是自己在手机上拼命令，然后查了下发现真的有，用文字写捷径的 <a href="https://docs.scpl.dev/" target="_blank" rel="noopener">ScPL</a>、用 <code>python</code> 写捷径的 <a href="https://github.com/alexander-akhmetov/python-shortcuts" target="_blank" rel="noopener">WIP</a>、用 <code>JS</code> 写捷径的 <a href="https://github.com/joshfarrant/shortcuts-js" target="_blank" rel="noopener">Shortcuts JS</a>。</p>
<p>然后进入了 <code>JS</code> 的仓库，下载 <code>npm</code> 包，运行了下官方的例子，自动生成了一个捷径的文件，但发现最新的捷径不允许用 <code>airdrop</code> 导入了，看了下 <code>issues</code>，里边已经有解决方案了，但想着有些麻烦，换了个思路，看有没有现成的轮子，直接用吧。</p>
<p>果然，只有你想不到，有个捷径社区已经有人提供了。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/week.jpg" alt=""></p>
<p>把这个捷径下载下来看了下，有点复杂，它默认每天两个闹钟，周五还会发送提醒，不太符合我要的。</p>
<p>同时在 <a href="v2ex.com/t/707450">V站</a> 也看到了一个思路。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/week2.jpg" alt=""></p>
<p>这个看起来就简单明了了，于是准备按这个试一下。先在日历增加了日程，又添加了一个周六的闹钟。</p>
<p>此时发现捷径里有一个「开关闹钟」的功能，也就是说如果当前闹钟是关的，执行这个功能就会打开闹钟。如果当前是打开的，执行这个功能就会关闭闹钟。</p>
<p>我突然想到了一个更简单的方法。</p>
<p>我只需要<strong>每周执行一次「开关闹钟」</strong>就可以了。比如周六的闹钟，每周日执行「开关闹钟」。</p>
<p>第 <code>1</code> 周添加了一个每周六响的闹钟，周六成功响了，到了周日会把这个闹钟自动关掉。</p>
<p>第 <code>2</code> 周到了周六不会响，到了周日会把这个闹钟自动打开。</p>
<p>第 <code>3</code> 周到了周六会响，到了周日会把这个闹钟自动关掉。</p>
<p>… …</p>
<p>哈哈，成功实现大小周闹铃，自动化的命令如下。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/week4.jpeg" alt=""></p>
<p>记得添加闹钟功能的时候默认是切换状态，需要改成 <code>开/关</code> 功能。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/week3.jpeg" alt=""></p>
<p>没想到这么简单就实现了大小周闹钟，本来是想借着这个机会学习总结下苹果捷径配置的，看来需要再等下次了，哈哈，下次一定。</p>
<p>至于为什么大小周（目前只有我们部门大小周，其他部门美团都是双休），欢迎来美团优选做同事，春招内推码附上。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/week5.jpeg" alt=""></p>
<p>美团优选部门主要的项目就是微信小程序上的「美团优选」，社招内推也可以，没有我微信的同学也可以加一下，有想知道的都可以问我，扫内推码也可以选其他部门。</p>
<p><img src="https://windliang.oss-cn-beijing.aliyuncs.com/wechat.jpg" alt=""></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>苹果手机</tag>
        <tag>捷径</tag>
      </tags>
  </entry>
  <entry>
    <title>面完腾讯阿里后对人生的思考</title>
    <url>/2019/08/16/%E9%9D%A2%E5%AE%8C%E8%85%BE%E8%AE%AF%E9%98%BF%E9%87%8C%E5%90%8E%E5%AF%B9%E4%BA%BA%E7%94%9F%E7%9A%84%E6%80%9D%E8%80%83/</url>
    <content><![CDATA[<p>从大学入门计算机，陆陆续续接触了很多东西。</p>
<p>最开始的时候学 MFC ，做了 PC 端的个性化的贪吃蛇，后来和同学又做了一个校园安卓 APP。自己又去搞爬虫，给团队提供充校园卡的接口，又用 python 搭到服务器。为了怀念童年，做过一个 web 版的 <a href="https://zhuanlan.zhihu.com/p/71165578" target="_blank" rel="noopener">狼吃羊</a>，最近又做过微信小程序 <a href="https://zhuanlan.zhihu.com/p/64866114" target="_blank" rel="noopener">神奇字体</a>。</p>
<p>然后算法方面也做过些，本科做演化算法方面的，也有了一篇 <a href="https://link.springer.com/chapter/10.1007/978-981-10-3614-9_9" target="_blank" rel="noopener">论文</a> 。然后本科毕设，又做了深度学习，用 DBN 去做高分辨率的遥感图像分类。上了研究生，上深度学习的课，也结合前端做了个 <a href="https://zhuanlan.zhihu.com/p/71647786" target="_blank" rel="noopener">打砖块</a> 的游戏。一直也在 <a href="https://zhuanlan.zhihu.com/p/73146252" target="_blank" rel="noopener">刷 leetcode</a>，每道题都详细总结。</p>
<p>上边做的东西都也是兴趣驱动的，就和玩游戏一样，会有满足感，愉悦感。</p>
<p>成功做完一个又一个项目，开始可能会觉得难一些，慢慢的觉得只是做一个应用，完成一个任务，不管接没接触过，自己认为只要有一定的时间什么都可以做出来，先去了解需要的语言的基础语法，然后再根据需要选一些轮子，实在找不到就去找一些类似的项目模仿着做，比如最近做的 <a href="https://zhuanlan.zhihu.com/p/77414095" target="_blank" rel="noopener">windows 批处理</a>，还有自己对 <a href="https://www.zhihu.com/people/wang-liang-61-22/answers?page=2" target="_blank" rel="noopener">不同编程语言的看法</a> 也验证了自己的想法。</p>
<p>但慢慢觉得这些不够，由于现在轮子太多了，无论是搞前端开发，还是搞安卓开发，亦或是跑深度学习，都太方便了，方便到只要理清自己的逻辑，调几行 API 就够了，如果说某一块去深挖的话，就完全不行了。如果未来找工作肯定是不够的，于是在去年的时候决定以后就主要学习前端吧。</p>
<p>当时选择前端最直接的理由就是，跨平台呀，一个浏览器，PC、安卓、苹果都可以用，发布到网页，任何人都可以直接体验。现在各种小程序的使用，甚至觉得未来可能都不会有原生程序了，全部云服务器，用户只是需要一个显示的界面，桌面也好，一张纸也好，用前端 BS 的模式显示即可。</p>
<p>然后自己开始看各种书了，从 head first html 补充基础，然后 js 权威指南， Dom 编程艺术等等，看着看着开始迷茫了，因为看完并不知道自己会不会，这不像做一个应用，会有一个明确的目标，然后在网上找了找其他人怎么学前端，看了 <a href="https://www.zhihu.com/people/winter-25" target="_blank" rel="noopener">@winter</a> 大神在极客时间上的课，还有 <a href="https://www.zhihu.com/people/qing-feng-yi-yang" target="_blank" rel="noopener">@冴羽</a> 大神 github 上总结的笔记，渐渐的似乎有了方向，也理解了一入前端深似海的含义，比如 winter 大神总结的前端进阶路径。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/life.png" alt="img"></p>
<p>自己的水平也最多可能就是个前端工程师，但看完整个课程也理清了很多东西，也总结了几篇文章，<a href="https://zhuanlan.zhihu.com/p/73917931" target="_blank" rel="noopener">字符串及编码</a>，<a href="https://zhuanlan.zhihu.com/p/71780882" target="_blank" rel="noopener">访问器属性</a>，也在研究 underscore 的源码实现，想着就这样一步一步走吧，直到之前面试了头条二面被拒，昨天又面试了腾讯阿里，表现也不是很好，让我思考开了人生的意义。。。</p>
<p>首先面试自己觉得太应试了，就像从小到大的考试一样，比如最近的大学、研究生的考试，一些课都不用听，然后只要在考试前把历年的的题从打印店买过来，把题型总结出来，多刷几套，然后基本上就 80、90 + 了，甚至嘲讽的是你会发现题目一年比一年简单，就是为了挂科人数少一些。。。本以为以后可能不会有什么考试了，谁又曾想，工作的面试也是这么应试，网上的各种面经，一些题目被面试官问了一遍又一遍，this 指针、防抖节流、HTTPS、跨域问题… </p>
<p>而自己的态度一直是遇到问题就去学，就去总结解决，或者别人遇到问题，自己去一起探究，一味的背知识点又有什么用呢？而所谓的各种框架，之所以出现不是因为有需求，然后才出现的吗，现在却成了面试时候的必考知识点了，你用过 VUE 吗，那你说下它的双向绑定吧。</p>
<p>自己理想的面试，应该是抛出一个问题，网上没有现成答案的那种，然后去提出解决的方案，然后一步一步去解决，一步一步探究，当然这真的也许就是理想而已了，就像高考一样，就是那么应试，但你又不能否认应试就是一种能力。甚至自己都在想，自己身边的同学，都具备解决一个之前没有遇到的问题的能力，现在面试的作用真的能选择出「更好」的人吗，或者说选出的人的效果其实和在自己身边随机选几个人的效果是一样的。</p>
<p>所以昨天面试完，我真的迷茫了，一直被同学叫学霸，学神，被老师夸不错，被网上加的好友叫大佬，夸博客总结的不错，但现在似乎是找不到工作了，真的迷茫了。</p>
<p>开始思考，我们从出生，上了一年又一年的学到底为了什么，为了赚钱吗？为了找工作吗？赚钱以后呢，找工作以后呢，为了吃喝玩吗？写了一个又一个程序又是为了什么呢，写前端无非也就是写个普通用户的应用程序，写个程序员的框架、组件，但其实世界也并不会有什么变化，一切又有什么意义呢？再上升一级，人生的意义到底是什么，一切又都是为了什么呢？</p>
<p>然后昨天睡了一觉，今天似乎找到答案了，人生是没有意义的，我们需要做的只是去体验这一切，开心也好、纠结也罢，亦或是伤心，一个又一个的感受其实哪里有好坏之分。我们能真切的感受到，感受到自己的存在，这种感觉其实足够令自己满足，做一切是没有意义的，那又怎么样，至少我体验过了。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/life2.png" alt="img"></p>
<p>所以现在自己找工作也没有那么纠结了，一切都看开了，遇到面试问到的不会的问题就去研究研究，平时多逛逛 github 看看别人的源码，学学怎么造一个轮子，多留意一些生活中的细节，有需求了就写个程序给大家用一用，每天刷刷 LeetCode，出去跑跑步，看个电影，和女朋友聊聊天，是的，生活这么美好，有什么可以纠结的呢？</p>
<p>最后找不到工作，没有收入呢？赚钱这件事其实也不用那么刻意追求，我们从出生到现在做的一切真的是为了赚钱吗？如果告诉你一种赚钱方法，但每天就是固定机械的做一些事情，我想也很少有人愿意去做。所以我们应该追求的是做一些喜欢做的事情，令自己舒适的事情，顺便把钱赚了。</p>
<p>以上，越努力，越幸运，共勉。</p>
]]></content>
      <categories>
        <category>随想</category>
      </categories>
      <tags>
        <tag>随想</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue2剥丝抽茧-响应式系统之嵌套</title>
    <url>/2022/04/02/Vue2%E5%89%A5%E4%B8%9D%E6%8A%BD%E8%8C%A7-%E5%93%8D%E5%BA%94%E5%BC%8F%E7%B3%BB%E7%BB%9F%E4%B9%8B%E5%B5%8C%E5%A5%97/</url>
    <content><![CDATA[<p>接 <a href="https://windliang.wang/2022/03/27/Vue2%E5%89%A5%E4%B8%9D%E6%8A%BD%E8%8C%A7-%E5%93%8D%E5%BA%94%E5%BC%8F%E7%B3%BB%E7%BB%9F/">Vue2剥丝抽茧-响应式系统</a>、<a href="https://windliang.wang/2022/03/31/Vue2%E5%89%A5%E4%B8%9D%E6%8A%BD%E8%8C%A7-%E5%93%8D%E5%BA%94%E5%BC%8F%E7%B3%BB%E7%BB%9F%E4%B9%8B%E5%88%86%E6%94%AF%E5%88%87%E6%8D%A2/">Vue2剥丝抽茧-响应式系统之分支切换</a>，还没有看过的同学需要看一下。</p>
<h1 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h1><p>在 <code>Vue</code> 开发中肯定存在组件嵌套组件的情况，类似于下边的样子。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- parent-component --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">my-component</span> <span class="attr">:text</span>=<span class="string">"inner"</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br><span class="line">  &#123;&#123; text &#125;&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- my-component--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; text &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>回到我们之前的响应式系统，模拟一下上边的情况：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; observe &#125; <span class="keyword">from</span> <span class="string">"./reactive"</span>;</span><br><span class="line"><span class="keyword">import</span> Watcher <span class="keyword">from</span> <span class="string">"./watcher"</span>;</span><br><span class="line"><span class="keyword">const</span> data = &#123;</span><br><span class="line">    text: <span class="string">"hello, world"</span>,</span><br><span class="line">    inner: <span class="string">"内部"</span>,</span><br><span class="line">&#125;;</span><br><span class="line">observe(data);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> updateMyComponent = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"子组件收到:"</span>, data.inner);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> updateParentComponent = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">new</span> Watcher(updateMyComponent);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"父组件收到："</span>, data.text);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Watcher(updateParentComponent);</span><br><span class="line"></span><br><span class="line">data.text = <span class="string">"hello, liang"</span>;</span><br></pre></td></tr></table></figure>
<p>可以先 <code>1</code> 分钟考虑一下上边输出什么？ </p>
<p>首先回忆一下 <code>new Watcher</code> 会做什么操作。</p>
<p>第一步是保存当前函数，然后执行当前函数前将全局的 <code>Dep.target</code> 赋值为当前 <code>Watcher</code> 对象。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220402083845476.png" alt="image-20220402083845476"></p>
<p>接下来执行 <code>getter</code> 函数的时候，如果读取了相应的属性就会触发 <code>get</code> ，从而将当前 <code>Watcher</code> 收集到该属性的  <code>Dep</code> 中。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220402083943606.png" alt="image-20220402083943606"></p>
<h1 id="执行过程"><a href="#执行过程" class="headerlink" title="执行过程"></a>执行过程</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; observe &#125; <span class="keyword">from</span> <span class="string">"./reactive"</span>;</span><br><span class="line"><span class="keyword">import</span> Watcher <span class="keyword">from</span> <span class="string">"./watcher"</span>;</span><br><span class="line"><span class="keyword">const</span> data = &#123;</span><br><span class="line">    text: <span class="string">"hello, world"</span>,</span><br><span class="line">    inner: <span class="string">"内部"</span>,</span><br><span class="line">&#125;;</span><br><span class="line">observe(data);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> updateMyComponent = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"子组件收到:"</span>, data.inner);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> updateParentComponent = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">new</span> Watcher(updateMyComponent);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"父组件收到："</span>, data.text);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Watcher(updateParentComponent);</span><br><span class="line"></span><br><span class="line">data.text = <span class="string">"hello, liang"</span>;</span><br></pre></td></tr></table></figure>
<p>我们再一步一步理清一下：</p>
<ul>
<li><p><code>new Watcher(updateParentComponent);</code></p>
<p>将 <code>Dep.target</code> 赋值为保存了 <code>updateParentComponent</code> 函数的 <code>Watcher</code> 。</p>
<p>接下来执行  <code>updateParentComponent</code> 函数。</p>
</li>
<li><p><code>new Watcher(updateMyComponent);</code></p>
<p>将 <code>Dep.target</code> 赋值为保存了 <code>updateMyComponent</code> 函数的 <code>Watcher</code> 。</p>
<p>接下来执行  <code>updateMyComponent</code> 函数。</p>
</li>
<li><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> updateMyComponent = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"子组件收到:"</span>, data.inner);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取了 inner 变量。</span></span><br><span class="line"><span class="comment">// data.inner 的 Dep 收集当前 Watcher（保存了 `updateMyComponent` 函数）</span></span><br></pre></td></tr></table></figure>
</li>
<li><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> updateParentComponent = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">new</span> Watcher(updateMyComponent);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"父组件收到："</span>, data.text);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 读取了 text 变量。</span></span><br><span class="line"><span class="comment">// data.text 的 Dep 收集当前 Watcher （保存了 `updateMyComponent` 函数）</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p><code>data.text = &quot;hello, liang&quot;;</code></p>
<p>触发 <code>text</code> 的 <code>set</code> 函数，执行它依赖的 <code>Watcher</code> ，而此时是 <code>updateMyComponent</code> 函数。</p>
</li>
</ul>
<p>所以上边代码最终输出的结果是：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">子组件收到: 内部  <span class="comment">// new Watcher(updateMyComponent); 时候输出</span></span><br><span class="line">父组件收到： hello, world <span class="comment">// new Watcher(updateParentComponent); 时候输出</span></span><br><span class="line">子组件收到: 内部 <span class="comment">// data.text = "hello, liang"; 输出</span></span><br></pre></td></tr></table></figure>
<p>然而子组件并不依赖 <code>data.text</code>，依赖 <code>data.text</code> 的父组件反而没有执行。</p>
<h1 id="修复"><a href="#修复" class="headerlink" title="修复"></a>修复</h1><p>上边的问题出在我们保存当前正在执行 <code>Watcher</code> 时候使用的是单个变量 <code>Dep.target = null; // 静态变量，全局唯一</code>。</p>
<p>回忆一下学习 <code>C</code>  语言或者汇编语言的时候对函数参数的处理：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params">p</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params">p</span>) </span>&#123;</span><br><span class="line">    b(<span class="string">"child"</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a(<span class="string">"parent"</span>);</span><br></pre></td></tr></table></figure>
<p>当函数发生嵌套调用的时候，执行 <code>a</code> 函数的时候我们会先将参数压入栈中，然后执行 <code>b</code> 函数，同样将参数压入栈中，<code>b</code> 函数执行完毕就将参数出栈。此时回到 <code>a</code> 函数就能正确取到 <code>p</code> 参数的值了。</p>
<p>对应于 <code>Watcher</code> 的收集，我们同样可以使用一个栈来保存，执行函数前将 <code>Watcher</code> 压入栈，执行函数完毕后将 <code>Watcher</code> 弹出栈即可。其中，<code>Dep.target</code> 始终指向栈顶 <code>Watcher</code> ，代表当前正在执行的函数。</p>
<p>回到 <code>Dep</code> 代码中，我们提供一个压栈和出栈的方法。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; remove &#125; <span class="keyword">from</span> <span class="string">"./util"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> uid = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Dep</span> </span>&#123;</span><br><span class="line">    ... 省略</span><br><span class="line">&#125;</span><br><span class="line">Dep.target = <span class="literal">null</span>; <span class="comment">// 静态变量，全局唯一</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// The current target watcher being evaluated.</span></span><br><span class="line"><span class="comment">// This is globally unique because only one watcher</span></span><br><span class="line"><span class="comment">// can be evaluated at a time.</span></span><br><span class="line"><span class="keyword">const</span> targetStack = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">pushTarget</span>(<span class="params">target</span>) </span>&#123;</span><br><span class="line">    targetStack.push(target);</span><br><span class="line">    Dep.target = target;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">popTarget</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    targetStack.pop();</span><br><span class="line">    Dep.target = targetStack[targetStack.length - <span class="number">1</span>]; <span class="comment">// 赋值为栈顶元素</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后 <code>Watcher</code> 中，执行函数之前进行入栈，执行后进行出栈。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; pushTarget, popTarget &#125; <span class="keyword">from</span> <span class="string">"./dep"</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Watcher</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(Fn) &#123;</span><br><span class="line">        <span class="keyword">this</span>.getter = Fn;</span><br><span class="line">        <span class="keyword">this</span>.depIds = <span class="keyword">new</span> <span class="built_in">Set</span>(); <span class="comment">// 拥有 has 函数可以判断是否存在某个 id</span></span><br><span class="line">        <span class="keyword">this</span>.deps = [];</span><br><span class="line">        <span class="keyword">this</span>.newDeps = []; <span class="comment">// 记录新一次的依赖</span></span><br><span class="line">        <span class="keyword">this</span>.newDepIds = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">        <span class="keyword">this</span>.get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Evaluate the getter, and re-collect dependencies.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    get() &#123;</span><br><span class="line">      <span class="comment">/************修改的地方*******************************/</span></span><br><span class="line">        pushTarget(<span class="keyword">this</span>); <span class="comment">// 保存包装了当前正在执行的函数的 Watcher</span></span><br><span class="line">       <span class="comment">/*******************************************/</span></span><br><span class="line">        <span class="keyword">let</span> value;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            value = <span class="keyword">this</span>.getter.call();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">          <span class="comment">/************修改的地方*******************************/</span></span><br><span class="line">            popTarget();</span><br><span class="line">          <span class="comment">/*******************************************/</span></span><br><span class="line">            <span class="keyword">this</span>.cleanupDeps();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">   ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>回到开头的场景，再来执行一下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; observe &#125; <span class="keyword">from</span> <span class="string">"./reactive"</span>;</span><br><span class="line"><span class="keyword">import</span> Watcher <span class="keyword">from</span> <span class="string">"./watcher"</span>;</span><br><span class="line"><span class="keyword">const</span> data = &#123;</span><br><span class="line">    text: <span class="string">"hello, world"</span>,</span><br><span class="line">    inner: <span class="string">"内部"</span>,</span><br><span class="line">&#125;;</span><br><span class="line">observe(data);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> updateMyComponent = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"子组件收到:"</span>, data.inner);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> updateParentComponent = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">new</span> Watcher(updateMyComponent);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"父组件收到："</span>, data.text);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Watcher(updateParentComponent);</span><br><span class="line"></span><br><span class="line">data.text = <span class="string">"hello, liang"</span>;</span><br></pre></td></tr></table></figure>
<p>执行 <code>new Watcher(updateParentComponent);</code> 的时候将 <code>Watcher</code> 入栈。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220402093847759.png" alt="image-20220402093847759" style="width:50%;"></p>
<p>进入 <code>updateParentComponent</code> 函数，执行 <code>new Watcher(updateMyComponent);</code> 的时候将 <code>Watcher</code> 入栈。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220402093937896.png" alt="image-20220402093937896" style="width:50%;"></p>
<p>执行 <code>updateMyComponent</code> 函数，<code>data.inner</code> 收集当前 <code>Dep.target</code> ，执行完毕后 <code>Watcher</code> 出栈。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220402093847759.png" alt="image-20220402093847759" style="width:50%;"></p>
<p>继续执行 <code>updateParentComponent</code> 函数，<code>data.text</code> 收集当前 <code>Dep.target</code> 。</p>
<p>此时依赖就变得正常了，<code>data.text</code> 会触发 <code>updateParentComponent</code> 函数，从而输出如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">子组件收到: 内部</span><br><span class="line">父组件收到： hello, world</span><br><span class="line">子组件收到: 内部</span><br><span class="line">父组件收到： hello, liang</span><br></pre></td></tr></table></figure>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>今天这个相对好理解一些，通过栈解决了嵌套调用的情况。</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>vue2</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue2剥丝抽茧-响应式系统</title>
    <url>/2022/03/27/Vue2%E5%89%A5%E4%B8%9D%E6%8A%BD%E8%8C%A7-%E5%93%8D%E5%BA%94%E5%BC%8F%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<p>目前工作中大概有 <code>40%</code> 的需求是在用 <code>Vue2</code> 的技术栈，所谓知其然更要知其所以然，为了更好的使用 <code>Vue</code> 、更快的排查问题，最近学习了源码相关的一些知识，虽然网上总结 <code>Vue</code> 的很多很多了，不少自己一个，但也不多自己一个，欢迎一起讨论学习，发现问题欢迎指出。</p>
<h1 id="响应式系统要干什么"><a href="#响应式系统要干什么" class="headerlink" title="响应式系统要干什么"></a>响应式系统要干什么</h1><p>回到最简单的代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">data = &#123;</span><br><span class="line">    text: <span class="string">'hello, world'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> updateComponent = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'收到'</span>, data.text);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">updateComponent()</span><br><span class="line"></span><br><span class="line">data.text = <span class="string">'hello, liang'</span></span><br><span class="line"><span class="comment">// 运行结果</span></span><br><span class="line"><span class="comment">// 收到 hello, world</span></span><br></pre></td></tr></table></figure>
<p>响应式系统要做的事情：某个依赖了 <code>data</code> 数据的函数，当所依赖的 <code>data</code> 数据改变的时候，该函数要重新执行。</p>
<p>我们期望的效果：当上边 <code>data.text</code> 修改的时候， <code>updateComponent</code> 函数再执行一次。</p>
<p>为了实现响应式系统，我们需要做两件事情：</p>
<ol>
<li><p>知道 <code>data</code> 中的数据被哪些函数依赖</p>
</li>
<li><p><code>data</code> 中的数据改变的时候去调用依赖它的函数们</p>
</li>
</ol>
<p>为了实现第 <code>1</code> 点，我们需要在执行函数的时候，将当前函数保存起来，然后在<strong>读取数据</strong>的时候将该函数保存到当前数据中。</p>
<p>第 <code>2</code> 点就迎刃而解了，当<strong>修改数据</strong>的时候将保存起来的函数执行一次即可。</p>
<p>在<strong>读取数据</strong>和<strong>修改数据</strong>的时候需要做额外的事情，我们可以通过 <code>Object.defineProperty()</code>  重写对象属性的 <code>get</code> 和 <code>set</code> 函数。</p>
<h1 id="响应式数据"><a href="#响应式数据" class="headerlink" title="响应式数据"></a>响应式数据</h1><p>我们来写一个函数，重写属性的 <code>get</code> 和 <code>set</code> 函数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Define a reactive property on an Object.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">defineReactive</span>(<span class="params">obj, key, val</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> property = <span class="built_in">Object</span>.getOwnPropertyDescriptor(obj, key);</span><br><span class="line">    <span class="comment">// 读取用户可能自己定义了的 get、set</span></span><br><span class="line">    <span class="keyword">const</span> getter = property &amp;&amp; property.get;</span><br><span class="line">    <span class="keyword">const</span> setter = property &amp;&amp; property.set;</span><br><span class="line">    <span class="comment">// val 没有传进来话进行手动赋值</span></span><br><span class="line">    <span class="keyword">if</span> ((!getter || setter) &amp;&amp; <span class="built_in">arguments</span>.length === <span class="number">2</span>) &#123;</span><br><span class="line">        val = obj[key];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Object</span>.defineProperty(obj, key, &#123;</span><br><span class="line">        enumerable: <span class="literal">true</span>,</span><br><span class="line">        configurable: <span class="literal">true</span>,</span><br><span class="line">        get: <span class="function"><span class="keyword">function</span> <span class="title">reactiveGetter</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">const</span> value = getter ? getter.call(obj) : val;</span><br><span class="line">            <span class="comment">/*********************************************/</span></span><br><span class="line">            <span class="comment">// 1.这里需要去保存当前在执行的函数</span></span><br><span class="line">            <span class="comment">/*********************************************/</span></span><br><span class="line">            <span class="keyword">return</span> value;</span><br><span class="line">        &#125;,</span><br><span class="line">        set: <span class="function"><span class="keyword">function</span> <span class="title">reactiveSetter</span>(<span class="params">newVal</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">const</span> value = getter ? getter.call(obj) : val;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (setter) &#123;</span><br><span class="line">                setter.call(obj, newVal);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                val = newVal;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">/*********************************************/</span></span><br><span class="line">            <span class="comment">// 2.将依赖当前数据依赖的函数执行</span></span><br><span class="line">            <span class="comment">/*********************************************/</span></span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>为了调用更方便，我们把第 <code>1</code> 步和第 <code>2</code> 步的操作封装一个 <code>Dep</code>  类。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Dep</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> target; <span class="comment">//当前在执行的函数</span></span><br><span class="line">    subs; <span class="comment">// 依赖的函数</span></span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">this</span>.subs = []; <span class="comment">// 保存所有需要执行的函数</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    addSub(sub) &#123;</span><br><span class="line">        <span class="keyword">this</span>.subs.push(sub);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    depend() &#123;</span><br><span class="line">        <span class="comment">// 触发 get 的时候走到这里</span></span><br><span class="line">        <span class="keyword">if</span> (Dep.target) &#123;</span><br><span class="line">            <span class="comment">// 委托给 Dep.target 去调用 addSub</span></span><br><span class="line">            Dep.target.addDep(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    notify() &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, l = <span class="keyword">this</span>.subs.length; i &lt; l; i++) &#123;</span><br><span class="line">            <span class="keyword">this</span>.subs[i].update();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Dep.target = <span class="literal">null</span>; <span class="comment">// 静态变量，全局唯一</span></span><br></pre></td></tr></table></figure>
<p>我们将当前执行的函数保存到 <code>Dep</code> 类的 <code>target</code> 变量上。</p>
<h1 id="保存当前正在执行的函数"><a href="#保存当前正在执行的函数" class="headerlink" title="保存当前正在执行的函数"></a>保存当前正在执行的函数</h1><p>为了保存当前的函数，我们还需要写一个 <code>Watcher</code> 类，将需要执行的函数传入，保存到 <code>Watcher</code> 类中的 <code>getter</code> 属性中，然后交由 <code>Watcher</code> 类负责执行。</p>
<p>这样在 <code>Dep</code> 类中， <code>subs</code> 中保存的就不是当前函数了，而是持有当前函数的 <code>Watcher</code> 对象。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Dep <span class="keyword">from</span> <span class="string">"./dep"</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Watcher</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(Fn) &#123;</span><br><span class="line">        <span class="keyword">this</span>.getter = Fn;</span><br><span class="line">        <span class="keyword">this</span>.get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Evaluate the getter, and re-collect dependencies.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    get() &#123;</span><br><span class="line">        Dep.target = <span class="keyword">this</span>; <span class="comment">// 保存包装了当前正在执行的函数的 Watcher</span></span><br><span class="line">        <span class="keyword">let</span> value;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          	<span class="comment">// 调用当前传进来的函数，触发对象属性的 get</span></span><br><span class="line">            value = <span class="keyword">this</span>.getter.call();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Add a dependency to this directive.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    addDep(dep) &#123;</span><br><span class="line">      	<span class="comment">// 触发 get 后会走到这里，收集当前依赖</span></span><br><span class="line">        <span class="comment">// 当前正在执行的函数的 Watcher 保存到 dep 中的 subs 中</span></span><br><span class="line">        dep.addSub(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Subscriber interface.</span></span><br><span class="line"><span class="comment">     * Will be called when a dependency changes.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">  	<span class="comment">// 修改对象属性值的时候触发 set，走到这里</span></span><br><span class="line">    update() &#123;</span><br><span class="line">        <span class="keyword">this</span>.run();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Scheduler job interface.</span></span><br><span class="line"><span class="comment">     * Will be called by the scheduler.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    run() &#123;</span><br><span class="line">        <span class="keyword">this</span>.get();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>Watcher</code> 的作用就是将正在执行的函数通过 <code>Watcher</code> 包装后保存到 <code>Dep.target</code> 中，然后调用传进来的函数，此时触发对象属性的 <code>get</code> 函数，会收集当前 <code>Watcher</code> 。</p>
<p>如果未来修改对象属性的值，会触发对象属性的 <code>set</code> ，接着就会调用之前收集到的 <code>Watcher</code> 对象，通过 <code>Watcher</code> 对象的 <code>uptate</code> 方法，来调用最初执行的函数。</p>
<h1 id="响应式数据-1"><a href="#响应式数据-1" class="headerlink" title="响应式数据"></a>响应式数据</h1><p>回到我们之前没写完的 <code>defineReactive</code> 函数，按照上边的思路，我们来补全一下。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Dep <span class="keyword">from</span> <span class="string">"./dep"</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Define a reactive property on an Object.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">defineReactive</span>(<span class="params">obj, key, val</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> property = <span class="built_in">Object</span>.getOwnPropertyDescriptor(obj, key);</span><br><span class="line">    <span class="comment">// 读取用户可能自己定义了的 get、set</span></span><br><span class="line">    <span class="keyword">const</span> getter = property &amp;&amp; property.get;</span><br><span class="line">    <span class="keyword">const</span> setter = property &amp;&amp; property.set;</span><br><span class="line">    <span class="comment">// val 没有传进来话进行手动赋值</span></span><br><span class="line">    <span class="keyword">if</span> ((!getter || setter) &amp;&amp; <span class="built_in">arguments</span>.length === <span class="number">2</span>) &#123;</span><br><span class="line">        val = obj[key];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*********************************************/</span></span><br><span class="line">    <span class="keyword">const</span> dep = <span class="keyword">new</span> Dep(); <span class="comment">// 持有一个 Dep 对象，用来保存所有依赖于该变量的 Watcher</span></span><br><span class="line">    <span class="comment">/*********************************************/</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">Object</span>.defineProperty(obj, key, &#123;</span><br><span class="line">        enumerable: <span class="literal">true</span>,</span><br><span class="line">        configurable: <span class="literal">true</span>,</span><br><span class="line">        get: <span class="function"><span class="keyword">function</span> <span class="title">reactiveGetter</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">const</span> value = getter ? getter.call(obj) : val;</span><br><span class="line">            <span class="comment">/*********************************************/</span></span><br><span class="line">            <span class="comment">// 1.这里需要去保存当前在执行的函数</span></span><br><span class="line">            <span class="keyword">if</span> (Dep.target) &#123;</span><br><span class="line">                dep.depend();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">/*********************************************/</span></span><br><span class="line">            <span class="keyword">return</span> value;</span><br><span class="line">        &#125;,</span><br><span class="line">        set: <span class="function"><span class="keyword">function</span> <span class="title">reactiveSetter</span>(<span class="params">newVal</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">const</span> value = getter ? getter.call(obj) : val;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (setter) &#123;</span><br><span class="line">                setter.call(obj, newVal);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                val = newVal;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">/*********************************************/</span></span><br><span class="line">            <span class="comment">// 2.将依赖当前数据依赖的函数执行</span></span><br><span class="line">            dep.notify();</span><br><span class="line">            <span class="comment">/*********************************************/</span></span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="Observer-对象"><a href="#Observer-对象" class="headerlink" title="Observer 对象"></a>Observer 对象</h1><p>我们再写一个 <code>Observer</code> 方法，把对象的全部属性都变成响应式的。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(value) &#123;</span><br><span class="line">        <span class="keyword">this</span>.walk(value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 遍历对象所有的属性，调用 defineReactive</span></span><br><span class="line"><span class="comment">     * 拦截对象属性的 get 和 set 方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    walk(obj) &#123;</span><br><span class="line">        <span class="keyword">const</span> keys = <span class="built_in">Object</span>.keys(obj);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; keys.length; i++) &#123;</span><br><span class="line">            defineReactive(obj, keys[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们提供一个 <code>observe</code> 方法来负责创建 <code>Observer</code> 对象。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">observe</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> ob = <span class="keyword">new</span> Observer(value);</span><br><span class="line">    <span class="keyword">return</span> ob;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>将上边的方法引入到文章最开头的例子，来执行一下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; observe &#125; <span class="keyword">from</span> <span class="string">"./reactive"</span>;</span><br><span class="line"><span class="keyword">import</span> Watcher <span class="keyword">from</span> <span class="string">"./watcher"</span>;</span><br><span class="line"><span class="keyword">const</span> data = &#123;</span><br><span class="line">    text: <span class="string">"hello, world"</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 将数据变成响应式的</span></span><br><span class="line">observe(data);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> updateComponent = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"收到"</span>, data.text);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当前函数由 Watcher 进行执行</span></span><br><span class="line"><span class="keyword">new</span> Watcher(updateComponent);</span><br><span class="line"></span><br><span class="line">data.text = <span class="string">"hello, liang"</span>;</span><br></pre></td></tr></table></figure>
<p>此时就会输出两次了~</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">收到 hello, world</span><br><span class="line">收到 hello, liang</span><br></pre></td></tr></table></figure>
<p>说明我们的响应式系统成功了。</p>
<h1 id="总"><a href="#总" class="headerlink" title="总"></a>总</h1><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220329092722630.png" alt="image-20220329092722630"></p>
<p>先从整体理解了响应式系统的整个流程：</p>
<p>每个属性有一个 <code>subs</code> 数组，<code>Watcher</code> 会持有当前执行的函数，当读取属性的时候触发 <code>get</code> ，将当前 <code>Watcher</code> 保存到 <code>subs</code> 数组中，当属性值修改的时候，再通过 <code>subs</code> 数组中的 <code>Watcher</code> 对象执行之前保存的函数。</p>
<p>当然还有亿点点细节需要完善，后边的文章会继续。</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>vue2</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue2剥丝抽茧-响应式系统之分支切换</title>
    <url>/2022/03/31/Vue2%E5%89%A5%E4%B8%9D%E6%8A%BD%E8%8C%A7-%E5%93%8D%E5%BA%94%E5%BC%8F%E7%B3%BB%E7%BB%9F%E4%B9%8B%E5%88%86%E6%94%AF%E5%88%87%E6%8D%A2/</url>
    <content><![CDATA[<p>接上篇：<a href="https://windliang.wang/2022/03/27/Vue2%E5%89%A5%E4%B8%9D%E6%8A%BD%E8%8C%A7-%E5%93%8D%E5%BA%94%E5%BC%8F%E7%B3%BB%E7%BB%9F/">Vue2剥丝抽茧-响应式系统</a> ，没看的同学需要先看一下。</p>
<h1 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h1><p>我们考虑一下下边的代码会输出什么。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; observe &#125; <span class="keyword">from</span> <span class="string">"./reactive"</span>;</span><br><span class="line"><span class="keyword">import</span> Watcher <span class="keyword">from</span> <span class="string">"./watcher"</span>;</span><br><span class="line"><span class="keyword">const</span> data = &#123;</span><br><span class="line">    text: <span class="string">"hello, world"</span>,</span><br><span class="line">    ok: <span class="literal">true</span>,</span><br><span class="line">&#125;;</span><br><span class="line">observe(data);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> updateComponent = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"收到"</span>, data.ok ? data.text : <span class="string">"not"</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Watcher(updateComponent); <span class="comment">// updateComponent 执行一次函数，输出 hello, world</span></span><br><span class="line"></span><br><span class="line">data.ok = <span class="literal">false</span>; <span class="comment">// updateComponent 执行一次函数，输出 not</span></span><br><span class="line"></span><br><span class="line">data.text = <span class="string">"hello, liang"</span>; <span class="comment">// updateComponent 会执行吗？</span></span><br></pre></td></tr></table></figure>
<p>我们来一步一步理清：</p>
<h2 id="observer-data"><a href="#observer-data" class="headerlink" title="observer(data)"></a><code>observer(data)</code></h2><p>拦截了 <code>data</code> 中 <code>text</code> 和 <code>ok</code> 的 <code>get、set</code>，并且各自初始化了一个 <code>Dep</code> 实例，用来保存依赖它们的 <code>Watcher</code> 对象。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220331073954801.png" alt="image-20220331073954801"></p>
<h2 id="new-Watcher-updateComponent"><a href="#new-Watcher-updateComponent" class="headerlink" title="new Watcher(updateComponent);"></a><code>new Watcher(updateComponent);</code></h2><p>这一步会执行 <code>updateComponent</code> 函数，执行过程中用到的所有对象属性，会将 <code>Watcher</code> 收集到相应对象属性中的<code>Dep</code> 中。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220331074904131.png" alt="image-20220331074904131"></p>
<p>当然这里的 <code>Watcher</code> 其实是同一个，所以用了指向的箭头。</p>
<h2 id="data-ok-false"><a href="#data-ok-false" class="headerlink" title="data.ok = false;"></a><code>data.ok = false;</code></h2><p>这一步会触发 <code>set</code> ，从而执行 <code>Dep</code> 中所有的 <code>Watcher</code> ，此时就会执行一次 <code>updateComponent</code> 。</p>
<p>执行 <code>updateComponent</code> 就会重新读取 <code>data</code> 中的属性，触发 <code>get</code>，然后继续收集 <code>Watcher</code> 。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220331080258402.png" alt="image-20220331080258402"></p>
<p>重新执行  <code>updateComponent</code> 函数 的时候：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> updateComponent = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"收到"</span>, data.ok ? data.text : <span class="string">"not"</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>因为 <code>data.ok</code> 的值变为 <code>false</code> ，所以就不会触发 <code>data.text</code> 的 <code>get</code> ，<code>text</code> 的 <code>Dep</code> 就不会变化了。</p>
<p>而 <code>data.ok</code> 会继续执行，触发 <code>get</code> 收集 <code>Watcher</code> ，但由于我们 <code>Dep</code> 中使用的是数组，此时收集到的两个 <code>Wacher</code> 其实是同一个，这里是有问题，会导致 <code>updateComponent</code> 重复执行，一会儿我们来解决下。</p>
<h2 id="data-text-quot-hello-liang-quot"><a href="#data-text-quot-hello-liang-quot" class="headerlink" title="data.text = &quot;hello, liang&quot;;"></a><code>data.text = &quot;hello, liang&quot;;</code></h2><p>执行这句的时候，会触发 <code>text</code> 的 <code>set</code>，所以会执行一次 <code>updateComponent</code> 。但从代码来看 <code>updateComponent</code> 函数中由于 <code>data.ok</code> 为 <code>false</code>，<code>data.text</code> 对输出没有任何影响，这次执行其实是没有必要的。</p>
<p>之所以执行了，是因为第一次执行  <code>updateComponent</code>  读取了 <code>data.text</code> 从而收集了 <code>Watcher</code> ，第二次执行 <code>updateComponent</code> 的时候，<code>data.text</code> 虽然没有读到，但之前的 <code>Watcher</code> 也没有清除掉，所以这一次改变 <code>data.text</code> 的时候  <code>updateComponent</code>  依旧会执行。</p>
<p>所以我们需要的就是当重新执行 <code>updateComponent</code> 的时候，如果 <code>Watcher</code> 已经不依赖于某个 <code>Dep</code> 了，我们需要将当前 <code>Watcher</code> 从该 <code>Dep</code> 中移除掉。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220331081754535.png" alt="image-20220331081754535"></p>
<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>总结下来我们需要做两件事情。</p>
<ol>
<li>去重，<code>Dep</code> 中不要重复收集 <code>Watcher</code> 。</li>
<li>重置，如果该属性对 <code>Dep</code> 中的 <code>Wacher</code> 已经没有影响了（换句话就是，<code>Watcher</code> 中的 <code>updateComponent</code> 已经不会读取到该属性了<br>），就将该 <code>Watcher</code> 从该属性的 <code>Dep</code> 中删除。</li>
</ol>
<h1 id="去重"><a href="#去重" class="headerlink" title="去重"></a>去重</h1><p>去重的话有两种方案：</p>
<ol>
<li><code>Dep</code> 中的 <code>subs</code> 数组换为 <code>Set</code>。</li>
<li>每个 <code>Dep</code> 对象引入 <code>id</code> ，<code>Watcher</code> 对象中记录所有的 <code>Dep</code> 的 <code>id</code>，下次重新收集依赖的时候，如果 <code>Dep</code> 的 <code>id</code> 已经存在，就不再收集该 <code>Watcher</code> 了。</li>
</ol>
<p><code>Vue2</code> 源码中采用的是方案 <code>2</code> 这里我们实现下：</p>
<p><code>Dep</code> 类的话只需要引入 <code>id</code> 即可。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*************改动***************************/</span></span><br><span class="line"><span class="keyword">let</span> uid = <span class="number">0</span>;</span><br><span class="line"><span class="comment">/****************************************/</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Dep</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> target; <span class="comment">//当前在执行的函数</span></span><br><span class="line">    subs; <span class="comment">// 依赖的函数</span></span><br><span class="line">  	id; <span class="comment">// Dep 对象标识</span></span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">      <span class="comment">/**************改动**************************/</span></span><br><span class="line">        <span class="keyword">this</span>.id = uid++;</span><br><span class="line">      <span class="comment">/****************************************/</span></span><br><span class="line">        <span class="keyword">this</span>.subs = []; <span class="comment">// 保存所有需要执行的函数</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    addSub(sub) &#123;</span><br><span class="line">        <span class="keyword">this</span>.subs.push(sub);</span><br><span class="line">    &#125;</span><br><span class="line">    depend() &#123;</span><br><span class="line">        <span class="keyword">if</span> (Dep.target) &#123;</span><br><span class="line">            <span class="comment">// 委托给 Dep.target 去调用 addSub</span></span><br><span class="line">            Dep.target.addDep(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    notify() &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, l = <span class="keyword">this</span>.subs.length; i &lt; l; i++) &#123;</span><br><span class="line">            <span class="keyword">this</span>.subs[i].update();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Dep.target = <span class="literal">null</span>; <span class="comment">// 静态变量，全局唯一</span></span><br></pre></td></tr></table></figure>
<p>在 <code>Watcher</code> 中，我们引入 <code>this.depIds</code> 来记录所有的 <code>id</code> 。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Dep <span class="keyword">from</span> <span class="string">"./dep"</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Watcher</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(Fn) &#123;</span><br><span class="line">    <span class="keyword">this</span>.getter = Fn;</span><br><span class="line">    <span class="comment">/*************改动***************************/</span></span><br><span class="line">    <span class="keyword">this</span>.depIds = <span class="keyword">new</span> <span class="built_in">Set</span>(); <span class="comment">// 拥有 has 函数可以判断是否存在某个 id</span></span><br><span class="line">    <span class="comment">/****************************************/</span></span><br><span class="line">    <span class="keyword">this</span>.get();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Evaluate the getter, and re-collect dependencies.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">  get() &#123;</span><br><span class="line">    Dep.target = <span class="keyword">this</span>; <span class="comment">// 保存包装了当前正在执行的函数的 Watcher</span></span><br><span class="line">    <span class="keyword">let</span> value;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      value = <span class="keyword">this</span>.getter.call();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      <span class="keyword">throw</span> e;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.cleanupDeps();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Add a dependency to this directive.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">  addDep(dep) &#123;</span><br><span class="line">    <span class="comment">/*************改动***************************/</span></span><br><span class="line">    <span class="keyword">const</span> id = dep.id;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.depIds.has(id)) &#123;</span><br><span class="line">      dep.addSub(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/****************************************/</span></span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Subscriber interface.</span></span><br><span class="line"><span class="comment">     * Will be called when a dependency changes.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">  update() &#123;</span><br><span class="line">    <span class="keyword">this</span>.run();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Scheduler job interface.</span></span><br><span class="line"><span class="comment">     * Will be called by the scheduler.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">  run() &#123;</span><br><span class="line">    <span class="keyword">this</span>.get();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="重置"><a href="#重置" class="headerlink" title="重置"></a>重置</h1><p>同样是两个方案：</p>
<ol>
<li>全量式移除，保存 <code>Watcher</code> 所影响的所有 <code>Dep</code> 对象，当重新收集 <code>Watcher</code> 的前，把当前 <code>Watcher</code> 从记录中的所有 <code>Dep</code> 对象中移除。</li>
<li>增量式移除，重新收集依赖时，用一个新的变量记录所有的 <code>Dep</code> 对象，之后再和旧的 <code>Dep</code> 对象列表比对，如果新的中没有，旧的中有，就将当前 <code>Watcher</code> 从该 <code>Dep</code> 对象中移除。</li>
</ol>
<p><code>Vue2</code> 中采用的是方案 <code>2</code>，这里也实现下。</p>
<p>首先是 <code>Dep</code> 类，我们需要提供一个 <code>removeSub</code> 方法。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; remove &#125; <span class="keyword">from</span> <span class="string">"./util"</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">export function remove(arr, item) &#123;</span></span><br><span class="line"><span class="comment">    if (arr.length) &#123;</span></span><br><span class="line"><span class="comment">        const index = arr.indexOf(item);</span></span><br><span class="line"><span class="comment">        if (index &gt; -1) &#123;</span></span><br><span class="line"><span class="comment">            return arr.splice(index, 1);</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">let</span> uid = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Dep</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> target; <span class="comment">//当前在执行的函数</span></span><br><span class="line">    subs; <span class="comment">// 依赖的函数</span></span><br><span class="line">    id; <span class="comment">// Dep 对象标识</span></span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">this</span>.id = uid++;</span><br><span class="line">        <span class="keyword">this</span>.subs = []; <span class="comment">// 保存所有需要执行的函数</span></span><br><span class="line">    &#125;</span><br><span class="line">		</span><br><span class="line">    addSub(sub) &#123;</span><br><span class="line">        <span class="keyword">this</span>.subs.push(sub);</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">/*************新增************************/</span></span><br><span class="line">    removeSub(sub) &#123;</span><br><span class="line">        remove(<span class="keyword">this</span>.subs, sub);</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">/****************************************/</span></span><br><span class="line">    depend() &#123;</span><br><span class="line">        <span class="keyword">if</span> (Dep.target) &#123;</span><br><span class="line">            <span class="comment">// 委托给 Dep.target 去调用 addSub</span></span><br><span class="line">            Dep.target.addDep(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    notify() &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, l = <span class="keyword">this</span>.subs.length; i &lt; l; i++) &#123;</span><br><span class="line">            <span class="keyword">this</span>.subs[i].update();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Dep.target = <span class="literal">null</span>; <span class="comment">// 静态变量，全局唯一</span></span><br></pre></td></tr></table></figure>
<p>然后是 <code>Watcher</code> 类，我们引入 <code>this.deps</code> 来保存所有的旧 <code>Dep</code> 对象，引入 <code>this.newDeps</code> 来保存所有的新 <code>Dep</code> 对象。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Dep <span class="keyword">from</span> <span class="string">"./dep"</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Watcher</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(Fn) &#123;</span><br><span class="line">        <span class="keyword">this</span>.getter = Fn;</span><br><span class="line">        <span class="keyword">this</span>.depIds = <span class="keyword">new</span> <span class="built_in">Set</span>(); <span class="comment">// 拥有 has 函数可以判断是否存在某个 id</span></span><br><span class="line">      	<span class="comment">/*************新增************************/</span></span><br><span class="line">        <span class="keyword">this</span>.deps = [];</span><br><span class="line">        <span class="keyword">this</span>.newDeps = []; <span class="comment">// 记录新一次的依赖</span></span><br><span class="line">        <span class="keyword">this</span>.newDepIds = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">      	<span class="comment">/****************************************/</span></span><br><span class="line">        <span class="keyword">this</span>.get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Evaluate the getter, and re-collect dependencies.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    get() &#123;</span><br><span class="line">        Dep.target = <span class="keyword">this</span>; <span class="comment">// 保存包装了当前正在执行的函数的 Watcher</span></span><br><span class="line">        <span class="keyword">let</span> value;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            value = <span class="keyword">this</span>.getter.call();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">          	<span class="comment">/*************新增************************/</span></span><br><span class="line">            <span class="keyword">this</span>.cleanupDeps();</span><br><span class="line">          	<span class="comment">/****************************************/</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Add a dependency to this directive.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    addDep(dep) &#123;</span><br><span class="line">        <span class="keyword">const</span> id = dep.id;</span><br><span class="line">      <span class="comment">/*************新增************************/</span></span><br><span class="line">        <span class="comment">// 新的依赖已经存在的话，同样不需要继续保存</span></span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">this</span>.newDepIds.has(id)) &#123;</span><br><span class="line">            <span class="keyword">this</span>.newDepIds.add(id);</span><br><span class="line">            <span class="keyword">this</span>.newDeps.push(dep);</span><br><span class="line">            <span class="keyword">if</span> (!<span class="keyword">this</span>.depIds.has(id)) &#123;</span><br><span class="line">                dep.addSub(<span class="keyword">this</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      <span class="comment">/****************************************/</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Clean up for dependency collection.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">  	<span class="comment">/*************新增************************/</span></span><br><span class="line">    cleanupDeps() &#123;</span><br><span class="line">        <span class="keyword">let</span> i = <span class="keyword">this</span>.deps.length;</span><br><span class="line">        <span class="comment">// 比对新旧列表，找到旧列表里有，但新列表里没有，来移除相应 Watcher</span></span><br><span class="line">        <span class="keyword">while</span> (i--) &#123;</span><br><span class="line">            <span class="keyword">const</span> dep = <span class="keyword">this</span>.deps[i];</span><br><span class="line">            <span class="keyword">if</span> (!<span class="keyword">this</span>.newDepIds.has(dep.id)) &#123;</span><br><span class="line">                dep.removeSub(<span class="keyword">this</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 新的列表赋值给旧的，新的列表清空</span></span><br><span class="line">        <span class="keyword">let</span> tmp = <span class="keyword">this</span>.depIds;</span><br><span class="line">        <span class="keyword">this</span>.depIds = <span class="keyword">this</span>.newDepIds;</span><br><span class="line">        <span class="keyword">this</span>.newDepIds = tmp;</span><br><span class="line">        <span class="keyword">this</span>.newDepIds.clear();</span><br><span class="line">        tmp = <span class="keyword">this</span>.deps;</span><br><span class="line">        <span class="keyword">this</span>.deps = <span class="keyword">this</span>.newDeps;</span><br><span class="line">        <span class="keyword">this</span>.newDeps = tmp;</span><br><span class="line">        <span class="keyword">this</span>.newDeps.length = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  	<span class="comment">/****************************************/</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Subscriber interface.</span></span><br><span class="line"><span class="comment">     * Will be called when a dependency changes.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    update() &#123;</span><br><span class="line">        <span class="keyword">this</span>.run();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Scheduler job interface.</span></span><br><span class="line"><span class="comment">     * Will be called by the scheduler.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    run() &#123;</span><br><span class="line">        <span class="keyword">this</span>.get();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>回到开头的代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; observe &#125; <span class="keyword">from</span> <span class="string">"./reactive"</span>;</span><br><span class="line"><span class="keyword">import</span> Watcher <span class="keyword">from</span> <span class="string">"./watcher"</span>;</span><br><span class="line"><span class="keyword">const</span> data = &#123;</span><br><span class="line">    text: <span class="string">"hello, world"</span>,</span><br><span class="line">    ok: <span class="literal">true</span>,</span><br><span class="line">&#125;;</span><br><span class="line">observe(data);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> updateComponent = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"收到"</span>, data.ok ? data.text : <span class="string">"not"</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Watcher(updateComponent); <span class="comment">// updateComponent 执行一次函数，输出 hello, world</span></span><br><span class="line"></span><br><span class="line">data.ok = <span class="literal">false</span>; <span class="comment">// updateComponent 执行一次函数，输出 not</span></span><br><span class="line"></span><br><span class="line">data.text = <span class="string">"hello, liang"</span>; <span class="comment">// updateComponent 会执行吗？</span></span><br></pre></td></tr></table></figure>
<p>此时 <code>data.text</code> 修改的话就不会再执行 <code>updateComponent</code> 了，因为第二次执行的时候，我们把 <code>data.text</code> 中 <code>Dep</code> 里的 <code>Watcher</code> 清除了。</p>
<h1 id="总"><a href="#总" class="headerlink" title="总"></a>总</h1><p>今天这个主要就是对响应式系统的一点优化，避免不必要的重新执行。所做的事情就是重新调用函数的时候，把已经没有关联的 <code>Watcher</code> 去除。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220331091857522.png" alt="image-20220331091857522"></p>
<p>不知道看到这里大家有没有一个疑问，我是一直没想到说服我的点，欢迎一起交流：</p>
<p>在解决去重问题上，我们是引入了 <code>id</code> ，但如果直接用 <code>set</code> 其实就可以。在  <code>Watcher</code> 类中是用 <code>Set</code> 来存 <code>id</code> ，用数组来存 <code>Dep</code> 对象，为什么不直接用 <code>Set</code> 来存 <code>Dep</code> 对象呢？</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>vue2</tag>
      </tags>
  </entry>
  <entry>
    <title>WebSocket: 从狼吃羊说起</title>
    <url>/2019/06/27/WebSocket-%E4%BB%8E%E7%8B%BC%E5%90%83%E7%BE%8A%E8%AF%B4%E8%B5%B7/</url>
    <content><![CDATA[<h1 id="缘起"><a href="#缘起" class="headerlink" title="缘起"></a>缘起</h1><p>大概是大三暑假的时候吧，当时突然想起自己童年玩的一款棋类游戏，网上搜了搜也没有可以在线对战的，恰巧当时会一点前端的知识，于是就想着当个项目刚好练练手吧。小时候一般会和小伙伴，找来石头当狼，杏核当羊，然后在院子里用粉笔画上棋盘，就开始大战了。当时也没有手机拍照，在网上找到一张图，大家想象下吧，哈哈。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/wolf.jpg" alt=""></p>
<p>应该是很久之前流传下来的游戏了，但现在应该也不会有人再玩了，还是很可惜的。至于为什么突然想起说这个事，因为下周六要去字节跳动面试前端了，竟然要面临人生的第一次找工作了，没啥经验，这几天就多整理整理知识点吧。</p>
<h1 id="行动"><a href="#行动" class="headerlink" title="行动"></a>行动</h1><p>说实话当时对前端真的就只是了解的程度(虽然现在也是），也没做过什么项目，但是我们可以面向谷歌/github 编程呀。</p>
<p>第一步就先做一个单机版的狼吃羊吧，怎么做呢，怎么画棋呢？怎么控制走动呢。于是找到了中国象棋的 <a href="https://github.com/Royhoo/write-a-chinesechess-program" target="_blank" rel="noopener">js 实现</a>。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/chess.jpg" alt=""></p>
<p>然后只需要解决三件事。</p>
<ol>
<li><p>怎么响应用户对棋子的点击？</p>
<p>开始自己的想法是根据坐标判断点击是不是在某个矩形区域内。参考上边的 github ，学到了一个更简单粗暴的方法，每个棋子用图片表示，然后每个图片添加响应事件即可。</p>
</li>
<li><p>根据什么显示棋子位置？</p>
<p>直接用一个二维数组，1 代表显示图片，0 代表不显示即可。</p>
</li>
<li><p>怎么制定棋走的规则？</p>
<p>简单粗暴些，由于狼吃羊只有两种角色，棋盘的位置点也不多。直接根据每个点写它具体的规则即可。当时就是为了快点写出来，麻不麻烦也没考虑，有时候无脑暴力真的是最省脑子的方法，关键它还有用。</p>
</li>
</ol>
<p>毕竟是快两年前的事情了，印象深的就是上边的了，然后就是一些细节的东西了，边调边改吧，自己就开始写了，一点一点最后完成了单机版的。也就是只能两个人在一台手机上玩。当然这个时代，大家更喜欢联网一起玩游戏。</p>
<h1 id="WebSocket-初见"><a href="#WebSocket-初见" class="headerlink" title="WebSocket 初见"></a>WebSocket 初见</h1><p>网上对战的棋类游戏， 这怎么做呀？网上找的 js 棋类都是单机的，这可怎么办呀，ctrl + C , ctrl + V 大法不好使了呀？</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/cry6.jpg" alt=""></p>
<p>这可不行，让我思考一下，两个人互相下棋，我们只需要互相传一下自己走棋的位置，就传一个坐标即可。这么简单的数据，怎么传呢？大一暑假写 MFC 的时候用过 socket，但这是 JS 呀，咋办嘞。</p>
<p>传数据，互相传数据，聊天室呀！我要是学会了聊天室传数据，这狼吃羊改改不就行了，于是，嘿嘿嘿，又被我找到了一个项目。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/chat.jpg" alt=""></p>
<p>太多了，找到了一个符合自己的，然后就是学起来了。于是就了解到了 websocket 和 node.js。</p>
<h1 id="WebSocket-探究"><a href="#WebSocket-探究" class="headerlink" title="WebSocket 探究"></a>WebSocket 探究</h1><p>前端数据的传输我们都用的 HTTP 协议，HTTP 协议的一个特征就是，客户端向服务端情况数据，服务端返回数据给客户端。也就是客户端不问，服务端并不会理会客户端。</p>
<p>那么我们的聊天室用 HTTP 协议怎么实现呢？我打开聊天框，我怎么知道啥时候会有消息过来，我总不能不停的去问服务端吧！</p>
<h2 id="传统轮训-Traditional-Polling"><a href="#传统轮训-Traditional-Polling" class="headerlink" title="传统轮训(Traditional Polling)"></a>传统轮训(Traditional Polling)</h2><p>bingo！你说出了一种解决方案，传统轮训(Traditional Polling)，用一个定时器，每隔一段时间就像服务器请求一下。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $.get(<span class="string">"/path/to/server"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data, status</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(data);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;, <span class="number">10000</span>);</span><br></pre></td></tr></table></figure>
<p>但。。。太不优雅了吧，万一服务器 10 分钟都没消息，那我每隔 10 秒访问一次，也太浪费时间了吧。于是，又诞生了一种方案。</p>
<h2 id="长轮训（Long-Polling）"><a href="#长轮训（Long-Polling）" class="headerlink" title="长轮训（Long Polling）"></a>长轮训（Long Polling）</h2><p>长轮训（Long Polling），客户端向服务器查询数据，服务器如果没有新数据，之前的话就立刻告诉客户端我没有新数据。而现在的话，服务器端保持这个连接，然后有了新数据以后再传回给客户端。然后客户端收到数据，再次向服务端要数据，服务端有数据的话就给客户端，没有的话就保持住连接直到有了，然后重复上边的过程。</p>
<p>聊天室似乎可以实现了，早期的 web QQ 大概就是这种策略吧。但是，现在还是客户端请求，服务端才给回复，服务端能不能主动点，有了消息直接发给客户端，非得等客服端去要吗？有方法的！</p>
<h2 id="WebSocket"><a href="#WebSocket" class="headerlink" title="WebSocket"></a>WebSocket</h2><p>我们的主角出现了，是他，就是他，实现了客户端和服务端互相主动发送数据，服务端终于主动了起来。</p>
<p>首先 WebSoket 通过 HTTP 协议建立连接，然后就可以互相发数据了，底层用的 TCP。那么干脆让我们看一下，聊天室怎么实现吗，当然直接贴别人的代码吧，哈哈。</p>
<p>协议只是一些规范，我们还需要去实现它，怎么实现 WebSocket 呢？本着不重复造轮子（自己也实现不了呀）的原则，我们直接用别人的库吧，socket.io ，已经帮我们实现好了，我们根据它提供的 API 用就好了。还有一个好处是这个库还兼容不支持 Websocket 的浏览器，自动改成长轮训或者其他算法。直接把 socket.io <a href="https://socket.io/get-started/chat" target="_blank" rel="noopener">官网</a>给的例子贴过来。</p>
<h2 id="客户端-index-html"><a href="#客户端-index-html" class="headerlink" title="客户端 index.html"></a>客户端 index.html</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Socket.IO chat<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">      * &#123; margin: 0; padding: 0; box-sizing: border-box; &#125;</span></span><br><span class="line"><span class="undefined">      body &#123; font: 13px Helvetica, Arial; &#125;</span></span><br><span class="line"><span class="undefined">      form &#123; background: #000; padding: 3px; position: fixed; bottom: 0; width: 100%; &#125;</span></span><br><span class="line"><span class="undefined">      form input &#123; border: 0; padding: 10px; width: 90%; margin-right: .5%; &#125;</span></span><br><span class="line"><span class="undefined">      form button &#123; width: 9%; background: rgb(130, 224, 255); border: none; padding: 10px; &#125;</span></span><br><span class="line"><span class="undefined">      #messages &#123; list-style-type: none; margin: 0; padding: 0; &#125;</span></span><br><span class="line"><span class="undefined">      #messages li &#123; padding: 5px 10px; &#125;</span></span><br><span class="line"><span class="undefined">      #messages li:nth-child(odd) &#123; background: #eee; &#125;</span></span><br><span class="line"><span class="undefined">      #messages &#123; margin-bottom: 40px &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"messages"</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"m"</span> <span class="attr">autocomplete</span>=<span class="string">"off"</span> /&gt;</span><span class="tag">&lt;<span class="name">button</span>&gt;</span>Send<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.socket.io/socket.io-1.2.0.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://code.jquery.com/jquery-1.11.1.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">      $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> socket =  io( <span class="string">"ws://127.0.0.1:3000"</span>);</span></span><br><span class="line"><span class="javascript">        $(<span class="string">'form'</span>).submit(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">          socket.emit(<span class="string">'chat message'</span>, $(<span class="string">'#m'</span>).val());</span></span><br><span class="line"><span class="javascript">          $(<span class="string">'#m'</span>).val(<span class="string">''</span>);</span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="javascript">        socket.on(<span class="string">'chat message'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">msg</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">          $(<span class="string">'#messages'</span>).append($(<span class="string">'&lt;li&gt;'</span>).text(msg));</span></span><br><span class="line"><span class="javascript">          <span class="built_in">window</span>.scrollTo(<span class="number">0</span>, <span class="built_in">document</span>.body.scrollHeight);</span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="undefined">      &#125;);</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span></span></span><br></pre></td></tr></table></figure>
<p>就不用服务器跑了，所以建立连接的时候，上边写的是 127.0.0.1。然后把本地当作服务器端，看下服务器段的代码。</p>
<h2 id="服务端-index-js"><a href="#服务端-index-js" class="headerlink" title="服务端 index.js"></a>服务端 index.js</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="built_in">require</span>(<span class="string">'express'</span>)();</span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>).Server(app);</span><br><span class="line"><span class="keyword">var</span> io = <span class="built_in">require</span>(<span class="string">'socket.io'</span>)(http);</span><br><span class="line"><span class="keyword">var</span> port = process.env.PORT || <span class="number">3000</span>;</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">  res.sendFile(__dirname + <span class="string">'/index.html'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">io.on(<span class="string">'connection'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">socket</span>)</span>&#123;</span><br><span class="line">  socket.on(<span class="string">'chat message'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">msg</span>)</span>&#123;</span><br><span class="line">    io.emit(<span class="string">'chat message'</span>, msg);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">http.listen(port, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'listening on *:'</span> + port);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>即使没有学过他的 API，也差不多可以看懂吧。是事件驱动的，on 监听事件，emit 发送事件，这样就完成了服务器端和客户端的互相交流信息。</p>
<p>咦，等一下，服务器端怎么跑程序呀，js 不是运行在浏览器里吗？这就得靠 node.js 了。有了它，我们再也不需要把 js 只跑到浏览器中了，因此 js 的领域从前端也扩展到了后端，真的是万事皆可 js。</p>
<p>看一下效果吧。</p>
<p>首先把 index.js 跑起来，监听客服端的请求。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/serve.jpg" alt=""></p>
<p>然后浏览器打开两个聊天页面。</p>
<p>在第一个页面发送消息。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/client1.jpg" alt=""></p>
<p>打开第二个页面，会发现收到了第一个页面的消息。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/client2.jpg" alt=""></p>
<p>完结，撒花。完结，撒花。等等等等等！我们不是做聊天室，我们是要做狼吃羊。对不起，有点激动。</p>
<p>我们理一下，现在已经可以互相传东西了，那么我们只需要一台服务器做中转，A 和 B 对战。A 把消息传给服务器，服务器转给 B。B 把消息传给服务器，服务器转给 A。思想有了，然后就是看一看 socket.io 的 API，用起来就可以了。不过一些创建房间，记录对方的 id 的一些逻辑还是挺烧脑的。</p>
<h1 id="再探-web-Socket"><a href="#再探-web-Socket" class="headerlink" title="再探 web Socket"></a>再探 web Socket</h1><p>监测下网络，让我们看一下 web Socket 到底怎么连接的。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/net.jpg" alt=""></p>
<p>看到了一个 websocket 类型的，让我们看下细节。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/websocket.jpg" alt=""></p>
<p>值得注意的是，建立连接使用的是 HTTP 协议，状态码是 101，第一次遇到。然后就是 WebSocket 一些相关的字段，目的就是试探对方是否支持 WebSocket，试探成功的话，双方就会建立长连接，就可以互相发送消息了。</p>
<h1 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h1><p>就这样，地球上第一款 Web 大型棋类益智对战游戏「狼吃羊」诞生了！在线试玩地址：<a href="http://game.windliang.cc" target="_blank" rel="noopener">http://game.windliang.cc</a>，用手机打开，PC 端没有适配。当然，界面和图标的设计还得感谢下女朋友，哈哈哈哈哈。</p>
<p align="center"><iframe frameborder="0" src="https://v.qq.com/txp/iframe/player.html?vid=p0890tkorp1" allowfullscreen="true" width="640" height="498"></iframe></p>

]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>websocket</tag>
        <tag>http</tag>
      </tags>
  </entry>
  <entry>
    <title>Webpack打包commonjs和esmodule模块的产物对比</title>
    <url>/2022/05/02/Webpack%E6%89%93%E5%8C%85commonjs%E5%92%8Cesmodule%E6%A8%A1%E5%9D%97%E7%9A%84%E4%BA%A7%E7%89%A9%E5%AF%B9%E6%AF%94/</url>
    <content><![CDATA[<p>这篇文章不涉及 <code>Webpack</code> 的原理，只是观察下 <code>Webpack</code> 对 <code>commonjs</code> 和 <code>esmodule</code> 模块打包后的产物，读完后会对模块系统有个更深的了解。</p>
<h1 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h1><p><code>Webpack</code> 只配置入口和出口，并且将 <code>devtool</code> 设置为 <code>false</code>，把 <code>sourcemap</code> 关掉。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">"path"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: <span class="string">"./src/commonjs/index.js"</span>,</span><br><span class="line">    output: &#123;</span><br><span class="line">        path: path.resolve(__dirname, <span class="string">"./dist"</span>),</span><br><span class="line">        filename: <span class="string">"main.js"</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    devServer: &#123;</span><br><span class="line">        <span class="keyword">static</span>: path.resolve(__dirname, <span class="string">"./dist"</span>),</span><br><span class="line">    &#125;,</span><br><span class="line">    devtool: <span class="literal">false</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><code>npm</code> 安装三个 <code>node</code> 包。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i -D webpack webpack-cli webpack-dev-server</span><br></pre></td></tr></table></figure>
<p>更详细的过程可以参考 <a href="https://zhuanlan.zhihu.com/p/402924613" target="_blank" rel="noopener">2021年从零开发前端项目指南</a></p>
<h1 id="小试牛刀"><a href="#小试牛刀" class="headerlink" title="小试牛刀"></a>小试牛刀</h1><p>先简单写行代码测试一下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// src/commonjs/index.js</span></span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">"hello, liang"</span>);</span><br></pre></td></tr></table></figure>
<p>打包产物：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> __webpack_exports__ = &#123;&#125;;</span><br><span class="line">    <span class="built_in">document</span>.write(<span class="string">"hello, liang"</span>);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>
<p>只是简单的包了层 <code>IIFE</code> 。</p>
<h1 id="commonjs-模块"><a href="#commonjs-模块" class="headerlink" title="commonjs 模块"></a>commonjs 模块</h1><p>写一个 <code>add</code> 模块函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// src/commonjs/add.js</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"add开始引入"</span>);</span><br><span class="line"><span class="built_in">module</span>.exports.add = <span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;;</span><br><span class="line">exports.PI = <span class="number">3.14</span>;</span><br></pre></td></tr></table></figure>
<p>然后 <code>index.js</code> 进行调用。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// src/commonjs/index.js</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"commonjs开始执行"</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; add &#125; = <span class="built_in">require</span>(<span class="string">"./add"</span>);</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">"1+1="</span>, add(<span class="number">1</span>, <span class="number">1</span>));</span><br></pre></td></tr></table></figure>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220503162217512.png" alt="image-20220503162217512"></p>
<p>分析一下打包产物。</p>
<p>变成了 <code>key、value</code> 的键值对，<code>key</code> 是文件名，<code>value</code> 是封装为一个函数的模块，提供 <code>module</code>  和  <code>exports</code>参数。</p>
<p>这里我们只有一个模块，所以只有一个 <code>key</code> 。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> __webpack_modules__ = &#123;</span><br><span class="line">  <span class="string">"./src/commonjs/add.js"</span>: <span class="function">(<span class="params"><span class="built_in">module</span>, exports</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"add开始引入"</span>);</span><br><span class="line">    <span class="built_in">module</span>.exports.add = <span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;;</span><br><span class="line">    exports.PI = <span class="number">3.14</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>提供一个 <code>__webpack_require__</code> 方法用来导入上边 <code>__webpack_modules__</code>  中的模块。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__webpack_require__</span>(<span class="params">moduleId</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> <span class="built_in">module</span>  = &#123;</span><br><span class="line">    exports: &#123;&#125;,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  __webpack_modules__[moduleId](</span><br><span class="line">    <span class="built_in">module</span>,</span><br><span class="line">    <span class="built_in">module</span>.exports,</span><br><span class="line">    __webpack_require__</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">module</span>.exports;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>因为 <code>module</code> 和 <code>exports</code> 都是对象，所以在 <code>__webpack_modules__</code> 中给 <code>exports</code> 添加值就是改变这里外边的值。</p>
<p>最后把 <code>module.exports</code> 返回即可。</p>
<p>此外，我们可以添加一个 <code>__webpack_module_cache__</code> 变量来保存已经导出过的对象。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> __webpack_module_cache__ = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__webpack_require__</span>(<span class="params">moduleId</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 如果已经被导出过，直接返回缓存</span></span><br><span class="line">  <span class="keyword">var</span> cachedModule = __webpack_module_cache__[moduleId];</span><br><span class="line">  <span class="keyword">if</span> (cachedModule !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> cachedModule.exports;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 缓存对象指向同一个值</span></span><br><span class="line">  <span class="keyword">var</span> <span class="built_in">module</span> = (__webpack_module_cache__[moduleId] = &#123;</span><br><span class="line">    exports: &#123;&#125;,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  __webpack_modules__[moduleId](</span><br><span class="line">    <span class="built_in">module</span>,</span><br><span class="line">    <span class="built_in">module</span>.exports,</span><br><span class="line">    __webpack_require__</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">module</span>.exports;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后看下整体代码，<code>index.js</code> 中通过 <code>__webpack_require__</code> 方法导入模块即可。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> __webpack_modules__ = &#123;</span><br><span class="line">        <span class="string">"./src/commonjs/add.js"</span>: <span class="function">(<span class="params"><span class="built_in">module</span>, exports</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"add开始引入"</span>);</span><br><span class="line">            <span class="built_in">module</span>.exports.add = <span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> a + b;</span><br><span class="line">            &#125;;</span><br><span class="line">            exports.PI = <span class="number">3.14</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> __webpack_module_cache__ = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__webpack_require__</span>(<span class="params">moduleId</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> cachedModule = __webpack_module_cache__[moduleId];</span><br><span class="line">        <span class="keyword">if</span> (cachedModule !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> cachedModule.exports;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> <span class="built_in">module</span> = (__webpack_module_cache__[moduleId] = &#123;</span><br><span class="line">            exports: &#123;&#125;,</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        __webpack_modules__[moduleId](</span><br><span class="line">            <span class="built_in">module</span>,</span><br><span class="line">            <span class="built_in">module</span>.exports,</span><br><span class="line">            __webpack_require__</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">module</span>.exports;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> __webpack_exports__ = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    (<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"commonjs开始执行"</span>);</span><br><span class="line">        <span class="keyword">const</span> &#123; add &#125; = __webpack_require__(<span class="string">"./src/commonjs/add.js"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">document</span>.write(<span class="string">"1+1="</span>, add(<span class="number">1</span>, <span class="number">1</span>));</span><br><span class="line">    &#125;)();</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>
<h1 id="esmodule-模块"><a href="#esmodule-模块" class="headerlink" title="esmodule 模块"></a>esmodule 模块</h1><p>我们把上边的 <code>commonjs</code> 模块改写一下。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// src/esmodule/add.js</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"add开始引入"</span>);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> add = <span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> PI = <span class="number">3.14</span>;</span><br><span class="line"><span class="keyword">const</span> test = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> test;</span><br></pre></td></tr></table></figure>
<p>然后是 <code>index.js</code> 。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// src/esmodule/index.js</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"esmodule开始执行"</span>);</span><br><span class="line"><span class="keyword">import</span> &#123; add &#125; <span class="keyword">from</span> <span class="string">"./add"</span>;</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">"1+1="</span>, add(<span class="number">1</span>, <span class="number">1</span>));</span><br></pre></td></tr></table></figure>
<p>此时运行一下会发现和 <code>commonjs</code> 不同的地方，代码并没有按照我们写的顺序执行，屏幕中先输出的是 <code>add开始引入</code> 然后才是 <code>esmodule开始执行</code>。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220503113614453.png" alt="image-20220503113614453"></p>
<p>看一下打包产物应该就可以理解为什么了。</p>
<p>和之前一样，会提供一个 <code>__webpack_require__</code> 方法来引入模块。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> __webpack_module_cache__ = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__webpack_require__</span>(<span class="params">moduleId</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> cachedModule = __webpack_module_cache__[moduleId];</span><br><span class="line">  <span class="keyword">if</span> (cachedModule !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> cachedModule.exports;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> <span class="built_in">module</span> = (__webpack_module_cache__[moduleId] = &#123;</span><br><span class="line">    exports: &#123;&#125;,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  __webpack_modules__[moduleId](</span><br><span class="line">    <span class="built_in">module</span>,</span><br><span class="line">    <span class="built_in">module</span>.exports,</span><br><span class="line">    __webpack_require__</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">module</span>.exports;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>不同之处在于，额外提供了几个看起来比较奇怪的方法。</p>
<p>第一个是 <code>d</code> 方法，用来将 <code>definition</code> 上边的属性挂到 <code>exports</code> 上。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">__webpack_require__.d = <span class="function">(<span class="params">exports, definition</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> definition) &#123;</span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">      __webpack_require__.o(definition, key) &amp;&amp;</span><br><span class="line">      !__webpack_require__.o(exports, key)</span><br><span class="line">    ) &#123;</span><br><span class="line">      <span class="built_in">Object</span>.defineProperty(exports, key, &#123;</span><br><span class="line">        enumerable: <span class="literal">true</span>,</span><br><span class="line">        get: definition[key],</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>第二个是 <code>o</code> 方法，判断 <code>exports</code> 方法是否有 <code>key</code> 属性。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">__webpack_require__.o = <span class="function">(<span class="params">obj, prop</span>) =&gt;</span></span><br><span class="line">	<span class="built_in">Object</span>.prototype.hasOwnProperty.call(obj, prop);</span><br></pre></td></tr></table></figure>
<p>第三个是 <code>r</code> 方法，给 <code>exports</code> 加一个 <code>Symbol.toStringTag</code> 属性，这样 <code>exports.toString</code> 返回的就是  <code>&#39;[object Module]</code> 。</p>
<p>此外，再加一个 <code>__esModule</code> 属性，用来标识该模块是 <code>esmodule</code> 。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">__webpack_require__.r = <span class="function">(<span class="params">exports</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">Symbol</span> !== <span class="string">"undefined"</span> &amp;&amp; <span class="built_in">Symbol</span>.toStringTag) &#123;</span><br><span class="line">    <span class="built_in">Object</span>.defineProperty(exports, <span class="built_in">Symbol</span>.toStringTag, &#123;</span><br><span class="line">      value: <span class="string">"Module"</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">Object</span>.defineProperty(exports, <span class="string">"__esModule"</span>, &#123;</span><br><span class="line">    value: <span class="literal">true</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>这几个方法啥时候用呢，会在我们的模块代码之前调用。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> __webpack_modules__ = &#123;</span><br><span class="line">        <span class="string">"./src/esmodule/add.js"</span>: (</span><br><span class="line">            __unused_webpack_module,</span><br><span class="line">            __webpack_exports__,</span><br><span class="line">            __webpack_require__</span><br><span class="line">        ) =&gt; &#123;</span><br><span class="line">            __webpack_require__.r(__webpack_exports__);<span class="comment">// 标识该模块是 esmodule</span></span><br><span class="line">            __webpack_require__.d(__webpack_exports__, &#123;<span class="comment">// 将该模块里的属性、方法挂到 __webpack_exports__ 上</span></span><br><span class="line">                add: <span class="function"><span class="params">()</span> =&gt;</span> add,</span><br><span class="line">                PI: <span class="function"><span class="params">()</span> =&gt;</span> PI,</span><br><span class="line">                <span class="keyword">default</span>: <span class="function"><span class="params">()</span> =&gt;</span> __WEBPACK_DEFAULT_EXPORT__,</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"add开始引入"</span>);</span><br><span class="line">            <span class="keyword">const</span> add = <span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> a + b;</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="keyword">const</span> PI = <span class="number">3.14</span>;</span><br><span class="line">            <span class="keyword">const</span> test = <span class="number">3</span>;</span><br><span class="line">            <span class="keyword">const</span> __WEBPACK_DEFAULT_EXPORT__ = test;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure>
<p>我们把 <code>add、PI、__WEBPACK_DEFAULT_EXPORT__</code> 属性都包了箭头函数 <code>() =&gt; add</code> ，因此可以先在 <code>__webpack_require__.d</code> 函数中使用它们，<code>__webpack_require__.d</code> 函数之后才去定义 <code>add、PI、__WEBPACK_DEFAULT_EXPORT__</code>  这些变量的值。</p>
<p>然后是 <code>index.js</code> 的使用。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> __webpack_exports__ = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    (<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        __webpack_require__.r(__webpack_exports__);</span><br><span class="line">        <span class="keyword">var</span> _add__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(</span><br><span class="line">            <span class="string">"./src/esmodule/add.js"</span></span><br><span class="line">        );</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"esmodule开始执行"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">document</span>.write(</span><br><span class="line">            <span class="string">"1+1="</span>,</span><br><span class="line">            (<span class="number">0</span>, _add__WEBPACK_IMPORTED_MODULE_0__.add)(<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">        );</span><br><span class="line">    &#125;)();</span><br></pre></td></tr></table></figure>
<p>可以看到我们是通过 <code>_add__WEBPACK_IMPORTED_MODULE_0__</code> 变量把 <code>./src/esmodule/add.js</code> 的所有方法都拿到，然后再使用 <code>_add__WEBPACK_IMPORTED_MODULE_0__.add</code> 调用具体的方法。</p>
<p>上边还有一个奇怪的用法 <code>(0, _add__WEBPACK_IMPORTED_MODULE_0__.add)(1, 1)</code> ，通过逗号表达式可以改变 <code>this</code> 指向，参考 <a href="https://stackoverflow.com/questions/32275135/why-does-babel-rewrite-imported-function-call-to-0-fn" target="_blank" rel="noopener">Why does babel rewrite imported function call to (0, fn)(…)?</a>，至于为什么这么用还不清楚，目前不重要先跳过了。</p>
<p>然后看下整体代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line"><span class="meta">    "use strict"</span>;</span><br><span class="line">    <span class="keyword">var</span> __webpack_modules__ = &#123;</span><br><span class="line">        <span class="string">"./src/esmodule/add.js"</span>: (</span><br><span class="line">            __unused_webpack_module,</span><br><span class="line">            __webpack_exports__,</span><br><span class="line">            __webpack_require__</span><br><span class="line">        ) =&gt; &#123;</span><br><span class="line">            __webpack_require__.r(__webpack_exports__);</span><br><span class="line">            __webpack_require__.d(__webpack_exports__, &#123;</span><br><span class="line">                add: <span class="function"><span class="params">()</span> =&gt;</span> add,</span><br><span class="line">                PI: <span class="function"><span class="params">()</span> =&gt;</span> PI,</span><br><span class="line">                <span class="keyword">default</span>: <span class="function"><span class="params">()</span> =&gt;</span> __WEBPACK_DEFAULT_EXPORT__,</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"add开始引入"</span>);</span><br><span class="line">            <span class="keyword">const</span> add = <span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> a + b;</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="keyword">const</span> PI = <span class="number">3.14</span>;</span><br><span class="line">            <span class="keyword">const</span> test = <span class="number">3</span>;</span><br><span class="line">            <span class="keyword">const</span> __WEBPACK_DEFAULT_EXPORT__ = test;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> __webpack_module_cache__ = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__webpack_require__</span>(<span class="params">moduleId</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> cachedModule = __webpack_module_cache__[moduleId];</span><br><span class="line">        <span class="keyword">if</span> (cachedModule !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> cachedModule.exports;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> <span class="built_in">module</span> = (__webpack_module_cache__[moduleId] = &#123;</span><br><span class="line">            exports: &#123;&#125;,</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        __webpack_modules__[moduleId](</span><br><span class="line">            <span class="built_in">module</span>,</span><br><span class="line">            <span class="built_in">module</span>.exports,</span><br><span class="line">            __webpack_require__</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">module</span>.exports;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    (<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        __webpack_require__.d = <span class="function">(<span class="params">exports, definition</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> definition) &#123;</span><br><span class="line">                <span class="keyword">if</span> (</span><br><span class="line">                    __webpack_require__.o(definition, key) &amp;&amp;</span><br><span class="line">                    !__webpack_require__.o(exports, key)</span><br><span class="line">                ) &#123;</span><br><span class="line">                    <span class="built_in">Object</span>.defineProperty(exports, key, &#123;</span><br><span class="line">                        enumerable: <span class="literal">true</span>,</span><br><span class="line">                        get: definition[key],</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;)();</span><br><span class="line"></span><br><span class="line">    (<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        __webpack_require__.o = <span class="function">(<span class="params">obj, prop</span>) =&gt;</span></span><br><span class="line">            <span class="built_in">Object</span>.prototype.hasOwnProperty.call(obj, prop);</span><br><span class="line">    &#125;)();</span><br><span class="line"></span><br><span class="line">    (<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        __webpack_require__.r = <span class="function">(<span class="params">exports</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">Symbol</span> !== <span class="string">"undefined"</span> &amp;&amp; <span class="built_in">Symbol</span>.toStringTag) &#123;</span><br><span class="line">                <span class="built_in">Object</span>.defineProperty(exports, <span class="built_in">Symbol</span>.toStringTag, &#123;</span><br><span class="line">                    value: <span class="string">"Module"</span>,</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">Object</span>.defineProperty(exports, <span class="string">"__esModule"</span>, &#123;</span><br><span class="line">                value: <span class="literal">true</span>,</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;)();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> __webpack_exports__ = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    (<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        __webpack_require__.r(__webpack_exports__);</span><br><span class="line">        <span class="keyword">var</span> _add__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(</span><br><span class="line">            <span class="string">"./src/esmodule/add.js"</span></span><br><span class="line">        );</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"commonjs开始执行"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">document</span>.write(</span><br><span class="line">            <span class="string">"1+1="</span>,</span><br><span class="line">            (<span class="number">0</span>, _add__WEBPACK_IMPORTED_MODULE_0__.add)(<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">        );</span><br><span class="line">    &#125;)();</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>
<h1 id="commonjs-和-esmodule-的不同"><a href="#commonjs-和-esmodule-的不同" class="headerlink" title="commonjs 和 esmodule 的不同"></a>commonjs 和 esmodule 的不同</h1><p>两个的打包产物对比：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// commonjs</span></span><br><span class="line"><span class="keyword">var</span> __webpack_modules__ = &#123;</span><br><span class="line">        <span class="string">"./src/commonjs/add.js"</span>: <span class="function">(<span class="params"><span class="built_in">module</span>, exports</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"add开始引入"</span>);</span><br><span class="line">            <span class="built_in">module</span>.exports.add = <span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> a + b;</span><br><span class="line">            &#125;;</span><br><span class="line">            exports.PI = <span class="number">3.14</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//esmodule</span></span><br><span class="line"><span class="keyword">var</span> __webpack_modules__ = &#123;</span><br><span class="line">        <span class="string">"./src/esmodule/add.js"</span>: (</span><br><span class="line">            __unused_webpack_module,</span><br><span class="line">            __webpack_exports__,</span><br><span class="line">            __webpack_require__</span><br><span class="line">        ) =&gt; &#123;</span><br><span class="line">            __webpack_require__.r(__webpack_exports__);<span class="comment">// 标识该模块是 esmodule</span></span><br><span class="line">            __webpack_require__.d(__webpack_exports__, &#123;<span class="comment">// 将该模块里的属性、方法挂到 __webpack_exports__ 上</span></span><br><span class="line">                add: <span class="function"><span class="params">()</span> =&gt;</span> add,</span><br><span class="line">                PI: <span class="function"><span class="params">()</span> =&gt;</span> PI,</span><br><span class="line">                <span class="keyword">default</span>: <span class="function"><span class="params">()</span> =&gt;</span> __WEBPACK_DEFAULT_EXPORT__,</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"add开始引入"</span>);</span><br><span class="line">            <span class="keyword">const</span> add = <span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> a + b;</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="keyword">const</span> PI = <span class="number">3.14</span>;</span><br><span class="line">            <span class="keyword">const</span> test = <span class="number">3</span>;</span><br><span class="line">            <span class="keyword">const</span> __WEBPACK_DEFAULT_EXPORT__ = test;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure>
<p>一个最大的区别就是 <code>commonjs</code> 导出的就是普通的值，一旦导入就不会改变了。而 <code>esmodule</code> 导出的值通过函数包装了一层，因此是动态的，导入之后再次使用可能会变化。</p>
<p>举个例子，对于 <code>esmodule</code> </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// src/esmodule/add.js</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"add开始引入"</span>);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> PI = <span class="number">3.14</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> add = <span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">    PI = <span class="number">6</span>;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> test = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> test;</span><br><span class="line"></span><br><span class="line"><span class="comment">// src/esmodule/index.js</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"esmodule开始执行"</span>);</span><br><span class="line"><span class="keyword">import</span> &#123; add, PI &#125; <span class="keyword">from</span> <span class="string">"./add"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(PI, <span class="string">"1+1="</span>, add(<span class="number">1</span>, <span class="number">1</span>));</span><br><span class="line"><span class="built_in">console</span>.log(PI, <span class="string">"1+1="</span>, add(<span class="number">1</span>, <span class="number">1</span>));</span><br></pre></td></tr></table></figure>
<p>如果只看 <code>src/esmodule/index.js</code> 的代码，我们并没有改变 <code>PI</code> 的值，但执行会发现 <code>add</code> 函数执行后 <code>PI</code> 的值就发生了改变：</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220503114207675.png" alt="image-20220503114207675"></p>
<p>对于原始值， <code>commonjs</code> 就做不到上边的事情了，一般情况下也不要这样搞，以防出现未知 <code>bug</code> 。</p>
<p>此外，<code>esmodule</code> 在挂载属性的时候只定义了 <code>get</code> 。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">__webpack_require__.d = <span class="function">(<span class="params">exports, definition</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> definition) &#123;</span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">      __webpack_require__.o(definition, key) &amp;&amp;</span><br><span class="line">      !__webpack_require__.o(exports, key)</span><br><span class="line">    ) &#123;</span><br><span class="line">      <span class="built_in">Object</span>.defineProperty(exports, key, &#123;</span><br><span class="line">        enumerable: <span class="literal">true</span>,</span><br><span class="line">        get: definition[key],</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>所以我们如果在 <code>esmodule</code> 模块中的去修改导入的值，会直接抛错。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">"esmodule开始执行"</span>);</span><br><span class="line"><span class="keyword">import</span> &#123; add, PI &#125; <span class="keyword">from</span> <span class="string">"./add"</span>;</span><br><span class="line">PI = <span class="number">3</span>;</span><br><span class="line"><span class="built_in">console</span>.log(PI, <span class="string">"1+1="</span>, add(<span class="number">1</span>, <span class="number">1</span>));</span><br></pre></td></tr></table></figure>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220503115321218.png" alt="image-20220503115321218"></p>
<p>在 <code>commonjs</code> 中就无所谓了，但同样也不要这样搞，以防出现未知 <code>bug</code> 。</p>
<h1 id="总"><a href="#总" class="headerlink" title="总"></a>总</h1><p>简单对比了下 <code>commonjs</code> 和 <code>esmodule</code> 模块的产物，其中 <code>commonjs</code> 比较简单，就是普通的导出对象和解构对象。但对于 <code>esmodule</code> 的话，导出的每一个属性会映射到一个函数，因此值是可以动态改变的。</p>
<p>此外 <code>require</code> 会按我们代码中的顺序执行，但 <code>import</code> 会被提升到代码最前边首先执行。</p>
<p>还会继续对比一下两者的动态导入、混合导入，本来想一篇文章总结完的，但有点长了，那就下篇继续吧，哈哈。</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Webpack</tag>
        <tag>commonjs</tag>
        <tag>esmodule</tag>
      </tags>
  </entry>
  <entry>
    <title>https原理及实践</title>
    <url>/2023/01/14/https%E8%AF%81%E4%B9%A6%E5%8E%9F%E7%90%86%E6%8A%93%E5%8C%85%E5%92%8C%E5%AE%9E%E8%B7%B5/</url>
    <content><![CDATA[<p>网站的证书快要过期了，索性就总结下 <code>HTTPS</code> 相关的东西吧。</p>
<h1 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h1><p><code>HTTPS</code>  说白了就是加密传输信息，防止信息泄露，需要提前了解几个概念：</p>
<h2 id="加密"><a href="#加密" class="headerlink" title="加密"></a>加密</h2><p>先说说最简单的加密，替换法，每个字符都对应到一个新的字符：</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20230116081932963.png" alt="image-20230116081932963"></p>
<p>比如明文是 <code>windliang</code> ，通过上边的映射关系密文就是 <code>pbgwebtgz</code>。</p>
<p>古代就使用过这种加密算法，但通过词频的分析，暴力枚举很容易被破解，因此现代已经不会用这种算法了。</p>
<p>不管什么加密算法，都可以分为明文，密文，和密钥、算法三部分。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20230116083309471.png" alt="image-20230116083309471"></p>
<p>这里的密钥就可以理解为上边的映射表，算法就是直接映射。</p>
<p>现代的加密算法，密钥一般就是一个字符串，算法就比较复杂了，会进行各种计算，或操作、与操作，分组等，然后再应用各种数学知识，质数、模相等… ，大学的时候有学过，这里也忘光了，下边只介绍简单概念了。</p>
<h2 id="对称加密"><a href="#对称加密" class="headerlink" title="对称加密"></a>对称加密</h2><p>和古代的加密算法流程是一样的</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20230116083309471.png" alt="image-20230116083309471"></p>
<p>只是其中的算法相对于简单的替换会更加复杂。常用的有 DES 算法、AES 算法、3DES 算法、TDEA 算法、Blowfish 算法、RC5 算法、IDEA 算法等。其特点是，加密和解密<strong>使用同一密钥</strong>。</p>
<h2 id="非对称加密"><a href="#非对称加密" class="headerlink" title="非对称加密"></a>非对称加密</h2><p>与之前最大的不同之处是包含了两个密钥，一个称之为公钥，一个称之为私钥。并且算法相对于对称加密会更加复杂。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20230116220615109.png" alt="image-20230116220615109"></p>
<p>公钥和私钥都能进行加密，用公钥加密后只能用私钥解密，用私钥加密后只能用公钥解密。</p>
<p>常见非对称加密算法包括 DSA 算法、RSA 算法、Elgamal 算法、背包算法、Rabin 算法、D-H 算法、ECC 算法等。由于算法非常复杂，因此非对称加解密会<strong>非常耗时</strong>。</p>
<h2 id="哈希算法"><a href="#哈希算法" class="headerlink" title="哈希算法"></a>哈希算法</h2><p>可以看做一种特殊的加密。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20230116221214098.png" alt="image-20230116221214098"></p>
<p>它是单向的，加密后无法再还原。可以将任意长度的明文串映射为较短的（通常是固定长度的）二进制串（<code>Hash</code> 值），并且不同的明文很难映射为相同的 <code>Hash</code> 值。</p>
<p>目前常见的 <code>Hash</code> 算法包括国际上的 Message Digest（MD）系列和 Secure Hash Algorithm（SHA）系列算法，以及国内的 <code>SM3</code> 算法。</p>
<p>利用这个特性，我们就可以快速比对文本是否被篡改，将明文和 <code>hash</code>  值一起传输给对方，收到后将明文重新生成 <code>Hash</code> 值，再和收到的 <code>Hash</code> 值比对，如果 <code>Hash</code> 值不同就说明被篡改过了。</p>
<h1 id="传纸条"><a href="#传纸条" class="headerlink" title="传纸条"></a>传纸条</h1><p>假设教室中第一排的小明想给最后一排的小红传纸条。</p>
<h2 id="直接传"><a href="#直接传" class="headerlink" title="直接传"></a>直接传</h2><p>第一种最简单的方法就是想传啥直接写到纸上，然后叠起来，让教室中间的人帮助传递过去即可。</p>
<p>但存在一个最大的问题，不安全，中间的某一个同学如果突发好奇，直接拆开纸条，内容就一览无余了。</p>
<h2 id="对称加密-1"><a href="#对称加密-1" class="headerlink" title="对称加密"></a>对称加密</h2><p>小明想了想那我和小红约定一个对称加密算法吧，我先把密钥写到纸上传给小红，之后我都加密后写到纸上传给小红，这样就安全了吧。</p>
<p>中间传纸条的小刚突发好奇，拆开了纸条但这次好奇心没有得到满足，发现纸上写的由于加密过了已经完全看不懂了。</p>
<p>但小华拆开纸条却突然笑出了声，因为他读懂了纸条内容，在小明第一次传写有密钥的纸条的时候小华就已经拆开并且偷偷记下来了。所以后续的传递，只要小华想看，拆开以后通过密钥解密一下就可以了。</p>
<h2 id="非对称加密-1"><a href="#非对称加密-1" class="headerlink" title="非对称加密"></a>非对称加密</h2><p>小明和小红想这可不行啊，于是两个人说干脆我们用非对称加密吧，我们的纸条内容都用对方的公钥加密，拿到纸条后用自己的私钥进行解密。这样纸条被别人看到也无所谓了，因为私钥只有我们自己有。</p>
<p>于是第一次传纸条的时候，小明把自己的公钥写好传给了小红，小红以后拿着这个公钥加密后再写到纸条上。小红也把自己的公钥写好传给了小明，小明以后拿着这个公钥加密后再写到纸条上。</p>
<p>小明收到小红写的纸条内容后，因为纸条是用小明的公钥加密过的，小明只需要用自己的私钥解密一下即可正常阅读了。</p>
<p>小红也是同样的道理。</p>
<p>小华在小红和小明第一次传纸条的时候同样又把两个公钥记了下来，但后续小红和小明的聊天小华却没办法解密了，因为纸条内容都是经过公钥加密的，如果想要解密必须通过私钥，但私钥在小红和小明各自的手里，其他人都无能为力了。</p>
<p>但小刚此时却偷偷笑出了声，因为第一次用纸条传公钥的时候，小刚偷偷动了手脚。</p>
<p>小明将公钥传给小红的时候，小刚偷偷将纸条换成了写有自己公钥的纸条，因此小红拿到的是小刚的公钥。</p>
<p>小红传公钥给小明的时候，小刚同样的将小红的公钥换成了自己的，因此小明拿到的是小刚的公钥。</p>
<p>当小明用收到的公钥加密后传递到小刚这里的时候，小刚就用自己的私钥进行了解密，然后用小红的公钥进行了加密发给了小红。小红和小明以为在安全的通信，其实被小刚一览无余了。</p>
<h2 id="签名证书"><a href="#签名证书" class="headerlink" title="签名证书"></a>签名证书</h2><p>此时小红和小明遇到的问题就是无法确认收到的公钥是否是对方的。</p>
<p>小亮此时站出说，我来把证书内容用我的私钥签名，公钥我直接写到黑板上，具体过程如下：</p>
<p>证书上写好你们自己的名字和你们的公钥，我会把证书上的内容做一次 <code>Hash</code>，然后把这个 <code>Hash</code>  用我的私钥加密，将加密后的内容也放到证书上。</p>
<p>现在证书上有你们的名字和你们的公钥，外加一个加密后的 <code>Hash</code>  值。</p>
<p>你们拿到别人的证书后，先看下名字是不是你们要的人，然后计算一下证书上的内容得到 <code>Hash</code>  值，再用黑板上的公钥把证书上加密的 <code>Hash</code> 值进行解密，看一下这两个值是否相同，如果相同的话就证明证书没有被篡改过，证书上的公钥可以放心使用。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20230120181352297.png" alt="image-20230120181352297"></p>
<h2 id="证书链"><a href="#证书链" class="headerlink" title="证书链"></a>证书链</h2><p>自从有了证书，小刚拿到小明传给小红的证书后就无能为力了。</p>
<p>第一不能修改证书上的任何内容，一修改就会导致最终的 <code>Hash</code> 值不一样，就会被别人发现造假。</p>
<p>第二他也不能把证书替换成自己的，因为证书写了<strong>自己的名字</strong>，证书传过去以后小红一看这是小刚的证书那直接暴露。</p>
<p>班上的同学发现这也太棒了 ，再也不会有人读到纸条内容了，但小亮就变的太忙了，越来越多的人跟他要证书。小亮想要不我给小杨发个证书，以后让小杨给别人发证书。</p>
<p>于是后边的人就找小杨发证书，这样传递纸条的时候，除了自己的证书，也要把小杨的证书写上。收到的人用小杨的证书上的公钥来验证收到的证书是不是真的，而小杨的证书用黑板上的写的小亮的公钥来验证是否是真的。</p>
<p>未来小杨也觉得太忙了，她可能也授权某个人也能给别人发证书，这样第一次传递纸条的时候就需要把整个链条上的证书都写上，依次确认真假，但最后一次证书一定使用黑板上的公钥来确认，因为这个是大家都能看见的，一定不会是假的。</p>
<h2 id="非对称加密结合对称加密"><a href="#非对称加密结合对称加密" class="headerlink" title="非对称加密结合对称加密"></a>非对称加密结合对称加密</h2><p>课堂上大家传纸条一段时间后发现过程中用非对称算法加密解密实在是太费时间了，本来原文写了 <code>10</code> 个字，加密加密可能得用一小时，虽然安全但太麻烦了。</p>
<p>于是小明对小红说：我们是不是能结合下对称加密算法。当我收到你的证书后，并且验证证书是可信的，我就生成一个对称加密的密钥，用证书上你的公钥加密后写到纸条上传给你。你收到后用自己的私钥解密，拿到对称加密算法的密钥后，以后写纸条都通过对称加密进行加密传给我。这样就既保证了传输的安全性，也节省了加解密的时间。</p>
<p>即使中间有人拿到了加密后的密钥，因为没有你的私钥，他也无能为力。</p>
<p>小红：赞！就这样搞。</p>
<h1 id="HTTPS-实际情况"><a href="#HTTPS-实际情况" class="headerlink" title="HTTPS 实际情况"></a>HTTPS 实际情况</h1><h2 id="关于证书"><a href="#关于证书" class="headerlink" title="关于证书"></a>关于证书</h2><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20230120173638956.png" alt="image-20230120173638956"></p>
<p>实际证书会包含更多的东西，域名信息，有效期，以及之前说的签名等等。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20230120173744353.png" alt="image-20230120173744353"></p>
<p>以及上边的图里的证书链，会通过证书上公钥依次验证证书的有效性。而根证书就相当于黑板上写的公钥，这个会提前内置到系统中，如下图所示，是系统中所有的根证书。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20230120174128365.png" alt="image-20230120174128365"></p>
<p>浏览器确认当前域名和证书上的域名一致，并且证书是有效的，就会有一个通过的锁，否则会有一个危险提示。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20230120174301762.png" alt="image-20230120174301762"></p>
<h2 id="关于对称加密的密钥"><a href="#关于对称加密的密钥" class="headerlink" title="关于对称加密的密钥"></a>关于对称加密的密钥</h2><p>实际过程中对称加密算法的密钥会通过多次传输最终拼接出一个密钥，过程可以参考 <a href="https://juejin.cn/post/6844904046063517704" target="_blank" rel="noopener">SSL / TLS 工作原理和详细握手过程</a></p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20230120183519392.png" alt="image-20230120183519392"></p>
<p>对称加密的密钥由 <code>client random</code>，<code>server random</code> 和 <code>premaster secret</code> 三部分结合后生成。</p>
<h1 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h1><p>以阿里云为例，记录下整个过程：</p>
<p>打开阿里云的 <a href="https://yundun.console.aliyun.com/?spm=5176.12818093.ProductAndResource--ali--widget-product-recent.dre5.56a616d0t5nFY9&amp;p=cas#/certExtend/free" target="_blank" rel="noopener">证书网站</a>，点击创建证书：</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20230115204319376.png" alt="image-20230115204319376"></p>
<p>每年免费 <code>20</code> 个额度：</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20230115204518817.png" alt="image-20230115204518817"></p>
<p>点击立即购买，并且完成后续的支付流程。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20230115204632274.png" alt="image-20230115204632274"></p>
<p>购买结束后，回到控制台，点击「创建证书」，会在页面中多了一条待申请的证书，接着点击证书申请：</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20230115205205575.png" alt="image-20230115205205575"></p>
<p>填写自己的域名，然后点击「提交审核」。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20230115205413799.png" alt="image-20230115205413799"></p>
<p>如果是阿里云的域名，<code>DNS</code> 记录里会自动加一条下边的 <code>TXT</code> 记录。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20230115205938916.png" alt="image-20230115205938916"></p>
<p>可以到自己的 <code>DNS</code>  解析控制台看一眼：</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20230115210039243.png" alt="image-20230115210039243"></p>
<p>接着只需要等邮箱通知就可以：</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20230115210232162.png" alt="image-20230115210232162"></p>
<p>刷新一下列表，证书就变为了已签发：</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20230115210337924.png" alt="image-20230115210337924"></p>
<p>点击右边的下载，会弹出页面选择证书类型，这里我下载 <code>nginx</code> 的：</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20230115210510184.png" alt="image-20230115210510184"></p>
<p>下来好的两个文件，<code>.pem</code> 就是我们的证书，<code>.key</code> 是我们的私钥。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20230115210823709.png" alt="image-20230115210823709"></p>
<p>接下来登录自己的服务器，前提是你已经按照 <a href="https://windliang.wang/2020/02/23/%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA%E7%BD%91%E7%AB%99%E5%85%A8%E8%BF%87%E7%A8%8B/">搭建网站</a> 这个教程配置好了网站。</p>
<p>我们可以先把上边的两个文件重命名，并且通过任意的方式上传到自己的服务器，我是用 <code>FTP</code>  传上去。</p>
<p>接着通过 <code>ssh</code> 登录自己的服务器，<code>ssh -p22 root@你的服务器 ip</code>，将刚传上来的服务器证书和密钥移动到 <code>nginx</code> 的相应位置：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mv -f /var/ftp/pub/windliang.pem /etc/nginx/cert/</span><br><span class="line">mv -f /var/ftp/pub/windliang.key /etc/nginx/cert/</span><br></pre></td></tr></table></figure>
<p><code>/var/ftp/pub/windliang.pem</code> 和 <code>/var/ftp/pub/windliang.key</code> 需要改成你自己的文件地址。</p>
<p>还需要在网站的 <code>nginx</code> 的配置文件中加入 <code>https</code> 的配置，监听 <code>443</code> 端口：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen 443 ssl;   #SSL协议访问端口号为443。此处如未添加ssl，可能会造成Nginx无法启动。</span><br><span class="line">        server_name windliang.wang;  #将localhost修改为您证书绑定的域名，例如：www.example.com。</span><br><span class="line">        root html;</span><br><span class="line">        index index.html index.htm;</span><br><span class="line">        ssl_certificate cert/windliang.pem;   #替换成您证书的文件名。</span><br><span class="line">        ssl_certificate_key cert/windliang.key;   #替换成您证书的密钥文件名。</span><br><span class="line">        ssl_session_timeout <span class="number">5</span>m;</span><br><span class="line">        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;  #使用此加密套&gt;</span><br><span class="line">件。</span><br><span class="line">        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;   #使用该协议进行配置。</span><br><span class="line">        ssl_prefer_server_ciphers on;</span><br><span class="line">        location / &#123;</span><br><span class="line">                root /root/myblog;   #站点目录。</span><br><span class="line">                index index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">    listen <span class="number">80</span>;</span><br><span class="line">    server_name www.windliang.wang;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">301</span> $scheme:<span class="comment">//windliang.wang$request_uri;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>接下来重启 <code>nginx</code> 。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure>
<p>此时重新打开网站证书就设置成功了：</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20230116063503733.png" alt="image-20230116063503733"></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>https</tag>
      </tags>
  </entry>
  <entry>
    <title>js追本溯源:访问器属性</title>
    <url>/2019/07/01/js%E8%BF%BD%E6%9C%AC%E6%BA%AF%E6%BA%90-%E8%AE%BF%E9%97%AE%E5%99%A8%E5%B1%9E%E6%80%A7/</url>
    <content><![CDATA[<h1 id="ECMAScript"><a href="#ECMAScript" class="headerlink" title="ECMAScript"></a>ECMAScript</h1><p>ES，即 ECMAScript，是 js 的规范。ES3 1999 年发布，ES5 2009 年发布，ES6 2015 年发布，为什么没有 ES4？这是因为在 2007 年商讨发布 ES4 的时候，由于 ES4 相对 ES3改动太大，导致各大浏览器公司分歧很大，最后也就搁浅了，没有发布 ES4。其中的一些规范加到了后来的 ES5 和 ES6 中。</p>
<p>现在每一年也会有新的 ES2016，ES2017，ES2018。每一年都有新的规范提出，而我们学 js 很多规范都还是出自 ES3。一些教程有时候也会出现不同的术语，也可能就是因为说的是不同规范中的内容。这篇文章讲 ES5 中对属性的定义。</p>
<p>ES5 相对 ES3，改变了一些数据特性的名字，同时也提供了统一的方法来操作数据属性。</p>
<h1 id="数据属性"><a href="#数据属性" class="headerlink" title="数据属性"></a>数据属性</h1><p>我们看一下定义对象属性的方法。</p>
<p>ES6 之前</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">    name: <span class="string">"liang"</span>,</span><br><span class="line">    sayName: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>ES6 语法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">    name: <span class="string">"liang"</span>,</span><br><span class="line">    sayName() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>可以看到函数属性更加简洁了，但这不重要。我们使用 ES5 新的函数 Object.getOwnPropertyDescriptor 把属性特性输出看一下。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Object</span>.getOwnPropertyDescriptor(person,<span class="string">'name'</span>);</span><br><span class="line"><span class="comment">//&#123;value: "liang", writable: true, enumerable: true, configurable: true&#125;</span></span><br><span class="line"><span class="built_in">Object</span>.getOwnPropertyDescriptor(person,<span class="string">'sayName'</span>);</span><br><span class="line"><span class="comment">//&#123;value: ƒ, writable: true, enumerable: true, configurable: true&#125;</span></span><br></pre></td></tr></table></figure>
<p>可以看到不管是函数，还是字符串或者其他基本类型，它们都有四个属性特性描述。</p>
<blockquote>
<ul>
<li><p>[[Value]]: 表示属性的数据值。默认值: undefined</p>
</li>
<li><p>[[Writable]]: 表示能否修改属性的值。默认值: true</p>
</li>
<li><p>[[Enumerable]]: 表示能否通过 for-in,Object.keys ( ) 迭代。默认值：true</p>
</li>
<li><p>[[Configurable]]: 表示能否通过 delete 删除属性，能否修改属性的特性，能否将数据属性和访问器属性互转。</p>
<p>如果为 false，只可以把 [[Writable]] 从 true 变为 false，[[Enumerable]] 和 [[Configurable]] 的值都不能再改变，[[Value]] 只取决于 [[Writable]] ，数据属性不能变成访问器属性，访问器属性也不能变成数据属性，也不能通过 delete 删除。默认值: true</p>
</li>
</ul>
</blockquote>
<p>ES5 提供了 Object.defineProperty 方法，既可以用来定义属性，也可以用来修改属性的特性。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Object.defineProperty(person, <span class="string">'name'</span>, &#123;</span><br><span class="line">  writable: <span class="keyword">false</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>然后再对 person.name 赋值的话就无效了。</p>
<p>也可以定义新的属性，不同于直接定义的属性默认值都为 true。这里如果没有定义，默认值是 false。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Object</span>.defineProperty(person, <span class="string">'id'</span>, &#123;</span><br><span class="line">  value: <span class="number">6</span>,</span><br><span class="line">  enumerable: <span class="literal">true</span>,</span><br><span class="line">  configurable: <span class="literal">false</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//value: 6, writable: false, enumerable: true, configurable: false&#125;</span></span><br></pre></td></tr></table></figure>
<h1 id="访问器属性"><a href="#访问器属性" class="headerlink" title="访问器属性"></a>访问器属性</h1><p>除了数据属性，还多了访问器属性。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">var book = &#123;</span><br><span class="line">    _year:<span class="number">2004</span>,</span><br><span class="line">    edition:<span class="number">1</span></span><br><span class="line">&#125;;</span><br><span class="line">Object.defineProperty(book,<span class="string">"year"</span>,&#123;</span><br><span class="line">    get () &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>._year;</span><br><span class="line">    &#125;,</span><br><span class="line">    set (newValue) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((newValue &gt; <span class="number">2004</span>)) &#123;</span><br><span class="line">            <span class="keyword">this</span>._year = newValue;</span><br><span class="line">            <span class="keyword">this</span>.edition += newValue - <span class="number">2004</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">book.year = <span class="number">2005</span>;</span><br><span class="line">alert(book.edition);        <span class="comment">// 2</span></span><br><span class="line">Object.getOwnPropertyDescriptor(book,<span class="string">"year"</span>)</span><br><span class="line"><span class="comment">//&#123;get: ƒ, set: ƒ, enumerable: false, configurable: false&#125;</span></span><br></pre></td></tr></table></figure>
<p>没有了 [[Value]] 和 [[Writable]]，取而代之的是 get 和 set 函数。如果 set 属性没有定义，那么就无法修改 book 的值。[[Enumerable]] 和 [[Configurable]] 和之前是一样的。</p>
<p>如果你对 C++ 或者 JAVA 了解，那么对 get 和 set 一定不陌生，但是你有没有过疑问，为什么要有访问器属性呢？</p>
<p>JAVA 里边有 Private 变量，然后提供 public 的 get，set 方法来访问这些变量，那么 js 为什么要有呢？直接访问变量不好吗？</p>
<p>你可能会说，像上边的例子，我们可以控制设置的值呀，大于 2004 我们才进行赋值，如果是数据属性就做不到呀。那么问题来了，为什么不直接定义一个函数呢，非新增个访问器属性呢？</p>
<h1 id="函数还是访问器属性？"><a href="#函数还是访问器属性？" class="headerlink" title="函数还是访问器属性？"></a>函数还是访问器属性？</h1><p>如果对象有三个属性，firstName，lastName，fullName，很明显 fullName = firstName + lastName。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">  firstName: <span class="string">"John"</span>,</span><br><span class="line">  lastName : <span class="string">"Doe"</span>,</span><br><span class="line">  fullNmae:  <span class="string">"John Doe"</span></span><br><span class="line">&#125;;</span><br><span class="line">person.firstName = <span class="string">"Liang"</span>; <span class="comment">//改变 firstName</span></span><br><span class="line">person.fullName = <span class="string">"Liang "</span> + person.lastName; <span class="comment">//改变 fullName</span></span><br><span class="line">person.fullName; <span class="comment">//Liang Doe</span></span><br></pre></td></tr></table></figure>
<p>这样的话，当我想改变 firstName 的话，我还得同时去改变 fullName，当属性间有关联的时候，维护它们之前的关系太麻烦了。我们可以把 fullName 定义成一个函数，这样的话，它就可以自动改变了。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">  firstName: <span class="string">"John"</span>,</span><br><span class="line">  lastName : <span class="string">"Doe"</span>,</span><br><span class="line">  getFullName () &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.firstName + <span class="string">" "</span> + <span class="keyword">this</span>.lastName;</span><br><span class="line">  &#125;,</span><br><span class="line">  setFullName (name) &#123;</span><br><span class="line">      <span class="keyword">var</span> words = name.split(<span class="string">' '</span>);</span><br><span class="line">      <span class="keyword">this</span>.firstName = words[<span class="number">0</span>] || <span class="string">''</span>;</span><br><span class="line">      <span class="keyword">this</span>.lastName = words[<span class="number">1</span>] || <span class="string">''</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">person.firstName = <span class="string">"Liang"</span>;</span><br><span class="line">person.getFullName(); <span class="comment">//Liang Doe</span></span><br></pre></td></tr></table></figure>
<p>这样问题解决了，但不够优雅，让我们看看访问器属性可以怎么做。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">  firstName: <span class="string">"John"</span>,</span><br><span class="line">  lastName : <span class="string">"Doe"</span>,</span><br><span class="line">  get fullName() &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.firstName + <span class="string">" "</span> + <span class="keyword">this</span>.lastName;</span><br><span class="line">  &#125;,</span><br><span class="line">  set fullName(name) &#123;</span><br><span class="line">      <span class="keyword">var</span> words = name.split(<span class="string">' '</span>);</span><br><span class="line">      <span class="keyword">this</span>.firstName = words[<span class="number">0</span>] || <span class="string">''</span>;</span><br><span class="line">      <span class="keyword">this</span>.lastName = words[<span class="number">1</span>] || <span class="string">''</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">person.firstName =<span class="string">"Liang"</span>;</span><br><span class="line">person.fullName;</span><br></pre></td></tr></table></figure>
<p>访问器属性的优点很明显了。</p>
<p>语法上更简洁，将函数和属性值语法统一了起来。访问器属性虽然调用了函数，但在使用上和属性的语法是一样的。也更符合逻辑，如果想得到 FullName，很明显这应该是对象的一个属性，而不应该是方法，如果去调用函数得到它，就太不优雅了。</p>
<h1 id="访问器属性其他优点"><a href="#访问器属性其他优点" class="headerlink" title="访问器属性其他优点"></a>访问器属性其他优点</h1><p>说了这么多，其实用<strong>函数和访问器属性可以实现同样的功能</strong>，但既然 ES5 中提供了访问器属性的语法，我们当然会优先是用访问器属性，而不是定义一个函数了。那么除了当属性间有关联可以使用它，还有些什么优点呢？</p>
<p>就是最开始说的，有了 get 和 set 我们就可以在返回和设置值的时候进行一些额外的操作。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  n: <span class="number">67</span>,</span><br><span class="line">  get id() &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">'The ID is: '</span> + <span class="keyword">this</span>.n;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//判断是否是数字</span></span><br><span class="line">  set id(val) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> val === <span class="string">'number'</span>)</span><br><span class="line">          <span class="keyword">this</span>.n = val;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(obj.id);</span><br><span class="line"><span class="comment">// "The ID is: 67"</span></span><br><span class="line"> </span><br><span class="line">obj.id = <span class="number">893</span>;</span><br><span class="line"> </span><br><span class="line"><span class="built_in">console</span>.log(obj.id);</span><br><span class="line"><span class="comment">// "The ID is: 893"</span></span><br><span class="line"> </span><br><span class="line">obj.id = <span class="string">'hello'</span>;</span><br><span class="line"> </span><br><span class="line"><span class="built_in">console</span>.log(obj.id);</span><br><span class="line"><span class="comment">// "The ID is: 893"</span></span><br></pre></td></tr></table></figure>
<p>除了上边的有点外，我们还提到 js 里边没有私有变量，所以在外边可以直接访问变量而不经过访问器属性。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  fooVal: <span class="string">'this is the value of foo'</span>,</span><br><span class="line">  get foo() &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.fooVal;</span><br><span class="line">  &#125;,</span><br><span class="line">  set foo(val) &#123;</span><br><span class="line">      <span class="keyword">this</span>.fooVal = val;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">obj.fooVal = <span class="string">'hello'</span>;</span><br><span class="line"> </span><br><span class="line"><span class="built_in">console</span>.log(obj.foo);</span><br><span class="line"><span class="comment">// "hello"</span></span><br></pre></td></tr></table></figure>
<p>我们没有通过访问器而改变了内部的值，结合访问器属性，我们可以实现数据的私有化。</p>
<ol>
<li>利用块级作用域。</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* BLOCK SCOPE, leave the braces alone! */</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">let</span> fooVal = <span class="string">'this is the value of foo'</span>;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    get foo() &#123;</span><br><span class="line">        <span class="keyword">return</span> fooVal;</span><br><span class="line">    &#125;,</span><br><span class="line">    set foo(val) &#123;</span><br><span class="line">        fooVal = val</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">fooVal = <span class="string">'hello'</span>;</span><br><span class="line"><span class="comment">// not going to affect the fooVal inside the block</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">console</span>.log(obj.foo);</span><br><span class="line"><span class="comment">// "this is the value of foo"</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>利用函数作用域</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myobj</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> fooVal = <span class="string">'this is the value of foo'</span>;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">      get foo() &#123;</span><br><span class="line">          <span class="keyword">return</span> fooVal;</span><br><span class="line">      &#125;,</span><br><span class="line">      set foo(val) &#123;</span><br><span class="line">          fooVal = val</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">fooVal = <span class="string">'hello'</span>;</span><br><span class="line"><span class="comment">// not going to affect our original fooVal</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> obj = myobj();</span><br><span class="line"> </span><br><span class="line"><span class="built_in">console</span>.log(obj.foo);</span><br><span class="line"><span class="comment">// "this is the value of foo"</span></span><br></pre></td></tr></table></figure>
<p>最后，访问器属性相比于函数还有一个更大的优点。比如，一个已经写过的项目，里边用了一个 date 变量。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">var obj = &#123;</span><br><span class="line"> date: <span class="string">"2019.6.5"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们在 100 个文件里用了 date 变量，并且进行了赋值操作。</p>
<p>a.js 有下边的语句</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">obj.date = &quot;2019.8.8&quot;</span><br></pre></td></tr></table></figure>
<p>b.js 有下边的语句</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">obj.date = &quot;2019.7.8&quot;</span><br></pre></td></tr></table></figure>
<p>c.js 有下边的语句</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">obj.date = &quot;2018.9.9&quot;</span><br></pre></td></tr></table></figure>
<p>d.js 有下边的语句</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">obj.date = &quot;2017.2.8&quot;</span><br></pre></td></tr></table></figure>
<p>e.js 有下边的语句</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">obj.date = &quot;2019.2.23&quot;</span><br></pre></td></tr></table></figure>
<p>….  还有很多文件也都对 obj.date 进行了赋值操作。</p>
<p>有一天，我们突然想要变更数据从 “XXXX.YY.ZZ” 到 “XXXX-YY-ZZ” 的类型。</p>
<p>一种方法就是找到之前所有赋值的地方，然后进行修改。</p>
<p> 改 a.js  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">obj.date = &quot;2019-8-8&quot;</span><br></pre></td></tr></table></figure>
<p>改 b.js  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">obj.date = &quot;2019-7-8&quot;</span><br></pre></td></tr></table></figure>
<p>改 c.js  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">obj.date = &quot;2018-9-9&quot;</span><br></pre></td></tr></table></figure>
<p>… …</p>
<p>另一种办法就是把 date 改成访问器属性，找到对象定义的地方改一次就行了，这样在赋值的时候 date 就会自动改变了。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123; </span><br><span class="line">    _date: <span class="string">"2019-6-5"</span>,</span><br><span class="line">    get date() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>._date;</span><br><span class="line">    &#125;,</span><br><span class="line">    set date(val) &#123;</span><br><span class="line">        <span class="keyword">this</span>._date = val.split(<span class="string">"."</span>).join(<span class="string">"-"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>由此也可以看出访问器属性的好处，可以对数据进行更好的控制，合法性判断，格式之类的，以及关联多个属性，所以最好用访问器属性，可以为未来的扩展留下一个接口。</p>
<p>以上都是自己的理解，如果发现问题可以告诉我，感谢。</p>
<p>参考了下边的链接：</p>
<p><a href="https://zcfy.cc/article/ecma-262-5-in-detail-chapter-1-properties-and-property-descriptors" target="_blank" rel="noopener">https://zcfy.cc/article/ecma-262-5-in-detail-chapter-1-properties-and-property-descriptors</a></p>
<p><a href="https://javascriptplayground.com/es5-getters-setters/" target="_blank" rel="noopener">https://javascriptplayground.com/es5-getters-setters</a></p>
<p><a href="https://stackoverflow.com/questions/42342623/why-use-getters-and-setters-in-javascript" target="_blank" rel="noopener">https://stackoverflow.com/questions/42342623/why-use-getters-and-setters-in-javascript</a></p>
<p><a href="https://www.hongkiat.com/blog/getters-setters-javascript/" target="_blank" rel="noopener">https://www.hongkiat.com/blog/getters-setters-javascript/</a></p>
<p><a href="https://javascript.info/property-accessors" target="_blank" rel="noopener">https://javascript.info/property-accessors</a></p>
<p><a href="https://www.w3schools.com/js/js_object_accessors.asp" target="_blank" rel="noopener"><a href="https://www.w3schools.com/js/js_object_accessors.asp" target="_blank" rel="noopener">https://www.w3schools.com/js/js_object_accessors.asp</a></a></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>ECMAScript</tag>
      </tags>
  </entry>
  <entry>
    <title>js宏任务和微任务执行顺序详解</title>
    <url>/2023/04/08/js%E5%AE%8F%E4%BB%BB%E5%8A%A1%E5%92%8C%E5%BE%AE%E4%BB%BB%E5%8A%A1%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<p>最近看了死月的 <a href="https://s.juejin.cn/ds/AshEp8U/" target="_blank" rel="noopener">趣学 Node.js</a> 小册，关于宏任务、微任务部分突然意识到所谓的执行顺序其实就是底层 <code>C++</code>  写的各种代码的结果，当了解了 <code>Node.js</code> 代码或者 <code>V8</code> 代码再看这些问题真的就是降维打击（当然我只是有了这个感觉，还没细看过[旺柴]）。</p>
<p>但如果平常用不到，我们也没必要真的去看底层的代码，即使不了解底层代码，我们也可以根据具体的表现来自己定一些规则进行理解，只要根据这个规则来判断执行顺序是正确的，能指导平常开发也就足够了。</p>
<blockquote>
<p>这篇文章只讲基本的概念，不进行深入，能够判断 <code>setTimemout</code>、<code>Promise</code> 的执行顺序即可。</p>
</blockquote>
<p>众所周知，<code>JavaScript</code> 单线程执行的，所以对于一些耗时的任务，我们可以将其丢入任务队列当中，这样一来，也就不会阻碍其他同步代码的执行。等到异步任务完成之后，再去进行相关逻辑的操作。</p>
<p><code>js</code> 在主线程中执行的顺序：宏任务 -&gt; 宏任务 -&gt; 宏任务 … </p>
<p>在每一个宏任务中又可以产生微任务，当微任务全部执行结束后执行下一个宏任务。<br>【宏任务 [微任务]】 -&gt; 【宏任务 [微任务]】-&gt; 【宏任务 [微任务]】…</p>
<h1 id="宏任务"><a href="#宏任务" class="headerlink" title="宏任务"></a>宏任务</h1><p>生成方法：</p>
<ul>
<li>用户交互：用户在页面上进行交互操作（例如点击、滚动、输入等），会触发浏览器产生宏任务来响应用户操作。</li>
<li>网络请求：当浏览器发起网络请求（例如通过 <code>Ajax</code>、<code>Fetch</code>、<code>WebSocket</code> 等方式）时，会产生宏任务来处理请求和响应。</li>
<li><strong>定时器：通过 <code>JavaScript</code> 宿主环境提供的定时器函数（例如 <code>setTimeout</code>、<code>setInterval</code>）可以设置一定的时间后产生宏任务执行对应的回调函数。</strong></li>
<li><code>DOM</code> 变化：当 <code>DOM</code> 元素发生变化时（例如节点的添加、删除、属性的修改等），会产生宏任务来更新页面。</li>
<li>跨窗口通信：在浏览器中，跨窗口通信（例如通过 <code>postMessage</code> 实现）会产生宏任务来处理通信消息。</li>
<li><code>JavaScript</code> 脚本执行事件；比如页面引入的 <code>script</code> 就是一个宏任务。</li>
</ul>
<p>重点来看下 <code>setTimeout</code> 。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'setTimeout block'</span>)</span><br><span class="line">&#125;, <span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'end here'</span>)</span><br></pre></td></tr></table></figure>
<p>以上代码会输出什么？</p>
<hr>
<p>什么都不会输出</p>
<p>上边代码相当于两个宏任务：</p>
<p>第一个宏任务就是上边的整个脚本</p>
<p>第二个宏任务是 setTimeout 传入的这个函数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">() =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'setTimeout block'</span>)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p>第一个宏任务执行到 <code>while true</code> 的时候死循环了，所以自己的 <code>console.log(&#39;end here&#39;)</code> 不会执行。</p>
<p>第二个宏任务也没有机会执行到。</p>
<p>因此什么都不会输出。</p>
<p>再来看一个：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> t1 = <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> t3 = <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'setTimeout block'</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'t3 - t1 ='</span>, t3 - t1)</span><br><span class="line">&#125;, <span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> t2 = <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (t2 - t1 &lt; <span class="number">200</span>) &#123;</span><br><span class="line">    t2 = <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'end here'</span>)</span><br></pre></td></tr></table></figure>
<p><code>t1</code> 记录开始的时间，设置一个 <code>100</code> 毫秒执行的定时器，定时器中输出执行当前任务的时间。</p>
<p>那么  <code>console.log(&#39;t3 - t1 =&#39;, t3 - t1)</code> 输出的是多少呢？</p>
<hr>
<p>输出答案是 <code>200</code>。</p>
<p>同样的，上边是两个宏任务。</p>
<p>整个脚本是第一个宏任务。</p>
<p>计时器生成了第二个宏任务。</p>
<p>只有第一个宏任务执行结束后才会执行第二个宏任务。</p>
<p>所以即使定时器时间到了也不会立刻执行，只有当第一个宏任务执行结束后才会去执行定时器的任务，此时已经过去了 <code>200</code> 毫秒。</p>
<h1 id="微任务"><a href="#微任务" class="headerlink" title="微任务"></a>微任务</h1><p>生成方法：</p>
<ul>
<li><strong><code>Promise</code>：<code>Promise</code> 是一种异步编程的解决方案，它可以将异步操作封装成一个 <code>Promise</code> 对象，通过 <code>then</code> 方法注册回调函数，当 <code>promise</code> 变为 <code>resolve</code> 或者 <code>reject</code> 会将回调函数加入微任务队列中。</strong></li>
<li><code>MutationObserver</code>：<code>MutationObserver</code> 是一种可以观察 <code>DOM</code> 变化的 <code>API</code>，通过监听 <code>DOM</code> 变化事件并注册回调函数，将回调函数加入微任务队列中。</li>
<li><code>process.nextTick</code>：<code>process.nextTick</code> 是 <code>Node.js</code> 中的一个 <code>API</code>，它可以将一个回调函数加入微任务队列中。</li>
</ul>
<p>重点看 <code>Promise</code> 的使用，关于 <code>Promise</code> 怎么用这里不细说了，重点放到输出顺序上。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> r = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"1"</span>);</span><br><span class="line">    resolve()</span><br><span class="line">&#125;);</span><br><span class="line">r.then(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">"2"</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"3"</span>)</span><br></pre></td></tr></table></figure>
<p>上边的输出什么：</p>
<hr>
<p>比较基础的使用。输出 <code>1 3 2</code> 。</p>
<p><code>new Promise</code> 接受一个函数，返回一个 <code>Promise</code> 对象。值得注意的一点是<strong>传给 <code>Promise</code> 的那个函数会直接执行</strong>。所以会先输出 <code>1</code> 。</p>
<p><code>Promise</code> 对象拥有一个 <code>then</code> 方法来注册回调函数，当 <strong><code>promise reslove 或者 reject</code> 后会将注册函数加到微任务队列</strong>。</p>
<p>上边的代码因为是直接 <code>resolve</code> 了，所以会将 <code>() =&gt; console.log(&quot;2&quot;)</code>  注册到微任务队列中。</p>
<p>宏任务执行完毕后开始执行微任务，所以最后输出  <code>2</code> 。</p>
<p>再看下 <code>async</code> 和 <code>await</code> ：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">method</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">await</span> method2();</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">method2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> resolve());</span><br><span class="line">  <span class="keyword">return</span> promise;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  method()</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上边的会输出什么呢？</p>
<hr>
<p>先输出 <code>2</code>，再输出 <code>1</code>。</p>
<p>这里需要明确一点，<code>async</code> 修饰的函数，相当于给当前函数<strong>包了一层 Promise</strong>。</p>
<p>所以</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  method()</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>相当于</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">new</span> <span class="built_in">Promise</span>((resolve,reject)&#123; resolve(method())&#125;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结合前边说的<strong>传给 Promise 的那个函数会直接执行。</strong></p>
<p>所以先执行 <code>resolve(method())</code>，进入<code>method</code> 内部：<br>接下来是 <code>await</code> 的作用：遇到 <code>await</code> 会<strong>先执行 <code>await</code> 右边的逻辑</strong>，执行完之后会暂停到这里。跳出当前函数去执行之前的代码。<br>所以 <code>method()</code> 方法中，</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">method</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">await</span> method2();</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">method2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> resolve());</span><br><span class="line">  <span class="keyword">return</span> promise;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>先执行了 <code>method2</code>，当 <code>method2</code> 返回了 <code>Promise</code> 后就会暂定执行，跳回 <code>main</code> 函数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">new</span> <span class="built_in">Promise</span>((resolve,reject)&#123; resolve(method())&#125;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>main</code> 函数执行完毕后才会再回到 <code>method</code> 方法中。</p>
<p>所以先输出 <code>2</code>，后输出 <code>1</code>。</p>
<p>如果想要先输出 1 再输出 2 需要怎么改呢？</p>
<hr>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">method</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">await</span> method2();</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">method2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> resolve());</span><br><span class="line">  <span class="keyword">return</span> promise;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span>  <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">await</span> method() <span class="comment">// 这里 await 即可</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure>
<p>再看一个：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">method</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> resolve()).then(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="number">1</span>));</span><br><span class="line">  <span class="keyword">const</span> n = <span class="keyword">await</span> method2();</span><br><span class="line">  <span class="built_in">console</span>.log(n);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">method2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> resolve(<span class="number">2</span>));</span><br><span class="line">  <span class="keyword">return</span> promise;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  method();</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">3</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main();</span><br></pre></td></tr></table></figure>
<p>上边的会输出什么呢？</p>
<hr>
<p>当 <code>main</code> 函数执行结束后，按照之前说的应该是回到 <code>await</code> 那里，所以应该输出<code>3 2 1</code> 吗？</p>
<p>其实是不对的，<code>await</code> 还有一个特性，它会把后边执行的代码整个<strong>注册为回调函数，相当于放到了 .then 里边</strong>，如果 <code>Promise</code> 直接 <code>resolve</code>，相当于将后边的代码放到了微任务队列中。</p>
<p>所以</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">method</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> resolve()).then(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="number">1</span>));</span><br><span class="line">  <span class="keyword">const</span> n = <span class="keyword">await</span> method2();</span><br><span class="line">  <span class="built_in">console</span>.log(n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>等价于：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">method</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> resolve()).then(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="number">1</span>));</span><br><span class="line">  <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> resolve(method2())).then(<span class="function">(<span class="params">n</span>) =&gt;</span> <span class="built_in">console</span>.log(n));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在 <code>await</code> 之前已经有一个 <code>Promise</code> 把任务加到了微任务队列中。所以正确的输出顺序是 <code>3 1 2</code>。</p>
<p>所以回到 <strong>await 继续执行其实是表象</strong>，本质上是从微任务队列中把之前要执行的代码取了出来继续执行。</p>
<p>如果想输出 <code>3 2 1</code> ，该怎么改代码呢？</p>
<hr>
<p>可以将 <code>new Promise((resolve) =&gt; resolve()).then(() =&gt; console.log(1));</code> 这句中的 <code>reslove()</code> 函数延迟调用，通过 <code>setTimeout</code> 放到下一个宏任务中执行。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">method</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> setTimeout(resolve, <span class="number">0</span>)).then(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="number">1</span>));</span><br><span class="line">  <span class="keyword">const</span> n = <span class="keyword">await</span> method2();</span><br><span class="line">  <span class="built_in">console</span>.log(n);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">method2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> resolve(<span class="number">2</span>));</span><br><span class="line">  <span class="keyword">return</span> promise;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  method();</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">3</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="综合"><a href="#综合" class="headerlink" title="综合"></a>综合</h1><p>如果理解了上边的，下边的内容就简单了，首先明确几个点：</p>
<ol>
<li>【宏任务 [微任务]】 -&gt; 【宏任务 [微任务]】-&gt; 【宏任务 [微任务]】…</li>
</ol>
<p>​        当宏任务和当前宏任务产生的微任务全部执行完毕后，才会执行下一个宏任务。每遇到生成的微任务就放到微任务队列中，当前宏任        务代码全部执行后开始执行微任务队列中的任务</p>
<ol start="2">
<li>传给 <code>new Promise</code> 的函数会<strong>直接执行</strong></li>
<li><code>async</code> 包装的函数相当于包了一层 <code>Promise</code> ，因此返回的一定是一个 <code>Promise</code></li>
<li>执行到 <code>await</code>，先执行 <code>await</code> 右边的东西，执行完后后会暂停在 <code>await</code> 这里，并且把后边的<strong>内容丢到 <code>then</code> 中</strong>（再结合第 <code>5</code> 点）。跳到外边接着执行。外边都执行完之后开始执行微任务队列</li>
<li>当 <code>promise</code> 变为 <code>resolve</code> 或者<code>reject</code> 的时候才会将 <code>then</code> 中注册的<strong>回调函数加入微任务队列中 </strong></li>
<li><code>setTimeout</code> 产生宏任务</li>
</ol>
<p>可以多读几遍下边开始正式练习，看代码的时候函数定义直接跳过，从执行函数开始看</p>
<h1 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h1><p>来一道魔鬼题：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">method</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>); </span><br><span class="line">    <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> resolve()).then(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="number">2</span>)); </span><br><span class="line">    <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">      setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        resolve();</span><br><span class="line">        <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> resolve()).then(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="number">3</span>));</span><br><span class="line">      &#125;, <span class="number">0</span>); </span><br><span class="line">    &#125;).then(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="number">4</span>));</span><br><span class="line">    <span class="keyword">await</span> method3(); </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">5</span>); </span><br><span class="line">    <span class="keyword">const</span> n = <span class="keyword">await</span> method2(); </span><br><span class="line">    <span class="built_in">console</span>.log(n); </span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">method2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="number">6</span>);</span><br><span class="line">      setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">7</span>); </span><br><span class="line">        resolve(<span class="number">8</span>);</span><br><span class="line">      &#125;, <span class="number">0</span>); </span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> promise;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">method3</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="number">9</span>); </span><br><span class="line">      resolve();</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> promise;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    method();</span><br><span class="line">    <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">      resolve();</span><br><span class="line">    &#125;).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="number">10</span>); </span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">11</span>); </span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  main();</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">12</span>);</span><br></pre></td></tr></table></figure>
<p>上边的代码输出什么？</p>
<hr>
<p>分析的时候我们需要明确什么时候产生了宏任务，什么时候产生了微任务，什么时候是直接执行的，结合上边总结 <code>6</code> 句话和注释可以看一下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">method</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">1</span>); <span class="comment">//[1]</span></span><br><span class="line">  <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> resolve()).then(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="number">2</span>)); <span class="comment">// 第 1 个宏任务中注册微任务 1 // [5]</span></span><br><span class="line">  <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      resolve();</span><br><span class="line">      <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> resolve()).then(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="number">3</span>)); <span class="comment">// 第 2 个宏任务中注册微任务 2 // [10]</span></span><br><span class="line">    &#125;, <span class="number">0</span>); <span class="comment">// 注册宏任务 2</span></span><br><span class="line">  &#125;).then(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="number">4</span>)); <span class="comment">// 第 2 个宏任务中注册微任务 1 // [9]</span></span><br><span class="line">  <span class="keyword">await</span> method3(); <span class="comment">// 第 1 个宏任务中注册微任务 2</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">5</span>); <span class="comment">// 第 1 个宏任务中注册微任务 2 // [6]</span></span><br><span class="line">  <span class="keyword">const</span> n = <span class="keyword">await</span> method2(); <span class="comment">// 第 1 个宏任务中注册微任务 2</span></span><br><span class="line">  <span class="built_in">console</span>.log(n); <span class="comment">// 第 1 个宏任务中注册微任务 2 // 第 3 个宏任务中注册微任务 1 // [12]</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">method2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">6</span>); <span class="comment">// [7]</span></span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="number">7</span>); <span class="comment">// [11]</span></span><br><span class="line">      resolve(<span class="number">8</span>);</span><br><span class="line">    &#125;, <span class="number">0</span>); <span class="comment">// 注册宏任务 3</span></span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> promise;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">method3</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">9</span>); <span class="comment">//[2]</span></span><br><span class="line">    resolve();</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> promise;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  method();</span><br><span class="line">  <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    resolve();</span><br><span class="line">  &#125;).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">10</span>); <span class="comment">// 第 1 个宏任务中注册微任务 3 // [8]</span></span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">11</span>); <span class="comment">//[3]</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">12</span>); <span class="comment">//[4]</span></span><br></pre></td></tr></table></figure>
<h1 id="总"><a href="#总" class="headerlink" title="总"></a>总</h1><p>当然上边的规则也不是黄金原则，归根到底还依赖于我们运行的环境是什么，现在 <code>js</code> 的运行时有 <code>V8</code>、<code>Node.js</code> 等，它们也有各自的版本。</p>
<p>对于下边的代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="built_in">Promise</span>.resolve();</span><br><span class="line"></span><br><span class="line">(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">await</span> p;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"after:await"</span>);</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line">p.then(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">"tick:a"</span>)).then(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">"tick:b"</span>));</span><br></pre></td></tr></table></figure>
<p>按照之前规则，先执行 <code>await p</code>  ，因为 <code>p</code>  已经 <code>resolve</code> 了，所以会把后边的代码 <code>console.log(&quot;after:await&quot;);</code> 加入到微任务队列中。</p>
<p>接着又依次把 <code>() =&gt; console.log(&quot;tick:a&quot;)</code> 、<code>() =&gt; console.log(&quot;tick:b&quot;)</code>  加到微任务队列中。</p>
<p>所以输出是 <code>after:await，tick:a， tick:b</code> 。</p>
<p>在浏览器中运行符合我们的想法：</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20230409083903731.png" alt="image-20230409083903731"></p>
<p>在 <code>Node.js V16</code> 中运行符合我们的想法：</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20230409083940125.png" alt="image-20230409083940125"></p>
<p>但在 <code>Node.js V10</code> 中运行就些许不一样了：</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20230409084009540.png" alt="image-20230409084009540"></p>
<p>至于为什么就是文章开头说的了，不管输出什么，其实就是其底层代码所决定的了。再具体的原因就需要去看 <code>Node.js</code> 相应的源码了。</p>
<p>当底层的逻辑影响到我们的业务逻辑的时候，可能就真的得去看这些源码和解决方案了。</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>leetCode_4_Median_of_Two_Sorted_Arrays</title>
    <url>/2018/07/18/leetCode-4-Median-of-Two-Sorted-Arrays/</url>
    <content><![CDATA[<h2 id="题目描述（困难难度）"><a href="#题目描述（困难难度）" class="headerlink" title="题目描述（困难难度）"></a>题目描述（困难难度）</h2><p><img src="http://windliang.oss-cn-beijing.aliyuncs.com/3_median.jpg" alt=""></p>
<p>已知两个有序数组，找到两个数组合并后的中位数。</p>
<h2 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h2><p>简单粗暴，先将两个数组合并，两个有序数组的合并也是归并排序中的一部分。然后根据奇数，还是偶数，返回中位数。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">findMedianSortedArrays</span><span class="params">(<span class="keyword">int</span>[] nums1, <span class="keyword">int</span>[] nums2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] nums;</span><br><span class="line">    <span class="keyword">int</span> m = nums1.length;</span><br><span class="line">    <span class="keyword">int</span> n = nums2.length;</span><br><span class="line">    nums = <span class="keyword">new</span> <span class="keyword">int</span>[m + n];</span><br><span class="line">    <span class="keyword">if</span> (m == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (n % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> (nums2[n / <span class="number">2</span> - <span class="number">1</span>] + nums2[n / <span class="number">2</span>]) / <span class="number">2.0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> nums2[n / <span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (m % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> (nums1[m / <span class="number">2</span> - <span class="number">1</span>] + nums1[m / <span class="number">2</span>]) / <span class="number">2.0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> nums1[m / <span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (count != (m + n)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i == m) &#123;</span><br><span class="line">            <span class="keyword">while</span> (j != n) &#123;</span><br><span class="line">                nums[count++] = nums2[j++];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (j == n) &#123;</span><br><span class="line">            <span class="keyword">while</span> (i != m) &#123;</span><br><span class="line">                nums[count++] = nums1[i++];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (nums1[i] &lt; nums2[j]) &#123;</span><br><span class="line">            nums[count++] = nums1[i++];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            nums[count++] = nums2[j++];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (count % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> (nums[count / <span class="number">2</span> - <span class="number">1</span>] + nums[count / <span class="number">2</span>]) / <span class="number">2.0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> nums[count / <span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>时间复杂度：遍历全部数组，O（m + n）</p>
<p>空间复杂度：开辟了一个数组，保存合并后的两个数组，O（m + n）</p>
<h2 id="解法二"><a href="#解法二" class="headerlink" title="解法二"></a>解法二</h2><p>其实，我们不需要将两个数组真的合并，我们只需要找到中位数在哪里就可以了。</p>
<p>开始的思路是写一个循环，然后里边判断是否到了中位数的位置，到了就返回结果，但这里对偶数和奇数的分类会很麻烦。当其中一个数组遍历完后，出了 for 循环对边界的判断也会分几种情况。总体来说，虽然复杂度不影响，但代码会看起来很乱。然后在 <a href="https://blog.csdn.net/lxhpkm01/article/details/53823595" target="_blank" rel="noopener">这里</a> 找到了另一种思路。</p>
<p>首先是怎么将奇数和偶数的情况合并一下。</p>
<p>用 len 表示合并后数组的长度，如果是奇数，我们需要知道第 （len + 1）/ 2 个数就可以了，如果遍历的话需要遍历 int ( len / 2 ) + 1 次。如果是偶数，我们需要知道第 len / 2 和 len / 2 + 1 个数，也是需要遍历 len / 2 + 1 次。所以遍历的话，奇数和偶数都是 len / 2 + 1 次。</p>
<p>返回中位数的话，奇数需要最后一次遍历的结果就可以了，偶数需要最后一次和上一次遍历的结果。所以我们用两个变量 left 和 right ，right 保存当前循环的结果，在每次循环前将 right 的值赋给 left 。这样在最后一次循环的时候，left 将得到 right 的值，也就是上一次循环的结果，接下来 right 更新为最后一次的结果。</p>
<p>循环中该怎么写，什么时候 A 数组后移，什么时候 B 数组后移。用 aStart 和 bStart 分别表示当前指向 A 数组和 B 数组的位置。如果 aStart 还没有到最后并且此时 A 位置的数字小于 B 位置的数组，那么就可以后移了。也就是aStart  ＜  m  &amp;&amp;   A[aStart] &lt; B[bStart]。</p>
<p>但如果 B 数组此刻已经没有数字了，继续取数字B [ bStart ]，则会越界，所以判断下 bStart 是否大于数组长度了，这样 || 后边的就不会执行了，也就不会导致错误了，所以增加为 aStart  ＜  m  &amp;&amp; ( bStart &gt;= n || A [ aStart ] &lt; B [ bStart ] ) 。</p>
<h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">findMedianSortedArrays</span><span class="params">(<span class="keyword">int</span>[] A, <span class="keyword">int</span>[] B)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m = A.length;</span><br><span class="line">    <span class="keyword">int</span> n = B.length;</span><br><span class="line">    <span class="keyword">int</span> len = m + n;</span><br><span class="line">    <span class="keyword">int</span> left = -<span class="number">1</span>, right = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> aStart = <span class="number">0</span>, bStart = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= len / <span class="number">2</span>; i++) &#123;</span><br><span class="line">        left = right;</span><br><span class="line">        <span class="keyword">if</span> (aStart &lt; m &amp;&amp; (bStart &gt;= n || A[aStart] &lt; B[bStart])) &#123;</span><br><span class="line">            right = A[aStart++];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            right = B[bStart++];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ((len &amp; <span class="number">1</span>) == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> (left + right) / <span class="number">2.0</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> right;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>时间复杂度：遍历 len/2 + 1 次，len = m + n ，所以时间复杂度依旧是 O（m + n）。</p>
<p>空间复杂度：我们申请了常数个变量，也就是 m，n，len，left，right，aStart，bStart 以及 i 。</p>
<p>总共 8 个变量，所以空间复杂度是 O（1）。</p>
<h2 id="解法三"><a href="#解法三" class="headerlink" title="解法三"></a>解法三</h2><p>上边的两种思路，时间复杂度都达不到题目的要求 O ( log ( m + n ) )。看到 log ，很明显，我们只有用到二分的方法才能达到。我们不妨用另一种思路，题目是求中位数，其实就是求第 k 小数的一种特殊情况，而求第 k 小数有一种算法。</p>
<p>解法二中，我们一次遍历就相当于去掉不可能是中位数的一个值，也就是一个一个排除。由于数列是有序的，其实我们完全可以一半儿一半儿的排除。假设我们要找第 k 小数，我们可以每次循环排除掉 k / 2 个数。看下边一个例子。</p>
<p>假设我们要找第 7 小的数字。</p>
<p><img src="http://windliang.oss-cn-beijing.aliyuncs.com/mid1.jpg" alt=""></p>
<p>我们比较两个数组的第 k / 2 个数字，如果 k 是奇数，向下取整。也就是比较第 3 个数字，上边数组中的 8 和 下边数组中的 3 ，如果哪个小，就表明该数组的前 k / 2 个数字都不是第 k 小数字，所以可以排除。也就是 1，2，3 这三个数字不可能是第 7 小的数字，我们可以把它排除掉。将 1389 和 45678910 两个数组作为新的数组进行比较。</p>
<p>更一般的情况 A [ 1 ]，A [ 2 ]，A [ 3 ]，A [ k / 2] … ，B[ 1 ]，B [ 2 ]，B [ 3 ]，B[ k / 2] … ，如果 A [ k / 2 ] &lt; B [ k / 2 ] ，那么 A [ 1 ]，A [ 2 ]，A [ 3 ]，A [ k / 2] 都不可能是第 k 小的数字。</p>
<p>A 数组中比 A [ k / 2 ] 小的数有 k / 2 - 1 个，B 数组中，B [ k / 2 ] 比 A [ k / 2 ] 小，假设 B [ k / 2 ] 前边的数字都比 A [ k / 2 ] 小，也只有 k / 2 - 1 个，所以比 A [ k / 2 ] 小的数字最多有  k / 2 - 1 +  k / 2 - 1 = k - 2 个，所以 A [ k / 2 ]  最多是第 k - 1 小的数。而比 A [ k / 2 ] 小的数更不可能是第 k 小的数了，所以可以把它们排除。</p>
<p>橙色的部分表示已经去掉的数字。</p>
<p><img src="http://windliang.oss-cn-beijing.aliyuncs.com/mid2.jpg" alt=""></p>
<p>由于我们已经排除掉了 3 个数字，就是这 3 个数字一定在最前边，所以在两个新数组中，我们只需要找第 7 - 3 = 4 小的数字就可以了，也就是 k = 4 。此时两个数组，比较第 2 个数字，3  &lt;  5，所以我们可以把小的那个数组中的 1 ，3 排除掉了。</p>
<p><img src="http://windliang.oss-cn-beijing.aliyuncs.com/mid3.jpg" alt=""></p>
<p>我们又排除掉 2 个数字，所以现在找第 4 - 2 = 2 小的数字就可以了。此时比较两个数组中的第 k / 2 = 1 个数，4 = 4 ，怎么办呢？由于两个数相等，所以我们无论去掉哪个数组中的都行，因为去掉 1 个总会保留 1 个的，所以没有影响。为了统一，我们就假设 4 &gt; 4 吧，所以此时将下边的 4 去掉。</p>
<p><img src="http://windliang.oss-cn-beijing.aliyuncs.com/mid4.jpg" alt=""></p>
<p>由于又去掉 1 个数字，此时我们要找第 1 小的数字，所以只需判断两个数组中第一个数字哪个小就可以了，也就是 4 。</p>
<p>所以第 7 小的数字是 4 。</p>
<p>我们每次都是取 k / 2 的数进行比较，有时候可能会遇到数组长度小于 k / 2 的时候。</p>
<p><img src="http://windliang.oss-cn-beijing.aliyuncs.com/mid5.jpg" alt=""></p>
<p>此时 k / 2 等于 3 ，而上边的数组长度是 2 ，我们此时将箭头指向它的末尾就可以了。这样的话，由于 2 &lt; 3 ，所以就会导致上边的数组 1，2 都被排除。造成下边的情况。</p>
<p><img src="http://windliang.oss-cn-beijing.aliyuncs.com/mid6.jpg" alt=""></p>
<p>由于 2 个元素被排除，所以此时 k = 5 ，又由于上边的数组已经空了，我们只需要返回下边的数组的第 5 个数字就可以了。</p>
<p>从上边可以看到，无论是找第奇数个还是第偶数个数字，对我们的算法并没有影响，而且在算法进行中，k 的值都有可能从奇数变为偶数，最终都会变为 1 或者由于一个数组空了，直接返回结果。</p>
<p>所以我们采用递归的思路，为了防止数组长度小于 k / 2 ，所以每次比较 min ( k  /  2，len ( 数组 ) ) 对应的数字，把小的那个对应的数组的数字排除，将两个新数组进入递归，并且 k 要减去排除的数字的个数。递归出口就是当 k = 1 或者其中一个数字长度是 0 了。</p>
<h2 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">findMedianSortedArrays</span><span class="params">(<span class="keyword">int</span>[] nums1, <span class="keyword">int</span>[] nums2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = nums1.length;</span><br><span class="line">    <span class="keyword">int</span> m = nums2.length;</span><br><span class="line">    <span class="keyword">int</span> left = (n + m + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> right = (n + m + <span class="number">2</span>) / <span class="number">2</span>;</span><br><span class="line">    <span class="comment">//将偶数和奇数的情况合并，如果是奇数，会求两次同样的 k 。</span></span><br><span class="line">    <span class="keyword">return</span> (getKth(nums1, <span class="number">0</span>, n - <span class="number">1</span>, nums2, <span class="number">0</span>, m - <span class="number">1</span>, left) + getKth(nums1, <span class="number">0</span>, n - <span class="number">1</span>, nums2, <span class="number">0</span>, m - <span class="number">1</span>, right)) * <span class="number">0.5</span>;  </span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">getKth</span><span class="params">(<span class="keyword">int</span>[] nums1, <span class="keyword">int</span> start1, <span class="keyword">int</span> end1, <span class="keyword">int</span>[] nums2, <span class="keyword">int</span> start2, <span class="keyword">int</span> end2, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len1 = end1 - start1 + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> len2 = end2 - start2 + <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//让 len1 的长度小于 len2，这样就能保证如果有数组空了，一定是 len1 </span></span><br><span class="line">        <span class="keyword">if</span> (len1 &gt; len2) <span class="keyword">return</span> getKth(nums2, start2, end2, nums1, start1, end1, k);</span><br><span class="line">        <span class="keyword">if</span> (len1 == <span class="number">0</span>) <span class="keyword">return</span> nums2[start2 + k - <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (k == <span class="number">1</span>) <span class="keyword">return</span> Math.min(nums1[start1], nums2[start2]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> i = start1 + Math.min(len1, k / <span class="number">2</span>) - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> j = start2 + Math.min(len2, k / <span class="number">2</span>) - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (nums1[i] &gt; nums2[j]) &#123;</span><br><span class="line">            <span class="keyword">return</span> getKth(nums1, start1, end1, nums2, j + <span class="number">1</span>, end2, k - (j - start2 + <span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> getKth(nums1, i + <span class="number">1</span>, end1, nums2, start2, end2, k - (i - start1 + <span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>时间复杂度：每进行一次循环，我们就减少 k / 2 个元素，所以时间复杂度是 O（log（k）），而 k = （m + n）/ 2 ，所以最终的复杂也就是 O（log（m + n））。</p>
<p>空间复杂度：虽然我们用到了递归，但是可以看到这个递归属于尾递归，所以编译器不需要不停地堆栈，所以空间复杂度为 O（1）。</p>
<h2 id="解法四"><a href="#解法四" class="headerlink" title="解法四"></a>解法四</h2><p>我们首先理一下中位数的定义是什么</p>
<blockquote>
<p>中位数（又称中值，英语：Median），<a href="https://baike.baidu.com/item/%E7%BB%9F%E8%AE%A1%E5%AD%A6/2630438" target="_blank" rel="noopener">统计学</a>中的专有名词，代表一个样本、种群或<a href="https://baike.baidu.com/item/%E6%A6%82%E7%8E%87%E5%88%86%E5%B8%83/828907" target="_blank" rel="noopener">概率分布</a>中的一个数值，其可将数值集合划分为相等的上下两部分。</p>
</blockquote>
<p>所以我们只需要将数组进行切。</p>
<p>一个长度为 m 的数组，有 0 到 m 总共 m + 1 个位置可以切。</p>
<p><img src="http://windliang.oss-cn-beijing.aliyuncs.com/mid7.jpg" alt=""></p>
<p>我们把数组 A 和数组 B 分别在 i 和 j 进行切割。</p>
<p><img src="http://windliang.oss-cn-beijing.aliyuncs.com/mid8.jpg" alt=""></p>
<p>将 i 的左边和 j 的左边组合成「左半部分」，将 i 的右边和 j 的右边组合成「右半部分」。</p>
<ul>
<li><p>当 A 数组和 B 数组的总长度是偶数时，如果我们能够保证</p>
<ul>
<li><p>左半部分的长度等于右半部分 </p>
<p>i + j = m - i  + n - j  , 也就是 j = ( m + n ) / 2 - i</p>
</li>
<li><p>左半部分最大的值小于等于右半部分最小的值 max ( A [ i - 1 ] , B [ j - 1 ]）） &lt;=  min ( A [ i ] , B [ j ]））</p>
<p>那么，中位数就可以表示如下</p>
<p>（左半部分最大值 + 右半部分最大值 ）/ 2 。</p>
<p>（max ( A [ i - 1 ] , B [  j  - 1 ]）+ min ( A [ i ] , B [ j ]）） /  2</p>
</li>
</ul>
</li>
<li><p>当 A 数组和 B 数组的总长度是奇数时，如果我们能够保证</p>
<ul>
<li><p>左半部分的长度比右半部分大 1 </p>
<p>i + j = m - i  + n - j  + 1也就是 j = ( m + n + 1) / 2 - i</p>
</li>
<li><p>左半部分最大的值小于等于右半部分最小的值 max (  A [ i - 1 ] , B [ j - 1 ]）） &lt;=  min ( A [ i ] , B [ j ]））</p>
<p>那么，中位数就是</p>
<p>左半部分最大值，也就是左半部比右半部分多出的那一个数。</p>
<p>max ( A [ i - 1 ] , B [  j - 1 ]）</p>
</li>
</ul>
</li>
</ul>
<p>上边的第一个条件我们其实可以合并为 j = ( m + n + 1) / 2 - i，因为如果 m + n 是偶数，由于我们取的是 int 值，所以加 1 也不会影响结果。当然，由于 0 &lt;=  i &lt;= m ，为了保证 0 &lt;= j &lt;= n ，我们必须保证 m &lt;= n 。</p>
<p>$$m\leq n，i&lt;m,j=(m+n+1)/2-i\geq(m+m+1)/2-i&gt;(m+m+1)/2-m= 0$$</p>
<p>$$m\leq n,i&gt;0,j=(m+n+1)/2-i\leq (n+n+1)/2-i&lt;(n+n+1)/2=n$$</p>
<p>最后一步由于是 int 间的运算，所以 1 / 2 = 0。</p>
<p>而对于第二个条件，奇数和偶数的情况是一样的，我们进一步分析。为了保证  max (  A [ i - 1 ] , B [ j - 1 ]）） &lt;=  min ( A [ i ] , B [ j ]）），因为 A 数组和 B 数组是有序的，所以 A [ i - 1 ] &lt;= A [ i ]，B [ i - 1 ] &lt;= B [ i ] 这是天然的，所以我们只需要保证  B [ j - 1 ] &lt; = A [ i ]  和 A [ i - 1 ] &lt;= B [ j ] 所以我们分两种情况讨论：</p>
<ul>
<li><p>B [ j - 1 ] &gt; A [ i ]，并且为了不越界，要保证 j != 0，i != m</p>
<p><img src="http://windliang.oss-cn-beijing.aliyuncs.com/mid9.jpg" alt=""></p>
<p>此时很明显，我们需要增加 i ，为了数量的平衡还要减少  j ，幸运的是 j = ( m + n + 1) / 2 - i，i 增大，j 自然会减少。</p>
</li>
</ul>
<ul>
<li><p>A [ i - 1 ] &gt; B [ j ] ，并且为了不越界，要保证 i != 0，j  !=  n </p>
<p><img src="http://windliang.oss-cn-beijing.aliyuncs.com/mid10.jpg" alt=""></p>
<p>此时和上边的情况相反，我们要减少 i ，增大 j 。</p>
</li>
</ul>
<p>上边两种情况，我们把边界都排除了，需要单独讨论。</p>
<ul>
<li><p>当 i = 0 , 或者 j = 0 ，也就是切在了最前边。</p>
<p><img src="http://windliang.oss-cn-beijing.aliyuncs.com/mid11.jpg" alt=""></p>
<p>此时左半部分当 j = 0 时，最大的值就是 A [ i - 1 ] ；当 i = 0 时 最大的值就是 B [ j - 1] 。右半部分最小值和之前一样。</p>
</li>
</ul>
<ul>
<li><p>当 i = m 或者 j = n ，也就是切在了最后边。</p>
<p><img src="http://windliang.oss-cn-beijing.aliyuncs.com/mid12.jpg" alt=""></p>
<p>此时左半部分最大值和之前一样。右半部分当 j = n 时，最小值就是 A [ i ] ；当 i = m 时，最小值就是B [ j ] 。</p>
<p>所有的思路都理清了，最后一个问题，增加 i 的方式。当然用二分了。初始化 i 为中间的值，然后减半找中间的，减半找中间的，减半找中间的直到答案。</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">findMedianSortedArrays</span><span class="params">(<span class="keyword">int</span>[] A, <span class="keyword">int</span>[] B)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> m = A.length;</span><br><span class="line">        <span class="keyword">int</span> n = B.length;</span><br><span class="line">        <span class="keyword">if</span> (m &gt; n) &#123; </span><br><span class="line">            <span class="keyword">return</span> findMedianSortedArrays(B,A); <span class="comment">// 保证 m &lt;= n</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> iMin = <span class="number">0</span>, iMax = m;</span><br><span class="line">        <span class="keyword">while</span> (iMin &lt;= iMax) &#123;</span><br><span class="line">            <span class="keyword">int</span> i = (iMin + iMax) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">int</span> j = (m + n + <span class="number">1</span>) / <span class="number">2</span> - i;</span><br><span class="line">            <span class="keyword">if</span> (j != <span class="number">0</span> &amp;&amp; i != m &amp;&amp; B[j-<span class="number">1</span>] &gt; A[i])&#123; <span class="comment">// i 需要增大</span></span><br><span class="line">                iMin = i + <span class="number">1</span>; </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (i != <span class="number">0</span> &amp;&amp; j != n &amp;&amp; A[i-<span class="number">1</span>] &gt; B[j]) &#123; <span class="comment">// i 需要减小</span></span><br><span class="line">                iMax = i - <span class="number">1</span>; </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123; <span class="comment">// 达到要求，并且将边界条件列出来单独考虑</span></span><br><span class="line">                <span class="keyword">int</span> maxLeft = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">if</span> (i == <span class="number">0</span>) &#123; maxLeft = B[j-<span class="number">1</span>]; &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (j == <span class="number">0</span>) &#123; maxLeft = A[i-<span class="number">1</span>]; &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123; maxLeft = Math.max(A[i-<span class="number">1</span>], B[j-<span class="number">1</span>]); &#125;</span><br><span class="line">                <span class="keyword">if</span> ( (m + n) % <span class="number">2</span> == <span class="number">1</span> ) &#123; <span class="keyword">return</span> maxLeft; &#125; <span class="comment">// 奇数的话不需要考虑右半部分</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">int</span> minRight = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">if</span> (i == m) &#123; minRight = B[j]; &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (j == n) &#123; minRight = A[i]; &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123; minRight = Math.min(B[j], A[i]); &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> (maxLeft + minRight) / <span class="number">2.0</span>; <span class="comment">//如果是偶数的话返回结果</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0.0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>时间复杂度：我们对较短的数组进行了二分查找，所以时间复杂度是 O（log（min（m，n）））。</p>
<p>空间复杂度：只有一些固定的变量，和数组长度无关，所以空间复杂度是 O ( 1 ) 。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>解法二中体会到了对情况的转换，有时候即使有了思路，代码也不一定写的优雅，需要多锻炼才可以。解法三和解法四充分发挥了二分查找的优势，将时间复杂度降为 log 级别。</p>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>linux和Android的关系</title>
    <url>/2019/05/21/linux%E5%92%8CAndroid%E7%9A%84%E5%85%B3%E7%B3%BB/</url>
    <content><![CDATA[<p>这几天被「谷歌中止华为更新安卓」的新闻刷屏了，脑海里第一个疑问是安卓不是开源的吗，怎么受谷歌的控制了，恰巧这几天也在学 Linux 内核相关，就理了理他们的关系，分享一下。</p>
<h1 id="linux-发展的时间线。"><a href="#linux-发展的时间线。" class="headerlink" title="linux 发展的时间线。"></a>linux 发展的时间线。</h1><ul>
<li><p>1965 年前后： 由贝尔实验室 ( Bell )、麻省理工学院 ( MIT ) 及奇异公司 ( GE, 或称为通用电器 ) 共同发起了Multics 的计划， Multics 计划的目的是想要让大型主机可以达成提供 300 个以上的终端机联机使用的目标。 不过，到了 1969 年前后，计划进度落后，资金也短缺，所以该计划虽然继续在研究，但贝尔实验室还是退出了该计划的研究工作。</p>
</li>
<li><p>1969 年： 贝尔实验室的 Ken Thompson 因为自己的需要他以汇编语言写出了一组核心程序，同时包括一些核心工具程序， 以及一个小小的文件系统。这个系统就是 Unix 的原型， 当时 Thompson 将 Multics 庞大的复杂系统简化了不少，于是同实验室的朋友都戏称这个系统为：Unics。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/Thompson.jpg" alt=""></p>
</li>
<li><p>1973 年：Thompson 与 Dennis Ritchie 合作想将 Unics 改以高阶程序语言来撰写，后来 Ritchie 将 B 语言重新改写成 C 语言，再以 C 语言重新改写与编译 Unics 的核心， 最后发行出 Unix 的正式版本。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/Dennis_Ritchie_2011.jpg" alt=""></p>
</li>
<li><p>1977 年：柏克莱大学的 Bill Joy 在取得了 Unix 的核心原始码后，着手修改成适合自己机器的版本， 并且同时增加了很多工具软件与编译程序，最终将它命名为 Berkeley Software Distribution (BSD)。</p>
</li>
<li><p>1979 年：AT&amp;T 推出 System V 第七版 Unix ，这一版最重要的特色是可以支持 x86 架构的个人计算机系统。贝尔实验室属于 AT&amp;T，但是 AT&amp;T 之前对于 Unix 一直是采取较开放的态度。但此时，因为 AT&amp;T 由于商业的考虑，以及在当时现实环境下的思考，将 Unix 的版权收了回去，也引爆了很多的商业纠纷。</p>
</li>
<li><p>1984 年：Andrew Tanenbaum 教授自己动手写了 Minix 这个Unix Like 的核心程序， 在撰写的过程中，为了避免版权纠纷，完全不看 Unix 核心原始码，1984 年开始撰写核心程序， 到了 1986 年终于完成，并于次年出版Minix相关书籍。</p>
</li>
<li><p>1984 年：Richard Mathew Stallman 在 1984 年发起的 GNU 计划，目前我们所使用的很多自由软件，几乎均直接或间接受益于 GNU 这个计划，bash，gcc 均在此诞生。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/Richard_Stallman.jpg" alt=""></p>
</li>
<li><p>1988 年：有鉴于图形用户接口 ( Graphical User Interface, GUI ) 的需求日益加重，在 1984 年由 MIT 与其他第三方首次发表了 X Window System ，并且在1988 年成立了非营利性质的 XFree86 这个组织。</p>
</li>
<li><p>1991 年：芬兰的赫尔辛基大学的 Linus Torvalds 在 BBS 上面贴了一则消息， 宣称他以 bash, gcc 等工具写了一个小小的核心程序，这个核心程序可以在 Intel 的 386 机器上面运作， 让很多人很感兴趣，从此开始了Linux 不平凡的路程。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/Linus_Torvalds.jpg" alt=""></p>
</li>
<li><p>1994 年，经过地球的各个角落的黑客们群策群力的共同努力，这群素未谋面的虚拟团队们，在 1994 年终于完成的 Linux 的核心正式版，version 1.0。 这一版同时还加入了 X Window System 的支持。Linux 依据这个POSIX （可携式操作系统接口）的标准规范，Unix 上面的软件也是遵循这个规范来设计的， 如此一来，Linux 很容易就与 Unix 兼容共享互有的软件了。</p>
</li>
</ul>
<p>以上主要参考 <a href="http://cn.linux.vbird.org/linux_basic/0110whatislinux_1.php" target="_blank" rel="noopener">鸟哥的 linux 私房菜</a> ，大家感兴趣可以去看一下，很精彩。</p>
<p>由 Torvalds 负责开发的 Linux 仅具有 Kernel（核心）与 Kernel 提供的工具， 一般使用者使用肯定会有些困难。</p>
<p>为了让使用者能够接触到 Linux，于是很多的商业公司或非营利团体， 就将 Linux Kernel ( 含 tools ) 与可运行的软件整合起来，加上自己具有创意的工具程序，我们称之为 Linux distribution，著名的有 Red Hat, SuSE, Ubuntu, Fedora, Debian 等等。</p>
<h1 id="开源许可证"><a href="#开源许可证" class="headerlink" title="开源许可证"></a>开源许可证</h1><p>上边介绍到了 1984 年的 GNU 计划，到了 1985 年，Stallman 为了避免 GNU 所开发的自由软件被其他人所利用而成为专利软件， 所以他与律师草拟了有名的通用公共许可证 ( General Public License, GPL )，一个软件挂上  GPL 版权宣告之后，<strong>使用者可以自由的执行、复制、再发行、学习、修改与强化自由软件</strong>。但不能将一个 GPL 授权的自由软件，在你修改后而将他取消 GPL 授权，也不能单纯的贩卖自由软件。</p>
<p>目前很多 Linux 开发商贩卖 Linux 这个 GPL 授权的软件， 只是贩卖售后服务，提供数年不等的咨询、售后服务、软件升级与其他协力工作等等的附加价值。</p>
<p>除了 GPL 这个许可证，常见的还有一些其他的，参考<a href="http://www.ruanyifeng.com/blog/2011/05/how_to_choose_free_software_licenses.html" target="_blank" rel="noopener">阮一峰老师</a>总结的图。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/free_software_licenses.png" alt=""></p>
<p>还有一张更大白话的图，<a href="http://choosealicense.online/" target="_blank" rel="noopener">来源</a>。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/choose.jpg" alt=""></p>
<h1 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h1><p>上边我们看到了 Android 是 Apache License 2.0 许可证，这是怎么回事呢？</p>
<p>Linux kernel 的版权是 GPL。 这下问题来了：如果你是硬件厂商，希望你的硬件能在 Linux kernel 下运作，那么就必须要有驱动程序。如果驱动程序的程序代码公开，等于硬件规格也公开的差不多了。许多厂商不愿意这么做，所以就提供编好的驱动程序，但不提供原始码。 Android 的重点就是商业应用，Google 采用了一些手法来绕过这问题。他们把驱动程序移到 “userspace”，也就是说，把驱动程序变成在 Linux kernel 上层跑，而不是一起跑的东西，这样就可以避过 GPL。然后，在 kernel 这边开个小门，让本来不能直接控制到硬件的 “userspace” 程序也可以碰得到，这样只要把”开个小门”的程序代码公布就行啦。</p>
<p>在知乎找了些关于安卓的开源部分，<a href="https://www.zhihu.com/question/36344547/answer/67100003" target="_blank" rel="noopener">如下</a>。</p>
<p>Android代码包括三部分：</p>
<ol>
<li><p>Android 开源系统（Android Open Source Project，简称 AOSP ) 提供了 Android 系统的框架，包括修改后的 Android 专用 Linux 内核，Dalvik 虚拟机和 Android 应用层框架等。AOSP的大部分源码采用 Apache 2.0 授权模式发布，另外 Android 专用 Linux 内核部分采用 GPL 授权。</p>
<p>Apache 2.0 授权规定，可以任意使用源码，不需要开源。GPL授权规定，对源码的任何修改都必须开源。</p>
</li>
<li><p>Google 移动服务（Google Mobile Service，简称GMS）GMS 是由 Google 提供的一系列提高用户移动体验的应用和服务，包括各种服务和内购功能，还有一些 Google 的应用：Play 市场，GMail，Chrome，Google 地图，Google+ 等。GMS 提供了很好的特性，但是 GMS 是闭源的。为了获取 GMS 的使用，必须通过 Google 的授权。这部分源代码是不可见的。</p>
</li>
<li><p>基于 AOSP 的源码开发独立的 Android 系统 AOSP 是开源的，任何人都可以修改 AOSP 的代码开发独立于 AOSP 的 Android 系统。因为 AOSP 采用 Apache 2.0 授权，所以修改 AOSP 后的代码不需要开源。Amazon 的 Kindle Fire 和众多国产手机厂商的系统都属于这一类。</p>
</li>
</ol>
<p>回到开头的部分，谷歌其实是禁止了华为对 GMS 的使用，虽然国内的手机没有什么影响，但在国外除了 Google 自己的 APP，其他很多 APP 也都是依赖于 GMS 服务的，例如推送 api 等等。</p>
<p>总之，无论如何，我相信华为一定会有办法的，华为加油！</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode 力扣刷题 1 到 300 的感受</title>
    <url>/2020/04/30/leetcode%E5%8A%9B%E6%89%A3%E5%88%B7%E9%A2%981%E5%88%B0300%E7%9A%84%E6%84%9F%E5%8F%97/</url>
    <content><![CDATA[<p><code>leetcode</code> 顺序刷题已经到 <code>300</code> 题了，分享一下自己的感受。</p>
<h1 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h1><p>自己也不是 <code>ACMer</code>，在大一暑假的时候学校组织过 <code>ACM</code> 集训，但无奈自己当时底子太差，连栈、队列这些基础的数据结构也不懂，觉得刷这些题很无聊，然后就不了了之了。如果你是大一，接触到了 <code>ACM</code> ，可以多试试，如果 <code>ACM</code> 拿些奖，找工作基本上是没问题了。</p>
<p>后来有了些编程的基础后，才慢慢体会到刷题的乐趣。第一道题是 <code>18</code> 年 <code>7</code> 月本科毕业那个暑假总结的，当时写在 <a href="https://windliang.wang/">windliang.wang</a> 这个博客上。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/300leetcode1.jpg" alt=""></p>
<p>期间边刷题边熟悉一些常用的技巧， <code>HashMap</code>、二进制操作、回溯法、分治法、<code>memoization</code> 、动态规划等等，逐渐有了刷题的感觉，渐渐的也爱上了刷题。差不多过了一年，有了这篇 <a href="https://zhuanlan.zhihu.com/p/73146252" target="_blank" rel="noopener">leetcode 100 斩！回顾</a>。</p>
<p>在博客总结了几道题以后，为了防止博客文章的刷屏，也为了更好的翻阅题目，自己通过 <code>gitbook</code> 这个框架重新整理了题解，使用了自己的二级域名 <a href="http://leetcode.windliang.cc/" target="_blank" rel="noopener">leetcode.windliang.cc</a>，再后来为了方便统计等功能，买了新域名 <a href="https://leetcode.wang/" target="_blank" rel="noopener">leetcode.wang</a>。前段时间因为 <code>github</code> 的 <code>pages</code> 服务在国内不稳定，将博客迁移到了阿里云上，详细过程可以参考 <a href="https://zhuanlan.zhihu.com/p/108720935" target="_blank" rel="noopener">这里</a>。最终的博客就是下边的样子了。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/300leetcode2.jpg" alt=""></p>
<p>现在差不多快两年了，从本科毕业到了研究生毕业，顺序刷到了 <code>300</code> 题，当然其中的付费题和 <code>SQL</code> 的题跳过了。每道题先自己写，写完以后会逛 <code>discuss</code> 区的第一页，学习别人的思路，然后再自己写一遍代码，最后按照自己的理解进行了详细的总结，这种刷题速度虽然慢，但我觉得有下边的好处。</p>
<h1 id="总结的好处"><a href="#总结的好处" class="headerlink" title="总结的好处"></a>总结的好处</h1><p>第一个就是总结一遍会加深自己的印象，当用到一个之前用过的思路，结合一些关键词很快就能找到之前是哪道题，然后可以再比对这些题的异同点。同样，也可以方便自己以后的查找，更快的想起当时的思路。</p>
<p>第二个的话，可以对不同的算法之间的联系有更深的体会，从递归，到递归加 <code>memoization</code>，再到动态规划，最后进行动态规划空间复杂度的优化，用到的分治、回溯、动态规划会发现它们本质上其实是一样的，现在都对 <a href="https://leetcode.wang/leetcode-115-Distinct-Subsequences.html" target="_blank" rel="noopener">115 题</a> 印象深刻。</p>
<p>一些常见的问题也会帮助自己查漏补缺，比如二叉树的中序遍历，在 <a href="https://leetcode.wang/leetCode-94-Binary-Tree-Inorder-Traversal.html" target="_blank" rel="noopener">94 题</a> 我才知道原来还有 <code>Morris Traversal</code>，可以使得中序遍历的空间复杂度降为 <code>O(1)</code>。还有一些大神们的解法，印象最深刻的就属 <a href="https://leetcode.wang/leetCode-5-Longest-Palindromic-Substring.html" target="_blank" rel="noopener">第 5 题</a> 的马拉车算法了。</p>
<p>第三个的话，因为你想让别人明白你的想法，你会不停的去思考自己的解法，力求每一步都是清晰的，有时候虽然已经是 <code>AC</code> 的解法，总结着总结着会发现自己的思路其实是错的，只是 <code>LeetCode</code> 的 <code>test cases</code> 没有覆盖而已。</p>
<p>第四个的话，就是可以和别人交流，在交流过程中你又会加深一些算法的理解。比如常见的二分，印象最深的就是和 <a href="https://leetcode-cn.com/u/wei-ai-mai-xiao-cai/" target="_blank" rel="noopener">@为爱卖小菜</a> 讨论的一个问题，「在二分查找的时候， <code>while</code> 里面的 <code>low</code> 和 <code>high</code> 的关系，为什么有时候取等号有时候又不取等号」，当时两个人为了这个问题讨论了好久。这个问题看起来好像没什么，但当你真正去思考的话，一定会收获良多。</p>
<p>另外，别人也会指出你解法的问题，和第三点一样，有时候 <code>AC</code> 了，但依旧可能存在问题。当然也有可能是 <code>LeetCode</code> 改了函数，所以之前的代码无法通过了。</p>
<p>第五个的话，就是成就感了，来源于两处。一个的话就是自己绞尽脑汁，几个小时甚至几天后彻底理解一个解法的那一刻，另一个就是很多人去称赞你、感谢你的时候。在力扣中国站自己的多篇文章都被标为了精选题解，最开始发的 <a href="https://leetcode-cn.com/problems/longest-palindromic-substring/solution/xiang-xi-tong-su-de-si-lu-fen-xi-duo-jie-fa-bao-gu/" target="_blank" rel="noopener">第 5 题</a> 竟然已经有 <code>132k</code> 的浏览量了。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/300leetcode3.jpg" alt=""></p>
<p>目前 <a href="https://github.com/wind-liang/leetcode" target="_blank" rel="noopener">github</a> 也有 <code>1.1k</code> 的 <code>stars</code>，知乎专栏 <a href="https://zhuanlan.zhihu.com/leetcode1024" target="_blank" rel="noopener">LeetCode刷题</a> 也有 <code>1.5k+</code> 的关注量。之前刷到两百题的时候发到曹大的星球还被曹大赞赏加精选，当时太激动了。曹大的公众号是「caoz的梦呓」，自己的偶像之一，大家可以关注一下。</p>
<p>这些正激励会让自己更有动力坚持下去。</p>
<h1 id="开始刷题的疑惑"><a href="#开始刷题的疑惑" class="headerlink" title="开始刷题的疑惑"></a>开始刷题的疑惑</h1><h2 id="什么样的基础才能刷题？"><a href="#什么样的基础才能刷题？" class="headerlink" title="什么样的基础才能刷题？"></a>什么样的基础才能刷题？</h2><p>对于前 <code>90</code> 题的话，只需要了解一门语言，知道变量定义、判断语句，循环语句，定义函数，递归。了解基本的数据结构，顺序表、链表、栈、队列、哈希表，就可以开始刷题了。</p>
<p>到了 <code>94</code> 题出现了二叉树，需要知道深度优先遍历、广度优先遍历。后边个别题也会用到图，但不多。</p>
<p>期间很多题目也涉及到很多二进制的操作，也需要一些补码的知识，可以参考我之前总结的 <a href="https://zhuanlan.zhihu.com/p/67227136" target="_blank" rel="noopener">趣谈计算机补码</a>。</p>
<p>期间也会遇到很多自己之前不了解的数据结构，比如优先队列，<code>TreeMap</code>、线段树、并查集、前缀树等等，这些的话也不用急于了解，遇到的话再开始学习也不迟。</p>
<p>前  <code>300</code> 题的话，大致有三种类型。第一种只需要理解题目，然后模拟题目的过程就可以求解。第二种的话，可以用一些通用的思想求解，分治法、回溯法、动态规划等，贪心用的比较少。第三种的话，会涉及到一些数学的公式，能大大提高算法的性能，但如果之前不知道的话一般情况下是想不到的。</p>
<h2 id="按照什么顺序刷题？"><a href="#按照什么顺序刷题？" class="headerlink" title="按照什么顺序刷题？"></a>按照什么顺序刷题？</h2><p>如果刚接触编程，可以按照题目难度来，先多刷一些 <code>easy</code> 难度的，熟悉一下刷题的流程。也有人是通过专题刷的，比如动态规划专题，所有的题目都可以通过动态规划来解决。我觉得这样不是很好，因为这样的话失去了一个自己分析题目、选取方法的过程，遇到新题有时候还是不知道该怎么下手。</p>
<p>所以如果时间充足的话，可以随机刷题，或者像我一样顺序刷，这样对一些常用的思路会慢慢加深然后固化。</p>
<h2 id="选哪门语言刷？"><a href="#选哪门语言刷？" class="headerlink" title="选哪门语言刷？"></a>选哪门语言刷？</h2><p>不用纠结，不用纠结，不用纠结，随便一门都可以。之前的  <a href="https://zhuanlan.zhihu.com/p/73146252" target="_blank" rel="noopener">leetcode 100 斩！回顾</a> 这里也就讲过。</p>
<p>要想清楚语言和算法之间的关系。</p>
<p>算法就像是从家里到超市该怎么走？出门左拐，直走后右拐….起着指导性的作用。</p>
<p>语言是我们选择的交通工具，骑车？步行？开车？平衡车？每种交通工具都有自己的优点和缺点，语言也是如此。</p>
<p>好的算法可能更像是，我们偶然发现了一条近路，降低了我们的时间复杂度或者是空间复杂度。</p>
<p>所以其实并不需要纠结，选择自己熟悉的一门语言即可。更多关于语言之间的关系可以参考 <a href="https://zhuanlan.zhihu.com/p/90440843" target="_blank" rel="noopener">到底学哪一门编程语言</a>。</p>
<p>我选 <code>java</code> 的主要原因是，<code>java</code> 属于强类型语言，这样写出来的解法会更易读些。如果有其他语言的基础，<code>java</code> 基本不用学也能读懂个大概。</p>
<h2 id="刷题和算法岗有关系吗？"><a href="#刷题和算法岗有关系吗？" class="headerlink" title="刷题和算法岗有关系吗？"></a>刷题和算法岗有关系吗？</h2><p>据我了解没啥关系，算法岗的话目前主要指的是深度学习，而刷题锻炼的是一种基础能力。可以增强你的逻辑能力和动手能力，当有一个想法的时候，可以快速通过编程实现的一种能力。</p>
<p>还有就是一些基础的数据结构和算法也必须是了解的，二叉树、图、广度优先遍历、深度优先遍历等等，在工程实践中会看到它们的影子。</p>
<h2 id="只刷题能找到工作吗？"><a href="#只刷题能找到工作吗？" class="headerlink" title="只刷题能找到工作吗？"></a>只刷题能找到工作吗？</h2><p>在美国可能可以，在国内的话有点儿难。国内除了基本的刷题，还需要了解自己岗位（前端、后端、算法等）的相关知识，可以牛客网看看面经了解个大概，还有就是有一些自己做过的项目，面试官会从你做的项目中问一些相关知识点。</p>
<h2 id="总结花费的时间"><a href="#总结花费的时间" class="headerlink" title="总结花费的时间"></a>总结花费的时间</h2><p>拿我个人来说，花费的时间取决于题目的难度。如果比较简单，<code>1</code> 到 <code>2</code> 个小时就可以完成一篇总结。如果遇到解法比较多的题目，有时候可能要花费七八个小时了，第一天把所有的解法理通，第二天把解法总结下来。</p>
<h1 id="未来的计划"><a href="#未来的计划" class="headerlink" title="未来的计划"></a>未来的计划</h1><p>刷题总结已经快两年了，以后还会继续下去，但更新频率会降低了。</p>
<p>一方面自己马上毕业要进入工作了，供自己支配的时间会变少，总结确实需要花费不少时间，有的题目一篇文章下来甚至需要七八个小时，未来更多的精力会放在前端领域上。</p>
<p>另一方面，就是刷题带来的新鲜感没有前 <code>100</code> 题的时候那么频繁了，只会偶尔碰到几个新的思路，大部分的思路、技巧在之前的题目已经见过了。</p>
<p>之前都是用 <code>java</code> 写的代码，未来会改成 <code>JavaScript</code> 了，因为我的工作是前端，想不到吧，哈哈，好多人知道后都发出了疑问，之前也总结过一篇原因，参考 <a href="https://zhuanlan.zhihu.com/p/99181212" target="_blank" rel="noopener">面完腾讯阿里后对人生的思考</a>。<code>js</code> 会尽量多用 <code>ES6</code> 的语法，之前确实用的比较少。</p>
<p>另外，大家有问题的话可以和我一起探讨，最好是我总结过的题目，不然新题我可能也不会，哈哈。希望是那种你已经经过各种调试，网上各种搜寻还是解决不了的问题，这样一起讨论的话才更有意义些。不然的话，可能只是我帮你调试、谷歌，仅仅锻炼了我的能力。</p>
<p>刷题博客地址是 <a href="https://leetcode.wang/" target="_blank" rel="noopener">leetcode.wang</a>，知乎专栏是 <a href="https://zhuanlan.zhihu.com/leetcode1024" target="_blank" rel="noopener">LeetCode刷题</a>，欢迎 <code>star</code>、关注，哈哈。</p>
<p>最后，越努力，越幸运，共勉。</p>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>python 简单验证码识别</title>
    <url>/2017/06/30/python%E7%AE%80%E5%8D%95%E9%AA%8C%E8%AF%81%E7%A0%81%E8%AF%86%E5%88%AB/</url>
    <content><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>简单，即验证码简单，仅有数字，没有太大的干扰，每个数字都有固定的样子<br>还有就是识别的算法简单，可以说没有算法，主要是识别验证码的整个思想过程</p>
<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul>
<li>python 2.7</li>
<li>我使用的是 windows 10系统</li>
<li>python 的图片处理库 PIL </li>
<li>python 的 requests 库，一个很方便的处理 HTTP 的库，这里仅仅是为了得到验证码图片</li>
</ul>
<p>使用 pip 命令便可安装所需要的库，如果没有 pip 建议去安装下，python 的一个包管理工具，安装第三方包很方便<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install Pillow //安装 PIL</span><br><span class="line">pip install requests //安装 requests</span><br></pre></td></tr></table></figure></p>
<h2 id="取得验证码样本"><a href="#取得验证码样本" class="headerlink" title="取得验证码样本"></a>取得验证码样本</h2><p>分析网站的 html ，得到验证码地址，若是谷歌浏览器，右键审查元素即可看到<br><img src="/2017/06/30/python简单验证码识别/getc.png" alt=" "><br>验证码地址是我们学校的，所以该地址只有用内网才可访问<br>这里提供些样本 <a href="http://pan.baidu.com/s/1miaBocK" target="_blank" rel="noopener">百度云链接</a> 密码：hj8t<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python  </span></span><br><span class="line"><span class="comment">#coding=utf-8    </span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line"><span class="comment">#下载</span></span><br><span class="line">s = requests.session()  </span><br><span class="line">captcha_url=<span class="string">'http://card.cug.edu.cn/Login/GetValidateCode?time=1498660044478'</span>  <span class="comment">#验证码地址</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">20</span>): <span class="comment">#得到 20 张验证码</span></span><br><span class="line">	captcha = s.get(captcha_url) <span class="comment"># get 请求得到验证码</span></span><br><span class="line">	file=<span class="string">'G:\\newcard\\Num\\'</span>+str(i)+<span class="string">'.jpg'</span> <span class="comment">#写入本地文件 </span></span><br><span class="line">	f = open(file, <span class="string">'wb'</span>)</span><br><span class="line">	<span class="keyword">for</span> line <span class="keyword">in</span> captcha.iter_content():</span><br><span class="line">		f.write(line)</span><br><span class="line">	f.close()</span><br></pre></td></tr></table></figure></p>
<p>然后就有了好多图片，可以先观察下<br><img src="/2017/06/30/python简单验证码识别/manyc.png" alt=" "><br>这些图片看起来似乎对数字进行了变形，但仔细观察无非每个数字有两个字体，一个居中，一个下沉</p>
<h2 id="二值化并且去噪"><a href="#二值化并且去噪" class="headerlink" title="二值化并且去噪"></a>二值化并且去噪</h2><h3 id="转为灰度图"><a href="#转为灰度图" class="headerlink" title="转为灰度图"></a>转为灰度图</h3><p>所谓灰度图就是有 0 ~ 255 共 256 种不同灰度的颜色<br>RGB 的颜色图转为灰度图其实有个公式 Gray = R*0.299 + G*0.587 + B*0.114，但我们直接用 Python 提供的函数即可<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">20</span>):</span><br><span class="line">    file=<span class="string">'G:\\newcard\\Num\\'</span>+str(num)+<span class="string">'.jpg'</span></span><br><span class="line">    im = Image.open(file)</span><br><span class="line">    im  = im.convert(<span class="string">'L'</span>) <span class="comment"># 转为灰度图</span></span><br></pre></td></tr></table></figure></p>
<p><img src="/2017/06/30/python简单验证码识别/gray.png" alt=" "><br>可以看到有许多噪点，就是点啊点啊点，还有线啊线啊线，下边的目的是让他变得干净点</p>
<h3 id="二值化去噪"><a href="#二值化去噪" class="headerlink" title="二值化去噪"></a>二值化去噪</h3><p>我们下载的图片是有颜色的，所以要将图片二值化，也就是变成黑白图，而且是只有两种颜色的黑白图，0 黑色，255白色，所以叫二值化。<br>而去噪，我们只需要选定一个阙值，这个阙值的确定，试试就出来了，更科学的方法是看图片的直方图，看看灰度的分布，可以更快的得到阙值，反正最终目的是得到的图片清晰无噪音，不管黑猫白猫，抓住老鼠就是好猫，所以我是试出来的。直接了当，小于这个阙值，把值变为 0（黑），否则变 255 （白），如果效果不理想，可以更细致的划分范围<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">20</span>):</span><br><span class="line">    file=<span class="string">'G:\\newcard\\Num\\'</span>+str(num)+<span class="string">'.jpg'</span></span><br><span class="line">    im = Image.open(file)</span><br><span class="line">    im  = im.convert(<span class="string">'L'</span>) <span class="comment">#变为灰度图</span></span><br><span class="line">    pixdata = im.load()  <span class="comment">#加载所有像素点</span></span><br><span class="line">    w, h = im.size <span class="comment">#得到高和宽</span></span><br><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> range(h):</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> range(w):</span><br><span class="line">            <span class="keyword">if</span> pixdata[x, y] &lt; <span class="number">190</span>: <span class="comment">#小于变 0</span></span><br><span class="line">                pixdata[x, y] = <span class="number">0</span></span><br><span class="line">            <span class="keyword">else</span>:                   <span class="comment">#否则变 255</span></span><br><span class="line">                pixdata[x, y] = <span class="number">255</span></span><br><span class="line">    im.save(<span class="string">"G:\\newcard\\two\\"</span>+str(num)+<span class="string">'.jpg'</span>, <span class="string">"GIF"</span>)</span><br></pre></td></tr></table></figure></p>
<p><img src="/2017/06/30/python简单验证码识别/two.png" alt=" "></p>
<h2 id="切割"><a href="#切割" class="headerlink" title="切割"></a>切割</h2><p>这步没的说，就是为了取得每个数字的样本，0 ~ 9，每个的两种字体<br>下边 代码 x ,y 的确定 就是给个初始值，然后一个循环，一个矩形一个矩形的切，在纸上画一画，确定一个大体范围，具体的值就得一次一次看效果，一次一次微调了，最终目的是把一个数字切下来，最好是刚刚把数字包裹，但由于这个验证码一个是居中字体，一个是下沉字体，所以切出来要么下边留空，要么上边留空<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">nume=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">20</span>):</span><br><span class="line">    file=<span class="string">'G:\\newcard\\Num\\'</span>+str(num)+<span class="string">'.jpg'</span></span><br><span class="line">    im = Image.open(file)</span><br><span class="line">    im  = im.convert(<span class="string">'L'</span>) <span class="comment">#变为灰度图</span></span><br><span class="line">    pixdata = im.load()  <span class="comment">#加载所有像素点</span></span><br><span class="line">    w, h = im.size <span class="comment">#得到高和宽</span></span><br><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> range(h):</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> range(w):</span><br><span class="line">            <span class="keyword">if</span> pixdata[x, y] &lt; <span class="number">190</span>: <span class="comment">#小于变 0</span></span><br><span class="line">                pixdata[x, y] = <span class="number">0</span></span><br><span class="line">            <span class="keyword">else</span>:                   <span class="comment">#否则变 255</span></span><br><span class="line">                pixdata[x, y] = <span class="number">255</span></span><br><span class="line">    im.save(<span class="string">"G:\\newcard\\two\\"</span>+str(num)+<span class="string">'.jpg'</span>, <span class="string">"GIF"</span>)</span><br><span class="line">	</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">5</span>):</span><br><span class="line">		x = <span class="number">8</span>+i*<span class="number">42</span> <span class="comment">#这里的数字参数需要自己</span></span><br><span class="line">		y = <span class="number">19</span>           <span class="comment">#根据验证码图片的像素进行</span></span><br><span class="line">		temp = im.crop((x, y, x+<span class="number">42</span>, y+<span class="number">49</span>))</span><br><span class="line">		temp.save(<span class="string">"G:\\newcard\\Temp\\%d.gif"</span> % nume)</span><br><span class="line">		nume=nume+<span class="number">1</span></span><br></pre></td></tr></table></figure></p>
<p><img src="/2017/06/30/python简单验证码识别/manyo.png" alt=" "><br>然后将 0 ~ 9 挑出来<br><img src="/2017/06/30/python简单验证码识别/09.png" alt=" "><br>神奇的是这个网站的验证码里没有 4 和 9 ，不抓不知道，一抓吓一跳</p>
<h2 id="识别验证码"><a href="#识别验证码" class="headerlink" title="识别验证码"></a>识别验证码</h2><p>实时的取得当前的验证码，然后将其切割成一个一个，然后与上边步骤取得的 0 ~ 9 18个 数字依次比对，这里用到的算法就是最容易想到的，就是对应的像素点依次比较，相等变量值减一，然后从这些里找最小的，也就是匹配最多的那个。在测试中发现，当然只针对这个网站的验证码，先和下沉的9个数字比较，然后发现好几个数字都错误识别为0，然后再如果等于 0，就再用居中的数字就行比较，选出最佳，此时识别率最高。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python  </span></span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> webbrowser <span class="comment">#打开图片需要，为了方便看结果</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">re</span><span class="params">(dir,temp,numx,numy)</span>:</span></span><br><span class="line">    <span class="string">"""返回当前的切割后的图片识别结果</span></span><br><span class="line"><span class="string">       参数</span></span><br><span class="line"><span class="string">       ----------</span></span><br><span class="line"><span class="string">       arg1 : char</span></span><br><span class="line"><span class="string">           '0' 代表选用下沉字体的目录， '1'代码选用居中字体的目录</span></span><br><span class="line"><span class="string">       arg2 : image</span></span><br><span class="line"><span class="string">            切割的图片</span></span><br><span class="line"><span class="string">        arg3: int</span></span><br><span class="line"><span class="string">            要观察的宽度</span></span><br><span class="line"><span class="string">        arg4: int</span></span><br><span class="line"><span class="string">            要观察的高度</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">       返回值</span></span><br><span class="line"><span class="string">       -------</span></span><br><span class="line"><span class="string">       int</span></span><br><span class="line"><span class="string">           识别的值</span></span><br><span class="line"><span class="string">       """</span></span><br><span class="line"></span><br><span class="line">    errcount_array = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>] <span class="comment">#记录每个样本的匹配的值</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">10</span>):  <span class="comment">#10个样本</span></span><br><span class="line">        <span class="keyword">if</span> (j == <span class="number">4</span> <span class="keyword">or</span> j == <span class="number">9</span>): <span class="comment">#除去 4 和 9</span></span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        fontMods = Image.open(<span class="string">"G:\\newcard\\Temp\\"</span>+dir+<span class="string">"\\%d.gif"</span> % j)</span><br><span class="line">        fontMods_black = <span class="number">0</span> </span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> range(numx):</span><br><span class="line">            <span class="keyword">for</span> l <span class="keyword">in</span> range(numy):</span><br><span class="line">                b = fontMods.getpixel((k, l)) <span class="comment">#取得样本的像素值</span></span><br><span class="line">                a = temp.getpixel((k, l))  <span class="comment">#取得切割图片，也就是要判断图片的像素值</span></span><br><span class="line">                <span class="keyword">if</span> (b == a): <span class="comment">#如果相等就减一</span></span><br><span class="line">                    fontMods_black -= <span class="number">1</span></span><br><span class="line">        errcount_array[j] = fontMods_black <span class="comment">#赋值给对应的值</span></span><br><span class="line"></span><br><span class="line">    min = <span class="number">0</span> <span class="comment">#找出最小的值，也就是最符合的，然后返回</span></span><br><span class="line">    <span class="keyword">for</span> m <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        <span class="keyword">if</span> (m == <span class="number">4</span> <span class="keyword">or</span> m == <span class="number">9</span>):</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span> (errcount_array[m] &lt; errcount_array[min]):</span><br><span class="line">            min = m</span><br><span class="line">    <span class="keyword">return</span> min</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载</span></span><br><span class="line">s = requests.session()  <span class="comment"># 保持回话， 让 requests 库去处理 cookies</span></span><br><span class="line">captcha_url = <span class="string">'http://card.cug.edu.cn/Login/GetValidateCode?time=1498660044478'</span></span><br><span class="line"></span><br><span class="line">captcha = s.get(captcha_url)</span><br><span class="line">file = <span class="string">'G:\\newcard\\Num\\temp.jpg'</span></span><br><span class="line">f = open(file, <span class="string">'wb'</span>)</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> captcha.iter_content():</span><br><span class="line">    f.write(line)</span><br><span class="line">f.close() </span><br><span class="line">webbrowser.open(<span class="string">'G:\\newcard\\Num\\temp.jpg'</span>)  <span class="comment">#打开图片</span></span><br><span class="line"></span><br><span class="line">im = Image.open(file)</span><br><span class="line">im = im.convert(<span class="string">'L'</span>)</span><br><span class="line">pixdata = im.load()</span><br><span class="line">w, h = im.size</span><br><span class="line"><span class="keyword">for</span> y <span class="keyword">in</span> range(h):</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(w):</span><br><span class="line">        <span class="keyword">if</span> pixdata[x, y] &lt; <span class="number">190</span>:</span><br><span class="line">            pixdata[x, y] = <span class="number">0</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            pixdata[x, y] = <span class="number">255</span></span><br><span class="line">yingshe = []</span><br><span class="line"><span class="comment">#切割</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">5</span>):</span><br><span class="line">    x = <span class="number">8</span> + i * <span class="number">42</span>  <span class="comment"># 这里的数字参数需要自己</span></span><br><span class="line">    y = <span class="number">19</span>  <span class="comment"># 根据验证码图片的像素进行</span></span><br><span class="line">    temp = im.crop((x, y, x + <span class="number">42</span>, y + <span class="number">49</span>))</span><br><span class="line">    <span class="comment">#每切割出一个就判断一个</span></span><br><span class="line">    min=re(<span class="string">'0'</span>,temp,<span class="number">42</span>,<span class="number">49</span>)</span><br><span class="line">    <span class="keyword">if</span> (min == <span class="number">0</span>):</span><br><span class="line">        min=re(<span class="string">'1'</span>,temp,<span class="number">42</span>,<span class="number">49</span>)</span><br><span class="line">	yingshe.append(str(min))</span><br><span class="line"><span class="keyword">print</span> yingshe</span><br></pre></td></tr></table></figure>
<p><img src="/2017/06/30/python简单验证码识别/ans1.png" alt=" "></p>
<h2 id="增加识别率到-100"><a href="#增加识别率到-100" class="headerlink" title="增加识别率到 100%"></a>增加识别率到 100%</h2><p>经过上边的步骤你会发现，总会把某些数字错认为固定的数字，电脑还真是固执。而不同的网站，错认的还不一样，所以为了达到更高的识别率，这一步是最耗时的了，而且还真的是只能靠运气，不停的改数字，不停的试。它的思想就是，之前我们比较的是一个图片的全部像素，在 min=re(‘1’,temp,42,49) 函数中传入切割图片的大小，42*49,现在我们可以改变这个值，将切割图片的部分像素和样本的对应像素进行比较，然后选最佳。<br>举个例子，就是它把 下沉的 3，居中的 2，下沉的 0 都认成 8，所以如果结果是 8，我们再对其进行判断，当然这又会引起本来认对的数字认错，这是写一些 if 语句进行纠正，就是如果本来是 3，然后此时认成了 5，我们再把值变回 3。然后再不停的试，也就是 改函数的最后两个参数，并且加 if 直到完全正确。<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (min == <span class="number">6</span>):</span><br><span class="line">    t = re(<span class="string">"1"</span>, temp, <span class="number">42</span>, <span class="number">23</span>)</span><br><span class="line">    <span class="keyword">if</span> (t == <span class="number">8</span> <span class="keyword">or</span> t == <span class="number">5</span>):</span><br><span class="line">        min = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(min==<span class="number">8</span>):</span><br><span class="line">    t=re(<span class="string">"1"</span>,temp,<span class="number">35</span>,<span class="number">35</span>)</span><br><span class="line">    min = t</span><br><span class="line">    <span class="keyword">if</span>(t==<span class="number">5</span>):</span><br><span class="line">        min=<span class="number">3</span></span><br><span class="line">    <span class="keyword">if</span>(t==<span class="number">0</span>):</span><br><span class="line">        min=<span class="number">8</span></span><br><span class="line">    <span class="keyword">if</span>(t==<span class="number">6</span> ):</span><br><span class="line">        min=<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(min==<span class="number">8</span>):</span><br><span class="line">    t = re(<span class="string">'0'</span>, temp, <span class="number">30</span>, <span class="number">20</span>)</span><br><span class="line">    <span class="keyword">if</span>(t==<span class="number">7</span>):</span><br><span class="line">        min=<span class="number">8</span></span><br><span class="line">    <span class="keyword">if</span>(t==<span class="number">0</span>):</span><br><span class="line">        min=<span class="number">0</span></span><br><span class="line"><span class="keyword">if</span>(min==<span class="number">0</span>):</span><br><span class="line">    t = re(<span class="string">'0'</span>, temp, <span class="number">30</span>, <span class="number">20</span>)</span><br><span class="line">    <span class="keyword">if</span>(t==<span class="number">2</span> <span class="keyword">or</span> t==<span class="number">6</span>):</span><br><span class="line">        min=<span class="number">6</span></span><br></pre></td></tr></table></figure></p>
<p>对结果不停的判断，不停的试，不同网站也不一样，理解其思想即可。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>基本思想就是，不管是样本还是要判断的验证码将其用<strong>同样的方式</strong>二值化 去噪 切割，得到验证码的所有样本，然后将切割的每个数字和样本利用某个算法进行比较，进行判断，得出结果。最后再利用某些算法，修正部分固定的一些错误。</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>验证码</tag>
      </tags>
  </entry>
  <entry>
    <title>一文让你彻底明白马拉车算法</title>
    <url>/2019/06/24/%E4%B8%80%E6%96%87%E8%AE%A9%E4%BD%A0%E5%BD%BB%E5%BA%95%E6%98%8E%E7%99%BD%E9%A9%AC%E6%8B%89%E8%BD%A6%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h1 id="缘起"><a href="#缘起" class="headerlink" title="缘起"></a>缘起</h1><p>对应于 leetcode 的第 5 题，给定一个字符串，然后输出这个字符串包含的最长回文子串。例如，”cbabfd” 的最长回文子串就是 “bab”。大概是去年刷到的这个题，当时有一种马拉车的算法来解决这个问题。记得当时理解了好几天才明白，当时也总结了一下。这几天看到知乎又有人问这个算法，索性就把这个算法单独拿出来总结一下，在之前的总结上再讲的详细一点。</p>
<h1 id="中心扩展算法"><a href="#中心扩展算法" class="headerlink" title="中心扩展算法"></a>中心扩展算法</h1><p>我们先来看一个简单的算法，来解决这个问题。</p>
<p>我们知道回文串一定是对称的，所以我们可以每次循环选择一个中心，进行左右扩展，判断左右字符是否相等即可。</p>
<p><img src="http://windliang.oss-cn-beijing.aliyuncs.com/5_6.jpg" alt=""></p>
<p>由于存在奇数的字符串和偶数的字符串，所以我们需要从一个字符开始扩展，或者从两个字符之间开始扩展，所以总共有 n + n - 1 个中心。</p>
<p>代码就很好写了，遍历每个中心，然后判断对称位置是否相等。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">longestPalindrome</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (s == <span class="keyword">null</span> || s.length() &lt; <span class="number">1</span>) <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">int</span> start = <span class="number">0</span>, end = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> len1 = expandAroundCenter(s, i, i); <span class="comment">//从一个字符扩展</span></span><br><span class="line">        <span class="keyword">int</span> len2 = expandAroundCenter(s, i, i + <span class="number">1</span>); <span class="comment">//从两个字符之间扩展</span></span><br><span class="line">        <span class="keyword">int</span> len = Math.max(len1, len2);</span><br><span class="line">        <span class="comment">//根据 i 和 len 求得字符串的相应下标</span></span><br><span class="line">        <span class="keyword">if</span> (len &gt; end - start) &#123;</span><br><span class="line">            start = i - (len - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">            end = i + len / <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s.substring(start, end + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">expandAroundCenter</span><span class="params">(String s, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> L = left, R = right;</span><br><span class="line">    <span class="keyword">while</span> (L &gt;= <span class="number">0</span> &amp;&amp; R &lt; s.length() &amp;&amp; s.charAt(L) == s.charAt(R)) &#123;</span><br><span class="line">        L--;</span><br><span class="line">        R++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> R - L - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>时间复杂度：O（n²）。两层循环，每层循环都是遍历每个字符。</p>
<p>空间复杂度：O（1）。</p>
<h2 id="Manacher’s-Algorithm-马拉车算法。"><a href="#Manacher’s-Algorithm-马拉车算法。" class="headerlink" title="Manacher’s Algorithm 马拉车算法。"></a>Manacher’s Algorithm 马拉车算法。</h2><blockquote>
<p>马拉车算法 Manacher‘s Algorithm 是用来查找一个字符串的最长回文子串的线性方法，由一个叫Manacher的人在1975年发明的，这个方法的最大贡献是在于将时间复杂度提升到了线性。</p>
</blockquote>
<p>主要参考了下边链接进行讲解。</p>
<p><a href="https://segmentfault.com/a/1190000008484167" target="_blank" rel="noopener">https://segmentfault.com/a/1190000008484167</a></p>
<p><a href="https://blog.crimx.com/2017/07/06/manachers-algorithm/" target="_blank" rel="noopener">https://blog.crimx.com/2017/07/06/manachers-algorithm/</a></p>
<p><a href="http://ju.outofmemory.cn/entry/130005" target="_blank" rel="noopener">http://ju.outofmemory.cn/entry/130005</a></p>
<p><a href="https://articles.leetcode.com/longest-palindromic-substring-part-ii/" target="_blank" rel="noopener">https://articles.leetcode.com/longest-palindromic-substring-part-ii/</a></p>
<p>首先我们解决下奇数和偶数的问题，在每个字符间插入”#”，并且为了使得扩展的过程中，到边界后自动结束，在两端分别插入 “^” 和 “$”，两个不可能在字符串中出现的字符，这样中心扩展的时候，判断两端字符是否相等的时候，如果到了边界就一定会不相等，从而出了循环。经过处理，字符串的长度永远都是奇数了。</p>
<p><img src="http://windliang.oss-cn-beijing.aliyuncs.com/5_7.jpg" alt=""></p>
<p>首先我们用一个数组 P 保存从中心扩展的最大个数，而它刚好也是去掉 “#” 的原字符串的总长度。例如下图中下标是 6 的地方。可以看到 P[ 6 ] 等于 5，所以它是从左边扩展 5 个字符，相应的右边也是扩展 5 个字符，也就是 “#c#b#c#b#c#”。而去掉 # 恢复到原来的字符串，变成 “cbcbc”，它的长度刚好也就是 5。</p>
<p><img src="http://windliang.oss-cn-beijing.aliyuncs.com/5_8.jpg" alt=""></p>
<h1 id="求原字符串下标"><a href="#求原字符串下标" class="headerlink" title="求原字符串下标"></a>求原字符串下标</h1><p>用 P 的下标 i 减去 P [ i ]，再除以 2 ，就是原字符串的开头下标了。</p>
<p>例如我们找到 P[ i ] 的最大值为 5 ，也就是回文串的最大长度是 5 ，对应的下标是 6 ，所以原字符串的开头下标是 （6 - 5 ）/ 2 = 0 。所以我们只需要返回原字符串的第 0 到 第 （5 - 1）位就可以了。</p>
<h1 id="求每个-P-i"><a href="#求每个-P-i" class="headerlink" title="求每个 P [ i ]"></a>求每个 P [ i ]</h1><p>接下来是算法的关键了，它充分利用了回文串的对称性。</p>
<p>我们用 C 表示回文串的中心，用 R 表示回文串的右边半径坐标，所以 R = C + P[ C ] 。C 和 R 所对应的回文串是当前循环中 R 最靠右的回文串。</p>
<p>让我们考虑求 P [ i ] 的时候，如下图。</p>
<p>用 i_mirror 表示当前需要求的第 i 个字符关于 C 对应的下标。</p>
<p><img src="http://windliang.oss-cn-beijing.aliyuncs.com/5_9.jpg" alt=""></p>
<p>我们现在要求 P [ i ]， 如果是用中心扩展法，那就向两边扩展比对就行了。但是我们其实可以利用回文串 C 的对称性。i 关于 C 的对称点是 i_mirror ，P [ i_mirror ] = 3，所以 P [ i ] 也等于 3 。</p>
<p>但是有三种情况将会造成直接赋值为 P [ i_mirror ] 是不正确的，下边一一讨论。</p>
<h3 id="1-超出了-R"><a href="#1-超出了-R" class="headerlink" title="1. 超出了 R"></a>1. 超出了 R</h3><p><img src="http://windliang.oss-cn-beijing.aliyuncs.com/5_10.jpg" alt=""></p>
<p>当我们要求 P [ i ] 的时候，P [ mirror ] = 7，而此时 P [ i ] 并不等于 7 ，为什么呢，因为我们从 i 开始往后数 7 个，等于 22 ，已经超过了最右的 R ，此时不能利用对称性了，但我们一定可以扩展到 R 的，所以 P [ i ] 至少等于 R - i = 20 - 15 = 5，会不会更大呢，我们只需要比较 T [ R+1 ] 和 T [ R+1 ]关于 i 的对称点就行了，就像中心扩展法一样一个个扩展。</p>
<h3 id="2-P-i-mirror-遇到了原字符串的左边界"><a href="#2-P-i-mirror-遇到了原字符串的左边界" class="headerlink" title="2. P [ i_mirror ] 遇到了原字符串的左边界"></a>2. P [ i_mirror ] 遇到了原字符串的左边界</h3><p><img src="http://windliang.oss-cn-beijing.aliyuncs.com/5_12.jpg" alt=""></p>
<p>此时P [ i_mirror ] = 1，但是 P [ i ] 赋值成 1 是不正确的，出现这种情况的原因是  P [ i_mirror ] 在扩展的时候首先是 “#” == “#” ，之后遇到了 “^”和另一个字符比较，也就是到了边界，才终止循环的。而 P [ i ] 并没有遇到边界，所以我们可以继续通过中心扩展法一步一步向两边扩展就行了。</p>
<h3 id="3-i-等于了-R"><a href="#3-i-等于了-R" class="headerlink" title="3. i 等于了 R"></a>3. i 等于了 R</h3><p>此时我们先把 P [ i ] 赋值为 0 ，然后通过中心扩展法一步一步扩展就行了。</p>
<h2 id="考虑-C-和-R-的更新"><a href="#考虑-C-和-R-的更新" class="headerlink" title="考虑 C 和 R 的更新"></a>考虑 C 和 R 的更新</h2><p>就这样一步一步的求出每个 P [ i ]，当求出的 P [ i ] 的右边界大于当前的 R 时，我们就需要更新 C 和 R 为当前的回文串了。因为我们必须保证 i 在 R 里面，所以一旦有更右边的 R 就要更新 R。</p>
<p><img src="http://windliang.oss-cn-beijing.aliyuncs.com/5_12.jpg" alt=""></p>
<p>此时的 P [ i ] 求出来将会是 3 ，P [ i ] 对应的右边界将是 10 + 3 = 13，所以大于当前的 R ，我们需要把 C 更新成 i  的值，也就是 10 ，R 更新成 13。继续下边的循环。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">preProcess</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = s.length();</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"^$"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    String ret = <span class="string">"^"</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        ret += <span class="string">"#"</span> + s.charAt(i);</span><br><span class="line">    ret += <span class="string">"#$"</span>;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 马拉车算法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">longestPalindrome2</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">    String T = preProcess(s);</span><br><span class="line">    <span class="keyword">int</span> n = T.length();</span><br><span class="line">    <span class="keyword">int</span>[] P = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">    <span class="keyword">int</span> C = <span class="number">0</span>, R = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> i_mirror = <span class="number">2</span> * C - i;</span><br><span class="line">        <span class="keyword">if</span> (R &gt; i) &#123;</span><br><span class="line">            P[i] = Math.min(R - i, P[i_mirror]);<span class="comment">// 防止超出 R</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            P[i] = <span class="number">0</span>;<span class="comment">// 等于 R 的情况</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 碰到之前讲的三种情况时候，需要利用中心扩展法</span></span><br><span class="line">        <span class="keyword">while</span> (T.charAt(i + <span class="number">1</span> + P[i]) == T.charAt(i - <span class="number">1</span> - P[i])) &#123;</span><br><span class="line">            P[i]++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判断是否需要更新 R</span></span><br><span class="line">        <span class="keyword">if</span> (i + P[i] &gt; R) &#123;</span><br><span class="line">            C = i;</span><br><span class="line">            R = i + P[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 找出 P 的最大值</span></span><br><span class="line">    <span class="keyword">int</span> maxLen = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> centerIndex = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (P[i] &gt; maxLen) &#123;</span><br><span class="line">            maxLen = P[i];</span><br><span class="line">            centerIndex = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> start = (centerIndex - maxLen) / <span class="number">2</span>; <span class="comment">//最开始讲的求原字符串下标</span></span><br><span class="line">    <span class="keyword">return</span> s.substring(start, start + maxLen);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>时间复杂度：for 循环里边套了一层 while 循环，难道不是 O ( n² )？不！其实是 O ( n )。不严谨的想一下，因为 while 循环访问 R 右边的数字用来扩展，也就是那些还未求出的节点，然后不断扩展，而期间访问的节点下次就不会再进入 while 了，可以利用对称得到自己的解，所以每个节点访问都是常数次，所以是 O ( n )。</p>
<p>空间复杂度：O（n）。</p>
<h1 id="总"><a href="#总" class="headerlink" title="总"></a>总</h1><p>最后感叹一下，提出马拉车算法的人太天才了，这个算法太美妙了，哈哈。</p>
<p>另外，更多详细通俗的 leetcode 题解，见 <a href="https://leetcode.wang/" target="_blank" rel="noopener">https://leetcode.wang/</a> 。</p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
        <tag>马拉车</tag>
      </tags>
  </entry>
  <entry>
    <title>不同样式tooltip对话框小三角的css实现</title>
    <url>/2021/06/27/%E4%B8%8D%E5%90%8C%E6%A0%B7%E5%BC%8Ftooltip%E5%AF%B9%E8%AF%9D%E6%A1%86%E5%B0%8F%E4%B8%89%E8%A7%92%E7%9A%84css%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<p>开发过程中已经遇到过好多次需要手动实现 <code>tooltip</code> 样式了，这里就总结下，以便未来更好的复制粘贴。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/tooltip33.jpg" alt="img"></p>
<p>如上图，常见的 <code>tooltip</code> 总共有 <code>3</code> 种类型，纯背景色无边框、有边框、包含背景图，其中的小三角可能是纯色、尖尖有弧度。</p>
<p>下边介绍四种常用的方法来实现 <code>tooltip</code>。</p>
<h1 id="贴图"><a href="#贴图" class="headerlink" title="贴图"></a>贴图</h1><p>简单方便快捷，一个三角形的图定下位即可。在女朋友的帮助下，用 <code>AI</code> 成功画了三种三角形。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/tooltip11.jpg" alt="img"></p>
<p>下边我们只需要把三角形贴到矩形下边即可。</p>
<ul>
<li><p>纯背景色三角形</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.wxml</span><br><span class="line">&lt;view class=&quot;tooltip&quot;&gt;</span><br><span class="line">		&lt;view class=&quot;tooltip-text&quot;&gt;我是一句提示内容&lt;/view&gt;</span><br><span class="line">		&lt;image class=&quot;tooltip-triangle&quot; src=&quot;https://windliangblog.oss-cn-beijing.aliyuncs.com/tooltip-01.png&quot; /&gt;</span><br><span class="line">&lt;/view&gt;</span><br><span class="line"></span><br><span class="line">.wxss</span><br><span class="line">.tooltip &#123;</span><br><span class="line">    width: 400rpx;</span><br><span class="line">    margin: 100rpx;</span><br><span class="line">    position: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.tooltip-text &#123;</span><br><span class="line">    height: 60rpx;</span><br><span class="line">    line-height: 60rpx;</span><br><span class="line">    background: #F5F8FF;</span><br><span class="line">    color: #494949;</span><br><span class="line">    border-radius: 5rpx;</span><br><span class="line">    padding: 0 20rpx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.tooltip-triangle &#123;</span><br><span class="line">    position: absolute;</span><br><span class="line">    width: 30rpx;</span><br><span class="line">    height: 30rpx;</span><br><span class="line">    top: 60rpx;</span><br><span class="line">    left: 200rpx;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/tooltip15.jpg" alt="img"></p>
</li>
<li><p>带边框的三角形和三角形圆角</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.wxml</span><br><span class="line">&lt;view class=&quot;tooltip&quot;&gt;</span><br><span class="line">		&lt;view class=&quot;tooltip-text&quot;&gt;我是一句提示内容&lt;/view&gt;</span><br><span class="line">		&lt;image class=&quot;tooltip-triangle&quot; src=&quot;https://windliangblog.oss-cn-beijing.aliyuncs.com/tooltip-02.png&quot; /&gt;</span><br><span class="line">&lt;/view&gt;</span><br><span class="line"></span><br><span class="line">.wxss</span><br><span class="line">.tooltip &#123;</span><br><span class="line">  width: 400rpx;</span><br><span class="line">  margin: 100rpx;</span><br><span class="line">  position: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.tooltip-text &#123;</span><br><span class="line">  height: 60rpx;</span><br><span class="line">  line-height: 60rpx;</span><br><span class="line">  background: #f5f8ff;</span><br><span class="line">  color: #494949;</span><br><span class="line">  border-radius: 5rpx;</span><br><span class="line">  padding: 0 20rpx;</span><br><span class="line">  border: 2px solid #002fa7;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.tooltip-triangle &#123;</span><br><span class="line">  position: absolute;</span><br><span class="line">  width: 30rpx;</span><br><span class="line">  height: 30rpx;</span><br><span class="line">  top: 62rpx;</span><br><span class="line">  left: 200rpx;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/tooltip16.jpg" alt="img"></p>
<p>发现原有的 <code>border</code> 没有盖住，然后从重新做了一张上边延伸背景色的图。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/tooltip2-02.png" alt="img"></p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/tooltip19.jpg" alt="img"></p>
<p>圆角的三角同理，换下 <code>image</code> 的 <code>src</code> 即可。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/tooltip20.jpg" alt="img"></p>
<h1 id="利用-border"><a href="#利用-border" class="headerlink" title="利用 border"></a>利用 border</h1><p>不知道是谁第一个想到的这种方案，是真的很神奇。我们经常写 <code>border</code> ，可有没有想过它的四个角的连接处是什么样的？</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/tooltip3.jpg" alt="img"></p>
<p>让我们将连接处放大：</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/tooltip5.jpg" alt="img"></p>
<p>会发现每条边其实是一个梯形，然后互相接起来。那么如果 <code>border</code> 中内容的宽高都是 <code>0</code> 会怎么样呢？</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/tooltip34.jpg" alt="img"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.border &#123;</span><br><span class="line">  border-width: 4px;</span><br><span class="line">  border-color: #F00 #0F0 #00F #0FF;</span><br><span class="line">  border-style: solid;</span><br><span class="line">  width: 0px;</span><br><span class="line">  height: 0px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/tooltip6.jpg" alt="img"></p>
<p>三角形出现了！我们只需要将左边下边右边的 <code>border</code> 颜色设置为透明就是我们要的三角形了,<code>border-color: #F00 transparent transparent transparent;</code></p>
<p>此外，虽然底部 <code>boder</code> 设置为透明了，但是还占据高度，我们可以将它的 <code>width</code> 设为 <code>0</code>：<code>border-bottom-width: 0</code>。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/tooltip7.jpg" alt="img"></p>
<p>然后我们只需要将之前使用的图片替换掉即可。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.wxml</span><br><span class="line">&lt;view class=&quot;tooltip&quot;&gt;</span><br><span class="line">		&lt;view class=&quot;tooltip-text&quot;&gt;我是一句提示内容&lt;/view&gt;</span><br><span class="line">		&lt;view class=&quot;tooltip-triangle&quot;&gt;&lt;/view&gt;</span><br><span class="line">&lt;/view&gt;</span><br><span class="line"></span><br><span class="line">.wxss</span><br><span class="line">.tooltip &#123;</span><br><span class="line">    max-width: 400rpx;</span><br><span class="line">    margin-left: 20rpx;</span><br><span class="line">    position: relative;</span><br><span class="line">&#125;</span><br><span class="line">.tooltip-text &#123;</span><br><span class="line">    padding: 15rpx;</span><br><span class="line">    background: #002FA7;</span><br><span class="line">    color: #fff;</span><br><span class="line">    border-radius: 5rpx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.tooltip-triangle &#123;</span><br><span class="line">    position: absolute;</span><br><span class="line">    top: 62rpx;</span><br><span class="line">    left: 200rpx;</span><br><span class="line">    border-width: 30rpx;</span><br><span class="line">    border-color: #002FA7 transparent transparent transparent;</span><br><span class="line">    border-style: solid;</span><br><span class="line">    width: 0px;</span><br><span class="line">    height: 0px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>效果如下：<br><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/tooltip8.jpg" alt="img"></p>
<p>三角形形状的话，我们可以通过 <code>border-width</code> 属性去调整高低胖瘦。</p>
<ul>
<li>带边框三角</li>
</ul>
<p>上边的矩形和三角形都没有边框，如果是有边框的，下边这种该怎么实现呢？</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/tooltip9.jpg" alt="img"></p>
<p>其实很简单，我们只需要在原有三角形的位置写一个一样的三角形，然后颜色设置为对话框的背景色，向上偏移一定位置即可。</p>
<p>把覆盖的三角形颜色设置为红色，这样看起来就很明显了，如下图：</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/tooltip10.jpg" alt="img"></p>
<p>代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.wxml</span><br><span class="line">&lt;view class=&quot;tooltip&quot;&gt;</span><br><span class="line">		&lt;view class=&quot;tooltip-text&quot;&gt;我是一句提示内容&lt;/view&gt;</span><br><span class="line">		&lt;view class=&quot;tooltip-triangle-top&quot;&gt;&lt;/view&gt;</span><br><span class="line">		&lt;view class=&quot;tooltip-triangle&quot;&gt;&lt;/view&gt;</span><br><span class="line">&lt;/view&gt;</span><br><span class="line"></span><br><span class="line">.wxss</span><br><span class="line">.tooltip &#123;</span><br><span class="line">    max-width: 400rpx;</span><br><span class="line">    margin-left: 20rpx;</span><br><span class="line">    position: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.tooltip-text &#123;</span><br><span class="line">    padding: 15rpx;</span><br><span class="line">    background: #fff;</span><br><span class="line">    border-radius: 5rpx;</span><br><span class="line">    border: 5rpx solid #002FA7;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.tooltip-triangle-top &#123;</span><br><span class="line">    position: absolute;</span><br><span class="line">    top: 71rpx;</span><br><span class="line">    left: 200rpx;</span><br><span class="line">    border-width: 30rpx;</span><br><span class="line">    border-left-width: 20rpx;</span><br><span class="line">    border-right-width: 20rpx;</span><br><span class="line">    border-color: #FFF transparent transparent transparent;</span><br><span class="line">    border-style: solid;</span><br><span class="line">    width: 0px;</span><br><span class="line">    height: 0px;</span><br><span class="line">    z-index: 10;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.tooltip-triangle &#123;</span><br><span class="line">    position: absolute;</span><br><span class="line">    top: 76rpx;</span><br><span class="line">    left: 200rpx;</span><br><span class="line">    border-width: 30rpx;</span><br><span class="line">    border-left-width: 20rpx;</span><br><span class="line">    border-right-width: 20rpx;</span><br><span class="line">    border-color: #002FA7 transparent transparent transparent;</span><br><span class="line">    border-style: solid;</span><br><span class="line">    width: 0px;</span><br><span class="line">    height: 0px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="矩形旋转"><a href="#矩形旋转" class="headerlink" title="矩形旋转"></a>矩形旋转</h1><p>只需要两个同样位置的矩形，然后旋转上边的矩形即可。旋转过来的三角形的长边就是原来矩形的长，三角形边长比是<code>1</code> 比 <code>1</code> 比根号 <code>2</code>。所以原有矩形的长宽比应该为根号 <code>2</code> 比 <code>1</code>。即，<code>width = 1.41 * height</code> 。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/tooltip35.jpg" alt="img"></p>
<p>代码的话，我们用伪元素矩形旋转，另一个矩形设置 <code>overflow:hidden</code> 即可。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.wxml</span><br><span class="line">&lt;view class=&quot;tooltip&quot;&gt;</span><br><span class="line">		&lt;view class=&quot;tooltip-text&quot;&gt;我是一句提示内容&lt;/view&gt;</span><br><span class="line">		&lt;view class=&quot;tooltip-triangle&quot;&gt;&lt;/view&gt;</span><br><span class="line">&lt;/view&gt;</span><br><span class="line"></span><br><span class="line">.wxss</span><br><span class="line">.tooltip &#123;</span><br><span class="line">    max-width: 400rpx;</span><br><span class="line">    position: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.tooltip-text &#123;</span><br><span class="line">    padding: 15rpx;</span><br><span class="line">    background: #002FA7;</span><br><span class="line">    border-radius: 5rpx;</span><br><span class="line">    color: #FFF;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">.tooltip-triangle &#123;</span><br><span class="line">    position: relative;</span><br><span class="line">    left: 150rpx;</span><br><span class="line">    width: calc(30rpx * 1.41);</span><br><span class="line">    height: 30rpx;</span><br><span class="line">    overflow: hidden;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">.tooltip-triangle::before &#123;</span><br><span class="line">    content: &apos;&apos;;</span><br><span class="line">    width: 100%;</span><br><span class="line">    height: 100%;</span><br><span class="line">    background: #002FA7;</span><br><span class="line">    display: block;</span><br><span class="line">    transform: rotate(-45deg);</span><br><span class="line">    transform-origin: left top;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/tooltip21.jpg" alt="img"></p>
<p>由于我们三角形是由矩形生成的，所以带边框的 <code>tooltip</code> 相对 <code>border</code> 的方法就容易多了。</p>
<p>我们只需要给伪元素设置边框即可。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.wxss</span><br><span class="line">.tooltip &#123;</span><br><span class="line">    max-width: 400rpx;</span><br><span class="line">    position: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.tooltip-text &#123;</span><br><span class="line">    padding: 15rpx;</span><br><span class="line">    background: #f5f8ff;</span><br><span class="line">    color: #494949;</span><br><span class="line">    border-radius: 5rpx;</span><br><span class="line">    border: 4rpx solid #002fa7;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">.tooltip-triangle &#123;</span><br><span class="line">    position: relative;</span><br><span class="line">    left: 150rpx;</span><br><span class="line">    width: calc(30rpx * 1.41);</span><br><span class="line">    height: 30rpx;</span><br><span class="line">    overflow: hidden;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">.tooltip-triangle::before &#123;</span><br><span class="line">    content: &apos;&apos;;</span><br><span class="line">    border: 4rpx solid #002fa7;</span><br><span class="line">    background: #f5f8ff;</span><br><span class="line">    width: 100%;</span><br><span class="line">    height: 100%;</span><br><span class="line">    display: block;</span><br><span class="line">    transform: rotate(-45deg);</span><br><span class="line">    transform-origin: left top;</span><br><span class="line">    box-sizing: border-box;</span><br><span class="line">    border-radius: 8rpx;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>此时出现了一个问题，上边矩形的 <code>border</code> 露了出来。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/tooltip22.jpg" alt="img"></p>
<p>这里用一个 <code>trick</code> 的方法，我们在原有矩形上边加一个 <code>border</code> 盖住上边矩形的边框。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.wxss 添加下边的属性</span><br><span class="line">.tooltip-triangle &#123;</span><br><span class="line">    border-top: 4rpx solid #f5f8ff;</span><br><span class="line">    bottom: 8rpx;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/tooltip23.jpg" alt="img"></p>
<p>此外，带弧角的三角形，我们也只需要在伪元素矩形上设置圆角即可。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.wxss 添加下边的属性</span><br><span class="line">.tooltip-triangle::before</span><br><span class="line">    border-radius: 8rpx;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/tooltip24.jpg" alt="img"></p>
<h1 id="clip-path"><a href="#clip-path" class="headerlink" title="clip-path"></a>clip-path</h1><p>下边这种 <code>tooltip</code> 类型，小三角延伸了背景图片(背景图片 <code>url</code> 可能不是固定的），上边几种方法都是无能为力的。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/tooltip29.jpg" alt="img"></p>
<p>此时就需要 <code>clip-path</code> 属性了，我们可以在 <a href="https://bennettfeely.com/clippy/" target="_blank" rel="noopener">clippy</a> 快速生成我们需要的多边形路径。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/tooltip30.jpg" alt="img"></p>
<p><code>polygon</code> 就是画多边形，然后给定各个点的坐标即可，代码中各个颜色和图片中的各个点是对应的。</p>
<p>然后我们把上边的代码复制过来即可。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.wxml</span><br><span class="line">&lt;view class=&quot;tooltip&quot;&gt;</span><br><span class="line">		&lt;image src=&quot;https://windliangblog.oss-cn-beijing.aliyuncs.com/meituan4.jpg&quot; class=&quot;tooltip-text&quot;&gt;&lt;/image&gt;</span><br><span class="line">&lt;/view&gt;</span><br><span class="line"></span><br><span class="line">.wxss</span><br><span class="line">.tooltip &#123;</span><br><span class="line">    max-width: 400rpx;</span><br><span class="line">    position: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.tooltip-text &#123;</span><br><span class="line">    width: 400rpx;</span><br><span class="line">    height: 200rpx;</span><br><span class="line">    overflow: hidden;</span><br><span class="line">    clip-path: polygon(0% 0%, 100% 0%, 100% 80%, 70% 80%, 63% 100%, 55% 80%, 1% 80%);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用 <code>clip-path</code> 的话 <code>border</code> 和圆角就比较难搞了，因为最下边的边其实是被截掉了。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/tooltip31.jpg" alt="img"></p>
<p>在 <code>Web</code> 页面中可以使用 <code>SVG</code> 来实现想要的效果，可以 <a href="https://stackoverflow.com/questions/31854185/how-to-add-border-in-my-clip-path-polygon-css-style" target="_blank" rel="noopener">参考这里</a> 的一个回答。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/tooltip32.jpg" alt="img"></p>
<p>但在小程序中我没想到好方法，欢迎大家和我交流。</p>
<h1 id="总"><a href="#总" class="headerlink" title="总"></a>总</h1><p>上边主要介绍了贴图、<code>border</code>、矩形旋转、<code>clip-path</code>四种方法。日常开发中，<code>border</code> 方案基本满足需要了，偷懒的话也可以直接找设计要图。大家还用过其他方法吗？</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>微信小程序</tag>
        <tag>tooltip</tag>
      </tags>
  </entry>
  <entry>
    <title>世界末日规则-Doomsday Rule</title>
    <url>/2021/12/11/%E4%B8%96%E7%95%8C%E6%9C%AB%E6%97%A5%E8%A7%84%E5%88%99-DoomsdayRule/</url>
    <content><![CDATA[<p>世界末日规则（<code>Doomsday Rule</code>）是用来心算任意一天星期几的，由<a href="https://zh.wikipedia.org/wiki/%E7%B4%84%E7%BF%B0%C2%B7%E4%BD%95%E9%A0%93%C2%B7%E5%BA%B7%E5%A8%81" target="_blank" rel="noopener">约翰·何顿·康</a> 发明。</p>
<blockquote>
<p><strong>约翰·何顿·康威</strong>（英语：<strong>John Horton Conway</strong>，1937年12月26日－2020年4月11日），生于<a href="https://zh.wikipedia.org/wiki/英國" target="_blank" rel="noopener">英国</a><a href="https://zh.wikipedia.org/wiki/利物浦" target="_blank" rel="noopener">利物浦</a>，<a href="https://zh.wikipedia.org/wiki/數學家" target="_blank" rel="noopener">数学家</a>，活跃于<a href="https://zh.wikipedia.org/wiki/有限群" target="_blank" rel="noopener">有限群</a>的研究、<a href="https://zh.wikipedia.org/wiki/趣味數學" target="_blank" rel="noopener">趣味数学</a>、<a href="https://zh.wikipedia.org/wiki/紐結理論" target="_blank" rel="noopener">纽结理论</a>、<a href="https://zh.wikipedia.org/wiki/數論" target="_blank" rel="noopener">数论</a>、<a href="https://zh.wikipedia.org/wiki/組合博弈論" target="_blank" rel="noopener">组合博弈论</a>和<a href="https://zh.wikipedia.org/wiki/编码理论" target="_blank" rel="noopener">编码学</a>等范畴。</p>
<p>康威年少时就对数学很有强烈的兴趣：四岁时，其母发现他背诵二的次方；十一岁时，升读中学的面试，被问及他成长后想干什么，他回答想在剑桥当数学家。后来康威果然于<a href="https://zh.wikipedia.org/wiki/劍橋大學" target="_blank" rel="noopener">剑桥大学</a>修读数学，后为<a href="https://zh.wikipedia.org/wiki/普林斯頓大學" target="_blank" rel="noopener">普林斯顿大学</a>的教授。于 2020 年 4 月11日因<a href="https://zh.wikipedia.org/wiki/COVID-19" target="_blank" rel="noopener">COVID-19</a>去世。</p>
</blockquote>
<p>最早知道康威教授应该就是 <a href="https://leetcode.wang/leetcode-289-Game-of-Life.html" target="_blank" rel="noopener">leetcode 289 Game of Life</a> 生命游戏了，感兴趣的同学可以复习一下[旺柴]</p>
<p>言归正传，下边介绍具体的方法。</p>
<h1 id="算今年的日期"><a href="#算今年的日期" class="headerlink" title="算今年的日期"></a>算今年的日期</h1><h2 id="特殊日期"><a href="#特殊日期" class="headerlink" title="特殊日期"></a>特殊日期</h2><p>首先记几个特殊的日子：</p>
<table>
<thead>
<tr>
<th style="text-align:center">1 月 3 号</th>
<th style="text-align:center">2 月 28 号</th>
<th style="text-align:center">4 月 4 号</th>
<th style="text-align:center">5 月 9 号</th>
<th style="text-align:center">6 月 6 号</th>
<th style="text-align:center">7 月 11 号</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">8 月 8 号</td>
<td style="text-align:center">9 月 5 号</td>
<td style="text-align:center">10 月 10 号</td>
<td style="text-align:center">11 月 7 号</td>
<td style="text-align:center">12 月 12 号</td>
</tr>
</tbody>
</table>
<p>然后看一下今年的日历，会发现他们都是<strong>星期日</strong>！</p>
<p>接下来的问题是怎么速记这些日期：</p>
<p>首先大部分月份都是 <code>X</code> 月 <code>X</code> 日，也就是月份和日是一样的，我们只需记住四个特殊的日子：</p>
<p><code>7</code> 月 <code>11</code> 日和 <code>11</code> 月 <code>7</code> 日，可以想一下 <code>7 eleven</code> 便利店。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20211211084229018.png" alt="image-20211211084229018"></p>
<p><code>5</code> 月 <code>9</code> 号和 <code>9</code> 月<code>5</code> 号，这里只需要记住一个词语，朝九晚五，本来是用来形容工作时间的，<code>9</code>点上班，<code>5</code> 点下班，但现在看起来有些困难了。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20211211084635376.png" alt="image-20211211084635376"></p>
<p>然后会随闰年变化的，非闰年是 <code>1</code> 月 <code>3</code> 号和 <code>2</code> 月的最后一天 <code>28</code> 号，闰年的话都推后一天变为  <code>1</code> 月 <code>4</code> 号和 <code>2</code> 月的最后一天 <code>29</code> 号。</p>
<p><code>3</code> 月没有锚定日，可以根据 <code>2</code> 月最后一天的日期来推算。</p>
<h2 id="数学规律"><a href="#数学规律" class="headerlink" title="数学规律"></a>数学规律</h2><p>可以对照日历看一下：</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20211211084825559.png" alt="image-20211211084825559"></p>
<p>如果我们知道了 <code>12</code> 月 <code>12</code> 号是星期日，那么这个月的任意一天是星期几我们就都可以很快算出来了。</p>
<p>首先 <code>12</code> 号的 <code>7</code> 天后和 <code>7</code> 天前都还是星期日。<code>12</code> 号的 <code>3</code> 天后和 <code>4</code> 天前都是星期三。</p>
<p>可以通用出三条规则：</p>
<ol>
<li><p><strong>某一天的 <code>x</code> 天前的星期几和 <code>7 - x</code> 天后的星期几是完全一样的</strong>。</p>
</li>
<li><p><strong>某一天的 <code>x</code> 天后的星期几和 <code>7 - x</code> 天前的星期几是完全一样的</strong>。</p>
</li>
<li><p><strong>某一天加上 <code>x</code> 天或者减去 <code>x</code> 天，对 <code>x</code> 进行任意次的加 <code>7</code> 和减 <code>7</code>，星期几不会发生变化</strong>。</p>
</li>
</ol>
<p>举个例子，我们要算 <code>31</code> 号星期几，以 <code>12</code> 号为锚点。 <code>31 - 12 = 19</code>，也就是 <code>12</code> 号的 <code>19</code> 天后是星期几，<code>19 - 7 - 7 = 5</code>，也就是 <code>12</code> 号的 <code>5</code> 天后是星期几，很简单，星期五。</p>
<p>如果我们要算 <code>1</code> 号星期几，以 <code>12</code> 号为锚点。 <code>12 - 1 = 11</code>，也就是 <code>12</code> 号的 <code>11</code> 天前是星期几，<code>11 - 7 = 4</code>，也就是 <code>12</code> 号的 <code>4</code> 天前是星期几，星期日往前数 <code>4</code> 天不好算，应用第一条规则，我们可以算 <code>7 - 4 = 3</code>   天后星期几，<code>12</code> 号三天后是星期三，所以 <code>1</code> 号就是星期三。</p>
<h2 id="实战一下"><a href="#实战一下" class="headerlink" title="实战一下"></a>实战一下</h2><p>确认今年的锚定日，也就是星期日，那些特殊日期都是星期日。</p>
<table>
<thead>
<tr>
<th style="text-align:center">1 月 3 号</th>
<th style="text-align:center">2 月 28 号</th>
<th style="text-align:center">4 月 4 号</th>
<th style="text-align:center">5 月 9 号</th>
<th style="text-align:center">6 月 6 号</th>
<th style="text-align:center">7 月 11 号</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">8 月 8 号</td>
<td style="text-align:center">9 月 5 号</td>
<td style="text-align:center">10 月 10 号</td>
<td style="text-align:center">11 月 7 号</td>
<td style="text-align:center">12 月 12 号</td>
</tr>
</tbody>
</table>
<p>此时就可以对着你的女朋友说，你知道你生日(<code>10</code> 月 <code>4</code> 日)那天星期几吗？</p>
<blockquote>
<p>不知道</p>
</blockquote>
<p>（锚定日是 <code>10</code> 月 <code>10</code> 号，<code>10 - 4 = 6</code> ，星期日的 <code>6</code> 天前，也就是 <code>1</code> 天后），星期一！我还能说出今年任意一天的星期几你信吗？</p>
<blockquote>
<p>8 月 8 号呢？</p>
</blockquote>
<p>（刚好是锚定日，开心，然后可以脱口而出），星期日！</p>
<blockquote>
<p>平安夜呢？</p>
</blockquote>
<p>(<code>12</code> 月 <code>24</code> 号星期几？锚定日是 <code>12</code> 号，<code>24 - 12 = 12</code> ，<code>12 - 7 = 5</code> ，星期日的 <code>5</code> 天后)，星期五！</p>
<blockquote>
<p>666</p>
</blockquote>
<p>（以上均为臆想，我女朋友最后回答是这有什么用呢，不如翻日历，哈哈，祝大家成功，开阔其他场景展示这个超能力）</p>
<h1 id="前后-100-年的星期几"><a href="#前后-100-年的星期几" class="headerlink" title="前后 100 年的星期几"></a>前后 100 年的星期几</h1><p>其实我们只需知道那一年的锚定日是星期几，并且知道那一年是不是闰年来确定我们的特殊日，后边的计算就和上边的方法一样了。</p>
<p>我们来记一个特殊的锚定日，<code>2000</code> 年的锚定日是<strong>星期二</strong>，然后记住三条规则：</p>
<ol>
<li>每过一个平年，锚定日星期数加 <code>1</code>，每过一个闰年，锚定日的星期数加 <code>2</code>。</li>
<li>每过 <code>12</code> 年，锚定日的星期数就加 <code>1</code>。比如 <code>2000</code> 年是星期二，<code>2012</code> 年就是星期三，<code>2024</code> 年就是星期四。</li>
<li>每相隔 <code>28</code> 年，只要相隔的两年在一个世纪内，或者跨过 <code>2000</code> 年，那么它们的锚定日都在一个星期。比如 <code>1972</code> 年与 <code>2028</code> 都是星期二。</li>
</ol>
<p>比如计算自己出生时候 <code>1996-01-29</code> 是星期几？先算 <code>1996</code> 的锚定日是星期几。</p>
<p><code>2000</code> 年是星期二，根据规则 <code>1</code>，往前数 <code>4</code> 年，因为 <code>2000</code> 年是闰年，所以从 <code>1999</code> 年到 <code>2000</code> 年星期加了二，所以 <code>1999</code> 年是星期日，<code>1998</code> 年是星期六，<code>1997</code> 年是星期五，<code>1996</code> 年是星期四。</p>
<p><code>1996</code> 年是闰年，特殊日期就是 <code>1</code> 月 <code>4</code> 号，<code>29 - 4</code> 等于 <code>25</code>，<code>25 - 3 * 7 = 4</code>，星期四的 <code>4</code> 天后是星期一！</p>
<p>所以 <code>1996-01-29</code> 就是星期一。</p>
<p>再算一下 <code>2049-10-01</code> 是星期几？</p>
<p>应用规则 <code>3</code>，<code>2028</code> 年锚定日是星期二。</p>
<p>应用规则 <code>2</code>，<code>2028 + 12 = 2040</code> 年锚定日是星期三，<code>2040 + 12 = 2052</code> 年是星期四。</p>
<p>因为 <code>2052</code> 年是闰年，所以从 <code>2051</code> 年到 <code>2052</code> 年星期加了二，所以 <code>2051</code> 年是星期二，<code>2050</code> 年是星期一，<code>2049</code> 年锚定日就是星期日。</p>
<p><code>10</code> 月 <code>10</code> 日是特殊日，<code>10 - 1 = 9</code>，<code>9 - 7 = 2</code> ，星期日的两天前就是星期五！</p>
<p>所以 <code>2049-10-01</code> 是星期五！</p>
<h1 id="任意年的星期几"><a href="#任意年的星期几" class="headerlink" title="任意年的星期几"></a>任意年的星期几</h1><p>上边我们记了 <code>2000</code> 年的锚定日是星期二，根据下边的规则我们可以推出任意百年前和百年后的锚定日是星期几。</p>
<p>每过 <code>100</code> 年的锚定日星期数按下面规律变化：星期二，星期日，星期五，星期三，星期二，星期日，星期五，星期三……每 <code>4</code> 年循环一次 。</p>
<p>所以 <code>2100</code>年的锚定日是星期日，<code>1900</code> 年是星期三。</p>
<p>知道了任意世纪的一个锚定日，再通过上边 <code>前后 100 年的星期几</code> 的规则，我们就可以推出任意年的星期几了。</p>
<p>我们来算一下 <code>8888</code> 年 <code>8</code> 月 <code>8</code> 日是星期几吧。</p>
<p><code>(8888 - 2000) / 100 = 68 余 88</code> ，过了 <code>68</code> 个百年，每四个百年一个周期，<code>68 / 4 = 17</code>，整除了，所以 <code>2000 + 6800 = 8800</code> 年的锚定日和 <code>2000</code> 年一样也是星期二。</p>
<p><code>((8888 - 8800)) / 28 = 3 余 4</code>，<code>8800 + 28 * 3 = 8884</code>，每相隔 <code>28</code> 年锚定日相同，所以 <code>8884</code> 的锚定日和 <code>8800</code> 年相同是星期二。</p>
<p> <code>8885</code> 年是星期三，<code>8886</code> 年是星期四，<code>8887</code> 年是星期五，<code>8888</code> 年是闰年，所以星期五加 <code>2</code> 天后就是星期日。</p>
<p>所以 <code>8888</code> 年的锚定日也就是星期日！</p>
<p><code>8</code> 月 <code>8</code> 号刚好是特殊日期，所以 <code>8888</code> 年 <code>8</code> 月 <code>8</code> 号是星期日！无图无真相，看下截图：</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20211211105832575.png" alt="image-20211211105832575"></p>
<h1 id="一起挑战"><a href="#一起挑战" class="headerlink" title="一起挑战"></a>一起挑战</h1><p>摘抄一段 <a href="https://www.jiqizhixin.com/articles/2020-04-17-6" target="_blank" rel="noopener">机器之心</a> 对约翰·康威博士的介绍。</p>
<blockquote>
<p>「约翰·康威博士坐在他的电脑面前准备登录。但在计算机允许他工作之前，它快速弹出了 <code>10</code> 个随机选出的过去和未来的日期，比如 <code>3/15/2005</code> 或 <code>4/29/1803</code>。康威博士必须心算每一个日期的星期数才能让电脑允许他打开文件开始工作。这是他为自己准备的游戏。」</p>
<p>在 <code>1972</code> 年左右发明了这个「末日游戏」之后，康威给自己设定了一个目标，快速连续计算 <code>10</code> 个日期的速度每隔五年都要加快一倍。落脚普林斯顿大学也没有让他偏离自己的轨迹。「为什么我想很快？因为这很了不起。」他说，「这是个很不错的聚会玩乐。我不知道这是否曾让我结识任何妹子，但这种事可能能偶然让人结识到合适的妹子——一种特定类型的妹子。」</p>
<p>那时，他计算完所有全部 <code>10</code> 个日期的时间是 <code>15.92</code> 秒，差不多每个 <code>1.5</code> 秒。他没有脱离自己的速度翻倍目标，而且他告诉那位记者他是世界上最快的人。</p>
</blockquote>
<p>然后这几天抽空写了小程序 「快速星期几」，大家可以感受下，哈哈。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.com%E6%89%AB%E7%A0%81_%E6%90%9C%E7%B4%A2%E8%81%94%E5%90%88%E4%BC%A0%E6%92%AD%E6%A0%B7%E5%BC%8F-%E6%A0%87%E5%87%86%E8%89%B2%E7%89%88.png" alt="扫码_搜索联合传播样式-标准色版"></p>
<p>特别鸣谢我家领导对 UI 的详细建议，大家感受下前后的差别，哈哈。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20211211205939576.png" alt="image-20211211205939576"></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>小程序</tag>
        <tag>世界末日规则</tag>
      </tags>
  </entry>
  <entry>
    <title>再谈进制转换</title>
    <url>/2020/03/19/%E5%86%8D%E8%B0%88%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2/</url>
    <content><![CDATA[<p>之前已经详细的讨论了十进制整数以及小数和二进制之间的互转，详细的可以参考 <a href="https://windliang.cc/2019/07/23/理解进制转换的原理/" target="_blank" rel="noopener">理解进制转换的原理</a>。</p>
<p>前段时间在 <a href="https://www.zhihu.com/question/357414448/answer/949086536" target="_blank" rel="noopener">知乎</a> 看到了这样的一个问题。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/jinzhi1.jpg" alt=""></p>
<p>你品，你细品，如果让你把 <code>7</code> 进制数转成 <code>8</code> 进制数，是不是你会先把 <code>7</code> 进制数转成 <code>10</code> 进制数，然后再转成 <code>8</code> 进制数。下边就讨论一下这个问题，前提是你已经对二进制和十进制之间的互转已经很清楚了。不然的话，建议先看一下  <a href="https://windliang.cc/2019/07/23/理解进制转换的原理/" target="_blank" rel="noopener">理解进制转换的原理</a>。</p>
<p>我们再重新思考一下进制，所谓进制无非是每一位有了不同的权重。</p>
<p>对于二进制权重依次是 $$…2^32^22^12^0$$</p>
<p>也就是 <code>... 8 4 2 1</code></p>
<p>所以对于二进制 <code>1100</code> ，转为十进制就是二进制的每一位乘以它的权重，即</p>
<p><code>1 × 8 + 1 × 4 + 0 × 2 + 0 × 1 = 12</code>。</p>
<p>那么问题来了，为什么是转成了十进制？</p>
<p>这里是关键了，<strong>因为我们说权重的时候，习惯性就用 10 进制去计算了权重</strong>。</p>
<p>那么这里换下思路，我们不用十进制去表示权重，而是用七进制去表示权重。</p>
<p>让我们熟悉一下七进制。</p>
<p>首先七进制用 7 个符号表示，即 <code>0, 1, 2, 3, 4, 5, 6</code></p>
<p>再熟悉一下七进制的运算，满 7 进 1</p>
<p><code>2 + 6 = 11</code></p>
<p><code>3 + 4 = 10</code></p>
<p><code>2 * 2 = 4</code></p>
<p>$2^3=11$</p>
<p>好的，看起来有些别扭，但事实如此，哈哈。</p>
<p>让我们回到二进制的权重问题，看一下七进制下的权重。</p>
<p>对于二进制权重依次是  $$…2^32^22^12^0$$</p>
<p>也就是，<code>... 11 4 2 1</code></p>
<p>所以对于二进制 <code>1100</code> ，转为七进制就是二进制的每一位乘以它的权重，即</p>
<p><code>1 × 11 + 1 × 4 + 0 × 2 + 0 × 1 = 11 + 4 = 15</code></p>
<p>所以二进制的 <code>1100</code> 在七进制中就是 <code>15</code>。</p>
<p>我们直接将二进制转为了七进制！</p>
<p>所以，我们之所以要将其他进制先转换为十进制，就是因为进制的权重我们默认下都是在十进制下进行的。如果在程序中，我们算某个权重，比如 $2^3$，结果一定是 <code>8</code>，这也决定了，我们只能将其它进制先转为十进制。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">twoToTen</span><span class="params">(String two)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">char</span>[] array = two.toCharArray();</span><br><span class="line">	<span class="keyword">int</span> n = array.length;</span><br><span class="line">	<span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> power = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">		sum = sum + (array[i] - <span class="string">'0'</span>) * (<span class="keyword">int</span>) Math.pow(<span class="number">2</span>, power);</span><br><span class="line">		power++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输入二进制 <code>1100</code>，就会输出十进制的 <code>12</code> 了。</p>
<p>为什么是 <code>10</code> 进制的呢，因为上边我们累加以及算权重的时候，调用的加法、乘法、幂次，都是基于 <code>10</code> 进制的。</p>
<p>那么我们能否修改函数，直接把二进制转为七进制呢？</p>
<p>我们只需要重新定义加法、乘法、以及幂次，让运算都是基于七进制的即可。这样算出的权重就是基于七进制的，加法、乘法也就会是基于七进制的，最终的结果当然是一个七进制的数字了。</p>
<p>首先我们定义一个 <code>Seven</code> 类，进行七进制的加法以及乘法、幂次。</p>
<p>思想的话，参考 <code>Leetcode</code> 的第二题 <a href="https://leetcode.wang/leetCode-2-Add-Two-Numbers.html" target="_blank" rel="noopener">大数相加</a> 。</p>
<p>这里的乘法以及幂次，直接递归的进行了，没有进行任何优化，只用于演示，具体优化方法参考可以参考 <code>LeetCode</code> 的 <a href="https://leetcode.wang/leetCode-29-Divide-Two-Integers.html" target="_blank" rel="noopener">29 题</a> 以及 <a href="https://leetcode.wang/leetCode-50-Pow.html" target="_blank" rel="noopener">50 题</a>。</p>
<p>此外，这里的加法只考虑了两个正数相加，减法也只考虑了减 <code>1</code>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Seven</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> n1, <span class="keyword">int</span> n2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> carry = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> shift = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (n1 != <span class="number">0</span> || n2 != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> x = (n1 != <span class="number">0</span>) ? n1 % <span class="number">10</span> : <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> y = (n2 != <span class="number">0</span>) ? n2 % <span class="number">10</span> : <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> sum = carry + x + y;</span><br><span class="line">            carry = sum / <span class="number">7</span>; <span class="comment">//保存进位</span></span><br><span class="line">            res = res + sum % <span class="number">7</span> * shift;</span><br><span class="line">            n1 /= <span class="number">10</span>;</span><br><span class="line">            n2 /= <span class="number">10</span>;</span><br><span class="line">            shift *= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (carry != <span class="number">0</span>) &#123;</span><br><span class="line">            res = res + <span class="number">1</span> * shift;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//传进来的数是七进制, 实现减 1</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">subOne</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//考虑需要借位的情况，比如这种 43000</span></span><br><span class="line">        <span class="keyword">while</span> (n % <span class="number">10</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            n /= <span class="number">10</span>;</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">        n -= <span class="number">1</span>; <span class="comment">//借位</span></span><br><span class="line">        <span class="comment">//低位补 6</span></span><br><span class="line">        <span class="keyword">while</span> (count != <span class="number">0</span>) &#123;</span><br><span class="line">            n = n * <span class="number">10</span> + <span class="number">6</span>;</span><br><span class="line">            count--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> n1, <span class="keyword">int</span> n2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n2 == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Seven.sum(n1, mul(n1, Seven.subOne(n2)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">pow</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (b == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Seven.mul(a, pow(a, Seven.subOne(b)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>有了七进制运算的类，我们就可以直接把二进制直接转换为七进制了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">twoToSeven</span><span class="params">(String two)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">char</span>[] array = two.toCharArray();</span><br><span class="line">	<span class="keyword">int</span> n = array.length;</span><br><span class="line">	<span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> power = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">		<span class="keyword">int</span> pow = Seven.pow(<span class="number">2</span>, power);</span><br><span class="line">		<span class="keyword">int</span> mul = Seven.mul(array[i] - <span class="string">'0'</span>, pow);</span><br><span class="line">		sum = Seven.sum(sum, mul);</span><br><span class="line">		power++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上边如果输入 <code>1100</code>，就会输出七进制的 <code>15</code> 了。</p>
<p>甚至，我们可以在函数增加一个参数，就可以将任意进制转为七进制了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">anyToSeven</span><span class="params">(String two, <span class="keyword">int</span> radix)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">char</span>[] array = two.toCharArray();</span><br><span class="line">	<span class="keyword">int</span> n = array.length;</span><br><span class="line">	<span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> power = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">		<span class="keyword">int</span> pow = Seven.pow(radix, power);</span><br><span class="line">		<span class="keyword">int</span> mul = Seven.mul(array[i] - <span class="string">'0'</span>, pow);</span><br><span class="line">		sum = Seven.sum(sum, mul);</span><br><span class="line">		power++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上边如果输入 <code>1200 3</code>，也就是三进制的 <code>1200</code>，就会输出七进制的 <code>63</code> 了。</p>
<p>当然上边的 <code>any</code> 只能是小于七进制的，因为我们里边的运算都是基于 <code>7</code> 进制的，允许的符号是 <code>0 - 6</code>，如果大于七进制上边就会乱套了。</p>
<p>至于大于七进制的转为七进制，方法的话就类似于上边介绍的十进制转为二进制，此时权重是固定的，然后利用除法求出每一位的值。</p>
<p>因此我们至少还需要实现七进制的除法，然后利用十进制转为二进制的思想即可。这里就不写了，就交给大家了，哈哈。</p>
<p>ps: 上边的代码，没有做严格的测试，思想应该是对的，哈哈，发现问题可以和我交流。</p>
<h2 id="总结一下"><a href="#总结一下" class="headerlink" title="总结一下"></a>总结一下</h2><p>进制转换分为两大类。</p>
<p>低进制转到高进制，也就是我们上边详细讨论的。我们只需要把权重用高进制的数去表示，然后在某个进制下进行相乘相加即可。</p>
<p>高进制转到低进制，类比于我们熟悉的十进制转二进制，同样用高进制的数表示权重，此时我们在某个进制下通过除法来求出各个位即可。</p>
<p>其实不管高进制到低进制，还是低进制到高进制，都是基于下边的等式。</p>
<p>以十进制和二进制的转换为例。</p>
<p>$$…a\times2^4+b\times2^3+c\times2^2+d\times2^1+e\times2^0=2020$$</p>
<p>已知左边，就是低进制到高进制。已知右边，就是高进制到低进制。</p>
<p><strong>左边权重的幂次的底决定了低进制是多少。</strong></p>
<p><strong>相乘相加在多少进制下进行，决定了最终转为了多少进制。</strong></p>
<p>因此需要十进制中转根本原因就是我们手里的计算器，计算机，或者你自己的口算，所有的计算我们都默认在十进制下进行，数量这个概念我们也是用十进制表示的。</p>
<p>因此不管其他进制转十进制，还是十进制转其他进制都会很方便。</p>
<p>再补一句，如果自己去实现七进制下的加减乘除。为了减少我们的工作量，因为我们的计算机已经实现了十进制的加减乘除，所以我们可以将七进制转为十进制，然后进行相应的计算，最后再将结果转回七进制即可。而我之前实现的七进制类，相当于在十进制的基础上模拟了七进制的进位借位，所以更麻烦些。</p>
]]></content>
      <tags>
        <tag>二进制</tag>
        <tag>计算机</tag>
      </tags>
  </entry>
  <entry>
    <title>一直迷糊的浮点数</title>
    <url>/2019/07/25/%E4%B8%80%E7%9B%B4%E8%BF%B7%E7%B3%8A%E7%9A%84%E6%B5%AE%E7%82%B9%E6%95%B0/</url>
    <content><![CDATA[<p>之前写了 <a href="https://mp.weixin.qq.com/s/BDR31lJ8Z2JNNPANuUJ-7g" target="_blank" rel="noopener">进制转换</a>，也写了计算机怎么 <a href="https://mp.weixin.qq.com/s/uvcQHJi6AXhPDJL-6JWUkw" target="_blank" rel="noopener">存整数</a>，那么问题来了，计算机中小数怎么存呢？比如<code>2019.725</code>怎么放到计算机里呢？<code>-2019.725</code>又该怎么办呢？</p>
<h1 id="我们有什么"><a href="#我们有什么" class="headerlink" title="我们有什么"></a>我们有什么</h1><p>首先想一下我们有什么，计算机怎么存数。假如我们的计算机是存 32 位的，那么它就长下边的样子。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/float1.jpg" alt=""></p>
<p>由于我们写数字，习惯于先写高位，所以把最低位画到了最右边。</p>
<p>我们需要做的就是把<code>0</code>和<code>1</code>放到上边的方框中，来表示<code>2019.725</code>。换言之，我们就是需要制定一个规则，把<code>2019.725</code>转成<code>01</code>字符串存进去。然后读取的时候，再把<code>01</code>字符串转成<code>2019.725</code>显示出来。</p>
<h1 id="思路一"><a href="#思路一" class="headerlink" title="思路一"></a>思路一</h1><p>简单粗暴些，我们人为的把<code>32</code>个位置分成三部分，最高位<code>0</code>表示正数，<code>1</code>表示负数，然后是整数部分，再然后是小数部分。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/float8.jpg" alt=""></p>
<p>低 <code>10</code> 位存小数部分，接下来的 <code>21</code> 位存整数部分，最高 <code>1</code>位存符号位。所以我们只需要把<code>2019</code>和<code>725</code>分别转成二进制，放进去就可以了。二进制位数不足的，高位补零就可以。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/float9.jpg" alt=""></p>
<p>仔细想想，规则还不够完善，如果存<code>10.3</code>和<code>10.03</code>，小数部分怎么存呢？肯定不能都存<code>3</code>，这样两个数就不能区分了。这里我想到两种方案：</p>
<h2 id="倒序"><a href="#倒序" class="headerlink" title="倒序"></a>倒序</h2><p>小数部分我们逆转以后去存，<code>10.3</code>小数部分存<code>3</code>，<code>10.03</code>小数部分存<code>30</code>。</p>
<h2 id="补零"><a href="#补零" class="headerlink" title="补零"></a>补零</h2><p>我们的小数部分是<code>10</code>个比特位，所以最多存 $2^{10}$ 个数，十进制的话就是<code>0 - 1023</code>。为了方便，把<code>1000</code>以上的数省略掉，范围变成<code>000-999</code>，也就意味着我们能精确的表示小数点后三位的数，如果一个数小数位数不足<code>3</code>位，我们就用零补齐。</p>
<p><code>10.3</code>的话，可以看成<code>10.300</code>，小数部分存<code>300</code>，<code>10.03</code>的话可以看成<code>10.030</code>，小数部分就存<code>30</code>。</p>
<h2 id="能表示的数字范围"><a href="#能表示的数字范围" class="headerlink" title="能表示的数字范围"></a>能表示的数字范围</h2><p>整数部分我们有<code>21</code>个比特位，能表示的数是 $2^{21}$ 个，十进制的话就是 <code>0 - 2097152</code>。</p>
<p>小数部分如果用的倒序方案，那么我们的范围就是<code>0 - 1023</code>。</p>
<p>综上，数字范围就是 <code>-2097152.1023 ~ 2097152.1023</code>。</p>
<h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><p><code>MySQL</code> 中的定点数<code>DECIMAL</code>就是采取的上边的思想，将整数部分和小数部分分别存储。不同之处是<code>MySQL</code>采用了变字长存储，根据十进制的大小，利用不同的字节去存储，所以理论上它能存的范围是无限的。</p>
<p>详细的介绍可以参考 <a href="https://juejin.im/post/5d2d37b4f265da1b7b31bda1" target="_blank" rel="noopener">你可能不知道的MySQL中的定点数类型</a>。</p>
<h1 id="思路二"><a href="#思路二" class="headerlink" title="思路二"></a>思路二</h1><p>上边的方案有一个问题，表示的数字的范围有些小，最大也才两百多万。限制范围的原因就是，上边的方案整数部分只用了<code>21</code>个比特位去存。</p>
<p>换一种思路，我们通过移动小数点把小数转成整数，然后再记录小数点移动的位数。</p>
<p>我们用<code>3</code>个比特位来记录移动的位数，这样我们就可以把小数点移动<code>7</code>位。此外，整数部分就可以有<code>28</code>个比特位来表示了，范围大大增加。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/float10.jpg" alt=""></p>
<p>其实可以看做是科学计数法的形式，比如<code>2019.725</code>，可以看做是 $2019725\times10^{-3}$，我们只需要把 <code>2019725</code>和指数<code>3</code>存起来就可以了。</p>
<p> <img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/float11.jpg" alt=""></p>
<h2 id="能表示的数字范围-1"><a href="#能表示的数字范围-1" class="headerlink" title="能表示的数字范围"></a>能表示的数字范围</h2><p><code>28</code>个比特位来表示整数部分，能表示的数的个数就是 $2^{28}$，对应的十进制范围就是<code>0 - 268435455</code>。</p>
<p>又因为最多可以移动 7 位的小数，所以数字范围就是下边的</p>
<p><code>-268435455.0000000 ~ 268435455.0000000</code>。</p>
<p>可以看到比之前的方案扩大了两个数量级，精度也提高了。但是我们要意识到一件事情，两种方案都用了<code>32</code>个比特位，所以最多就是表示 $2^{32}$ 个数。思路二表示的范围虽然扩大了，并不是这个范围内的所有数都能精确表示，能表示的数的范围是<code>0 - 268435455</code>，也就是能表示的有效数字最多只有九位。</p>
<p>对于思路一的最大数<code>2097152.1023</code>，如果用思路二，虽然它在<code>-268435455.0000000 ~ 268435455.0000000</code>之内，但是由于它的有效数字位数是<code>11</code>位，但我们最多存储<code>9</code>位的，所以我们只好把小数点后的最后两位舍去，存储<code>2097152.10</code>。</p>
<h2 id="应用-1"><a href="#应用-1" class="headerlink" title="应用"></a>应用</h2><p>对于<code>C#</code>中的<code>System.Decimal</code>是用的类似于思路二的思想，具体的话参考 <a href="https://zhuanlan.zhihu.com/p/20362939" target="_blank" rel="noopener">没有神话，聊聊decimal的“障眼法”</a>。</p>
<h1 id="思路三"><a href="#思路三" class="headerlink" title="思路三"></a>思路三</h1><p>上边的思路一和思路二都是站在十进制数的角度上先考虑对数字的分割、转换，然后将十进制的整数转为二进制进行存储的。再换一种思路，先把十进数转成二进制数，再去存呗。</p>
<p>对于<code>2019.725</code>转成二进制就是<code>11111100011.1011100110...</code>，为啥出现了省略号？<a href="https://mp.weixin.qq.com/s/BDR31lJ8Z2JNNPANuUJ-7g" target="_blank" rel="noopener">进制转换</a>中已经讨论过这个问题了，那就是大部分十进制数并不能精确的转到二进制，这是一个固有的事实，我们也没啥办法，假装没有省略号，继续讨论吧。</p>
<h2 id="尾数部分"><a href="#尾数部分" class="headerlink" title="尾数部分"></a>尾数部分</h2><p>这里存储的话，可以借鉴思路二，我们可以把二进制小数转换成科学计数法的形式，统一规格再去存储。这里用个小技巧，我们知道所有的数字除了<code>0</code>之外，一定会含有一个<code>1</code>，所以我们把数字转成下边的形式。</p>
<p>$$1.xxxxxxx…\times2^{E}$$</p>
<p>为什么要用上边的形式呢，这样做的一个好处就是存的时候，我们只需要存<code>xxxxxxxxx...</code>的部分，显示数字的时候再考虑它的最高位还有一个<code>1</code>。这样如果用<code>23</code>个比特位来存数字，相等于存储了<code>24</code>位。</p>
<h2 id="指数"><a href="#指数" class="headerlink" title="指数"></a>指数</h2><p>区别于思路二的指数，思路二我们是把原来的小数转为整数，所以指数一定是个负数，直接存它的绝对值就行。但在这里如果之前的数字是 <code>0.000001</code>这样的，那么指数<code>E</code>是负数，但如果是<code>1110011.1</code>这样的，指数<code>E</code>就是正数了。</p>
<p>如果指数<code>E</code>是用<code>8</code>个比特位来存储，那么总共就是 $2^8$ 个数，范围就是<code>0 - 255</code>，那么怎么存负数呢？最简单的方案，人为规定呗，将一部分正数映射到负数上，就对半分吧。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">0</span>    <span class="number">1</span>        <span class="number">125</span>  <span class="number">126</span>  <span class="number">127</span> <span class="number">128</span> <span class="number">129</span>      <span class="number">254</span> <span class="number">255</span></span><br><span class="line">-<span class="number">127</span> -<span class="number">126</span> ... -<span class="number">2</span>   -<span class="number">1</span>   <span class="number">0</span>   <span class="number">1</span>   <span class="number">2</span>    ... <span class="number">127</span> <span class="number">128</span></span><br></pre></td></tr></table></figure>
<p>要表示的指数加上<code>127</code>映射到<code>0 - 255</code>。反过来显示指数真正值的时候，需要减去<code>127</code>。</p>
<p>综上所述，我们就用 <code>1</code> 个比特位来存符号位，<code>8</code>个比特位来存指数，存的时候记得加上偏移，剩下的<code>23</code>个比特位来存有效数字，而事实上我们其实可以看做存了<code>24</code>位。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/float12.jpg" alt=""></p>
<p>这样的话，求出<code>2019.725</code>的二进制是 <code>11111100011.1011100110011</code>。把它规格化，小数点需要向左移动<code>10</code>位，也就代表指数是 <code>10</code>，存的话还需要加上<code>127</code>，也就是<code>137</code>了，二进制表示是<code>10001001</code>。所以规格化就是下边的数了：</p>
<p>$$1.11111000111011100110011\times2^{10001001}$$</p>
<p>所以计算机中就是下边这样存的了。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/float13.jpg" alt=""></p>
<h2 id="特殊数字"><a href="#特殊数字" class="headerlink" title="特殊数字"></a>特殊数字</h2><p>我们还有个问题没有解决，上边规格化的时候我们默认了所有数字至少有一个<code>1</code>，但是<code>0</code>怎么办呢？规则是我们自己定的，继续定呗。</p>
<p>当指数是<code>-127</code>时，一个很小很小的数了，此时对应的指数加上<code>127</code>，也就是<code>0</code>。我们规定当<code>E</code>为<code>0</code>并且<code>M</code>全为<code>0</code>，我们就说这个数字是<code>0</code>。</p>
<p><code>-127</code>用了以后，负指数最小就是<code>-126</code>了。</p>
<p>让我们再规定几个特殊的数字。</p>
<p>当指数是<code>128</code>时，一个很大很大的数，也就是当 <code>E</code> 全为<code>1</code>。分几种情况。</p>
<ul>
<li><p>有效数字<code>M</code>每一位全为<code>0</code>，</p>
<ul>
<li><p><code>S</code>为<code>0</code>，就代表正无穷。</p>
</li>
<li><p><code>S</code>为<code>1</code>，就代表负无穷。</p>
</li>
</ul>
</li>
<li><p>有效数字 M 每一位不全为 0，代表<code>NaN</code>，表示不是一个数字。</p>
</li>
</ul>
<p>所以此时正指数最大就是<code>127</code>了。</p>
<h2 id="能表示数的范围"><a href="#能表示数的范围" class="headerlink" title="能表示数的范围"></a>能表示数的范围</h2><h3 id="最大数和最小数"><a href="#最大数和最小数" class="headerlink" title="最大数和最小数"></a>最大数和最小数</h3><p>最大的数，指数最大取<code>1111 1110</code>，也就是<code>254</code>，减去<code>127</code>，代表指数是<code>127</code>。有效数字全部取<code>1</code>，也就是<code>1.111...1</code>，小数点后边<code>23</code>个<code>1</code>。然后把它转成十进制的话，用一个技巧，先给它加 $2^{-23}$，这样所有的<code>1</code>都产生进位，变成了<code>10.0000000</code>，这样的话转成十进制就是<code>2</code>了，当然我们还要减去 $2^{-23}$。</p>
<p>综上，最大的数字用十进制表示就是 $(2-2^{-23})\times2^{127}$，也就是 $3.4028234663852886\times10^{38}$。</p>
<p>所以能表示的范围就是 $-3.4028234663852886\times10^{38}$ 到 $ 3.4028234663852886\times10^{38}$。</p>
<p>再看一下能表示的最小正数。指数取最小为 <code>0000 0001</code>，减去<code>127</code>，代表指数是<code>-126</code>。有效数字全部取<code>0</code>，其实也就代表<code>1.000...0000</code>，总共有<code>23</code>个<code>0</code>，转成十进制的话就是$1\times2^{-126} $，也就是 $1.1754943508222875\times10^{-38}$。</p>
<p>有没有发现一个问题，我们要找最小的数，但因为之前的规定，最高位却能是<code>1</code>。但理论上我们找一个<code>0.000...1</code>这样的数才代表最小的正数。怎么得到这样的数呢？</p>
<p>再加个规则吧。当时我们规定当<code>E</code>为<code>0</code>的并且<code>M</code>每一位全为<code>0</code>，我们就说这个数字是<code>0</code>。那<code>M</code>不全为零呢？</p>
<p>之前是假设省略了最高位<code>1</code>，我们加一个新规则，当<code>E</code>全为<code>0</code>时，我们就说最高位不再省略<code>1</code>。所以最小的尾数就可以是<code>0.00...1</code>了，小数点后<code>22</code>个零，转成十进制就是 $2^{-23}$。指数还是之前的<code>-126</code>，所以比之前更小的正数就是 $2^{-23}\times2^{-126}=2^{-149}$，也就是 $1.401298464324817\times10^{-45}$。</p>
<h3 id="精度"><a href="#精度" class="headerlink" title="精度"></a>精度</h3><p>我们用<code>23</code>个比特位表示尾数部分，最多能表示 $2^{23}$ 个数，也就是<code>8388607</code>，从十进制的角度，所以它的有效数字最多有<code>7</code>位。</p>
<h2 id="应用-2"><a href="#应用-2" class="headerlink" title="应用"></a>应用</h2><p>上边介绍的其实就是<code>IEEE 754</code>标准了，计算机中存储<code>32</code>位浮点数基本上都是这个规则。比如<code>java</code>中的<code>float</code>类型，可以看一下<code>jdk</code>源码中的一些定义。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * A constant holding the largest positive finite value of type</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@code</span> float&#125;, (2-2&lt;sup&gt;-23&lt;/sup&gt;)&amp;middot;2&lt;sup&gt;127&lt;/sup&gt;.</span></span><br><span class="line"><span class="comment">     * It is equal to the hexadecimal floating-point literal</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@code</span> 0x1.fffffeP+127f&#125; and also equal to</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@code</span> Float.intBitsToFloat(0x7f7fffff)&#125;.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> MAX_VALUE = <span class="number">0x1</span>.fffffeP+<span class="number">127f</span>; <span class="comment">// 3.4028235e+38f</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * A constant holding the smallest positive normal value of type</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@code</span> float&#125;, 2&lt;sup&gt;-126&lt;/sup&gt;.  It is equal to the</span></span><br><span class="line"><span class="comment">     * hexadecimal floating-point literal &#123;<span class="doctag">@code</span> 0x1.0p-126f&#125; and also</span></span><br><span class="line"><span class="comment">     * equal to &#123;<span class="doctag">@code</span> Float.intBitsToFloat(0x00800000)&#125;.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.6</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> MIN_NORMAL = <span class="number">0x1</span>.0p-<span class="number">126f</span>; <span class="comment">// 1.17549435E-38f</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * A constant holding the smallest positive nonzero value of type</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@code</span> float&#125;, 2&lt;sup&gt;-149&lt;/sup&gt;. It is equal to the</span></span><br><span class="line"><span class="comment">     * hexadecimal floating-point literal &#123;<span class="doctag">@code</span> 0x0.000002P-126f&#125;</span></span><br><span class="line"><span class="comment">     * and also equal to &#123;<span class="doctag">@code</span> Float.intBitsToFloat(0x1)&#125;.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> MIN_VALUE = <span class="number">0x0</span>.000002P-<span class="number">126f</span>; <span class="comment">// 1.4e-45f</span></span><br></pre></td></tr></table></figure>
<p>可以看到<code>float</code>的最大值，和正数的两个最小值和我们分析的完全一致。</p>
<p>当然，上边的我们分析的是<code>32</code>位的情况，<code>64</code>位的话和<code>32</code>位基本是一样的，对应于<code>java</code>中的<code>double</code>类型。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/float14.jpg" alt=""></p>
<p>除了位数变多以外，其它的分析和<code>32</code>位都是一样的，此时指数不再加<code>127</code>，而是加<code>1023</code>。</p>
<h3 id="一些问题"><a href="#一些问题" class="headerlink" title="一些问题"></a>一些问题</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">0.1</span> + <span class="number">0.2</span> == <span class="number">0.3</span> <span class="comment">//false</span></span><br></pre></td></tr></table></figure>
<p>这样就可以理解上边的经典问题了，之所以两边不相等，第一个原因就是大部分十进制并不能精确的转为二进制，第二个原因就是存储的位数有限，会进行一些舍去。</p>
<p>如果对于一些能精确表示的浮点数，判断相等就不会出问题了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">0.125</span> + <span class="number">0.125</span> == <span class="number">0.25</span> <span class="comment">//true</span></span><br></pre></td></tr></table></figure>
<p>另一个问题，当我定义一个变量</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">float</span> a = <span class="number">0.1</span>;</span><br></pre></td></tr></table></figure>
<p>既然不能精确表示<code>0.1</code>，那么我们把它输出的时候为什么显示的是<code>0.1</code>。</p>
<p>在 <a href="https://mp.weixin.qq.com/s/BDR31lJ8Z2JNNPANuUJ-7g" target="_blank" rel="noopener">进制转换</a> 中我们算过，<code>0.1</code> 转成二进制的话是<code>0.0 0011 0011 0011...</code>，因为我们只能存<code>23</code>位有效数字，所以我们只能存<code>0.000 1 1001 1001 1001 1001 1001 101</code>。</p>
<p>因为我们最高位可以省略个 <code>1</code>，所以就是第一个<code>1</code>后边有<code>23</code>位。</p>
<p>此外，最后 <code>3</code> 位本来是<code>100</code>，因为<code>100</code>后边一位是<code>1</code>，所以相当于产生进位变成<code>101</code>。</p>
<p>这个二进制数还原为<code>10</code>进制的话就是<code>0.10000000149011612</code>。</p>
<p>让我们来验证一下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(String.format(<span class="string">"%.18f"</span>, <span class="number">0.1f</span>));</span><br><span class="line"><span class="comment">//0.100000001490116120</span></span><br></pre></td></tr></table></figure>
<p>和我们预想的完全一样，而如果不加限制直接输出<code>0.1</code>，显示<code>0.1</code>只是因为默认的有效位数比较少，其实只是输出了近似值<code>0.1</code>。</p>
<h1 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h1><p>浮点数的探究到此结束了，回顾一下，前两种方法我们先从十进制的角度来考虑，通过存整数来存小数，从而保证了我们可以精确存数。思路三，我们先把十进制转成二进制去存，这就产生了不能精确的存储数的问题。同时有两个技巧也值得注意，第一个就是用存储指数的时候，我们用正数表示负数。第二个就是，默认规定最高位是<code>1</code>，从而用<code>23</code>个比特位存了<code>24</code>位的数据。</p>
]]></content>
      <categories>
        <category>计算机组成</category>
      </categories>
      <tags>
        <tag>计算机</tag>
        <tag>补码</tag>
      </tags>
  </entry>
  <entry>
    <title>从小白到入门编程的成长之路</title>
    <url>/2023/08/31/%E4%BB%8E%E5%B0%8F%E7%99%BD%E5%88%B0%E5%85%A5%E9%97%A8%E7%BC%96%E7%A8%8B%E7%9A%84%E6%88%90%E9%95%BF%E4%B9%8B%E8%B7%AF/</url>
    <content><![CDATA[<p>前段时间在知乎看到这个问题「<a href="https://www.zhihu.com/question/614706706/answer/3146012068" target="_blank" rel="noopener">想请教现在的在职程序员第一次编程入门的是怎样的？</a>」，现在又到了大学新生入学的日子，这里把答案贴过来，希望对大家有所帮助。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20230831075109555.png" alt=""></p>
<p>按时间线来回忆下：</p>
<h2 id="14-年-9-月-15-年-3-月大一上"><a href="#14-年-9-月-15-年-3-月大一上" class="headerlink" title="14 年 9 月 - 15 年 3 月大一上"></a>14 年 9 月 - 15 年 3 月大一上</h2><p>14 年进入大学接触编程，第一门编程语言 C++。</p>
<p>开始就是学基础语法，学循环、学递归，求绝对值、求阶乘、一元二次方程求解，到最后的学生管理系统。</p>
<p><img src="https://pic1.zhimg.com/80/v2-bb99a05769ad80fa59a3b06bb6ea3b3a_1440w.webp?source=1940ef5c" alt="img"></p>
<p>txt 文件是类似下边的数据：</p>
<p><img src="https://pica.zhimg.com/80/v2-f5539b9fed34796b59820eca4a45b18d_1440w.webp?source=1940ef5c" alt="img"></p>
<p>写出的程序就是命令行之间的交互，程序把 txt 读入，然后进行增删改查的操作。</p>
<p><img src="https://picx.zhimg.com/80/v2-d79811e1b2c1128171481c1a1b731c7b_1440w.webp?source=1940ef5c" alt="img"></p>
<p>最开始底层是用一个大数组保存的，当时正好在学链表，自己就想着干脆再用链表重写一下吧，然后花了几天时间将整个代码进行了重写，未来遇到链表的问题都变得轻轻松松了。</p>
<p>大一寒假回家闲来无事就在网上找了些课程，学了<a href="https://www.zhihu.com/search?q=郝斌&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra={&quot;sourceType&quot;%3A&quot;answer&quot;%2C&quot;sourceId&quot;%3A3146012068}" target="_blank" rel="noopener">郝斌</a>的数据构课程，但当时应该是懵懵懂懂，只了解了大概。</p>
<h2 id="15-年-3-月-15-年-9-月大一下"><a href="#15-年-3-月-15-年-9-月大一下" class="headerlink" title="15 年 3 月 - 15 年 9 月大一下"></a>15 年 3 月 - 15 年 9 月大一下</h2><p>大一下学期接触了 GUI，也就是有界面的应用，学校的课程是 MFC。</p>
<p><img src="https://picx.zhimg.com/80/v2-09c41120e35b979bfd84f9590cb0a2df_1440w.webp?source=1940ef5c" alt="img"></p>
<p>课程末，把大一上写的黑框的学生管理系统改成了有界面的。</p>
<p><img src="https://pic1.zhimg.com/80/v2-22a454919b675bb94b57509a23c19024_1440w.webp?source=1940ef5c" alt="img"></p>
<p>接着暑假开始的时候没有直接回家，学校当时有 ACM 集训第一个月留校了，但当时基础太差，如听天书，最终也没走 ACM 的道路。</p>
<p>但期间因为有了 MFC 的知识，自己又尝试做了一个双人版的贪吃蛇。完全从零自己开始写， 画蛇身，动起来，操控，一步一步最后完成的。</p>
<p>并且实现了局域网对战，对网络有了初步的了解。</p>
<p><img src="https://pic1.zhimg.com/80/v2-639aacf85cd02dc4e47b4d8d073f398f_1440w.webp?source=1940ef5c" alt="img"></p>
<p><a href="https://www.zhihu.com/question/398508166/answer/1281030495" target="_blank" rel="noopener">用c语言可以实现多人在线游戏吗？100 赞同 · 8 评论回答<img src="https://pica.zhimg.com/v2-e41503e83cfeb73864b2e95f02305656_720w.jpg?source=7e7ef6e2" alt="img"></a></p>
<p>大一期间还接触过其他事情：</p>
<p>期间接触到 <a href="https://www.zhihu.com/people/fd7c571a0ada1a72e42e8d7992c4a780" target="_blank" rel="noopener">@萧井陌</a>的 <a href="https://zhuanlan.zhihu.com/p/19959253" target="_blank" rel="noopener">Badger4us：编程入门指南 v2.0</a> ，陆陆续续开始看里边的 python 课（未来写过很多 python）、哈佛大学的 cs50 课（了解到很多概念，对 scratch 也印象深刻，未来也专门又用了一次）、SICP（神书，也学到了 lisp 语言）。这篇文章对自己帮助很大，每当迷茫的时候就会去读读。</p>
<p>期间联系了一位老师，从大一寒假开始陆陆续续看论文、学 MATLAB、学算法，详细的故事可以看 <a href="https://www.zhihu.com/question/345429819/answer/825839114" target="_blank" rel="noopener">有一些超级难的算法比如遗传算法，蚁群算法，看了数学建模国赛感觉好难写，那些人怎么写出来的?</a></p>
<h2 id="15-年-9-月-16-年-3-月大二上"><a href="#15-年-9-月-16-年-3-月大二上" class="headerlink" title="15 年 9 月 - 16 年 3 月大二上"></a>15 年 9 月 - 16 年 3 月大二上</h2><p>学校课程多了数据结构，对链表、树、图有了更多的了解，期间有个小作业继续利用 MFC 进行可视化。</p>
<p><img src="https://pic1.zhimg.com/80/v2-195910d9ca4f88006bbb2b09d0a23abf_1440w.webp?source=1940ef5c" alt="img"></p>
<p>当时学校查成绩只能到教务网站自己去查，没有自己的官方 app，于是就萌发了自己去写一个 app 的想法，开始一步步践行。</p>
<p>寒假的时候开始学习 java 语言：</p>
<p><img src="https://pic1.zhimg.com/80/v2-3d1c83872eda9181dad6bf2dd2d27935_1440w.webp?source=1940ef5c" alt="img"></p>
<p>学习 Java 之后才对面向过程编程和面向对象有了更多的理解。</p>
<h2 id="16-年-3-月-16-年-9-月大二下"><a href="#16-年-3-月-16-年-9-月大二下" class="headerlink" title="16 年 3 月 - 16 年 9 月大二下"></a>16 年 3 月 - 16 年 9 月大二下</h2><p>继续学习 java，开始写简单的安卓应用，之前学数据结构的时候做过无界面的计算器，这里结合安卓就做了一个有界面的计算器。</p>
<p><img src="https://picx.zhimg.com/80/v2-dfb40f0bc2f909899bf651e34ea9ba16_1440w.webp?source=1940ef5c" alt="img"></p>
<p><img src="https://picx.zhimg.com/80/v2-e8893468a94ce52d6350f1903ae4bf27_1440w.webp?source=1940ef5c" alt="img"></p>
<p>掌握基本安卓开发后，如果做查成绩的 app 肯定还需要数据，于是又捡起之前的 python，学习爬虫，了解网络知识、html 解析，最终成功查出来。</p>
<p><img src="https://pic1.zhimg.com/80/v2-7a215cc8ec325de96292549640523468_1440w.webp?source=1940ef5c" alt="img"></p>
<p>这个之后，被学校的一个互联网社团看到了，于是有了联系，他们也有做学校 app 的想法，于是从独自作战变成了团队合作。</p>
<p>当时的学校网络需要连好之后进行手动登录，于是又写了一个 app</p>
<p><img src="https://pic1.zhimg.com/80/v2-dfd8fbbc924002d987de499ad459754b_1440w.webp?source=1940ef5c" alt="img"></p>
<p>暑假第一个月继续留校学习，借了几本安卓的书开始学习</p>
<p><img src="https://picx.zhimg.com/80/v2-fbaa883623a6e3b70f0f4f74fe93f3b1_1440w.webp?source=1940ef5c" alt="img"></p>
<h2 id="16-年-9-月-1-7-年-3-月-大三上"><a href="#16-年-9-月-1-7-年-3-月-大三上" class="headerlink" title="16 年 9 月 - 1 7 年 3 月 大三上"></a>16 年 9 月 - 1 7 年 3 月 大三上</h2><p>在团队里有了更多的事情，由于当时 python 比较熟，又写了一个接口用来在线充值饭卡，之前学校充值饭卡只能线下充。</p>
<p><img src="https://pic1.zhimg.com/80/v2-874aa93a9fd9f71eec8107a06f98dd71_1440w.webp?source=1940ef5c" alt="img"></p>
<p>学校课程里也陆陆续续接触一些底层的计算机知识，操作系统、计算机组成原理、汇编语言、数字逻辑这些。</p>
<p>比如电脑上模拟 8086 CPU 做的一个东西：</p>
<p><img src="https://picx.zhimg.com/80/v2-c1b5c11dd34076abbd0cb596b157ae9d_1440w.webp?source=1940ef5c" alt="img"></p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/Kapture%202023-08-31%20at%2007.55.40.gif" alt=""></p>
<p>17 年生日的时候搭建了自己的第一个博客，<a href="https://windliang.wang">https://windliang.wang</a> ，了解了域名、服务器、git 各种概念，后边陆陆续续就开始总结文章了。</p>
<p><img src="https://pic1.zhimg.com/80/v2-9229df4b76596c05f7506b65e60d4750_1440w.webp?source=1940ef5c" alt="img"></p>
<h2 id="17-年-3-月-17-年-9-月-大三下"><a href="#17-年-3-月-17-年-9-月-大三下" class="headerlink" title="17 年 3 月 - 17 年 9 月 大三下"></a>17 年 3 月 - 17 年 9 月 大三下</h2><p>大三下一开学，app 正式上线，支持查课表、查成绩、充值饭卡：</p>
<p><img src="https://picx.zhimg.com/80/v2-67f10cc5625425d19439fa2839c8d041_1440w.webp?source=1940ef5c" alt="img"></p>
<h2 id="17-年-9-月-17-年-3-月大四上"><a href="#17-年-9-月-17-年-3-月大四上" class="headerlink" title="17 年 9 月 - 17 年 3 月大四上"></a>17 年 9 月 - 17 年 3 月大四上</h2><p>经常需要上自习，但每天的空教室是在楼下黑板手写公布的，但其实到教务网站是可以查出来的。于是注册了公众号 windliang，实现了一个查询空教室的功能。</p>
<p><img src="https://picx.zhimg.com/80/v2-49a22f736207e9a1e9664b230860f6cc_1440w.webp?source=1940ef5c" alt="img"></p>
<p>再接着学习了前端 html、css、js，写了一个棋类对战游戏(从这里开始和前端结缘)，也作为了软件工程的结课作业。</p>
<p><a href="https://zhuanlan.zhihu.com/p/71165578" target="_blank" rel="noopener">windliang：WebSocket: 从狼吃羊说起</a></p>
<p><img src="https://picx.zhimg.com/80/v2-b904199fea56f284343ef377625de624_1440w.webp?source=1940ef5c" alt="img"></p>
<p>由于毕业设计和深度学习有关，也开始总结深度学习的知识。<a href="https://www.zhihu.com/column/deeplearning1024" target="_blank" rel="noopener">零基础入门深度学习</a></p>
<h2 id="18-年-3-月-18-年-6-月大四下"><a href="#18-年-3-月-18-年-6-月大四下" class="headerlink" title="18 年 3 月 - 18 年 6 月大四下"></a>18 年 3 月 - 18 年 6 月大四下</h2><p>开始陆陆续续刷题，并且总结题解，<a href="https://leetcode.wang" target="_blank" rel="noopener">https://leetcode.wang</a></p>
<p>除了上边列的，陆陆续续还做过很多小东西，就是那种突然有个想法就去实现，不会就去一点点学。</p>
<p>之后毕业又读了研，但通过大学四年基本上拥有了基础的编程能力，无论学什么新语言，用什么新框架上手都会很快。</p>
<p>接着就是毕业后的故事，前段时间刚满三周年：<a href="https://zhuanlan.zhihu.com/p/640990591" target="_blank" rel="noopener">windliang：工作三年后的胡思乱想</a></p>
<p>总结下来，入门编程最核心的就是去多写代码了，最好先定个目标，想要实现什么，然后基于此去学习相关知识，不断攻破。</p>
<p>但对于初学者，每当接触一个新知识点的时候还是很痛苦的，只能不停的拆解目标，一步一个脚印来攻克。</p>
<p>从不会到会，这个过程不断循环，每次有成果出来都会非常开心，随着这个过程不断扩充自己边界，到后来再学新知识就不会那么抗拒了，迁移学习的能力越来越强。</p>
]]></content>
      <categories>
        <category>随想</category>
      </categories>
      <tags>
        <tag>随想</tag>
      </tags>
  </entry>
  <entry>
    <title>到底学哪一门编程语言</title>
    <url>/2019/11/06/%E5%88%B0%E5%BA%95%E5%AD%A6%E5%93%AA%E4%B8%80%E9%97%A8%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/</url>
    <content><![CDATA[<p>之前在 <a href="https://www.zhihu.com/question/311432227/answer/707128901" target="_blank" rel="noopener">知乎</a> 回答问题总结的 ，总结到这里，只是自己的一些观点，欢迎交流。</p>
<h1 id="发展进程"><a href="#发展进程" class="headerlink" title="发展进程"></a>发展进程</h1><p>学哪一门编程语言，我们不妨先梳理一下语言的发展过程。</p>
<h2 id="机器语言"><a href="#机器语言" class="headerlink" title="机器语言"></a>机器语言</h2><p>计算机的世界是 0 与 1 的世界，如果编写过机器语言，你将会有更深的体会。让我们先看下边的代码片段。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/lang1.jpg" alt=""></p>
<p>为什么叫机器语言？这可以说很明显了，这段代码猜到下个世纪也猜不出来吧，真的是字如其名，机器才能懂的语言。</p>
<p>这每一条都是一条指令，这个每条指令总共是 32 位，前边 8 位可能表示这条指令是加法，后边 12 位可能是第一个加数的地址，再后边 12 位可能代表第二个加数的地址，然后结果可能保存到第二个加数的位置。</p>
<p>只是随便举了个例子，每条指令的规定是什么，当然就取决于硬件了，有单地址的指令，双地址的指令等等，犹记得当时计算机组成原理课设中，机器只提供了加法的指令，循环的指令，没有乘法的指令，3 * 5 怎么算嘞？ 当然就可以转换成 3 + 3 + 3 + 3 + 3 了，还有除法怎么办呢？依旧可以实现的，记得当时写了满满一张纸的机器指令只为实现除法，用着高级语言的我们可以说是很幸福了。</p>
<p>这里我们可以看到，硬件和软件之间的相互配合，硬件如果没有实现，我们可以用软件，凭借硬件已经提供的功能和我们人类强大的逻辑，实现硬件暂时没实现的功能。当然软件实现的话速度和效率方面肯定会比硬件直接实现差一些。那为什么不用硬件把加减乘除乘方开方都实现了？这硬件的开销、复杂程度太大了，在速度可以容忍的情况下，乘方开方这些还是用软件实现比较好。</p>
<h2 id="汇编语言"><a href="#汇编语言" class="headerlink" title="汇编语言"></a>汇编语言</h2><p>程序员如果每天写着 10101001010 ，大概会疯掉吧。于是第一反应就是，我能不能把这些指令用英语单词表示了，之前 10101 代表加法指令，我直接写个 add 岂不是更好？于是汇编语言出现了，它的可读性比机器语言增加了很多，可以看下边的代码片段。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/lang2.jpg" alt=""></p>
<p>我们终于能看懂些了，mov，loop，sub，add 等等都是见名思意，每条指令几乎和机器指令一一对应，这样只要再拥有一个类似「翻译器」的东西，把它翻译成机器语言就完全够了。</p>
<p>但是！！！！我们还可以看到 ax，bx 这些东西，他们是 CPU 中的寄存器，还有一些 0b800h 啥的，这些是内存的地址。可以看到我们仍旧直接面对硬件在编程，这样的好处是程序的速度会快一些，缺点当然是对程序员的不友好，我们只有懂了硬件才能进行编写程序，于是，面向我们程序员的高级语言渐渐诞生了。</p>
<h2 id="C-语言"><a href="#C-语言" class="headerlink" title="C 语言"></a>C 语言</h2><p>这可能是大多数人的入门语言了，让我们看一下它的样子。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/lang3.jpg" alt=""></p>
<p>这看起来就非常的舒服了，即使一个没有学过编程的人，基本也能猜出来这是在干什么。是的，它是在计算 1 * 2。但大家有没有想过，有了这段程序，机器看不懂呀，是的我们还需要一个能够把我们编写的 C 语言程序的代码变为机器语言的东西，我们把它叫做编译器。</p>
<p>编译器无非是一个软件，那么，我们用什么语言写呢？其实，在 C 语言之前，已经有了 A 语言，B 语言，我们不妨选择一个在当时用起来比较简单的 B 语言来去实现我们的编译器。等等等等，B 语言写出的程序用什么去编译成机器能够执行的程序呢？用 B 语言的编译器！！！那么 B 语言的编译器哪来的，用 A 语言写呗。</p>
<p>终极问题，A 语言的编译器呢？用汇编语言！！！是的，逻辑就是我们先用汇编语言写一个相对容易实现的语言的编译器，有了这个编译器我们就可以实现难度更大，更抽象语言的编译器。最终，一层一层的就实现了 C 语言的编译器。</p>
<p>当我们有了 C 语言的编译器，意味着我们用 C 语言写的任何程序都能够转化成机器语言去运行了。这时，我们甚至可以再用 C 语言写一个 C 语言的编译器，再用之前写好的 C 语言的编译器去编译它，一个新的编译器就诞生了，哈哈哈哈哈，好像绕口令。</p>
<p>知道了这些，我们现在甚至可以模仿其他语言设计的规则，然后自己实现一个编译器，然后属于你自己的语言就诞生了！当然说着简单，做起来就比较烧脑了，具体的可以去学习编译原理的东西。</p>
<h1 id="语言分类"><a href="#语言分类" class="headerlink" title="语言分类"></a>语言分类</h1><p>C 语言出现后又陆陆续续出现了很多语言，而它们的编译器也大都是用 C 语言去写，底层很多东西也去用 C 语言实现，C 语言可以说是高级语言中，离硬件最近的语言了。</p>
<h2 id="编译型语言"><a href="#编译型语言" class="headerlink" title="编译型语言"></a>编译型语言</h2><p>常见的 C 语言，C++，C# 等等，这些语言都需要编译器将所有的东西翻译成机器语言，形成可执行文件，例如 windows 下的 .exe 文件，相对于解释型语言，编译只做一次，然后就可以多次运行了。</p>
<p>还有比较特殊的是 JAVA ，它的一大优势是跨平台，也就是他的代码写好以后，编译成 .class 文件， 然后只要机器里有 JAVA 虚拟机，不管你是什么操作系统，window 也好，linux 也罢，它都可以执行，所以实现了跨平台。它可以说是编译型和解释型语言的结合了，它没有直接编译成机器语言，而是先变成 .class 文件，再由 JAVA 虚拟机一条一条解释执行。但他的语法风格和 C 语言也有很大的相似之处，所以我也把它放到这里了。</p>
<h2 id="解释型语言"><a href="#解释型语言" class="headerlink" title="解释型语言"></a>解释型语言</h2><p>常见的 python，JavaScript，Ruby，或者称他们为脚本语言，这种的话就是需要解释器，它是一句的一句的通过解释器将其翻译成机器语言去执行，很明显，在运行的时候，如果不做特殊的优化，它的速度肯定比不上编译型语言。</p>
<h2 id="标记语言"><a href="#标记语言" class="headerlink" title="标记语言"></a>标记语言</h2><p>常见的 html，xml，和上边两种完全不一样，它的作用主要是描述一些东西，然后用于显示或者传输，例如下边的 html 。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/lang4.jpg" alt=""></p>
<p>它不能做一些加减乘除的事情，它仅仅供浏览器读取，然后根据相应的语法把它显示出来。就是下边的效果。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/lang5.jpg" alt=""></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>说了这么多，我们学哪一门一门语言呢？</p>
<p>我认为这取决你要做什么，不同的语言其实语法大同小异，不同之处在于它们的生态圈，它们所提供的库的方便程度与类别的不同，以及它们各自的一些特性。</p>
<p>如果你要写一些 windows 的桌面程序，你当然可以去学习 C++，C# 等。如果你要写安卓，你当然得学习 java/Kotlin 。如果你想写一些自动化的脚本，帮助你做一些事情，你可以学 python。如果你想做一些面向硬件的编程，C 语言当然是不错的选择。</p>
<p>不管你最开始学的是什么语言，都不会影响到其他语言的学习。我们要把语言当成一门工具，它是为我们服务的，需要啥就学啥呗，并不需要畏难。当你用熟了一门语言后，再上手一门语言会发现很快，快则两三天，慢则一周便能游刃有余，只要了解了新语言的分支语句、循环语句、函数封装、定义变量的一些语法，基本上就可以开始上手了。</p>
<p>你知道 C 语言怎么产生的吗？ 写 UNIX 的时候，Dennis Ritchie 觉得 B语言所编译出来的核心效能不是很好，于是将 B 语言重新改写成 C 语言，再以 C 语言重新改写与编译 Unics 的核心， 最后发行出 Unix 的正式版本。是的，就是这么随便，令大家「头痛」的 C 语言，就是这样简简单单诞生了，惊不惊喜，意不意外。</p>
<p>而现在很火的 JavaScript ，当时也是 Brendan Eich ，为了应付公司安排的任务，用 10 天时间就设计出来了。</p>
<p>让我们看一下最新的编程语言的热度吧，截图自 <a href="https://link.zhihu.com/?target=https%3A//www.tiobe.com/tiobe-index/" target="_blank" rel="noopener">https://www.tiobe.com/tiobe-index/</a></p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/lang6.jpg" alt=""></p>
<p>看上边的语言，很多可能连名字都没有听过，但事实是他们在各自的领域都发挥着很重要的作用。</p>
<p>学一门语言，首先要明确你为什么要学它，然后再去学。为了考试？为了做一个应用？为了写一个脚本？不管怎么样，有了这个目标导向，我们就会有动力。</p>
<p>当然如果你是非计算机专业的想学一下编程，这里我建议学习 python，可以做一些自动化的任务，处理文件啦，处理 word、EXCEL 的话会很方便。</p>
<h1 id="困惑"><a href="#困惑" class="headerlink" title="困惑"></a>困惑</h1><h2 id="为什么不用中文编程"><a href="#为什么不用中文编程" class="headerlink" title="为什么不用中文编程"></a>为什么不用中文编程</h2><p>刚开始学编程语言的话，肯定会觉得为什么是一大堆英文，为什么就不能用中文去编程呢？当然其实是有的，比如易语言，但真的有必要用中文编程吧？</p>
<p>如果只是简单的把 C 语言，java 的各种关键字映射成汉字，类似于这样。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//求绝对值</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">abs</span><span class="params">(<span class="keyword">int</span> a)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ( a &gt;= <span class="number">0</span> ) &#123;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> -a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">-3</span>;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="built_in">abs</span>(b);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后是汉字</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">包含头文件 库函数</span><br><span class="line">整数 求绝对值（整数 张三）&#123;</span><br><span class="line">    如果张三大于等于 <span class="number">0</span> 那么返回张三</span><br><span class="line">    否则的话 返回 负的张三</span><br><span class="line">&#125;</span><br><span class="line">主函数 &#123;</span><br><span class="line">    整数 李四 = -<span class="number">3</span></span><br><span class="line">    整数 答案 = 求绝对值（李四）</span><br><span class="line">    输出答案</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看到，用字母还是简洁的多，另外汉字的话，还需要输入完拼音，然后再去选汉字，反而多了一道流程。</p>
<p>当然如果未来有一种编程语言，就叫做「龙之语言」吧，这种语言完全抛弃了原来分支语句、循环语句、函数封装，只需要用汉语描述你想做什么，然后就会自动生成。例如</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">给我生成一个计算器</span><br></pre></td></tr></table></figure>
<p>然后一个计算器程序就出来了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">给我生成一款游戏，类似于英雄联盟和自走棋。</span><br></pre></td></tr></table></figure>
<p>然后一个游戏又自动生成了。</p>
<p>当有这样的一种语言诞生的时候，恐怕就是「全世界都在学中国话，孔夫子的话越来越国际化」。</p>
<h2 id="刷题用什么语言"><a href="#刷题用什么语言" class="headerlink" title="刷题用什么语言"></a>刷题用什么语言</h2><p>之前在 <a href="https://zhuanlan.zhihu.com/p/73146252" target="_blank" rel="noopener">leetcode 刷题</a> 这里提到了，无非是要想清楚语言和算法之间的关系。</p>
<p>算法就像是从家里到超市该怎么走？出门左拐，右拐直走….</p>
<p>语言是我们选择的交通工具，骑车？步行？开车？平衡车？每种交通工具都有自己的优点和缺点，语言也是如此。</p>
<p>好的算法可能更像是，我们偶然发现了一条近路，降低了我们的时间复杂度或者是空间复杂度。</p>
<p>所以其实并不需要纠结，选择自己熟悉的一门语言即可。</p>
<h1 id="更多"><a href="#更多" class="headerlink" title="更多"></a>更多</h1><p>上边的一些总结，就是在知乎陆陆续续看到一些提问然后回答的，也欢迎大家关注我的知乎账号，<a href="https://www.zhihu.com/people/wang-liang-61-22/activities" target="_blank" rel="noopener">windliang</a></p>
<p>，哈哈。</p>
]]></content>
      <categories>
        <category>计算机</category>
      </categories>
      <tags>
        <tag>编程</tag>
        <tag>语言</tag>
      </tags>
  </entry>
  <entry>
    <title>前端 mock 数据的几种方式</title>
    <url>/2022/12/20/%E5%89%8D%E7%AB%AFmock%E6%95%B0%E6%8D%AE%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<p>具体需求开发前，后端往往只提供接口文档，对于前端，最简单的方式就是把想要的数据写死在代码里进行开发，但这样的坏处就是和后端联调前还需要再把写死的数据从代码里删除，最好的方式是无侵入的 <code>mock</code> 。下边介绍几种常用的方式，大家可以结合自己的项目来选取。</p>
<p>大致分为三类，重写 <code>xhr/fetch</code>、<code>node.js</code> 服务中转、系统层面拦截。</p>
<h1 id="接口demo"><a href="#接口demo" class="headerlink" title="接口demo"></a>接口demo</h1><p>为了后边方便的安装 <code>node</code> 包，可以用 <code>webpack</code> 进行打包，具体配置可以参考 <a href="https://windliang.wang/2021/08/19/2021%E5%B9%B4%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%8F%91%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AE%E6%8C%87%E5%8D%97/">2021年从零开发前端项目指南</a>，看到 <code>React</code> 配置的前一步就够了，只需要配置一个 <code>html</code> 和一个接口请求。 需要注意下 <code>webpack</code> 的版本，不同版本后续的配置会不同，这里我用的是 <code>5.75.0</code> 。</p>
<p>最终目标是通过 <code>mock</code> 让下边还没有开发好的接口正常返回数据：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">fetch(<span class="string">"/api/data"</span>, &#123;</span><br><span class="line">  body: <span class="built_in">JSON</span>.stringify(&#123; <span class="attr">id</span>: <span class="number">10</span> &#125;),</span><br><span class="line">  method: <span class="string">"POST"</span>,</span><br><span class="line">&#125;)</span><br><span class="line">  .then(<span class="function">(<span class="params">response</span>) =&gt;</span> response.json())</span><br><span class="line">  .then(<span class="function">(<span class="params">json</span>) =&gt;</span> <span class="built_in">console</span>.log(json));</span><br></pre></td></tr></table></figure>
<p>现在肯定是 <code>404</code> 。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20221223093023287.png" alt="image-20221223093023287"></p>
<h1 id="Better-mock"><a href="#Better-mock" class="headerlink" title="Better-mock"></a>Better-mock</h1><p><strong>better-mock</strong> <code>fork</code> 自 <a href="https://github.com/nuysoft/Mock" target="_blank" rel="noopener">Mock.js</a>，使用方法和 <code>Mock.js</code> 一致，用于 <code>javascript</code> <code>mock</code> 数据生成，它可以拦截 <code>XHR</code> 和 <code>fetch</code> 请求，并返回自定义的数据类型。</p>
<p>只需要在调用接口前，引入 <code>better-mock</code> 。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Mock <span class="keyword">from</span> <span class="string">"better-mock"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// mock list 返回数组，大小是 1 到 10，对象中的 id 自动加 1</span></span><br><span class="line">Mock.mock(<span class="string">"/api/data"</span>, &#123;</span><br><span class="line">  <span class="string">"list|1-10"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"id|+1"</span>: <span class="number">1</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">fetch(<span class="string">"/api/data"</span>, &#123;</span><br><span class="line">  body: <span class="built_in">JSON</span>.stringify(&#123; <span class="attr">id</span>: <span class="number">10</span> &#125;),</span><br><span class="line">  method: <span class="string">"POST"</span>,</span><br><span class="line">&#125;)</span><br><span class="line">  .then(<span class="function">(<span class="params">response</span>) =&gt;</span> response.json())</span><br><span class="line">  .then(<span class="function">(<span class="params">json</span>) =&gt;</span> <span class="built_in">console</span>.log(json));</span><br></pre></td></tr></table></figure>
<p>控制台此时就会输出数据了。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20221224203508017.png" alt="image-20221224203508017"></p>
<p> <code>better-mock</code> 一个好处就是可以通过它既有的语法来生成一些随机的数据，每次请求都会返回不同的数据。</p>
<p>坏处是会在请求发送前就拦截，导致在 <code>Chrome</code> 控制台就看不见请求了。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20221224203741121.png" alt="image-20221224203741121"></p>
<h1 id="just-mock"><a href="#just-mock" class="headerlink" title="just mock"></a>just mock</h1><p><a href="https://just-mock.vercel.app/" target="_blank" rel="noopener">just mock</a> 是一个浏览器插件，在代码中什么都不需要更改，只需要添加相应的接口和数据即可实现拦截。</p>
<p>插件安装好后添加相应的域名就可以拦截到相应的请求。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20221224212934829.png" alt="image-20221224212934829"></p>
<p>接着进行相应的编辑添加对应的 <code>mock</code> 数据就好。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20221224221427974.png" alt="image-20221224221427974"> </p>
<p>这样接口就会被拦截，控制台输出预设的数据：</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20221224223523797.png" alt="image-20221224223523797"></p>
<p>浏览器插件原理和 <code>Better-mock</code> 是一样的，但会更加轻便，无需融入到代码中。两者的原理是一样的，都是在网络请求前重写了全局的 <code>xhr</code> 和 <code>fetch</code> ，具体可以参考 <a href="https://windliang.wang/2022/08/23/%E6%B2%B9%E7%8C%B4%E8%84%9A%E6%9C%AC%E9%87%8D%E6%96%B0fetch%E5%92%8Cxhr%E8%AF%B7%E6%B1%82/">油猴脚本重写fetch和xhr请求</a>。</p>
<h1 id="koa"><a href="#koa" class="headerlink" title="koa"></a>koa</h1><p>本地通过 <code>koa</code> 开启一个接口服务。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// serve.js</span></span><br><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">"koa"</span>);</span><br><span class="line"><span class="keyword">const</span> router = <span class="built_in">require</span>(<span class="string">"koa-router"</span>)();</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa();</span><br><span class="line"></span><br><span class="line">router.post(<span class="string">"/api/data"</span>, <span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">  ctx.response.body = &#123;</span><br><span class="line">    status: <span class="literal">true</span>,</span><br><span class="line">    data: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">    msg: <span class="string">"获取数据成功"</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// add router middleware:</span></span><br><span class="line">app.use(router.routes());</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure>
<p>本地开启运行：<code>node server.js</code>，接口提供的地址是 <code>localhost:3000</code>，但是请求的地址是 <code>loacalhost:8080</code> ，当然可以直接修改代码里的地址为 <code>localhost:3000</code> ，但还可以通过 <code>webpack</code>  的配置，将请求转发到 <code>localhost:3000</code> 。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">"path"</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="string">"./src/main.js"</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">"./dist"</span>),</span><br><span class="line">    filename: <span class="string">"bundle.js"</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    <span class="keyword">static</span>: path.resolve(__dirname, <span class="string">"./dist"</span>),</span><br><span class="line">    proxy: &#123;</span><br><span class="line">      <span class="comment">// 将 /api 开头的 http 请求，都代理到 localhost:3000 上，由 koa 提供 mock 数据</span></span><br><span class="line">      <span class="string">"/api"</span>: &#123;</span><br><span class="line">        target: <span class="string">"http://localhost:3000"</span>,</span><br><span class="line">        secure: <span class="literal">false</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>这样就可以看到控制台输出了：</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20221225101033687.png" alt="image-20221225101033687"></p>
<p>此外，<code>Chrome</code> 的 <code>Network</code> 也可以正常看到这个请求：</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20221225101326328.png" alt="image-20221225101326328"></p>
<p>这种方法也可以用来解决跨域问题，举个例子：</p>
<p>如果本地想访问一个具体域名的接口，比如请求知乎的热榜接口：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">fetch(</span><br><span class="line">  <span class="string">"https://www.zhihu.com/api/v3/feed/topstory/hot-lists/total?limit=50&amp;desktop=true"</span>,</span><br><span class="line">  &#123;</span><br><span class="line">    headers: &#123;</span><br><span class="line">      accept: <span class="string">"*/*"</span>,</span><br><span class="line">      <span class="string">"accept-language"</span>: <span class="string">"zh-CN,zh;q=0.9,en;q=0.8"</span>,</span><br><span class="line">      <span class="string">"sec-ch-ua"</span>:</span><br><span class="line">        <span class="string">'"Not?A_Brand";v="8", "Chromium";v="108", "Google Chrome";v="108"'</span>,</span><br><span class="line">      <span class="string">"sec-ch-ua-mobile"</span>: <span class="string">"?0"</span>,</span><br><span class="line">      <span class="string">"sec-ch-ua-platform"</span>: <span class="string">'"macOS"'</span>,</span><br><span class="line">      <span class="string">"sec-fetch-dest"</span>: <span class="string">"empty"</span>,</span><br><span class="line">      <span class="string">"sec-fetch-mode"</span>: <span class="string">"cors"</span>,</span><br><span class="line">      <span class="string">"sec-fetch-site"</span>: <span class="string">"same-origin"</span>,</span><br><span class="line">      <span class="string">"x-ab-param"</span>: <span class="string">""</span>,</span><br><span class="line">      <span class="string">"x-ab-pb"</span>:</span><br><span class="line">        <span class="string">"CpoBCAAbAD8ARwC0AGkBagF0ATsCzALXAtgCoAOhA6IDtwOmBNYEEQVRBYsFjAWeBTAGMQbrBicHdAh2CHkI2gg/CWAJwwnECcUJxgnHCcgJyQnKCcsJzAnRCfQJBApJCmUKawqYCqUKqQq+CsQK1ArdCu0K/go7CzwLQwtGC3ELhwuNC9cL4AvlC+YLLAw4DHEMjwysDMMMyQz4DBJNAQAAAAAAAAAAAAAAAAAAAAAEAAEAAAEAAAEAAAIGAAABAAAAAAAAAAAAAAADAAAAAAEAAAABAQAAAAEAAQAAAAUCAQAABgIEAAACAAA="</span>,</span><br><span class="line">      <span class="string">"x-api-version"</span>: <span class="string">"3.0.76"</span>,</span><br><span class="line">      <span class="string">"x-requested-with"</span>: <span class="string">"fetch"</span>,</span><br><span class="line">      <span class="string">"x-zse-93"</span>: <span class="string">"101_3_3.0"</span>,</span><br><span class="line">      <span class="string">"x-zse-96"</span>:</span><br><span class="line">        <span class="string">"2.0_LYJSVCX+9b1YXp/sG1Azyi5tC5RpabLbkXb3w5s6rv=Gxy9uMXqMXm4LjYWRdoIz"</span>,</span><br><span class="line">      <span class="string">"x-zst-81"</span>:</span><br><span class="line">        <span class="string">"3_2.0aR_sn77yn6O92wOB8hPZnQr0EMYxc4f18wNBUgpTQ6nxERFZfRY0-4Lm-h3_tufIwJS8gcxTgJS_AuPZNcXCTwxI78YxEM20s4PGDwN8gGcYAupMWufIoLVqr4gxrRPOI0cY7HL8qun9g93mFukyigcmebS_FwOYPRP0E4rZUrN9DDom3hnynAUMnAVPF_PhaueTF4C8IhwVIDO_8ioC0JXfW9CKpCwCs4OBQAc0uBefagCKGMo1yroBh9CKe_STVHC1IqLKHJL_chSflqHCOqgYPhYKVwH8M4Lqqq9y1wH967NC7vH80UC8wCHswgHBDgY_ovg9r0wBcJO8s9OCzcLMNgLfkgNByqCLhhUf_veOQRY_dvxmCg_zugS8iBtBFgOZkwNLDw2skTX18XSYuJLqpCYBo_pMWbS8Pv3YtGFBaqL9AwCYhbL9eGVV2rNClDL1wJLmxCgKagNBUwSqYrHBbGp8e8HGggSMQ7xC3rOs"</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    referrer: <span class="string">"https://www.zhihu.com/hot"</span>,</span><br><span class="line">    referrerPolicy: <span class="string">"no-referrer-when-downgrade"</span>,</span><br><span class="line">    body: <span class="literal">null</span>,</span><br><span class="line">    method: <span class="string">"GET"</span>,</span><br><span class="line">    mode: <span class="string">"cors"</span>,</span><br><span class="line">    credentials: <span class="string">"include"</span>,</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p>由于本地域名是 <code>http://localhost:8080/</code> ，此时浏览器就会报跨域的错了。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20221225102517407.png" alt="image-20221225102517407"></p>
<p>此时后端可以通过 <code>CORS</code> 策略解决跨域的问题，但因为是测试环境，后端可能会说你自己解决吧，此时就可以通过 <code>Koa</code> 进行中转。</p>
<p>改写一下 <code>Koa</code> 的代码，先请求后端的接口，接着将收到的数据拿到后返回。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Koa <span class="keyword">from</span> <span class="string">"koa"</span>;</span><br><span class="line"><span class="keyword">import</span> fetch <span class="keyword">from</span> <span class="string">"node-fetch"</span>;</span><br><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">"koa-router"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa();</span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> Router();</span><br><span class="line">router.post(<span class="string">"/api/data"</span>, <span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> res = <span class="keyword">await</span> fetch(</span><br><span class="line">    <span class="string">"https://www.zhihu.com/api/v3/feed/topstory/hot-lists/total?limit=50&amp;desktop=true"</span>,</span><br><span class="line">    &#123;</span><br><span class="line">      headers: &#123;</span><br><span class="line">        accept: <span class="string">"*/*"</span>,</span><br><span class="line">        <span class="string">"accept-language"</span>: <span class="string">"zh-CN,zh;q=0.9,en;q=0.8"</span>,</span><br><span class="line">        <span class="string">"sec-ch-ua"</span>:</span><br><span class="line">          <span class="string">'"Not?A_Brand";v="8", "Chromium";v="108", "Google Chrome";v="108"'</span>,</span><br><span class="line">        <span class="string">"sec-ch-ua-mobile"</span>: <span class="string">"?0"</span>,</span><br><span class="line">        <span class="string">"sec-ch-ua-platform"</span>: <span class="string">'"macOS"'</span>,</span><br><span class="line">        <span class="string">"sec-fetch-dest"</span>: <span class="string">"empty"</span>,</span><br><span class="line">        <span class="string">"sec-fetch-mode"</span>: <span class="string">"cors"</span>,</span><br><span class="line">        <span class="string">"sec-fetch-site"</span>: <span class="string">"same-origin"</span>,</span><br><span class="line">        <span class="string">"x-ab-param"</span>: <span class="string">""</span>,</span><br><span class="line">        <span class="string">"x-ab-pb"</span>:</span><br><span class="line">          <span class="string">"CpoBCAAbAD8ARwC0AGkBagF0ATsCzALXAtgCoAOhA6IDtwOmBNYEEQVRBYsFjAWeBTAGMQbrBicHdAh2CHkI2gg/CWAJwwnECcUJxgnHCcgJyQnKCcsJzAnRCfQJBApJCmUKawqYCqUKqQq+CsQK1ArdCu0K/go7CzwLQwtGC3ELhwuNC9cL4AvlC+YLLAw4DHEMjwysDMMMyQz4DBJNAQAAAAAAAAAAAAAAAAAAAAAEAAEAAAEAAAEAAAIGAAABAAAAAAAAAAAAAAADAAAAAAEAAAABAQAAAAEAAQAAAAUCAQAABgIEAAACAAA="</span>,</span><br><span class="line">        <span class="string">"x-api-version"</span>: <span class="string">"3.0.76"</span>,</span><br><span class="line">        <span class="string">"x-requested-with"</span>: <span class="string">"fetch"</span>,</span><br><span class="line">        <span class="string">"x-zse-93"</span>: <span class="string">"101_3_3.0"</span>,</span><br><span class="line">        <span class="string">"x-zse-96"</span>:</span><br><span class="line">          <span class="string">"2.0_LYJSVCX+9b1YXp/sG1Azyi5tC5RpabLbkXb3w5s6rv=Gxy9uMXqMXm4LjYWRdoIz"</span>,</span><br><span class="line">        <span class="string">"x-zst-81"</span>:</span><br><span class="line">          <span class="string">"3_2.0aR_sn77yn6O92wOB8hPZnQr0EMYxc4f18wNBUgpTQ6nxERFZfRY0-4Lm-h3_tufIwJS8gcxTgJS_AuPZNcXCTwxI78YxEM20s4PGDwN8gGcYAupMWufIoLVqr4gxrRPOI0cY7HL8qun9g93mFukyigcmebS_FwOYPRP0E4rZUrN9DDom3hnynAUMnAVPF_PhaueTF4C8IhwVIDO_8ioC0JXfW9CKpCwCs4OBQAc0uBefagCKGMo1yroBh9CKe_STVHC1IqLKHJL_chSflqHCOqgYPhYKVwH8M4Lqqq9y1wH967NC7vH80UC8wCHswgHBDgY_ovg9r0wBcJO8s9OCzcLMNgLfkgNByqCLhhUf_veOQRY_dvxmCg_zugS8iBtBFgOZkwNLDw2skTX18XSYuJLqpCYBo_pMWbS8Pv3YtGFBaqL9AwCYhbL9eGVV2rNClDL1wJLmxCgKagNBUwSqYrHBbGp8e8HGggSMQ7xC3rOs"</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      referrer: <span class="string">"https://www.zhihu.com/hot"</span>,</span><br><span class="line">      referrerPolicy: <span class="string">"no-referrer-when-downgrade"</span>,</span><br><span class="line">      body: <span class="literal">null</span>,</span><br><span class="line">      method: <span class="string">"GET"</span>,</span><br><span class="line">      mode: <span class="string">"cors"</span>,</span><br><span class="line">      credentials: <span class="string">"include"</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  );</span><br><span class="line">  <span class="keyword">const</span> data = <span class="keyword">await</span> res.json();</span><br><span class="line">  ctx.response.body = &#123;</span><br><span class="line">    status: <span class="literal">true</span>,</span><br><span class="line">    data,</span><br><span class="line">    msg: <span class="string">"获取数据成功"</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;);</span><br><span class="line">app.use(router.routes());</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure>
<p>此时还是请求 <code>/api/data</code> 。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">fetch(<span class="string">"/api/data"</span>, &#123;</span><br><span class="line">  body: <span class="built_in">JSON</span>.stringify(&#123; <span class="attr">id</span>: <span class="number">10</span> &#125;),</span><br><span class="line">  method: <span class="string">"POST"</span>,</span><br><span class="line">&#125;)</span><br><span class="line">  .then(<span class="function">(<span class="params">response</span>) =&gt;</span> response.json())</span><br><span class="line">  .then(<span class="function">(<span class="params">json</span>) =&gt;</span> <span class="built_in">console</span>.log(json));</span><br></pre></td></tr></table></figure>
<p>依旧让 <code>Webpack</code> 将数据转发到 <code>Koa</code> 。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">devServer: &#123;</span><br><span class="line">    <span class="keyword">static</span>: path.resolve(__dirname, <span class="string">"./dist"</span>),</span><br><span class="line">    proxy: &#123;</span><br><span class="line">      <span class="comment">// 将 `/api` 开头的 http 请求，都代理到 `localhost:3000` 上，由 koa 提供 mock 数据</span></span><br><span class="line">      <span class="string">"/api"</span>: &#123;</span><br><span class="line">        target: <span class="string">"http://localhost:3000"</span>,</span><br><span class="line">        secure: <span class="literal">false</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>
<p>现在控制台输出的就是知乎返回的数据了，跨域问题也消失了：</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20221225104513837.png" alt="image-20221225104513837"></p>
<p>当然上边解决跨域只是一个思路，具体的封装还需要结合项目来进行。</p>
<h1 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h1><p>上边可以通过 <code>webpack</code> 进行转发数据，是因为 <code>webpack</code> 也启动了一个 <code>HTTP</code> 服务器，只不过用的不是 <code>Koa</code> ，是更早的一个框架 <code>Express</code> ，而且它们是同一个团队开发的。</p>
<p>既然已经有了一个 <code>HTTP</code> 服务器，所以也没必要再开启另一个 <code>Koa</code> 的了，通过给 <code>webpack</code> 传递一个函数，重写 <code>Koa</code> 返回的数据即可。</p>
<p>只需要通过 <code>setupMiddlewares</code> 重写数据即可。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">"path"</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="string">"./src/main.js"</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">"./dist"</span>),</span><br><span class="line">    filename: <span class="string">"bundle.js"</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    <span class="keyword">static</span>: path.resolve(__dirname, <span class="string">"./dist"</span>),</span><br><span class="line">    setupMiddlewares: <span class="function">(<span class="params">middlewares, devServer</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (!devServer) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"webpack-dev-server is not defined"</span>);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      middlewares.unshift(&#123;</span><br><span class="line">        path: <span class="string">"/api/data"</span>,</span><br><span class="line">        middleware: <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="comment">// mock 数据模拟接口数据</span></span><br><span class="line">          res.send(&#123; <span class="attr">list</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="attr">msg</span>: <span class="string">"webpack mock"</span> &#125;);</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> middlewares;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>此时控制台也可以看到输出的内容：</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20221225111041070.png" alt="image-20221225111041070"></p>
<p>同时 <code>Network</code> 也是可以看到网络请求的。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20221225111123332.png" alt="image-20221225111123332"></p>
<h1 id="Charles"><a href="#Charles" class="headerlink" title="Charles"></a>Charles</h1><p>终极必杀 <code>mock</code> 方法，因为它除了可以拦截浏览器中的请求，也可以拦截任意 <code>App</code> 的数据，甚至还可以拦截手机中的 <code>HTTPS</code> 请求，前段时间很火的羊了个羊就可以通过 <code>Charles</code> 抓取请求然后迅速通关。</p>
<p>需要注意的是 <code>Charles</code> 抓不到 <code>localhost</code> 的请求，访问的时候需要将 <code>localhost</code> 改为 <code>localhost.charlesproxy.com</code>。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20221225122855681.png" alt="image-20221225122855681"></p>
<p><code>webpack</code> 需要加一个 <code>allowedHosts</code> 的配置，不然会返回 <code>Invalid Host header</code> 。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">devServer: &#123;</span><br><span class="line">  <span class="keyword">static</span>: path.resolve(__dirname, <span class="string">"./dist"</span>),</span><br><span class="line">    allowedHosts: <span class="string">"all"</span>,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p>全部配置好后就可以看到 <code>Charles</code> 抓到的请求了。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20221225115539515.png" alt="image-20221225115539515"></p>
<p>此时只需要提前写好一个 <code>json</code> 文件，然后将右键选择 <code>Map Local</code> 对应的文件即可。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20221225115824423.png" alt="image-20221225115824423"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"data"</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">  <span class="string">"msg"</span>: <span class="string">"from charles"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>接下来就可以在控制台看到 <code>mock</code> 成功了。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20221225120440472.png" alt="image-20221225120440472"></p>
<h1 id="总"><a href="#总" class="headerlink" title="总"></a>总</h1><p>几种 <code>mock</code> 方式各有优缺点，上边只是提供一个思路，具体的 <code>mock</code> 方案就需要结合项目进行一定的封装了。</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>前端的设计模式系列-代理模式</title>
    <url>/2022/01/07/%E5%89%8D%E7%AB%AF%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B3%BB%E5%88%97-%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%99%9A%E6%8B%9F%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<p>代码也写了几年了，设计模式处于看了忘，忘了看的状态，最近对设计模式有了点感觉，索性就再学习总结下吧。</p>
<p>大部分讲设计模式的文章都是使用的 <code>Java</code>、<code>C++</code> 这样的以类为基础的静态类型语言，作为前端开发者，<code>js</code> 这门基于原型的动态语言，函数成为了一等公民，在实现一些设计模式上稍显不同，甚至简单到不像使用了设计模式，有时候也会产生些困惑。</p>
<p>下面按照「场景」-「设计模式定义」- 「代码实现」-「总」的顺序来总结一下，如有不当之处，欢迎交流讨论。</p>
<h1 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h1><p>平常业务开发中， 对于网络请求，我们一般会封装成一个模块，并且暴露 <code>get</code>、<code>post</code> 方法供大家使用。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// src/util/request.js</span></span><br><span class="line"><span class="keyword">import</span> Http <span class="keyword">from</span> <span class="string">'../http'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Http.get(options);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">post</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Http.post(options);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>Http</code> 模块主要是将 <code>ajax</code> 请求封装，填充一些 <code>headers</code> 等等，然后业务方使用的时候只需要引入上边的 <code>get</code>、<code>post</code> 即可。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; post, get &#125; <span class="keyword">from</span> <span class="string">'src/util/request'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> generateShareImage() &#123;</span><br><span class="line">  <span class="keyword">const</span> body = <span class="keyword">this</span>.generateConfig();</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> res = <span class="keyword">await</span> post(&#123;</span><br><span class="line">      url: <span class="string">'/getData'</span>,</span><br><span class="line">      body,</span><br><span class="line">      setting: &#123;</span><br><span class="line">        domain: config.getExhibitionDomain(),</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">if</span> (res?.picUrl) &#123;</span><br><span class="line">      <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    log.error(<span class="string">`失败`</span>, <span class="built_in">JSON</span>.stringify(error));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>现在有了一个新需求，我们需要将第一次请求中，后端返回请求中的 <code>graytype</code>  字段塞到后续请求中的 <code>headers</code> ，也就是下边这样。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; post, get &#125; <span class="keyword">from</span> <span class="string">'src/util/request'</span>;</span><br><span class="line"><span class="keyword">let</span> graytype = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">async</span> generateShareImage() &#123;</span><br><span class="line">  <span class="keyword">const</span> body = <span class="keyword">this</span>.generateConfig();</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> options = &#123;</span><br><span class="line">      url: <span class="string">'/getData'</span>,</span><br><span class="line">      body,</span><br><span class="line">      setting: &#123;</span><br><span class="line">        domain: config.getExhibitionDomain(),</span><br><span class="line">      &#125;,</span><br><span class="line">      headers: &#123;</span><br><span class="line">        </span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 之前拿到了 graytype 就塞入</span></span><br><span class="line">    <span class="keyword">if</span> (graytype !== <span class="number">-1</span>) &#123;</span><br><span class="line">      	options.headers.graytype = graytype;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> res = <span class="keyword">await</span> post(options);</span><br><span class="line">    <span class="comment">// 新增逻辑</span></span><br><span class="line">    <span class="keyword">if</span> (res.graytype !== <span class="literal">undefined</span> &amp;&amp; res.graytype !== <span class="literal">null</span>) &#123;</span><br><span class="line">        graytype = res.graytype;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (res?.picUrl) &#123;</span><br><span class="line">      <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    log.error(<span class="string">`失败`</span>, <span class="built_in">JSON</span>.stringify(error));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果只是一个请求的话就按上边这样改就可以了，但如果是多个请求一个一个这样去改就有些傻了。</p>
<p>那直接去改 <code>Http</code> 模块？也是不行的，增加 <code>graytype</code> 字段只是我们负责业务的改变，而 <code>Http</code> 模块是所有业务线所共用的，我们并不能直接去改变它。</p>
<p>此时就需要代理模式了。</p>
<h1 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h1><p>贴一下 <a href="https://en.wikipedia.org/wiki/Proxy_pattern" target="_blank" rel="noopener">维基百科</a>的一些解释：</p>
<blockquote>
<h3 id="What-problems-can-the-Proxy-design-pattern-solve"><a href="#What-problems-can-the-Proxy-design-pattern-solve" class="headerlink" title="What problems can the Proxy design pattern solve?"></a>What problems can the Proxy design pattern solve?</h3><ul>
<li>The access to an object should be controlled.</li>
<li>Additional functionality should be provided when accessing an object.</li>
</ul>
<h3 id="What-solution-does-the-Proxy-design-pattern-describe"><a href="#What-solution-does-the-Proxy-design-pattern-describe" class="headerlink" title="What solution does the Proxy design pattern describe?"></a>What solution does the Proxy design pattern describe?</h3><p>Define a separate <code>Proxy</code> object that</p>
<ul>
<li>can be used as substitute for another object (<code>Subject</code>) and</li>
<li>implements additional functionality to control the access to this subject.</li>
</ul>
</blockquote>
<p>代理模式就是对原有对象进行扩展，从而实现对原对象的控制或者进行额外的操作，不同场景下代理模式又可以细分出很多类别：</p>
<ol>
<li><p>远程代理：通过代理模式，实现像操作本地对象一样的操作远程对象。</p>
</li>
<li><p>虚拟代理：In place of a complex or heavy object, a skeleton representation may be advantageous in some cases.  常见的比如大图的加载，我们可以通过引入代理对象，先加载一张小图，大图加载完毕后再显示大图。</p>
</li>
<li><p>保护代理：将原有对象的属性访问进行权限控制。</p>
</li>
<li><p>缓存代理：引入缓存，将之前的结果进行缓存，常见的比如斐波那契数列。</p>
<p>…</p>
</li>
</ol>
<p>不管起了什么新名字，它们的本质都是一样的，如果用类图表示就是下边的样子：</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220108105835662.png" alt="image-20220108105835662"></p>
<p>原对象 <code>RealSubject</code> 和 <code>Proxy</code> 对象都继承了 <code>Subject</code> 这个接口，客户端 <code>Client</code> 调用 <code>DoAction()</code> 方法，先经过代理对象 <code>Proxy</code> ，然后由 <code>Proxy</code> 做一些额外的操作，最终再委托给 <code>RealSubject</code> 进行执行。</p>
<p>看一个 <code>Java</code> 的示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Image</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">displayImage</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// On System A</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RealImage</span> <span class="keyword">implements</span> <span class="title">Image</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String filename;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Constructor</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filename</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RealImage</span><span class="params">(String filename)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.filename = filename;</span><br><span class="line">        loadImageFromDisk();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Loads the image from the disk</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">loadImageFromDisk</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Loading   "</span> + filename);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Displays the image</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">displayImage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Displaying "</span> + filename);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// On System B</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProxyImage</span> <span class="keyword">implements</span> <span class="title">Image</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String filename;</span><br><span class="line">    <span class="keyword">private</span> RealImage image;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Constructor</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filename</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ProxyImage</span><span class="params">(String filename)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.filename = filename;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Displays the image</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">displayImage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (image == <span class="keyword">null</span>) &#123;</span><br><span class="line">           image = <span class="keyword">new</span> RealImage(filename);</span><br><span class="line">        &#125;</span><br><span class="line">        image.displayImage();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProxyExample</span> </span>&#123;</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Test method</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">final</span> String[] arguments)</span> </span>&#123;</span><br><span class="line">        Image image = <span class="keyword">new</span> ProxyImage(<span class="string">"HiRes_10MB_Photo1"</span>);</span><br><span class="line">        image.displayImage();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>原有的 <code>RealImage</code> 类在 <code>new</code> 对象的时候就会调用 <code>loadImageFromDisk</code>，如果之后没有调用 <code>displayImage</code> 并且 <code>loadImageFromDisk</code> 比较占资源，那就会是一种浪费。</p>
<p>通过 <code>ProxyImage</code> ，其内部持有 <code>RealImage</code> 的对象，当调用 <code>displayImage</code> 再去实例化对象，实现了对象的延迟加载。</p>
<p>当然也带来了坏处，可能会导致第一次调用 <code>displayImage</code> 的时候比较耗时。因此，在这个示例下是否引入代理模式，就看实际场景下的取舍了。</p>
<p>我们再用 <code>js</code> 来改写一下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">RealImage</span>(<span class="params">filename</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.filename = filename;</span><br><span class="line">    <span class="keyword">const</span> loadImageFromDisk = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Loading   '</span> + filename);</span><br><span class="line">    &#125;;</span><br><span class="line">    loadImageFromDisk();</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        displayImage: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'Displaying '</span> + filename);</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ProxyImage</span>(<span class="params">filename</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.filename = filename;</span><br><span class="line">    <span class="keyword">let</span> image = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        displayImage: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (image === <span class="literal">null</span>) &#123;</span><br><span class="line">                image = RealImage(filename);</span><br><span class="line">            &#125;</span><br><span class="line">            image.displayImage();</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Test</span></span><br><span class="line"><span class="keyword">const</span> image = ProxyImage(<span class="string">'HiRes_10MB_Photo1'</span>);</span><br><span class="line">image.displayImage();</span><br></pre></td></tr></table></figure>
<p>整体思想是一样的，但 <code>js</code> 不用定义接口，也不用定义类，看起来精简了不少。只需要实现和原对象一样的返回即可。</p>
<h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><p>回到最开始的场景：现在有了一个新需求，我们需要将第一次请求中，后端返回请求中的 <code>graytype</code>  字段塞到后续请求中的 <code>headers</code> 。</p>
<p>我们可以通过代理模式将 <code>request.js</code> 中的 <code>get</code> 和 <code>post</code> 进行封装，然后同样暴露出 <code>get</code> 和<code>post</code> 即可。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// src/util/requestNew.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; post <span class="keyword">as</span> Post, get <span class="keyword">as</span> Get &#125; <span class="keyword">from</span> <span class="string">'./request.js'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> graytype = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getNewParams = <span class="function">(<span class="params">params</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 将 graytype 加入</span></span><br><span class="line">    <span class="keyword">if</span> (graytype !== <span class="number">-1</span>) &#123;</span><br><span class="line">        newParams = &#123;</span><br><span class="line">            ...params,</span><br><span class="line">            headers: &#123;</span><br><span class="line">                ...params.headers,</span><br><span class="line">                graytype,</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newParams;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> get = <span class="keyword">async</span> (params) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> Get(getNewParams(params));</span><br><span class="line">    <span class="keyword">const</span> res = response.data;</span><br><span class="line">    <span class="keyword">if</span> (res.graytype !== <span class="literal">undefined</span> &amp;&amp; res.graytype !== <span class="literal">null</span>) &#123;</span><br><span class="line">        graytype = res.graytype;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> post = <span class="keyword">async</span> (params) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> Post(getNewParams(params));</span><br><span class="line">    <span class="keyword">const</span> res = response.data;</span><br><span class="line">    <span class="keyword">if</span> (res.graytype !== <span class="literal">undefined</span> &amp;&amp; res.graytype !== <span class="literal">null</span>) &#123;</span><br><span class="line">        graytype = res.graytype;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>我们将原有的 <code>get</code> 和 <code>post</code> 导入，因为还需要导出 <code>get</code> 和 <code>post</code> ，所以将导入的重命名为 <code>Get</code> 和 <code>Post</code> 。</p>
<p>然后在请求前将 <code>grayType</code> 塞入到 <code>headers</code> ，并且 <code>get</code> 和 <code>post</code> 的时候给 <code>grayType</code> 进行赋值。</p>
<p>这样在实际业务中，如果需要 <code>grayType</code> ，我们只需要从新写的 <code>src/util/requestNew.js</code> 引入 <code>get</code> 和 <code>post</code> 即可，其他什么都不需要改动。</p>
<h1 id="总"><a href="#总" class="headerlink" title="总"></a>总</h1><p>代理模式其实说简单了就是对原有对象/函数再包装一层，并且保持和原对象一致的行为。那么为什么不直接改原对象呢？</p>
<p>第一，可能不方便直接改原对象，所以只能采取代理模式包一层了。</p>
<p>第二，「单一职责原则」，如果直接修改原对象，会增加原有对象的复杂度，原对象如果负责的职责过多，引起对象改动的原因就会增多。</p>
<p>第三，未来如果新功能要去掉，修改起来也不方便。如果使用了代理模式，只需要把原来引用的地方还原即可。</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>前端的设计模式系列-策略模式</title>
    <url>/2022/01/03/%E5%89%8D%E7%AB%AF%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B3%BB%E5%88%97-%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<p>代码也写了几年了，设计模式处于看了忘，忘了看的状态，最近对设计模式有了点感觉，索性就再学习总结下吧。</p>
<p>大部分讲设计模式的文章都是使用的 <code>Java</code>、<code>C++</code> 这样的以类为基础的静态类型语言，作为前端开发者，<code>js</code> 这门基于原型的动态语言，函数成为了一等公民，在实现一些设计模式上稍显不同，甚至简单到不像使用了设计模式，有时候也会产生些困惑。</p>
<p>下面按照「场景」-「设计模式定义」- 「优化代码」- 「更多场景」-「总」的顺序来总结一下，如有不当之处，欢迎交流讨论。</p>
<h1 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h1><p>进入一个营销活动页面，会根据后端下发的不同 <code>type</code> ，前端页面展示不同的弹窗。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> getMainData() &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> res = <span class="keyword">await</span> activityQuery(); <span class="comment">// 请求后端数据</span></span><br><span class="line">    <span class="keyword">this</span>.styleType = res.styleType;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.styleType === STYLE_TYPE.Reward) &#123;</span><br><span class="line">      <span class="keyword">this</span>.openMoneyPop();</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.styleType === STYLE_TYPE.Waitreward) &#123;</span><br><span class="line">      <span class="keyword">this</span>.openShareMoneyPop();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.styleType === STYLE_TYPE.Poster) &#123;</span><br><span class="line">      <span class="keyword">this</span>.openPosterPop();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.styleType === STYLE_TYPE.Activity) &#123;</span><br><span class="line">      <span class="keyword">this</span>.openActivityPop();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.styleType === STYLE_TYPE.Balance) &#123;</span><br><span class="line">      <span class="keyword">this</span>.openBalancePop();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>?.styleType === STYLE_TYPE.Cash) &#123;</span><br><span class="line">      <span class="keyword">this</span>.openCashBalancePop();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    log.error(MODULENAME, <span class="string">'主接口异常'</span>, <span class="built_in">JSON</span>.stringify(error));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个代码的话看了就想打人，未来新增一种弹窗类型的话，我们需要到 <code>getMainData</code> 内部去补一个 <code>else if</code>，一不小心可能就会影响到原有的逻辑，并且随着迭代函数会越来越大。但其实每种弹窗是相互独立的，我们并不关心其他弹窗的逻辑。</p>
<p>此时，就需要策略模式了。</p>
<h1 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h1><p>看下 <a href="https://zh.wikipedia.org/wiki/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F" target="_blank" rel="noopener">维基百科</a> 的定义。</p>
<blockquote>
<p>策略模式作为一种<a href="https://zh.wikipedia.org/wiki/軟件設計模式" target="_blank" rel="noopener">软件设计模式</a>，指对象有某个行为，但是在不同的场景中，该行为有不同的实现算法。比如每个人都要“交个人所得税”，但是“在中国交个人所得税”和“在美国交个人所得税”就有不同的算税方法。</p>
<p>策略模式：</p>
<ul>
<li>定义了一族算法（业务规则）；</li>
<li>封装了每个算法；</li>
<li>这族的算法可互换代替（interchangeable）。</li>
</ul>
</blockquote>
<p>看一下如果是 <code>Java</code> 语言会怎么实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//StrategyExample test application</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StrategyExample</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Context context;</span><br><span class="line">        <span class="comment">// Three contexts following different strategies</span></span><br><span class="line">        context = <span class="keyword">new</span> Context(<span class="keyword">new</span> FirstStrategy());</span><br><span class="line">        context.execute();</span><br><span class="line"></span><br><span class="line">        context = <span class="keyword">new</span> Context(<span class="keyword">new</span> SecondStrategy());</span><br><span class="line">        context.execute();</span><br><span class="line"></span><br><span class="line">        context = <span class="keyword">new</span> Context(<span class="keyword">new</span> ThirdStrategy());</span><br><span class="line">        context.execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// The classes that implement a concrete strategy should implement this</span></span><br><span class="line"><span class="comment">// The context class uses this to call the concrete strategy</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Strategy</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Implements the algorithm using the strategy interface</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FirstStrategy</span> <span class="keyword">implements</span> <span class="title">Strategy</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Called FirstStrategy.execute()"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SecondStrategy</span> <span class="keyword">implements</span> <span class="title">Strategy</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Called SecondStrategy.execute()"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThirdStrategy</span> <span class="keyword">implements</span> <span class="title">Strategy</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Called ThirdStrategy.execute()"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Configured with a ConcreteStrategy object and maintains a reference to a Strategy object</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Context</span> </span>&#123;</span><br><span class="line">    Strategy strategy;</span><br><span class="line">    <span class="comment">// Constructor</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Context</span><span class="params">(Strategy strategy)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.strategy = strategy;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.strategy.execute();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>主要是利用到类的多态，根据传入 <code>Context</code>  中不同的 <code>strategy</code>，来执行不同的 <code>execute()</code>。如果未来有新增算法的话，只需要新增一个类即可。</p>
<p>那如果是 <code>js</code> 呢？众所周知，<code>ES6</code> 之前 <code>js</code> 是没有 <code>class</code> 关键字的，即使现在有了，也依然只是基于原型的语法糖，底层和 <code>java</code> 的类是完全不同的。</p>
<p>此外，<code>js</code> 中函数是一等公民，可以当作参数传入和返回，因此实现策略模式我们完全不需要去定一个类，然后通过生成的对象调用方法。在 <code>js</code> 中我们只需要将函数传入即可。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> strategies = &#123;</span><br><span class="line">  FirstStrategy() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Called FirstStrategy"</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  SecondStrategy() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Called SecondStrategy"</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  ThirdStrategy() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Called ThirdStrategy"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> execute = <span class="function">(<span class="params">strategy</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> strategies[strategy]();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">execute(<span class="string">'FirstStrategy'</span>)</span><br><span class="line">execute(<span class="string">'SecondStrategy'</span>)</span><br><span class="line">execute(<span class="string">'ThirdStrategy'</span>)</span><br></pre></td></tr></table></figure>
<p>上边主要演示了思想，实际开发中，我们完全可以把每种策略分文件单独写然后再 <code>import</code>。</p>
<p>相对于 <code>java</code>，写法简单了很多，我们不需要定义各个类，只需要用一个对象来存储所有策略，再提供一个调用策略的函数，甚至这个函数也可以直接省略。</p>
<h1 id="优化代码"><a href="#优化代码" class="headerlink" title="优化代码"></a>优化代码</h1><p>将所有弹窗方法从业务代码 <code>getMainData</code> 中抽离出来，只暴露一个打开弹窗的函数供业务调用。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; openPop &#125; <span class="keyword">from</span> <span class="string">'./popTypes'</span>;</span><br><span class="line"><span class="keyword">async</span> getMainData() &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> res = <span class="keyword">await</span> activityQuery(); <span class="comment">// 请求后端数据</span></span><br><span class="line">    openPop(res.styleType)</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    log.error(MODULENAME, <span class="string">'主接口异常'</span>, <span class="built_in">JSON</span>.stringify(error));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后就是 <code>popTypes.js</code> 文件。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; SHARETYPE &#125; <span class="keyword">from</span> <span class="string">'./constant'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> popTypes = &#123;</span><br><span class="line">  [STYLE_TYPE.Reward]: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;,</span><br><span class="line">  [STYLE_TYPE.Waitreward]: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;,</span><br><span class="line">  [STYLE_TYPE.Poster]: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;,</span><br><span class="line">  [STYLE_TYPE.Activity]: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;,</span><br><span class="line">  [STYLE_TYPE.Balance]: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;,</span><br><span class="line">  [STYLE_TYPE.Cash()]: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">openPop</span>(<span class="params">type</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> popTypes[type]();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="更多场景"><a href="#更多场景" class="headerlink" title="更多场景"></a>更多场景</h1><p>表单验证也是一个典型场景，常用的，我们需要验证用户输入字段是否是数字、是否必填、是否是数组，还有自定义的一些验证，同样可以通过策略模式实现，从而使得代码更易维护和扩展。</p>
<p>如果使用过 <code>Element UI</code>，对下边表单的 <code>rule</code> 一定很熟悉。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> rule = &#123;</span><br><span class="line">  name: &#123;</span><br><span class="line">    type: <span class="string">'string'</span>,</span><br><span class="line">    required: <span class="literal">true</span>,</span><br><span class="line">    message: <span class="string">'请输入名字'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  age: [</span><br><span class="line">    &#123;</span><br><span class="line">      type: <span class="string">'number'</span>,</span><br><span class="line">      message: <span class="string">'请输入number'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      message: <span class="string">'年龄必须大于 18'</span>,</span><br><span class="line">      validator: <span class="function">(<span class="params">rule, value</span>) =&gt;</span> value &gt; <span class="number">18</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><code>Element</code> 会帮助我们校验 <code>name</code> 是否是 <code>string</code>、<code>age</code> 是否是 <code>number</code>。而 <code>Element</code> 其实是用的一个开源的 <strong><a href="https://github.com/yiminghe/async-validator" target="_blank" rel="noopener">async-validator</a></strong> 校验库。</p>
<p> <strong><a href="https://github.com/yiminghe/async-validator" target="_blank" rel="noopener">async-validator</a></strong>  内部会内置很多 <code>type</code> 的 <code>validator</code>，然后会根据 <code>rule</code> 中的 <code>type</code> 来帮我们填充相应的 <code>validator</code>。让我们看一下相应的源码。</p>
<p>首先是 <code>validator</code> 文件夹，会定义很多校验规则，<code>date</code> 类型、<code>number</code> 类型等等，相当于很多策略。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220106090411041.png" alt="image-20220106090411041"></p>
<p>然后是上边截图中的 <code>validator/index.ts</code> 文件，将这些策略导出。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> string <span class="keyword">from</span> <span class="string">'./string'</span>;</span><br><span class="line"><span class="keyword">import</span> method <span class="keyword">from</span> <span class="string">'./method'</span>;</span><br><span class="line"><span class="keyword">import</span> number <span class="keyword">from</span> <span class="string">'./number'</span>;</span><br><span class="line"><span class="keyword">import</span> boolean <span class="keyword">from</span> <span class="string">'./boolean'</span>;</span><br><span class="line"><span class="keyword">import</span> regexp <span class="keyword">from</span> <span class="string">'./regexp'</span>;</span><br><span class="line"><span class="keyword">import</span> integer <span class="keyword">from</span> <span class="string">'./integer'</span>;</span><br><span class="line"><span class="keyword">import</span> float <span class="keyword">from</span> <span class="string">'./float'</span>;</span><br><span class="line"><span class="keyword">import</span> array <span class="keyword">from</span> <span class="string">'./array'</span>;</span><br><span class="line"><span class="keyword">import</span> object <span class="keyword">from</span> <span class="string">'./object'</span>;</span><br><span class="line"><span class="keyword">import</span> enumValidator <span class="keyword">from</span> <span class="string">'./enum'</span>;</span><br><span class="line"><span class="keyword">import</span> pattern <span class="keyword">from</span> <span class="string">'./pattern'</span>;</span><br><span class="line"><span class="keyword">import</span> date <span class="keyword">from</span> <span class="string">'./date'</span>;</span><br><span class="line"><span class="keyword">import</span> required <span class="keyword">from</span> <span class="string">'./required'</span>;</span><br><span class="line"><span class="keyword">import</span> type <span class="keyword">from</span> <span class="string">'./type'</span>;</span><br><span class="line"><span class="keyword">import</span> any <span class="keyword">from</span> <span class="string">'./any'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  string,</span><br><span class="line">  method,</span><br><span class="line">  number,</span><br><span class="line">  boolean,</span><br><span class="line">  regexp,</span><br><span class="line">  integer,</span><br><span class="line">  float,</span><br><span class="line">  array,</span><br><span class="line">  object,</span><br><span class="line">  enum: enumValidator,</span><br><span class="line">  pattern,</span><br><span class="line">  date,</span><br><span class="line">  url: type,</span><br><span class="line">  hex: type,</span><br><span class="line">  email: type,</span><br><span class="line">  required,</span><br><span class="line">  any,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>校验前会执行下边的代码，通过 <code>type</code> 填充相应的 <code>validator</code>。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">arr.forEach(<span class="function"><span class="params">r</span> =&gt;</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> rule === <span class="string">'function'</span>) &#123;</span><br><span class="line">    rule = &#123;</span><br><span class="line">      validator: rule,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    rule = &#123; ...rule &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Fill validator. Skip if nothing need to validate</span></span><br><span class="line">  rule.validator = <span class="keyword">this</span>.getValidationMethod(rule); <span class="comment">// 策略模式应用</span></span><br><span class="line">  <span class="keyword">if</span> (!rule.validator) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ...</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>策略模式的体现就是 <code>getValidationMethod</code> 方法了，让我们看一下实现。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> validators <span class="keyword">from</span> <span class="string">'./validator/index'</span>; <span class="comment">// 导入所有策略</span></span><br><span class="line"></span><br><span class="line">getValidationMethod(rule: InternalRuleItem) &#123;</span><br><span class="line">  <span class="comment">// 已经有了就直接返回 validator</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> rule.validator === <span class="string">'function'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> rule.validator;</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">  <span class="comment">// 通过 type 得到相应的 validator。</span></span><br><span class="line">  <span class="keyword">return</span> validators[<span class="keyword">this</span>.getType(rule)] || <span class="literal">undefined</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getType(rule: InternalRuleItem) &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">return</span> rule.type || <span class="string">'string'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>填充相应的 <code>validator</code> 之后接下来只需要遍历相应的 <code>rule</code> 然后校验就可以了。</p>
<h1 id="总"><a href="#总" class="headerlink" title="总"></a>总</h1><p>当出现很多 <code>if else</code> 或者 <code>switch</code> 的时候，我们就可以考虑是否能使用策略模式了。</p>
<p>通过策略模式，我们可以把策略从业务代码中抽离出来，未来扩展的话无需深入到业务代码修改，只需要新增需要的策略，不会使得业务代码变得越来越臃肿。</p>
<p>甚至策略模式也可以更好的进行复用，如果其他业务场景需要类似的策略，直接引入即可，和原有的业务相互独立。</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>前端的设计模式系列-发布订阅模式</title>
    <url>/2022/01/30/%E5%89%8D%E7%AB%AF%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B3%BB%E5%88%97-%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<p><strong>建议先看一下上篇</strong> <a href="https://windliang.wang/2022/01/27/%E5%89%8D%E7%AB%AF%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B3%BB%E5%88%97-%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F-%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E6%A8%A1%E5%BC%8F/">观察者模式</a> ，发布订阅模式和观察者模式本质上还是一样的，并且发布订阅模式也没有在经典的设计模式书 <code>GoF</code> 中出现，很多地方也直接把两者看成一种设计模式了。</p>
<p><code>GoF</code> 的名字也有个有趣的故事，<a href="http://wiki.c2.com/?GangOfFour" target="_blank" rel="noopener">这里</a> 贴过来：</p>
<blockquote>
<p>The authors of the <a href="http://wiki.c2.com/?DesignPatternsBook" target="_blank" rel="noopener">DesignPatternsBook</a> came to be known as the “Gang of Four.” The name of the book (“Design Patterns: Elements of Reusable Object-Oriented Software”) is too long for e-mail, so “book by the gang of four” became a shorthand name for it. After all, it isn’t the ONLY book on patterns. That got shortened to “GOF book”, which is pretty cryptic the first time you hear it.</p>
</blockquote>
<p>回到正文。</p>
<p>代码也写了几年了，设计模式处于看了忘，忘了看的状态，最近对设计模式有了点感觉，索性就再学习总结下吧。</p>
<p>大部分讲设计模式的文章都是使用的 <code>Java</code>、<code>C++</code> 这样的以类为基础的静态类型语言，作为前端开发者，<code>js</code> 这门基于原型的动态语言，函数成为了一等公民，在实现一些设计模式上稍显不同，甚至简单到不像使用了设计模式，有时候也会产生些困惑。</p>
<p>下面按照「场景」-「设计模式定义」- 「代码实现」-「总」的顺序来总结一下，如有不当之处，欢迎交流讨论。</p>
<h1 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h1><p>假设我们在开发一款外卖网站，进入网站的时候，第一步需要去请求后端接口得到用户的常用外卖地址。然后再去请求其他接口、渲染页面。如果使用了观察者模式可能会这样写：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 页面里有三个模块 A，B，C 需要拿到地址后再进行下一步</span></span><br><span class="line"><span class="comment">// A、B、C 三个模块都是不同人写的，提供了不同的方法供我们调用</span></span><br><span class="line"><span class="keyword">const</span> observers = []</span><br><span class="line"><span class="comment">// 注册观察者</span></span><br><span class="line">observers.push(A.update)</span><br><span class="line">observers.push(B.next)</span><br><span class="line">obervers.push(C.change)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// getAddress 异步请求</span></span><br><span class="line">getAddress().then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> address = res.address;</span><br><span class="line">  observers.forEach(<span class="function"><span class="params">update</span> =&gt;</span> update(address))</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p><code>getAddress</code> 模块和其他 <code>A</code> 、<code>B</code>、<code>C</code> 三个模块已经实现了解耦，但仍需要维护 <code>observers</code> 这个数组来注册观察者，同时还需要知道各个模块提供了什么方法用于回调。</p>
<p>我们可以使用发布订阅模式，让 <code>getAddress</code> 模块和其他 <code>A</code> 、<code>B</code>、<code>C</code> 三个模块解耦的更加彻底。</p>
<h1 id="发布订阅模式"><a href="#发布订阅模式" class="headerlink" title="发布订阅模式"></a>发布订阅模式</h1><p>回忆一下观察者模式：</p>
<blockquote>
<p>The <strong>observer pattern</strong> is a <a href="https://en.wikipedia.org/wiki/Software_design_pattern" target="_blank" rel="noopener">software design pattern</a> in which an <a href="https://en.wikipedia.org/wiki/Object_(computer_science" target="_blank" rel="noopener">object</a>#Objects_in_object-oriented_programming), named the <strong>subject</strong>, maintains a list of its dependents, called <strong>observers</strong>, and notifies them automatically of any state changes, usually by calling one of their <a href="https://en.wikipedia.org/wiki/Method_(computer_science" target="_blank" rel="noopener">methods</a>).</p>
</blockquote>
<p>观察者模式中，<code>Subject</code> 自己维护观察者列表进行注册和通知。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220130170413954.png" alt="image-20220130170413954"></p>
<p>发布订阅模式的话，引入一个中间平台进行注册和通知，相当于从 <code>Subject</code> 中解耦出来。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220130171806687.png" alt="image-20220130171806687"></p>
<p>观察者通过 <code>on</code> 向 <code>EventBus</code> 注册事件，然后 <code>Subject</code> 通过 <code>emit</code> 向 <code>EventBus</code> 发射事件，由 <code>EventBus</code> 来向观察者更新。</p>
<p>接下来实现一个简单的 <code>EventBus</code> 。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// event.js</span></span><br><span class="line"><span class="keyword">const</span> observersMap = &#123;&#125;</span><br><span class="line"><span class="keyword">const</span> listen = <span class="function"><span class="keyword">function</span> (<span class="params">key, fn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!observersMap[key]) &#123;</span><br><span class="line">        observersMap[key] = [];</span><br><span class="line">    &#125;</span><br><span class="line">    observersMap[key].push(fn);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> trigger = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> key = <span class="built_in">Array</span>.prototype.shift.call(<span class="built_in">arguments</span>),</span><br><span class="line">        fns = observersMap[key];</span><br><span class="line">    <span class="keyword">if</span> (!fns || fns.length === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, fn; fn = fns[i];i++ ) &#123;</span><br><span class="line">        fn.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> remove = <span class="function"><span class="keyword">function</span> (<span class="params">key, fn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> fns = observersMap[key];</span><br><span class="line">    <span class="keyword">if</span> (!fns) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!fn) &#123;</span><br><span class="line">        fns &amp;&amp; (fns.length = <span class="number">0</span>) <span class="comment">// 全部清空</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> findIndex = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; fns.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (fns[i] === fn) &#123;</span><br><span class="line">                findIndex = i;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (findIndex !== <span class="number">-1</span>) &#123;</span><br><span class="line">            fns.splice(findIndex, <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 同一种功能可能会见到不同名字，这里都导出去</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> EventBus = &#123;</span><br><span class="line">    listen,</span><br><span class="line">    attach: listen,</span><br><span class="line">    on: listen,</span><br><span class="line"></span><br><span class="line">    remove,</span><br><span class="line">    detach: remove,</span><br><span class="line"></span><br><span class="line">    trigger,</span><br><span class="line">    emit: trigger,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>我们通过 <code>observersMap</code> 将不同的事件保存为不同的数组，<code>emit</code> 的时候得到对应的数组去调用即可。看下例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; EventBus &#125; <span class="keyword">from</span> <span class="string">"./event.js"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> WindLiang = &#123;</span><br><span class="line">    writePost(p) &#123;</span><br><span class="line">        EventBus.emit(<span class="string">"windliang"</span>, p);</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> XiaoMing = &#123;</span><br><span class="line">    update(post) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"我收到了"</span> + post + <span class="string">" 并且点了个赞"</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> XiaoYang = &#123;</span><br><span class="line">    update(post) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"我收到了"</span> + post + <span class="string">" 并且转发了"</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> XiaoGang = &#123;</span><br><span class="line">    update(post) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"我收到了"</span> + post + <span class="string">" 并且收藏"</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">EventBus.on(<span class="string">"windliang"</span>, XiaoMing.update);</span><br><span class="line">EventBus.on(<span class="string">"windliang"</span>, XiaoYang.update);</span><br><span class="line">EventBus.on(<span class="string">"windliang"</span>, XiaoGang.update);</span><br><span class="line"></span><br><span class="line">WindLiang.writePost(<span class="string">"新文章-观察者模式，balabala"</span>);</span><br></pre></td></tr></table></figure>
<h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><p>让我们改造下开头写的观察者模式的代码：</p>
<p>地址模块：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; EventBus &#125; <span class="keyword">from</span> <span class="string">"./event.js"</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// getAddress 异步请求</span></span><br><span class="line">getAddress().then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> address = res.address;</span><br><span class="line">  EventBus.emit(<span class="string">'ADDRESS'</span>, address)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p><code>A</code> 模块</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; EventBus &#125; <span class="keyword">from</span> <span class="string">"./event.js"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> update = <span class="function">(<span class="params">address</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 自己的逻辑</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">EventBus.on(<span class="string">'ADDRESS'</span>, (address) =&gt; update(address))</span><br></pre></td></tr></table></figure>
<p><code>B</code> 模块</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; EventBus &#125; <span class="keyword">from</span> <span class="string">"./event.js"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> next = <span class="function">(<span class="params">address</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 自己的逻辑</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">EventBus.on(<span class="string">'ADDRESS'</span>, (address) =&gt; next(address))</span><br></pre></td></tr></table></figure>
<p><code>C</code> 模块</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; EventBus &#125; <span class="keyword">from</span> <span class="string">"./event.js"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> change = <span class="function">(<span class="params">address</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 自己的逻辑</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">EventBus.on(<span class="string">'ADDRESS'</span>, (address) =&gt; change(address))</span><br></pre></td></tr></table></figure>
<p>可以看到 <code>getAddress</code> 模块不再需要关心观察者有谁，它只需要向 <code>EventBus</code> 发射更新事件即可。</p>
<p>每个模块内部自己如果需要地址信息，只需要订阅相关事件，然后传入回调函数即可。</p>
<h1 id="特殊情况"><a href="#特殊情况" class="headerlink" title="特殊情况"></a>特殊情况</h1><p>实际工程中可能遇到一些特殊场景，由于 <code>emit</code> 一般在一个异步事件中执行，如果这个异步事件突然执行的变快了，就可能造成某个事件先 <code>emit</code> 了，然后某个模块才进行了 <code>on</code> 。</p>
<p>此时我们可以对 <code>EventBus</code> 进行一定的改写，使得先订阅事件，后触发事件成为可能。</p>
<p>为了不改动原有逻辑，我们可以通过 <a href="https://windliang.wang/2022/01/07/%E5%89%8D%E7%AB%AF%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B3%BB%E5%88%97-%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%99%9A%E6%8B%9F%E6%A8%A1%E5%BC%8F/">代理模式</a> 进行改写。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// eventProxy.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; EventBus <span class="keyword">as</span> EventBusOriginal &#125; <span class="keyword">from</span> <span class="string">"./event.js"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> offlineStack = []; <span class="comment">// listen 之前的 emit 事件进行缓存</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> triggerProxy = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> _self = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">const</span> args = <span class="built_in">arguments</span>;</span><br><span class="line">    <span class="keyword">const</span> fn = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> EventBusOriginal.trigger.apply(_self, args);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">if</span> (offlineStack) &#123;</span><br><span class="line">        <span class="keyword">return</span> offlineStack.push(fn);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fn();</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> listenProxy = <span class="function"><span class="keyword">function</span> (<span class="params">key, fn</span>) </span>&#123;</span><br><span class="line">    EventBusOriginal.listen(key, fn);</span><br><span class="line">    <span class="keyword">if</span>(!offlineStack) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, fn; (fn = offlineStack[i]); i++) &#123;</span><br><span class="line">        fn();</span><br><span class="line">    &#125;</span><br><span class="line">    offlineStack = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> listen = listenProxy || EventBus.listen;</span><br><span class="line"><span class="keyword">const</span> trigger = triggerProxy || EventBus.trigger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> EventBus = &#123;</span><br><span class="line">    ...EventBusOriginal,</span><br><span class="line">    listen,</span><br><span class="line">    attach: listen,</span><br><span class="line">    on: listen,</span><br><span class="line"></span><br><span class="line">    trigger,</span><br><span class="line">    emit: trigger,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>在 <code>trigger</code> 的时候，如果 <code>offlineStack</code> 不为 <code>null</code>，说明还没有调用过 <code>listen</code>，此时将当前事件保存起来。</p>
<p><code>listen</code> 的时候遍历之前保存的事件，并且将 <code>offlineStack</code> 置为 <code>null</code>，表示已经调用过 <code>listen</code> 了。</p>
<p>看一下效果：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; EventBus &#125; <span class="keyword">from</span> <span class="string">"./eventProxy.mjs"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> WindLiang = &#123;</span><br><span class="line">    writePost(p) &#123;</span><br><span class="line">        EventBus.emit(<span class="string">"windliang"</span>, p);</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> XiaoMing = &#123;</span><br><span class="line">    update(post) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"我收到了"</span> + post + <span class="string">" 并且点了个赞"</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> XiaoYang = &#123;</span><br><span class="line">    update(post) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"我收到了"</span> + post + <span class="string">" 并且转发了"</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> XiaoGang = &#123;</span><br><span class="line">    update(post) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"我收到了"</span> + post + <span class="string">" 并且收藏"</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">WindLiang.writePost(<span class="string">"新文章-观察者模式，balabala"</span>);</span><br><span class="line"></span><br><span class="line">EventBus.on(<span class="string">"windliang"</span>, XiaoYang.update); <span class="comment">// 我收到了新文章-观察者模式，balabala 并且转发了</span></span><br></pre></td></tr></table></figure>
<p>虽然是先进行的 <code>emit</code> 后进行的 <code>on</code> 的，但依旧会正常执行。</p>
<p>上边的解决方案很粗略，只适用于有一个事件并且只有一个 <code>on</code> 的场景，不然的话比如下边的情况：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">WindLiang.writePost(<span class="string">"新文章-观察者模式，balabala"</span>);</span><br><span class="line"></span><br><span class="line">EventBus.on(<span class="string">"windliang"</span>, XiaoMing.update);</span><br><span class="line">EventBus.on(<span class="string">"windliang"</span>, XiaoYang.update);</span><br><span class="line">EventBus.on(<span class="string">"windliang"</span>, XiaoGang.update);</span><br></pre></td></tr></table></figure>
<p>只有 <code>XiaoMing.update</code> 会执行，后边两句就会错过第一次的 <code>emit</code> ，因为执行一次 <code>listen</code> 就把缓存清空了。</p>
<p>或者在 <code>writePost</code> 之前有了一次 <code>on</code> 了：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">EventBus.on(<span class="string">"windliang"</span>, XiaoMing.update);</span><br><span class="line">WindLiang.writePost(<span class="string">"新文章-观察者模式，balabala"</span>);</span><br><span class="line"></span><br><span class="line">EventBus.on(<span class="string">"windliang"</span>, XiaoYang.update);</span><br><span class="line">EventBus.on(<span class="string">"windliang"</span>, XiaoGang.update);</span><br></pre></td></tr></table></figure>
<p> 同样只有 <code>XiaoMing.update</code> 会执行，后边两句就会错过第一次的 <code>emit</code> 了，因为执行一次 <code>listen</code> 就把缓存清空了。</p>
<p>对于实际场景，我们还需要根据情况继续进行调整。</p>
<h1 id="总"><a href="#总" class="headerlink" title="总"></a>总</h1><p>发布订阅模式相对于最原始的观察者模式将 <code>Subject</code> 和 <code>Observers</code> 进行了彻底解耦，<code>Subject</code> 不再需要关心谁订阅了它，<code>Observer</code> 只需要在自己内部订阅它所关心的事件即可。</p>
<p>通过封装好的 <code>EventBus</code> 也实现了更好的复用，不需要每个模块都去维护自己的观察者列表。</p>
<p>但同时也带来了坏处，所有的事件订阅分散在各个模块，没有一个全局视角知道某个事件被哪些模块订阅了，可能会导致程序难以理解和调试。</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>前端的设计模式系列-责任链模式</title>
    <url>/2022/02/04/%E5%89%8D%E7%AB%AF%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B3%BB%E5%88%97-%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<p>代码也写了几年了，设计模式处于看了忘，忘了看的状态，最近对设计模式有了点感觉，索性就再学习总结下吧。</p>
<p>大部分讲设计模式的文章都是使用的 <code>Java</code>、<code>C++</code> 这样的以类为基础的静态类型语言，作为前端开发者，<code>js</code> 这门基于原型的动态语言，函数成为了一等公民，在实现一些设计模式上稍显不同，甚至简单到不像使用了设计模式，有时候也会产生些困惑。</p>
<p>下面按照「场景」-「设计模式定义」- 「代码实现」- 「易混设计模式」 -「总」的顺序来总结一下，如有不当之处，欢迎交流讨论。</p>
<h1 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h1><p><a href="https://leetcode.wang/leetCode-65-Valid-Number.html" target="_blank" rel="noopener">leetcode 65 题</a> 判断是否是合法的数字：</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220204102426236.png" alt="image-20220204102426236"></p>
<p>部分有效数字列举如下：<code>[&quot;2&quot;, &quot;0089&quot;, &quot;-0.1&quot;, &quot;+3.14&quot;, &quot;4.&quot;, &quot;-.9&quot;, &quot;2e10&quot;, &quot;-90E3&quot;, &quot;3e+7&quot;, &quot;+6e-1&quot;, &quot;53.5e93&quot;, &quot;-123.456e789&quot;]</code><br>部分无效数字列举如下：<code>[&quot;abc&quot;, &quot;1a&quot;, &quot;1e&quot;, &quot;e3&quot;, &quot;99e2.5&quot;, &quot;--6&quot;, &quot;-+3&quot;, &quot;95a54e53&quot;]</code></p>
<p>我们可以依次遍历给定的字符串，然后各种 <code>if</code> 、<code>else</code> 来解决这个问题：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; s</span></span><br><span class="line"><span class="comment"> * @return &#123;boolean&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> isNumber = <span class="function"><span class="keyword">function</span> (<span class="params">s</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> e = [<span class="string">"e"</span>, <span class="string">"E"</span>];</span><br><span class="line">    s = s.trim();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> pointSeen = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">let</span> eSeen = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">let</span> numberSeen = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">let</span> numberAfterE = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; s.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"0"</span> &lt;= s.charAt(i) &amp;&amp; s.charAt(i) &lt;= <span class="string">"9"</span>) &#123;</span><br><span class="line">            numberSeen = <span class="literal">true</span>;</span><br><span class="line">            numberAfterE = <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (s.charAt(i) === <span class="string">"."</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (eSeen || pointSeen) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            pointSeen = <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e.includes(s.charAt(i))) &#123;</span><br><span class="line">            <span class="keyword">if</span> (eSeen || !numberSeen) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            numberAfterE = <span class="literal">false</span>;</span><br><span class="line">            eSeen = <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (s.charAt(i) === <span class="string">"-"</span> || s.charAt(i) === <span class="string">"+"</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i != <span class="number">0</span> &amp;&amp; !e.includes(s.charAt(i - <span class="number">1</span>))) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> numberSeen &amp;&amp; numberAfterE;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>如果只是为了刷题 <code>AC</code> 也没啥毛病，但如果在业务中写出这么多 <code>if</code>、<code>else</code> 大概就要被打了。</p>
<p>为了让代码扩展性和可读性更高，我们可以通过责任链模式进行改写。</p>
<h1 id="责任链模式"><a href="#责任链模式" class="headerlink" title="责任链模式"></a>责任链模式</h1><p><code>GoF</code>  介绍的责任链模式定义：</p>
<blockquote>
<p>Avoid coupling the sender of a request to its receiver by giving more than one object a chance to handle the request. Chain the receiving objects and pass the request along the chain until an object handles it.</p>
</blockquote>
<p>避免请求者和接收者之间的耦合，让多个接收者都有机会去处理请求。将接收者组成链条，在链条中传递请求直到有接收者可以处理它。</p>
<p>原始的定义中，当请求被处理后链条就终止了，但很多地方也会将请求一直传递下去，可以看作是责任链模式的变体。</p>
<p>看一下 <code>UML</code> 类图和时序图：</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220204151213707.png" alt="image-20220204151213707"></p>
<p><code>Sender</code> 无需关心哪一个 <code>Receiver</code> 去处理它，只需要通过 <code>Handler</code> 接口在 <code>Receiver</code> 链条中进行处理，每一个 <code>Receiver</code> 处理结束后继续传给下一个 <code>Receiver</code> 。</p>
<p>看起来比较抽象，看一个具体的例子，不同等级的日志进行不同的处理：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Logger</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> ERR = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> NOTICE = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> DEBUG = <span class="number">7</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> mask;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// The next element in the chain of responsibility</span></span><br><span class="line">    <span class="keyword">protected</span> Logger next;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Logger <span class="title">setNext</span><span class="params">( Logger l)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        next = l;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">message</span><span class="params">( String msg, <span class="keyword">int</span> priority )</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ( priority &lt;= mask ) </span><br><span class="line">        &#123;</span><br><span class="line">            writeMessage( msg );</span><br><span class="line">            <span class="keyword">if</span> ( next != <span class="keyword">null</span> )</span><br><span class="line">            &#123;</span><br><span class="line">                next.message( msg, priority );</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">writeMessage</span><span class="params">( String msg )</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StdoutLogger</span> <span class="keyword">extends</span> <span class="title">Logger</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StdoutLogger</span><span class="params">( <span class="keyword">int</span> mask )</span> </span>&#123; <span class="keyword">this</span>.mask = mask; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">writeMessage</span><span class="params">( String msg )</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println( <span class="string">"Writting to stdout: "</span> + msg );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EmailLogger</span> <span class="keyword">extends</span> <span class="title">Logger</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">EmailLogger</span><span class="params">( <span class="keyword">int</span> mask )</span> </span>&#123; <span class="keyword">this</span>.mask = mask; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">writeMessage</span><span class="params">( String msg )</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println( <span class="string">"Sending via email: "</span> + msg );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StderrLogger</span> <span class="keyword">extends</span> <span class="title">Logger</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StderrLogger</span><span class="params">( <span class="keyword">int</span> mask )</span> </span>&#123; <span class="keyword">this</span>.mask = mask; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">writeMessage</span><span class="params">( String msg )</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println( <span class="string">"Sending to stderr: "</span> + msg );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChainOfResponsibilityExample</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">( String[] args )</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// Build the chain of responsibility</span></span><br><span class="line">        Logger l = <span class="keyword">new</span> StdoutLogger( Logger.DEBUG).setNext(</span><br><span class="line">                            <span class="keyword">new</span> EmailLogger( Logger.NOTICE ).setNext(</span><br><span class="line">                            <span class="keyword">new</span> StderrLogger( Logger.ERR ) ) );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Handled by StdoutLogger</span></span><br><span class="line">        l.message( <span class="string">"Entering function y."</span>, Logger.DEBUG );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Handled by StdoutLogger and EmailLogger</span></span><br><span class="line">        l.message( <span class="string">"Step1 completed."</span>, Logger.NOTICE );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Handled by all three loggers</span></span><br><span class="line">        l.message( <span class="string">"An error has occurred."</span>, Logger.ERR );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">Writting to <span class="built_in">stdout</span>: Entering function y.</span><br><span class="line">Writting to <span class="built_in">stdout</span>: Step1 completed.</span><br><span class="line">Sending via email: Step1 completed.</span><br><span class="line">Writting to <span class="built_in">stdout</span>: An error has occurred.</span><br><span class="line">Sending via email: An error has occurred.</span><br><span class="line">Sending to <span class="built_in">stderr</span>: An error has occurred.</span><br></pre></td></tr></table></figure>
<p>每个 <code>logger</code> 都继承了 <code>message</code> 方法，并且拥有的 <code>next</code> 也指向一个 <code>logger</code> 对象，通过 <code>next</code> 去调用下一个的 <code>message</code> 方法。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220204152750255.png" alt="image-20220204152750255"></p>
<p>让我们用 <code>js</code> 再来改写一下：</p>
<p>我们先实现一个 <code>Handler</code> 对象，构建链条。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Handler = <span class="function"><span class="keyword">function</span> (<span class="params">fn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.handler = fn;</span><br><span class="line">    <span class="keyword">this</span>.next = <span class="literal">null</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Handler.prototype.setNext = <span class="function"><span class="keyword">function</span> <span class="title">setNext</span>(<span class="params">h</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.next = h;</span><br><span class="line">    <span class="keyword">return</span> h;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Handler.prototype.passRequest = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> ret = <span class="keyword">this</span>.handler.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">    <span class="keyword">this</span>.next &amp;&amp; <span class="keyword">this</span>.next.passRequest.apply(<span class="keyword">this</span>.next, <span class="built_in">arguments</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>接下来实现不同的 <code>Logger</code> 。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> ERR = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">const</span> NOTICE = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> DEBUG = <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> StdoutLogger = <span class="function"><span class="keyword">function</span> (<span class="params">msg, level</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 根据等级判断自己是否处理</span></span><br><span class="line">    <span class="keyword">if</span> (level &lt;= DEBUG) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"Writting to stdout: "</span> + msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> EmailLogger = <span class="function"><span class="keyword">function</span> (<span class="params">msg, level</span>) </span>&#123;</span><br><span class="line">  	<span class="comment">// 根据等级判断自己是否处理</span></span><br><span class="line">    <span class="keyword">if</span> (level &lt;= NOTICE) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"Sending via email: "</span> + msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> StderrLogger = <span class="function"><span class="keyword">function</span> (<span class="params">msg, level</span>) </span>&#123;</span><br><span class="line">  	<span class="comment">// 根据等级判断自己是否处理</span></span><br><span class="line">    <span class="keyword">if</span> (level &lt;= ERR) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"Sending to stderr: "</span> + msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>然后进行测试：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> StdoutHandler = <span class="keyword">new</span> Handler(StdoutLogger);</span><br><span class="line"><span class="keyword">const</span> EmailHandler = <span class="keyword">new</span> Handler(EmailLogger);</span><br><span class="line"><span class="keyword">const</span> StderrHandler = <span class="keyword">new</span> Handler(StderrLogger);</span><br><span class="line">StdoutHandler.setNext(EmailHandler).setNext(StderrHandler);</span><br><span class="line"></span><br><span class="line">StdoutHandler.passRequest(<span class="string">"Entering function y."</span>, DEBUG);</span><br><span class="line">StdoutHandler.passRequest(<span class="string">"Step1 completed."</span>, NOTICE);</span><br><span class="line">StdoutHandler.passRequest(<span class="string">"An error has occurred."</span>, ERR);</span><br></pre></td></tr></table></figure>
<p>输出内容和 <code>java</code> 代码是一致的。</p>
<h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><p>回到开头的场景中，判断是否是有效数字。</p>
<p>我们可以抽离出不同功能，判断是否是整数、是否是科学记数法、是否是浮点数等等，然后通过职责链模式把它们链接起来，如果某一环节返回了 <code>true</code> 就不再判断，直接返回最终结果。</p>
<p>可以利用上边写的 <code>Handler</code> 对象，构建链条，此外可以通过返回值提前结束传递。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Handler</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.handler = fn;</span><br><span class="line">    <span class="keyword">this</span>.next = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Handler.prototype.setNext = <span class="function"><span class="keyword">function</span> <span class="title">setNext</span>(<span class="params">h</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.next = h;</span><br><span class="line">    <span class="keyword">return</span> h;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Handler.prototype.passRequest = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> ret = <span class="keyword">this</span>.handler.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">    <span class="comment">// 提前结束</span></span><br><span class="line">    <span class="keyword">if</span> (ret) &#123;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">  	<span class="comment">// 向后传递</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.next) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.next.passRequest.apply(<span class="keyword">this</span>.next, <span class="built_in">arguments</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>数字预处理一下，去掉前后空白和 <code>+</code>、<code>-</code> 便于后续的判断。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">preProcessing</span>(<span class="params">v</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> value = v.trim();</span><br><span class="line">    <span class="keyword">if</span> (value.startsWith(<span class="string">"+"</span>) || value.startsWith(<span class="string">"-"</span>)) &#123;</span><br><span class="line">        value = value.substring(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>判断是否是整数：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 判断是否是整数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isInteger</span>(<span class="params">integer</span>) </span>&#123;</span><br><span class="line">    integer = preProcessing(integer);</span><br><span class="line">    <span class="keyword">if</span> (!integer) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; integer.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="regexp">/[0-9]/</span>.test(integer.charAt(i))) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>判断是否是小数：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 判断是否是小数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isFloat</span>(<span class="params">floatVal</span>) </span>&#123;</span><br><span class="line">    floatVal = preProcessing(floatVal);</span><br><span class="line">    <span class="keyword">if</span> (!floatVal) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">checkPart</span>(<span class="params">part</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (part === <span class="string">""</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (</span><br><span class="line">            !<span class="regexp">/[0-9]/</span>.test(part.charAt(<span class="number">0</span>)) ||</span><br><span class="line">            !<span class="regexp">/[0-9]/</span>.test(part.charAt(part.length - <span class="number">1</span>))</span><br><span class="line">        ) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!isInteger(part)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> pos = floatVal.indexOf(<span class="string">"."</span>);</span><br><span class="line">    <span class="keyword">if</span> (pos === <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (floatVal.length === <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> first = floatVal.substring(<span class="number">0</span>, pos);</span><br><span class="line">    <span class="keyword">const</span> second = floatVal.substring(pos + <span class="number">1</span>, floatVal.length);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (checkPart(first) &amp;&amp; checkPart(second)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>判断是否是科学计数法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 判断是否是科学计数法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isScienceFormat</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">    s = preProcessing(s);</span><br><span class="line">    <span class="keyword">if</span> (!s) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">checkHeadAndEndForSpace</span>(<span class="params">part</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (part.startsWith(<span class="string">" "</span>) || part.endsWith(<span class="string">" "</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">validatePartBeforeE</span>(<span class="params">first</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!first) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!checkHeadAndEndForSpace(first)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!isInteger(first) &amp;&amp; !isFloat(first)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">validatePartAfterE</span>(<span class="params">second</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!second) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!checkHeadAndEndForSpace(second)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!isInteger(second)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    s = s.toLowerCase();</span><br><span class="line">    <span class="keyword">let</span> pos = s.indexOf(<span class="string">"e"</span>);</span><br><span class="line">    <span class="keyword">if</span> (pos === <span class="number">-1</span>) &#123;</span><br><span class="line">        pos = s.indexOf(<span class="string">"E"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (pos === <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (s.length === <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> first = s.substring(<span class="number">0</span>, pos);</span><br><span class="line">    <span class="keyword">const</span> second = s.substring(pos + <span class="number">1</span>, s.length);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!validatePartBeforeE(first) || !validatePartAfterE(second)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>判断是否是十六进制：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isHex</span>(<span class="params">hex</span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">isValidChar</span>(<span class="params">c</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">const</span> validChar = [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>, <span class="string">"e"</span>, <span class="string">"f"</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; validChar.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (c === validChar[i]) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    hex = preProcessing(hex);</span><br><span class="line">    <span class="keyword">if</span> (!hex) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    hex = hex.toLowerCase();</span><br><span class="line">    <span class="keyword">if</span> (hex.startsWith(<span class="string">"0x"</span>)) &#123;</span><br><span class="line">        hex = hex.substring(<span class="number">2</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; hex.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="regexp">/[0-9]/</span>.test(hex.charAt(<span class="number">0</span>)) &amp;&amp; !isValidChar(hex.charAt(i))) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后通过 <code>Handler</code> 将上边的功能串联起来即可：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; s</span></span><br><span class="line"><span class="comment"> * @return &#123;boolean&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> isNumber = <span class="function"><span class="keyword">function</span> (<span class="params">s</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> isIntegerHandler = <span class="keyword">new</span> Handler(isInteger);</span><br><span class="line">    <span class="keyword">const</span> isFloatHandler = <span class="keyword">new</span> Handler(isFloat);</span><br><span class="line">    <span class="keyword">const</span> isScienceFormatHandler = <span class="keyword">new</span> Handler(isScienceFormat);</span><br><span class="line">    <span class="keyword">const</span> isHexHandler = <span class="keyword">new</span> Handler(isHex);</span><br><span class="line"></span><br><span class="line">    isIntegerHandler</span><br><span class="line">        .setNext(isFloatHandler)</span><br><span class="line">        .setNext(isScienceFormatHandler)</span><br><span class="line">        .setNext(isHexHandler);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> isIntegerHandler.passRequest(s);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>通过责任链的设计模式，每一个函数都可以很好的进行复用，并且未来如果要新增一种类型判断，只需要加到责任链中即可，和之前的判断也完全独立。</p>
<h1 id="易混设计模式"><a href="#易混设计模式" class="headerlink" title="易混设计模式"></a>易混设计模式</h1><p>说到沿着「链」执行，应该会想到 <a href="https://windliang.wang/2022/01/17/%E5%89%8D%E7%AB%AF%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B3%BB%E5%88%97-%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%A3%85%E9%A5%B0%E5%99%A8%E6%A8%A1%E5%BC%8F/">装饰器模式</a> 。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220204202859919.png" alt="image-20220204202859919"></p>
<p>它和责任链模式看起来结构上是一致的，我的理解上主要有两点不同：</p>
<ol>
<li>装饰器模式是对已有功能的增强，依次包装起来形成链式调用。而责任链模式从一开始就抽象出了很多功能，然后形成责任链。</li>
<li>装饰器模式会依次调用新增的功能直到最初的功能，责任链模式提供了一种中断的能力，调用到某个操作的时候可以直接终止掉，不是所有的功能都会调用。</li>
</ol>
<h1 id="总"><a href="#总" class="headerlink" title="总"></a>总</h1><p>当处理一件事情的时候发现会分很多种情况去讨论，此时可以考虑使用责任链模式进行功能的拆分，提高代码的复用性、扩展性以及可读性。</p>
<p>像 <code>js</code> 中底层的原型链、作用域链、<code>Dom</code> 元素的冒泡机制都可以看作是责任链模式的应用。</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>前端老项目接入eslint从配置到上线的一些思考</title>
    <url>/2022/09/21/%E5%89%8D%E7%AB%AF%E8%80%81%E9%A1%B9%E7%9B%AE%E6%8E%A5%E5%85%A5eslint%E5%85%A8%E8%BF%87%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>在日常需求迭代中，代码的规范与质量是编码的重要一环。<code>Eslint</code> 作为规则扫描器，能够对前端代码进行有效管控，避免出现低级错误，对于前端项目或多或少肯定都会看到 <code>eslint</code> 的相关配置。</p>
<p>但目前存在一些老项目， <code>eslint</code> 的配置仅仅停留在了多年前加的一些 <code>eslint</code> 规则上，没有任何其他动作，导致平常开发中有如下痛点：</p>
<ol>
<li>本地不方便开启保存自动格式化，因为对于老页面，如果开启的话会造成大量的无关 <code>diff</code>。</li>
<li>提交代码的时候会受到莫名其妙的卡控。</li>
<li>过 <code>pr</code> 的时候分号、空格、换行各个地方不对齐，逼死强迫症系列。</li>
</ol>
<p>基于此，前段时间对老项目的 <code>eslint</code> 进行了一次完善，分享一下整个配置和思考的过程。</p>
<h1 id="选取规则"><a href="#选取规则" class="headerlink" title="选取规则"></a>选取规则</h1><h2 id="eslint"><a href="#eslint" class="headerlink" title="eslint"></a>eslint</h2><p><code>eslint</code> 规则可以单独一条条配置，也有一些规则的集合比如官方推荐的 <code>eslint:recommended</code>，框架相关的 <a href="https://eslint.vuejs.org/user-guide/#installation" target="_blank" rel="noopener">plugin:vue/recommended</a>，还有公司开源出来的整套规则比如 <code>Airbnb</code> 的 <a href="https://github.com/airbnb/javascript/tree/master/packages/eslint-config-airbnb" target="_blank" rel="noopener">eslint-config-airbnb</a>，腾讯的 <a href="https://github.com/AlloyTeam/eslint-config-alloy" target="_blank" rel="noopener">eslint-config-alloy</a>。</p>
<p>选取什么规则不是非常重要，大部分规则集也是类似的，此外本地也可以定义相同的规则名对规则集进行覆盖。</p>
<p>以 <code>alloy</code> 的规则为例，按照 <a href="https://github.com/AlloyTeam/eslint-config-alloy" target="_blank" rel="noopener">eslint-config-alloy</a> 中的文档安装完相应的 <code>node</code> 包以后，在本地根目录中新建 <code>.eslintrc.js</code> 文件引入相应的规则。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    extends: [<span class="string">'alloy'</span>, <span class="string">'alloy/vue'</span>],</span><br><span class="line">    env: &#123;</span><br><span class="line">        <span class="comment">// 你的环境变量（包含多个预定义的全局变量）</span></span><br><span class="line">    &#125;,</span><br><span class="line">    globals: &#123;</span><br><span class="line">        <span class="comment">// 全局变量</span></span><br><span class="line">        moment: <span class="string">'readonly'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    rules: &#123;</span><br><span class="line">        <span class="comment">// 自定义你的规则 0-关闭，1-warn，2-error</span></span><br><span class="line">        <span class="string">'vue/component-tags-order'</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="string">'vue/no-deprecated-slot-attribute'</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="string">'vue/no-deprecated-slot-scope-attribute'</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="string">'vue/no-duplicate-attributes'</span>: [</span><br><span class="line">            <span class="string">'error'</span>,</span><br><span class="line">            &#123;</span><br><span class="line">                allowCoexistClass: <span class="literal">true</span>,</span><br><span class="line">                allowCoexistStyle: <span class="literal">true</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">        ],</span><br><span class="line">        <span class="string">'no-param-reassign'</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="string">'no-console'</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="string">'no-magic-numbers'</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="string">'default-case'</span>: <span class="number">2</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>如上所示，我们可以在 <code>rules</code> 中定义或者覆盖一些规则。</p>
<h2 id="Prettier"><a href="#Prettier" class="headerlink" title="Prettier"></a>Prettier</h2><p><code>Prettier</code> 是一个代码格式化工具，相比于 <code>eslint</code> 中的代码格式规则，它提供了更少的选项，却更加专业。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220923090302423.png" alt="image-20220923090302423"></p>
<p>相比于 <code>eslint</code>， <code>Prettier</code>  主要格式样式相关的，比如有没有分号、空格数、一行最大字符数等等，而 <code>eslint</code> 通过解析出代码的 <code>AST</code> ，可以自动格式化或者检测出一些潜在的问题，比如是否允许使用 <code>console</code>、变量声明但未使用、<code>switch</code> 缺少 <code>defaut</code> 等。</p>
<p>当然 <code>eslint</code> 也可以配置样式相关的规则，但存在一些情况 <code>eslint</code> 无法胜任，因此格式化相关的我们都交给更专业的 <code>Prettier</code> ，安装 <code>Prettier</code> 的 <code>node</code> 包，并且根目录增加配置文件 <code>.prettierrc.js</code> 。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// .prettierrc.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="comment">// 一行最多 120 字符</span></span><br><span class="line">    printWidth: <span class="number">120</span>,</span><br><span class="line">    <span class="comment">// 使用 4 个空格缩进</span></span><br><span class="line">    tabWidth: <span class="number">4</span>,</span><br><span class="line">    <span class="comment">// 不使用缩进符，而使用空格</span></span><br><span class="line">    useTabs: <span class="literal">false</span>,</span><br><span class="line">    <span class="comment">// 行尾需要有分号</span></span><br><span class="line">    semi: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// 使用单引号</span></span><br><span class="line">    singleQuote: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// 对象的 key 仅在必要时用引号</span></span><br><span class="line">    quoteProps: <span class="string">'as-needed'</span>,</span><br><span class="line">    <span class="comment">// jsx 不使用单引号，而使用双引号</span></span><br><span class="line">    jsxSingleQuote: <span class="literal">false</span>,</span><br><span class="line">    <span class="comment">// 末尾需要有逗号</span></span><br><span class="line">    trailingComma: <span class="string">'all'</span>,</span><br><span class="line">    <span class="comment">// 大括号内的首尾需要空格</span></span><br><span class="line">    bracketSpacing: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// jsx 标签的反尖括号需要换行</span></span><br><span class="line">    bracketSameLine: <span class="literal">false</span>,</span><br><span class="line">    <span class="comment">// 箭头函数，只有一个参数的时候，也需要括号</span></span><br><span class="line">    arrowParens: <span class="string">'always'</span>,</span><br><span class="line">    <span class="comment">// 每个文件格式化的范围是文件的全部内容</span></span><br><span class="line">    rangeStart: <span class="number">0</span>,</span><br><span class="line">    rangeEnd: <span class="literal">Infinity</span>,</span><br><span class="line">    <span class="comment">// 不需要写文件开头的 @prettier</span></span><br><span class="line">    requirePragma: <span class="literal">false</span>,</span><br><span class="line">    <span class="comment">// 不需要自动在文件开头插入 @prettier</span></span><br><span class="line">    insertPragma: <span class="literal">false</span>,</span><br><span class="line">    <span class="comment">// 使用默认的折行标准</span></span><br><span class="line">    proseWrap: <span class="string">'preserve'</span>,</span><br><span class="line">    <span class="comment">// 根据显示样式决定 html 要不要折行</span></span><br><span class="line">    htmlWhitespaceSensitivity: <span class="string">'css'</span>,</span><br><span class="line">    <span class="comment">// vue 文件中的 script 和 style 内不用缩进</span></span><br><span class="line">    vueIndentScriptAndStyle: <span class="literal">false</span>,</span><br><span class="line">    <span class="comment">// 换行符使用 lf</span></span><br><span class="line">    endOfLine: <span class="string">'lf'</span>,</span><br><span class="line">    <span class="comment">// 格式化内嵌代码</span></span><br><span class="line">    embeddedLanguageFormatting: <span class="string">'auto'</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h1 id="编辑器自动修复"><a href="#编辑器自动修复" class="headerlink" title="编辑器自动修复"></a>编辑器自动修复</h1><p><strong>这一步我认为是推动 <code>eslint</code> 最重要的一步</strong>，大家抗拒项目添加 <code>eslint</code> 一个很大的原因就是本地没有开启实时检查和自动修复，当提交 <code>commit</code> 的时候遇到 <code>eslint</code> 规则卡控就很难受了。</p>
<p>团队内都使用的 <code>VSCode</code> 进行开发，可以安装 <code>Eslint</code> 和 <code>Prettier</code> 插件。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220925113210716.png" alt="image-20220925113210716"></p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220925113256543.png" alt="image-20220925113256543"></p>
<p>在本地新增 <code>.vscode/settings.json</code> 文件进行插件的配置，并且该文件不忽略 <code>git</code> ，所有人共享。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"editor.defaultFormatter"</span>: <span class="string">"esbenp.prettier-vscode"</span>, <span class="comment">// 用 Prettier 格式化</span></span><br><span class="line">    <span class="string">"editor.codeActionsOnSave"</span>: &#123;</span><br><span class="line">        <span class="string">"source.fixAll.eslint"</span>: <span class="literal">true</span> <span class="comment">// 保存时自动进行 eslint 的修复</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"editor.formatOnSave"</span>: <span class="literal">true</span> <span class="comment">// 保存时自动格式化</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个文件是 <code>VSCode</code> 针对当前工程的配置，配置后保存文件的时候插件会自动帮助我们格式化，同时有实时的错误提示。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comKapture%202022-09-25%20at%2015.41.13.gif" alt="Kapture 2022-09-25 at 15.41.13"></p>
<p>这里需要注意的一点是，保存的时候会同时进行 <code>prettier</code> 和 <code>eslint</code> 的修复，如果 <code>eslint</code> 也配置了样式相关的规则，此时可能发生冲突，导致自动格式化后会有 <code>eslint</code> 的报错，此时可以将相应的 <code>eslint</code> 规则手动关闭，也可以引入 <a href="https://github.com/prettier/eslint-config-prettier" target="_blank" rel="noopener">eslint-config-prettier</a> 这个规则集批量关闭。</p>
<h1 id="commit-卡控"><a href="#commit-卡控" class="headerlink" title="commit 卡控"></a>commit 卡控</h1><p>为了保证 <code>eslint</code> 规则的有效，需要在提交 <code>commit</code> 的时候进行检查，如果存在没有修复的 <code>eslint</code> 问题直接终止提交。</p>
<p>直接使用 <code>&quot;husky&quot;: &quot;^1.3.1&quot;</code> 和 <code>&quot;lint-staged&quot;: &quot;^8.1.5&quot;</code>  两个 <code>node</code> 包，需要注意下版本号，最新的配置有些不同了，下边是该版本下的配置。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">"husky"</span>: &#123;</span><br><span class="line">  <span class="string">"hooks"</span>: &#123;</span><br><span class="line">    <span class="string">"pre-commit"</span>: <span class="string">"lint-staged"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line">  <span class="string">"lint-staged"</span>: &#123;</span><br><span class="line">    <span class="string">"linters"</span>: &#123;</span><br><span class="line">      <span class="string">"src/**/*.&#123;js,vue&#125;"</span>: [</span><br><span class="line">        <span class="string">"eslint --fix"</span>,</span><br><span class="line">        <span class="string">"git add"</span></span><br><span class="line">      ],</span><br><span class="line">        <span class="string">"src/**/*.&#123;js,vue,html,css,scss,sass&#125;"</span>: [</span><br><span class="line">          <span class="string">"prettier --write"</span>,</span><br><span class="line">          <span class="string">"git add"</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>
<p><code>husky</code> 提供了 <code>pre-commit</code> 的钩子，然后 <code>lint-staged</code> 对暂存区代码自动进行格式化，如果出错的话会直接退出。</p>
<p>这样当我们提交 <code>commit</code> 的时候就会运行 <code>eslint</code> 和 <code>prettier</code> 进行代码的格式化。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220925162909689.png" alt="image-20220925162909689"></p>
<h1 id="流水线卡控"><a href="#流水线卡控" class="headerlink" title="流水线卡控"></a>流水线卡控</h1><p>虽然上一步对 <code>commit</code> 进行了卡控，但如果 <code>git commit</code> 的时候添加了 <code>-n</code> 参数，卡控检查也就直接跳过了。</p>
<p>如果想彻底的卡控，我们可以在打包流水线上增加一个 <code>lint</code> 的插件进行检查。</p>
<p>这里实现卡控有两种思路：</p>
<ol>
<li><p>发布分支和 <code>master</code> 做 <code>diff</code>，仅仅对 <code>diff</code> 出的 <code>commit</code> 进行 <code>eslint</code> 的检查。</p>
<p>但这里可能存在两个问题需要注意：</p>
<p>如果本地合并 <code>master</code> 的时候产生了冲突，然后解决冲突会新提交一个 <code>commit</code> 。 此时 <code>diff</code> 出来的 <code>commit</code> 可能会包含其他人的代码，如果之前的代码没有 <code>lint</code> ，此时就需要自己 <code>lint</code> 了。</p>
<p>如果上线流程是先合并 <code>master</code> ，那么上线的时候 <code>master</code> 已经有了自己的代码，此时上线分支和 <code>master</code> 就没有任何 <code>diff</code> 了，所以也就起不到卡控的作用了。</p>
</li>
<li><p>卡控分支前 <code>n</code> 天的 <code>commit</code> 。</p>
<p>理想情况下，前 <code>n</code> 天只包含自己的 <code>commit</code> 和已经 <code>lint</code> 过的 <code>commit</code> ， <code>merge master</code> 的 <code>commit</code> 可以自动过滤掉，因此可以很好的对新加的代码进行卡控。</p>
<p>当然还是无法完全避免遇到别人没有 <code>lint</code> 过的代码，此时还是需要自己进行修复了。</p>
<p>具体逻辑可以参考这个 <a href="https://github.com/wyntau/lint-recently#readme" target="_blank" rel="noopener">node 包</a>。</p>
</li>
</ol>
<p>不管是哪种方法，因为是在老项目引入的 <code>lint</code> ，前期如果在流水线加 <code>lint</code> 卡控的话一定会遇到明明不是自己代码，却被 <code>lint</code> 卡控拦截的情况。</p>
<p>我个人看法是流水线 <code>lint</code> 其实不加也可以，如果编辑器自动修复添加了、<code>commit</code> 卡控也添加了，这已经足够了，如果真有人通过 <code>-n</code> 绕过卡控，那肯定是有理由的，也没必要走流水线再卡控。</p>
<h1 id="上线"><a href="#上线" class="headerlink" title="上线"></a>上线</h1><p>因为老项目中会有大量的不符合 <code>eslint</code> 规则的代码，因此上线有两种方案。</p>
<ol>
<li><p>本地进行全量文件的 <code>eslint --fix</code> 后上线：</p>
<p>优点：未来开发时原有文件的 <code>lint</code> 问题不用关心，开发者只需关注原有 <code>error</code> 和自己当前的 <code>lint</code> 问题即可。</p>
<p>缺点：由于改动文件数较多，<code>eslint</code> 不可完全信任，贸然上线可能会造成线上问题。</p>
</li>
<li><p>仅仅上线 <code>eslint</code> 的卡控和保存时自动 <code>lint</code> 的配置：</p>
<p>优点：未改动代码逻辑，不会存在引发线上问题的隐患。</p>
<p>缺点：当开发者修改、保存老文件后，会自动触发 <code>lint</code> 修复，从而污染混淆本身的修改，增加后续 <code>code review</code> 工作负担。</p>
</li>
</ol>
<p>我是偏向于第 <code>2</code> 个方案的，虽然 <code>eslint</code> 自动修复一般不会引起问题，但程序肯定是不能 <code>100%</code> 相信的，如果造成了线上问题反而得不偿失。</p>
<p>如果采用第 <code>2</code> 个方案，后续开发老页面保存的时候一定会出现大面积的自动 <code>lint</code>，我们可以在添加新代码前先保存一下触发 <code>lint</code> 并且提交一个 <code>msg</code> 为 <code>lint auto fix</code> 的  <code>commit</code> 。这样做有两个好处：</p>
<ol>
<li>后续其他人遇到问题代码排查的时候看到 <code>lint fix</code> 就知道了这行代码不是你写的，他需要再往前找一个 <code>commit</code> 的提交人。</li>
<li>过 <code>pr</code> 的时候我们可以按 <code>commit</code> 看，第一个 <code>lint</code> 的 <code>commit</code> 如果没什么问题可以直接跳过，减轻 <code>cr</code> 的负担。</li>
</ol>
<h1 id="总"><a href="#总" class="headerlink" title="总"></a>总</h1><p>在业务迭代繁忙的时候，想在老项目中引入 <code>eslint</code> 其实还挺难的，毕竟业务价值很难讲清楚，一个反向逻辑就是现在项目没有 <code>eslint</code> 也运行的好好的，但加入 <code>eslint</code> 有什么收益呢？</p>
<p>另一方面，当有人推动项目 <code>eslint</code> 的规则的时候仅仅添加规则和卡控，其他的步骤不去推动，当越来越多人遇到需要手动修复 <code>eslint</code> 或者因为 <code>eslint</code> 的问题被卡控提交，内心就会不断地增加对 <code>eslint</code> 的抗拒。</p>
<p>在安装相关插件、<code>node</code> 包的时候<strong>需要注意下版本号</strong>，找到匹配自己包的版本号的配置，不然可能会遇到配置了但不生效的问题。</p>
<p>当有新项目开发的时候，一定要把 <code>eslint</code> 的自动修复、相关配置都搞好，这样开发的时候也舒服，未来也不用再进行 <code>eslint</code> 的治理了。</p>
<p>未来也可以结合平时开发的经验和发生的线上问题，逐步完善 <code>eslint</code> 中的 <code>rules</code> 规则，使得项目代码质量越来越高。</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>eslint</tag>
      </tags>
  </entry>
  <entry>
    <title>在美团工作的第一年</title>
    <url>/2021/05/29/%E5%9C%A8%E7%BE%8E%E5%9B%A2%E5%B7%A5%E4%BD%9C%E7%9A%84%E7%AC%AC%E4%B8%80%E5%B9%B4/</url>
    <content><![CDATA[<p>时间真是快，转眼间变成打工人也有一年的时间了，最近几天朋友圈被各个同学的答辩刷屏了。去年自己过年回到家里，再回学校就是领毕业证了，经历了可能是唯一一年的云答辩。学生时代的最后一年，对未来的工作充满了想象，一直想知道工作后会是什么样子，每天会干些什么，这里就分享一下自己一年以来在美团的工作和生活。</p>
<h1 id="对接的伙伴"><a href="#对接的伙伴" class="headerlink" title="对接的伙伴"></a>对接的伙伴</h1><p>学生时代自己做软件的话，前端、后端、设计、测试可能都需要自己来搞，但在公司的话一切都分工明确。主要过程就是需求评审 -&gt; 排期 -&gt; 前后端开发 -&gt; 联调提测 -&gt; 测试 -&gt; 回归上线。</p>
<ul>
<li><p>需求评审</p>
<p>首先产品（<code>PM</code>）给出需求文档（<code>prd</code>），每周的话会拉前端、后端、测试（<code>QA</code>）大家一起开需求评审会，介绍需求的背景、本期要做的东西，有问题的话在会上进行讨论。</p>
<p>期间产品会找设计要设计稿和交互图，类似于下边这种</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/meituan1.jpg" alt="img"></p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/meituan3.jpg" alt="img"></p>
<p>每一个地方详细标好了大小、间距、颜色、圆角等属性，前端的工作就是还原设计稿，并且实现交互。</p>
</li>
<li><p>排期</p>
<p>我觉得这是对新人最麻烦的事情了，有了设计稿以后前后端就需要估算需要完成的时间，单位是 <code>pd</code>，也就是 <code>person day</code>（每人每天），对于大需求的话可能需要 <code>6 pd</code>，如果两个人的话就会排 <code>3</code> 天的时间去开发。</p>
<p>然后前端、后端、<code>QA</code>一起对一下时间，定下开发、联调、测试、上线的时间，比如 <code>6.1 ～ 6.3</code> 开发，<code>6.4 ～ 6.5</code> 联调，<code>6.6</code> QA 测试，<code>6.7</code> 上线。</p>
<p>排期麻烦的地方在于，估时少了，那你到最后一天还差的多的话就得加班加时了，甚至造成需求延期。估时多了，如果是 <code>0.5 pd</code>或者 <code>1pd</code> 的 <code>buffer</code> 还可以，但太多的话你的 <code>leader</code> 可能就会找你谈话了。</p>
<p>自己一年来收获的经验就是对于一个大需求，<strong>一定要把事情分割，每天都完成具体的目标，没完成的话当天一定要赶完</strong>，这样到最后一天就不会出现什么问题了。</p>
<p>如果造成了需求 <code>delay</code>，因为大家时间都是提前排好的，因为你一个人造成推迟，后边大家配合你再改排期很不好，也很麻烦。</p>
</li>
<li><p>联调提测</p>
<p>前端开发的时候因为还没有接口，所以开始的时候会根据后端给的接口文档在本地 <code>mock</code>(模拟) 数据进行开发。前后端开发都完毕后，就是联调时间，会真正走后端的接口请求数据，接口调通后，会根据 <code>QA</code> 给出的测试 <code>case</code> ，比如翻页是不是正常、下拉加载数据有没有刷新等等，一条一条的进行测试。当 <code>case</code> 全部通过以后，就会提交测试，交由 <code>QA</code> 继续。</p>
</li>
<li><p>测试</p>
<p><code>QA</code> 给到开发的属于冒烟测试，也就是一些主要的功能，更细节的一些东西 <code>QA</code> 会继续测试。测试环境的话主要有两种，一种是测试环境，测试环境的数据有的是从线上拉下来的，有的是自己造的。一种是 <code>staging</code> 环境，也就是预发布环境，这些数据和线上是打通的，会为了测试建一些专用的门店、数据。 <code>QA</code> 会在两种环境都进行测试，因为一些神奇的 <code>Bug</code> 在测试环境没有出现，在 <code>staging</code> 环境才能测试出来。</p>
</li>
<li><p>回归上线</p>
<p>对于小程序开发，因为需要微信那边审核，所以并不能随时开发、随时上线。一般都会固定一周的某几天进行上线。上线前，因为会有不同的需求在同一个小程序项目中开发，所以会将大家的代码合在一起，不同需求的 <code>QA</code> 会再在 <code>staging</code> 环境再回归一次自己的测试 <code>case</code> 。大家全部回归完毕后，就会进行上线，上线完毕后观察线上各个指标是否正常，有异常的话要尽快回滚。</p>
</li>
</ul>
<h1 id="工作时间"><a href="#工作时间" class="headerlink" title="工作时间"></a>工作时间</h1><p>互联网的工作时间，在 <code>996</code> 的声音中经常出现在各个 <code>app</code> 的话题中。我虽然只工作了一年，但却体验了双休、<code>996</code>、大小周，哈哈，把互联网公司的工作时间都经历了一遍。</p>
<ul>
<li><p>双休</p>
<p>去年 <code>5</code> 月进入美团实习的时候，我还是在上海的到店事业群，现在看来真的是养老生活了。</p>
<p>每天早上 <code>10</code> 点上班，去了公司接一杯美团的白开水，开始一天的代码之旅。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/meituan4.jpg" alt="img"></p>
<p>到了中午 <code>12</code> 点，公司没有自己的食堂，一般和同事出去到周围的饭店吃，或者在美团点个美团外卖，当然也可以点饿了么。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/meituan5.jpg" alt="img"></p>
<p>吃完饭会在公司周围散散步，聊聊天，然后回到公司。</p>
<p>回到公司一般快 <code>1</code> 点，做到工位上拿出手机刷刷知识星球、看看微信读书，<code>1</code> 点半的时候准时睡觉，睡到 <code>2</code> 点的时候继续干活。</p>
<p>到了两点，继续肝代码。期间和同事讨论讨论问题，写写需求，或者开开会，然后又到了吃饭的时候。</p>
<p>下午 <code>6</code> 点的时候，继续吃饭、散步，<code>7</code> 点左右的时候回到公司。</p>
<p>然后「摸会儿鱼」，到了 <code>8</code> 点准时打卡回家，因为到 <code>8</code> 点美团会有 <code>30</code> 块钱餐补。</p>
<p>家住的比较近，<code>10</code> 分钟回家后，换好衣服甚至还能出去跑个步，回来后和女朋友聊聊天、网上逛逛、写写文章、再学学英语，完美的一天结束！</p>
<p>到了周五晚上，<code>6</code> 点直接下班，开启两天周末时光，出去看看电影、逛逛公园或者继续学习学习，撸撸猫、晒晒太阳。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/meituan6.jpg" alt="img"></p>
</li>
<li><p><code>996</code></p>
<p>开启 <code>996</code> 的生活，是因为最近一年比较热的「社区团购」，美团主要是「美团优选」，还有拼多多的「多多买菜」、滴滴的「橙心优选」。区别于外卖的及时配送，社区团购是预购模式，也就是今天下单，第二天到自提点自己拿。对于企业来说，用户买多少就到供应商拿多少，省了很多成本。对于用户来说，价格相对也会更便宜。</p>
<p>去年 <code>11</code> 月我们组被抽调过去支持美团优选业务，从此开启了 <code>996</code> 生活。</p>
<p><code>10</code> 点开始上班，然后白天时间和上边的基本一样，但到了晚上 <code>8</code> 点的时候就不再是打卡走人了，一般都是到晚上 <code>10</code> 点，忙的时候 <code>11</code> 点、<code>12</code> 点也可能。然后下班回去，铲铲猫屎，乱七八糟搞一搞，就睡觉了。</p>
<p>星期六的话也是继续上班，唯一的好处是会给双倍工资，甚至开水团周六都给提供了小吃。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/meituan7.jpg" alt="img"></p>
<p><code>996</code> 期间最大的感受就是没有了生活，感觉一直是在上班。周日早上睡个懒觉，到中午起来点个外卖，边吃外卖边看会儿综艺，然后发现下午也快过去了，再一想第二天就又要开始 <code>6</code> 天的上班了，太难了。</p>
</li>
<li><p>大小周</p>
<p><code>996</code> 持续到了今年过年，年后改为了大小周。有一说一，经历过了 <code>996</code> 之后，大小周都感觉真香了。轮到双休的时候，到了周六晚上一想，天呐，明天还是休息，太幸福了。现在随着业务的迭代，需求比最开始也少很多了，每天 <code>9</code> 点半基本就下班了，回家以后也会有时间做一些其他的事情，这个状态目前看来还是可以的。</p>
</li>
</ul>
<h1 id="在公司做的事情"><a href="#在公司做的事情" class="headerlink" title="在公司做的事情"></a>在公司做的事情</h1><p>在公司做的项目总体上分两类，一类是业务需求，分为 <code>B</code> 端、<code>c</code> 端、<code>M</code> 端。<code>B</code> 端之前我是给商家做评价分析的工具，比如肯德基、<code>coco</code> 这些商家的评论数据、销售数据，给他们的运营用。现在我主要是做 <code>C</code> 端，也就是微信的美团优选小程序。还会做一些 <code>M</code> 端项目，公司内部的运营人员会使用。</p>
<p>另一类就是技术方面的需求， 会做一些工具提升平时开发的效率、做一些数据类的产品，用来整合各个项目的数据等等。</p>
<p>上边的项目压力最大的就是 <code>C</code> 端项目了，因为它的用户量非常非常大，毕竟开发的小程序是在阿拉丁指数里排第 <code>3</code>。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/meituan8.jpg" alt="img"></p>
<p>如果出了一点 <code>bug</code> ，最终的影响面会非常广。因此开发的时候一定要非常小心，一些错误的捕捉，极端情况都需要多多考虑。</p>
<p>除了项目本身的需求，公司对一些性能指标也会很关注，比如秒开率、白屏率等，还有就是对线上的项目的监控也尤为重要，因此也需要完善的日志系统、告警系统等，这些都属于公司的基建项目，一般直接调用就可以。</p>
<p>另外感觉最挫败的就是一些 <code>bug</code> 是真的解决不了，最大的问题就是这些 <code>bug</code> 无法在本地自己复现，只是看到线上日志上有很多的报错，然而却并不知道为什么。只能不停的试，然后上线，然后再观察，很难受。</p>
<h1 id="绩效以及晋升"><a href="#绩效以及晋升" class="headerlink" title="绩效以及晋升"></a>绩效以及晋升</h1><p>这是上班和之前学生时期唯一像的地方了。很多公司都会划分出很多职级，比如美团 <code>L5</code>、<code>L6</code>、<code>L7</code>，阿里的 <code>P6</code>、<code>P7</code>，腾讯的 <code>2-1</code>、<code>2-2</code>、<code>3-1</code> 等等。</p>
<p>校招生入职美团是 <code>L5</code>，然后每年会有固定的时间去晋升，晋升前需要准备好材料，介绍你在公司做了什么，为公司提供了什么价值，未来你会做什么等等，然后会在评委面前讲一遍，评委是部门里各个业务线的 <code>leader</code> 们，结束后他们又会问一些问题。哈哈，是不是有毕业答辩的感觉了。</p>
<p>除了晋升，然后就是每个季度的述职了，这个主要是自己组内的，互相讲一讲大家各自做的项目。由于平时主要做一些业务需求，这个总结也比较难写，要根据 <code>STAR</code> 原则理出来自己的东西，然后再写，我是感觉很痛苦，不如写代码快乐。之后 <code>leader</code> 会结合述职以及平时的表现打绩效，绩效的话就和最后的年终奖挂钩了。比如美团是 <code>15.5</code> 个月的工资，除去一年 <code>12</code> 个月，剩下的 <code>3.5</code> 就是绩效工资了。</p>
<h1 id="未来"><a href="#未来" class="headerlink" title="未来"></a>未来</h1><p>工作一年也渐渐适应了打工人的生活，相比于学生时期，甚至开始有些怀念了。学生时期，想几点睡就几点睡，因为第二天起晚也没有关系。吃饭、打球约上小伙伴想啥时候打就啥时候打。编程的话，想学习什么就学习什么，感觉有大把的时间，当时每天的 <a href="https://leetcode.wang/leetcode力扣刷题1到300的感受.html" target="_blank" rel="noopener">leetcode</a> 现在是不敢想了。总结就是，学生时期除了钱少一些，真的是完美生活了。现在吃饭的话题就变成了买房、股票、生娃了，然而我却觉得我还是个孩子。</p>
<p>未来主要是两个方向吧，一方面就是技术的提高，自己是做前端方向的，做的越多就发现不会的越多，还是需要不断的学习提高。另一方面就是英语了，程序员英语的话虽然平时工作遇不到，但如果技术上想要有更多的进步，肯定还是需要用英语在社区上和世界各地的人交流的。</p>
<p>最后，还是那句话，越努力，越幸运，共勉～</p>
]]></content>
      <categories>
        <category>随想</category>
      </categories>
      <tags>
        <tag>美团</tag>
      </tags>
  </entry>
  <entry>
    <title>前端的设计模式系列-观察者模式</title>
    <url>/2022/01/27/%E5%89%8D%E7%AB%AF%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B3%BB%E5%88%97-%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F-%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<p>代码也写了几年了，设计模式处于看了忘，忘了看的状态，最近对设计模式有了点感觉，索性就再学习总结下吧。</p>
<p>大部分讲设计模式的文章都是使用的 <code>Java</code>、<code>C++</code> 这样的以类为基础的静态类型语言，作为前端开发者，<code>js</code> 这门基于原型的动态语言，函数成为了一等公民，在实现一些设计模式上稍显不同，甚至简单到不像使用了设计模式，有时候也会产生些困惑。</p>
<p>下面按照「场景」-「设计模式定义」- 「代码实现」-「总」的顺序来总结一下，如有不当之处，欢迎交流讨论。</p>
<h1 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h1><p>假设我们在开发一款外卖网站，进入网站的时候，第一步需要去请求后端接口得到用户的常用外卖地址。然后再去请求其他接口、渲染页面。如果什么都不考虑可能会直接这样写：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// getAddress 异步请求</span></span><br><span class="line"><span class="comment">// 页面里有三个模块 A，B，C 需要拿到地址后再进行下一步</span></span><br><span class="line"><span class="comment">// A、B、C 三个模块都是不同人写的，提供了不同的方法供我们调用</span></span><br><span class="line"></span><br><span class="line">getAddress().then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> address = res.address;</span><br><span class="line">  A.update(address)</span><br><span class="line">  B.next(address)</span><br><span class="line">  C.change(address)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>此时页面里多了一个模块 <code>D</code> ，同样需要拿到地址后进行下一步操作，我们只好去翻请求地址的代码把 <code>D</code> 模块的调用补上。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// getAddress 异步请求</span></span><br><span class="line"><span class="comment">// 页面里有三个模块 A，B，C 需要拿到地址后再进行下一步</span></span><br><span class="line"><span class="comment">// A、B、C 三个模块都是不同人写的，提供了不同的方法供我们调用</span></span><br><span class="line"></span><br><span class="line">getAddress().then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> address = res.address;</span><br><span class="line">  A.update(address)</span><br><span class="line">  B.next(address)</span><br><span class="line">  C.change(address)</span><br><span class="line">  D.init(address)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>可以看到各个模块和获取地址模块耦合严重，<code>A</code>、<code>B</code>、<code>C</code> 模块有变化或者有新增模块，都需要深入到获取地址的代码去修改，一不小心可能就改出问题了。</p>
<p>此时就需要观察者模式了。</p>
<h1 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h1><p>可以看下 <a href="https://en.wikipedia.org/wiki/Observer_pattern#cite_note-5" target="_blank" rel="noopener">维基百科</a>的介绍：</p>
<blockquote>
<p>The <strong>observer pattern</strong> is a <a href="https://en.wikipedia.org/wiki/Software_design_pattern" target="_blank" rel="noopener">software design pattern</a> in which an <a href="https://en.wikipedia.org/wiki/Object_(computer_science" target="_blank" rel="noopener">object</a>#Objects_in_object-oriented_programming), named the <strong>subject</strong>, maintains a list of its dependents, called <strong>observers</strong>, and notifies them automatically of any state changes, usually by calling one of their <a href="https://en.wikipedia.org/wiki/Method_(computer_science" target="_blank" rel="noopener">methods</a>).</p>
</blockquote>
<p>很好理解的一个设计模式，有一个 <code>subject</code> 对象，然后有很多 <code>observers</code> 观察者对象，当 <code>subject</code> 对象有变化的时候去通知 <code>observer</code> 对象即可。</p>
<p>再看一下 <code>UML</code> 图和时序图：</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220127110751274.png" alt="image-20220127110751274"></p>
<p>每一个观察者都实现了 <code>update</code> 方法，并且调用 <code>Subject</code> 对象的 <code>attach</code> 方法订阅变化。当 <code>Subject</code> 变化时，调用 <code>Observer</code> 的 <code>update</code> 方法去通知观察者。</p>
<p>先用 <code>java</code> 写一个简单的例子：</p>
<p>公众号文章可以看作是 <code>Subject</code> ，会不定期更新。然后每一个用户都是一个 <code>Observer</code> ，订阅公众号，当更新的时候就可以第一时间收到消息。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 提取 Subject 的公共部分</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ArrayList&lt;Observer&gt; list = <span class="keyword">new</span> ArrayList&lt;Observer&gt;();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attach</span><span class="params">(Observer observer)</span></span>&#123;</span><br><span class="line">        list.add(observer);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">detach</span><span class="params">(Observer observer)</span></span>&#123;</span><br><span class="line">        list.remove(observer);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyObserver</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(Observer observer : list)&#123;</span><br><span class="line">            observer.update();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 具体的公众号，提供写文章和得到文章</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WindLiang</span> <span class="keyword">extends</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String post;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writePost</span><span class="params">(String p)</span> </span>&#123;</span><br><span class="line">        post = p;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPost</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> post;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 小明</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">XiaoMing</span> <span class="keyword">implements</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> WindLiang subject;</span><br><span class="line"></span><br><span class="line">    XiaoMing(WindLiang sub) &#123;</span><br><span class="line">        subject = sub;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String post = subject.getPost();</span><br><span class="line">        System.out.println(<span class="string">"我收到了"</span> + post + <span class="string">" 并且点了个赞"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 小杨</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">XiaoYang</span> <span class="keyword">implements</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> WindLiang subject;</span><br><span class="line"></span><br><span class="line">    XiaoYang(WindLiang sub) &#123;</span><br><span class="line">        subject = sub;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String post = subject.getPost();</span><br><span class="line">        System.out.println(<span class="string">"我收到了"</span> + post + <span class="string">" 并且转发了"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 小刚</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">XiaoGang</span> <span class="keyword">implements</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> WindLiang subject;</span><br><span class="line"></span><br><span class="line">    XiaoGang(WindLiang sub) &#123;</span><br><span class="line">        subject = sub;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String post = subject.getPost();</span><br><span class="line">        System.out.println(<span class="string">"我收到了"</span> + post + <span class="string">" 并且收藏"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        WindLiang windliang = <span class="keyword">new</span> WindLiang(); <span class="comment">// Subject</span></span><br><span class="line">        XiaoMing xiaoMing = <span class="keyword">new</span> XiaoMing(windliang);</span><br><span class="line">        XiaoYang xiaoYang = <span class="keyword">new</span> XiaoYang(windliang);</span><br><span class="line">        XiaoGang xiaoGang = <span class="keyword">new</span> XiaoGang(windliang);</span><br><span class="line">      </span><br><span class="line">        <span class="comment">// 添加观察者</span></span><br><span class="line">        windliang.attach(xiaoMing);</span><br><span class="line">        windliang.attach(xiaoYang);</span><br><span class="line">        windliang.attach(xiaoGang);</span><br><span class="line"></span><br><span class="line">        windliang.writePost(<span class="string">"新文章-观察者模式，balabala"</span>); <span class="comment">// 更新文章</span></span><br><span class="line">        windliang.notifyObserver(); <span class="comment">// 通知观察者</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出结果如下：</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220129125814418.png" alt=""></p>
<p>上边的实现主要是为了符合最原始的定义，调用 <code>update</code> 的时候没有传参。如果观察者需要的参数是一致的，其实这里也可以直接把更新后的数据传过去，这样观察者就不需要向上边一样再去调用 <code>subject.getPost()</code> 手动拿更新后的数据了。</p>
<p>这两种不同的方式前者叫做拉 <code>(pull)</code> 模式，就是收到 <code>Subject</code> 的通知后，通过内部的 <code>Subject</code>  对象调用相应的方法去拿到需要的数据。</p>
<p>后者叫做推 <code>(push)</code> 模式，<code>Subject</code> 更新的时候就将数据推给观察者，观察者直接使用即可。</p>
<p>下边用 <code>js</code> 改写为推模式：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> WindLiang = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> list = [];</span><br><span class="line">    <span class="keyword">let</span> post = <span class="string">"还没更新"</span>;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        attach(update) &#123;</span><br><span class="line">            list.push(update);</span><br><span class="line">        &#125;,</span><br><span class="line">        detach(update) &#123;</span><br><span class="line">            <span class="keyword">let</span> findIndex = <span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; list.length; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (list[i] === update) &#123;</span><br><span class="line">                    findIndex = i;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (findIndex !== <span class="number">-1</span>) &#123;</span><br><span class="line">                list.splice(findIndex, <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        notifyObserver() &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; list.length; i++) &#123;</span><br><span class="line">                list[i](post);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        writePost(p) &#123;</span><br><span class="line">            post = p;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> XiaoMing = &#123;</span><br><span class="line">    update(post)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"我收到了"</span> + post + <span class="string">" 并且点了个赞"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> XiaoYang = &#123;</span><br><span class="line">    update(post)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"我收到了"</span> + post + <span class="string">" 并且转发了"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> XiaoGang = &#123;</span><br><span class="line">    update(post)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"我收到了"</span> + post + <span class="string">" 并且收藏"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">windliang = WindLiang();</span><br><span class="line"></span><br><span class="line">windliang.attach(XiaoMing.update)</span><br><span class="line">windliang.attach(XiaoYang.update)</span><br><span class="line">windliang.attach(XiaoGang.update)</span><br><span class="line"></span><br><span class="line">windliang.writePost(<span class="string">"新文章-观察者模式，balabala"</span>)</span><br><span class="line">windliang.notifyObserver()</span><br></pre></td></tr></table></figure>
<p>在 <code>js</code> 中，我们可以直接将 <code>update</code> 方法传给 <code>Subject</code> ，同时采取推模式，调用 <code>update</code> 的时候直接将数据传给观察者，看起来会简洁很多。</p>
<h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><p>回到开头的场景，我们可以利用观察者模式将获取地址后的一系列后续操作解耦出来。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 页面里有三个模块 A，B，C 需要拿到地址后再进行下一步</span></span><br><span class="line"><span class="comment">// A、B、C 三个模块都是不同人写的，提供了不同的方法供我们调用</span></span><br><span class="line"><span class="keyword">const</span> observers = []</span><br><span class="line"><span class="comment">// 注册观察者</span></span><br><span class="line">observers.push(A.update)</span><br><span class="line">observers.push(B.next)</span><br><span class="line">obervers.push(C.change)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// getAddress 异步请求</span></span><br><span class="line">getAddress().then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> address = res.address;</span><br><span class="line">  observers.forEach(<span class="function"><span class="params">update</span> =&gt;</span> update(address))</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>通过观察者模式我们将获取地址后的操作解耦了出来，未来有新增模块只需要注册观察者即可。</p>
<p>当 <code>getAddress</code> 很复杂的时候，通过观察者模式会使得未来的改动变得清晰，不会影响到 <code>getAddress</code> 的逻辑。</p>
<p>必要的话也可以把 <code>observers</code> 抽离到一个新的文件作为一个新模块，防止让一个文件变得过于臃肿。</p>
<h1 id="总"><a href="#总" class="headerlink" title="总"></a>总</h1><p>观察者模式比较好理解，通过抽象出一个 <code>Subject</code> 和多个观察者，减轻了它们之间的过度耦合。再说简单点就是利用回调函数，异步完成后调用传入的回调即可。但上边写的观察者模式还是有一些缺点：</p>
<ul>
<li><code>Subject</code> 仍需要自己维护一个观察者列表，进行 <code>push</code> 和 <code>update</code>。</li>
<li>如果有其他的模块也需要使用观察者模式，还需要模块本身再维护一个新的观察者列表，而不能复用之前的代码。</li>
<li><code>Subject</code> 需要知道观察者提供了什么方法以便未来的时候进行回调。</li>
</ul>
<p>下一篇文章会继续改进上边的写法，观察者模式的本质思想不变（某个对象变化，然后通知其他观察者对象进行更新）。</p>
<p>但写法上会引入一个中间平台，便于代码更好的复用，使得 <code>Subject</code> 和观察者进行更加彻底的解耦，同时给了它一个新的名字「发布订阅模式」。</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>小程序神奇字体的从零到一</title>
    <url>/2019/05/06/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%A5%9E%E5%A5%87%E5%AD%97%E4%BD%93%E7%9A%84%E4%BB%8E%E9%9B%B6%E5%88%B0%E4%B8%80/</url>
    <content><![CDATA[<p>成品是下边的小程序，神奇字体，可以生成不同样式的字体，𝓘 𝓵𝓸𝓿𝓮 𝔂𝓸𝓾 𝓽𝓱𝓻𝓮𝓮 𝓽𝓱𝓸𝓾𝓼𝓪𝓷𝓭. 在各个平台使用。</p>
<p><img src="https://windliang.oss-cn-beijing.aliyuncs.com/mini.png" alt=""></p>
<p>从 5 月 2 号晚上开始构思执行，到 3 号凌晨上线 web，到 4 号上线小程序「神奇字体」， 到今天 6 号成功开通了流量主，应该能赚点零花钱，哈哈哈哈。复盘一下整个过程，自己遇到的问题，自己使用的工具。</p>
<blockquote>
<p>2 号下午</p>
</blockquote>
<p>在微信群里看到有人问 𝙄 𝙡𝙤𝙫𝙚 𝙮𝙤𝙪 𝙩𝙝𝙧𝙚𝙚 𝙩𝙝𝙤𝙪𝙨𝙖𝙣𝙙. 是怎么生成的？</p>
<p>晚上碰到电脑，就开始研究，直到凌晨 3 点多完成了 text.windliang.cc 网页的上线和在石墨写了一篇总结的文章 <a href="https://shimo.im/docs/onTnczeeCkY607ug/" target="_blank" rel="noopener">https://shimo.im/docs/onTnczeeCkY607ug/</a> 。</p>
<p>原文如下：</p>
<hr>
<p>最后的成果，<a href="http://text.windliang.cc" target="_blank" rel="noopener">http://text.windliang.cc/</a></p>
<p>说一下自己的脑回路。</p>
<p>昨天下午在微信群看到有人问，下图的英文怎么打出来的。</p>
<p>​         <img src="https://windliang.oss-cn-beijing.aliyuncs.com/shimo1.png" alt="img">       </p>
<p>作为一个学计算机的，这我就不服了，于是开始了探索之路。</p>
<p>首先想到了 Unicode 字符集，一定是这里作怪，晚上回去后，开始试验。</p>
<p>直接复制这句话，到浏览器控制台。</p>
<p>​         <img src="https://windliang.oss-cn-beijing.aliyuncs.com/shimo2.png" alt="img">       </p>
<p>没什么问题，然后去掉所有字母，只保留第一个字母  “𝙄”，并且输出一下它的长度。</p>
<p>​         <img src="https://windliang.oss-cn-beijing.aliyuncs.com/shimo3.png" alt="img">       </p>
<p>果然是 2，之所以 2 就是因为 js 内部是用 utf-16 编码，正常情况是 2 个字节代表一个字符。比如正常的 a 字符，它内部字节就是 0x0061。而后来扩充了很多字符，一个字符就需要 4 个字节表示，我们一直用的 emoji 字符就是这样的。</p>
<p>​         <img src="https://windliang.oss-cn-beijing.aliyuncs.com/shimo4.png" alt="img">       </p>
<p>这块是很大一块内容，先不说了，接着讲后边的事情。</p>
<p>知道了这个以后，自己当然想着，就做一个转任意字母的网页吧，然后问题又来了？这些字符的码点值都是多少？</p>
<p>​         <img src="https://windliang.oss-cn-beijing.aliyuncs.com/shimo5.png" alt="img">       </p>
<p>可以看到 “𝙄” 码点值是 0x1d644。然后就去查 Unicode 所有的码点值了，然后就找到了下边的网站。<a href="https://www.unicode.org/charts/" target="_blank" rel="noopener">https://www.unicode.org/charts/</a>。</p>
<p>​         <img src="https://windliang.oss-cn-beijing.aliyuncs.com/shimo6.png" alt="img">       </p>
<p>这里包含了所有的字符集，那怎么找到我们要的呢？观察到他每一个都是 PDF 链接，而且命名都是以码点范围来命名的。于是</p>
<p>​         <img src="https://windliang.oss-cn-beijing.aliyuncs.com/shimo7.png" alt="img">       </p>
<p>直接打开控制台去搜，就找到了我们要找的那个字符。发现他是 Mathematical Alphanumeric Symbols 下的，数学字母数字符号。</p>
<p>​         <img src="https://windliang.oss-cn-beijing.aliyuncs.com/shimo8.png" alt="img">       </p>
<p>万事俱备，只欠东风，有了对应关系，只需要做加法就行了，下边几句就是代码的关键了。</p>
<p>​         <img src="https://windliang.oss-cn-beijing.aliyuncs.com/shimo9.png" alt="img">       </p>
<p>由于最近看了几天 Vue 的书，想着就当一个练手项目吧，于是就敲着敲着，就好晚了。</p>
<p>至此，<a href="http://text.windliang.cc" target="_blank" rel="noopener">http://text.windliang.cc</a>   诞生了。</p>
<hr>
<p>网站我直接使用的 github 的 pages 服务，简单来说，它可以免费托管任何的静态网站，本意是用来写博客的，但我觉得可能被我玩坏了，写了好多网页都直接部署在上边，方便快捷不要钱。它会提供 github.io 的域名，也可以使用自己的域名。我直接用了自己的 windliang.cc 域名，然后绑了二级域名 text，域名现在很便宜的，一年也就几十块钱，而且买了域名后，二级域名也可以绑理论上无数个域名，例如我的  <a href="http://idea.windliang.cc" target="_blank" rel="noopener">http://idea.windliang.cc</a>  ，<a href="http://love.windliang.cc" target="_blank" rel="noopener">http://love.windliang.cc</a> ，<a href="http://leetcode.windliang.cc" target="_blank" rel="noopener">http://leetcode.windliang.cc</a> 都是同一个域名下的，而且都是在 github 上放着。</p>
<p>之前写的网页都没有加网站访问量的，那天晚上突然想到这个程序也许会火呀，就加了一个最简单的流量统计，<a href="https://busuanzi.ibruce.info/" target="_blank" rel="noopener">不蒜子</a>提供的统计服务，简单到什么程度呢，加一句代码，就知道网站访问量，当然也只有访问量。</p>
<p><img src="https://windliang.oss-cn-beijing.aliyuncs.com/busuanzi.jpg" alt=""></p>
<p>之后分别在朋友圈和知识星球「帅张和他的朋友们」发了一下就睡了，此时已经是凌晨 3 点了，每次一写程序总是停不下来，哈哈哈哈哈哈哈哈哈。</p>
<p><img src="https://windliang.oss-cn-beijing.aliyuncs.com/friend.jpg" alt=""></p>
<p><img src="https://windliang.oss-cn-beijing.aliyuncs.com/zhishi.png" alt=""></p>
<blockquote>
<p>3 号上午</p>
</blockquote>
<p>9 点起来后，网页的浏览量已经过千了，然后分别在微信群「大猫城堡」和「增长黑盒」发了自己的网页，然后就又睡了，再起来就 12 点多了。</p>
<p><img src="https://windliang.oss-cn-beijing.aliyuncs.com/cat.jpg" alt=""></p>
<p><img src="https://windliang.oss-cn-beijing.aliyuncs.com/black.jpg" alt=""></p>
<p>然后发现大家在群里都反馈的不错，并且都试用了一下，有很多群友建议可以做一个小程序，认识了 @森淼。 由于之前也没有接触过小程序，然后下午就开始研究了。</p>
<p>期间 @增长黑盒 Alan帮推了朋友圈，下午的时候发现网页浏览量在持续上升，我记得好像有两三千了。晚上的时候，同学又和我说在即刻看见 @刀姐doris 帮推了一下。</p>
<p><img src="https://windliang.oss-cn-beijing.aliyuncs.com/alan.png" alt=""></p>
<p><img src="https://windliang.oss-cn-beijing.aliyuncs.com/doris.jpg" alt=""></p>
<blockquote>
<p>3 号晚上</p>
</blockquote>
<p>到了 22：20 ，小程序基本功能实现，然后和女朋友要图标，哈哈哈哈。</p>
<p><img src="https://windliang.oss-cn-beijing.aliyuncs.com/tim.jpg" alt=""></p>
<p>然后处理了一下细节，23：44 提交了小程序，发了朋友圈，建立了一个群，让大家找找 BUG 提提意见，此时网页浏览量已经达到了 6000。</p>
<p><img src="https://windliang.oss-cn-beijing.aliyuncs.com/before.png" alt=""></p>
<p>然后，群里的小伙伴反馈了一下，就去睡了。</p>
<blockquote>
<p>4 号中午</p>
</blockquote>
<p>11 点起来之后，发现小程序审核失败了，可能是因为自己在文字里加了「如果喜欢，可以分享」类似的话，然后去掉后又提交了一次，审核的很快，好像不到半小时就审核通过了。就是下边的第一版，看起来很粗糙的样子。</p>
<p><img src="https://windliang.oss-cn-beijing.aliyuncs.com/first.png" alt=""></p>
<p>接下来，在朋友圈和微信群「大猫城堡」、「增长黑盒」分享了小程序，在知识星球「路人甲乙丙」分享了一下。</p>
<p><img src="https://windliang.oss-cn-beijing.aliyuncs.com/luren.png" alt=""></p>
<p>然后，在网页里加上了小程序名字，后来又加上了小程序的二维码。</p>
<p><img src="https://windliang.oss-cn-beijing.aliyuncs.com/web.jpg" alt=""></p>
<p>到了晚上，基本的功能完成了，然后在女朋友的指导下把页面美化了一下，很多细节处理一下，之后又提交了。</p>
<blockquote>
<p>5 号</p>
</blockquote>
<p>小程序开通流量主的条件是 UV 达到 1000，而 4 号一天 UV 是 700 多，所以还未达标。 5 号的时候，认识了 @张佳，是 @森淼 推荐的，然后 @张佳 帮在他的知识星球「数据和黑科技」推了一下小程序和 @wulujia 老板的「产品学徒」星球推了小程序。</p>
<p><img src="https://windliang.oss-cn-beijing.aliyuncs.com/zhangjia.jpg" alt=""></p>
<p>还有许多我不知道的人帮我做了分享，在此感谢大家。</p>
<p>然后继续做了细节的优化，提交了一版小程序。</p>
<blockquote>
<p>6 号</p>
</blockquote>
<p>也就是今天，上午的时候进入小程序主页，发现达到了开通流量主的条件，发现开通的话需要银行卡，身份证的照片，无奈身上没有。等到下午女朋友回到屋里，给我了照片，开始了申请。差不多一个小时，银行卡信息通过了。然后就将广告代码，加入小程序中，提交审核。差不多又是一个小时，审核通过。接下来是，广告组件的审核，差不多快一个小时，收到了一条短信，</p>
<p><img src="https://windliang.oss-cn-beijing.aliyuncs.com/duan.jpg" alt=""></p>
<p>上网页看，广告组件也审核通过了，总体上微信的审核速度还是蛮快的，工作时间应该是周一到周五，9点 - 21点；周六周日，9 点 - 19点，晚上发的基本是第二天上午通过审核，至此小程序就基本完成了。</p>
<p><img src="https://windliang.oss-cn-beijing.aliyuncs.com/mini.png" alt=""></p>
<h1 id="数据分享"><a href="#数据分享" class="headerlink" title="数据分享"></a>数据分享</h1><p>分享一下小程序，不到三天的数据。</p>
<p><img src="https://windliang.oss-cn-beijing.aliyuncs.com/54data.jpg" alt=""></p>
<p><img src="https://windliang.oss-cn-beijing.aliyuncs.com/55data.jpg" alt=""></p>
<p><img src="https://windliang.oss-cn-beijing.aliyuncs.com/56data.jpg" alt=""></p>
<p><img src="https://windliang.oss-cn-beijing.aliyuncs.com/source.jpg" alt=""></p>
<p><img src="https://windliang.oss-cn-beijing.aliyuncs.com/people.jpg" alt=""></p>
<p>主要传播渠道就是微信群、知识星球、朋友圈，还有网页留下的小程序码。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>主要用到了石墨文档，github pages 服务，不蒜子，知识星球。</p>
<p>像@刘大猫讲的，开始网页没有留任何沉淀流量的东西，二维码，微信类似的，造成了前期的一些流量的浪费。对于流量的沉淀，自己这方面一直没有很深的体会，以后可以多看一些案例学习。还有由于自己的 .cc 域名不能备案，在微信会先跳转到微信 110 ，对用户来说不方便。</p>
<p>有很多人夸自己的执行力，我觉得只是自己很喜欢编程吧，当热爱一件事情的时候，就会很想把它做好，做完，还有就是一种要做就要做完的精神。</p>
<p>以上就是整个过程了，希望对大家有些许帮助。</p>
]]></content>
      <categories>
        <category>随想</category>
      </categories>
      <tags>
        <tag>随想</tag>
        <tag>前端</tag>
        <tag>小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>小程序原理系列二之 wxml</title>
    <url>/2023/11/27/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%8E%9F%E7%90%86%E7%B3%BB%E5%88%97%E4%B9%8Bwxml/</url>
    <content><![CDATA[<p>平常小程序写的多一些，简单总结一下原理。但因为小程序也没开源，只能参考相关文档以及开发者工具慢慢理解了。</p>
<p>理解小程序原理的突破口就是开发者工具了，开发者工具是基于 <code>NW.js</code>，一个基于 <code>Chromium</code> 和 <code>node.js</code> 的应用运行时。同时暴漏了 <code>debug</code>  的入口。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20231121074438703.png" alt=""></p>
<p>点开后就是一个新的 <code>devTools</code> 的窗口，这里我们可以找到预览界面的 <code>dom</code>。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20231121074627001.png" alt=""></p>
<p>小程序界面是一个独立的 <code>webview</code>，也就是常说的视图层，可以在命令行执行 <code>document.getElementsByTagName(&#39;webview&#39;)</code> ，可以看到很多 <code>webview</code>。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20231121075414589.png" alt=""></p>
<p>我这边第 <code>0</code> 个就是 <code>pages/index/index</code> 的视图层，再通过 <code>document.getElementsByTagName(&#39;webview&#39;)[0].showDevTools(true)</code> 命令单独打开这个 <code>webview</code> 。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20231121075550310.png" alt=""></p>
<p>熟悉的感觉回来了，其实就是普通的 <code>html/css</code> ，小程序的原理的突破口也就在这里了。</p>
<p>这篇文章简单看一下页面的 <code>dom</code> 是怎么来的，也就是 <code>wxml</code> 做了什么事情。</p>
<p>源代码：</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20231128083757746.png" alt=""></p>
<p>渲染出来的代码：</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20231128083838687.png" alt="image-20231128083838687"></p>
<p><code>view</code> 变成了 <code>wx-view</code> ，<code>text</code>  变成了 <code>wx-text</code> ，并且里边加了 <code>&lt;span&gt;</code>。两个关键信息，<code>wx-xxx</code> 标签以及 <code>exparser</code> 。</p>
<h1 id="自定义标签"><a href="#自定义标签" class="headerlink" title="自定义标签"></a>自定义标签</h1><p><code>html</code>  是支持我们直接写自定义名字的标签的，并且在上边设置 <code>class</code>  也会直接生效。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20231130083327633.png" alt=""></p>
<p>区别在于自己写的标签没有一些预制的属性，比如 <code>div</code> 的 <code>display: block</code> 。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20231130083443521.png" alt=""></p>
<p>如果我们给 <code>wx-view</code> 也加个 <code>display: block</code> ，那表现上它和 <code>div</code> 也就一致了。</p>
<p>微信已经帮我们把自定义标签的属性提前内置了。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20231130083621685.png" alt=""></p>
<p>至于为什么要把我们写的 <code>view</code> 转成 <code>wx-view</code> ，因为自定义元素中规定必须用 <code>-</code> 连接。</p>
<blockquote>
<p>“自定义元素的名字必须包含一个破折号（<code>-</code>）所以<code>&lt;x-tags&gt;</code>、<code>&lt;my-element&gt;</code>和<code>&lt;my-awesome-app&gt;</code>都是正确的名字，而<code>&lt;tabs&gt;</code>和<code>&lt;foo_bar&gt;</code>是不正确的。这样的限制使得 HTML 解析器可以分辨那些是标准元素，哪些是自定义元素。”</p>
</blockquote>
<p>有 <code>-</code> 可以保证一定的兼容性，并且也可以和浏览器自带的元素有一定的区分。</p>
<h1 id="Exparser"><a href="#Exparser" class="headerlink" title="Exparser"></a>Exparser</h1><p>简单讲，就是一个仿照 <code>Web Components</code> 的组件系统，它会维护标签的属性、事件，提供 <code>registerElement</code> 方法用于注册自定义组件，提供 <code>createElement</code> 来渲染组件，对于自定义组件会采用 <code>Shadow DOM</code>  的技术。</p>
<p><code>Exparser</code>  的相关代码在哪里呢？这就是微信传说中的基础库里了，在渲染层引入的是 <code>WAWebview.js</code> 。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20231201083243411.png" alt=""></p>
<p>可以右键打开这个文件，复制出来格式化一下：</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20231201083422729.png" alt=""></p>
<p>由于文件比较大，用 <code>VSCode</code> 直接格式化可能会很卡，可以写个脚本来格式化。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20231202081218159.png" alt=""></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// chatGPT 生成</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">const</span> prettier = <span class="built_in">require</span>(<span class="string">'prettier'</span>);</span><br><span class="line"><span class="keyword">const</span> jsBeautify = <span class="built_in">require</span>(<span class="string">'js-beautify'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> filePath = process.argv[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!filePath) &#123;</span><br><span class="line">  <span class="built_in">console</span>.error(<span class="string">'Please provide a file path'</span>);</span><br><span class="line">  process.exit(<span class="number">1</span>);</span><br><span class="line">&#125; </span><br><span class="line"><span class="built_in">console</span>.log(filePath)</span><br><span class="line">fs.readFile(filePath, <span class="string">'utf8'</span>, <span class="keyword">async</span> (err, data) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(<span class="string">`Error reading file: <span class="subst">$&#123;err&#125;</span>`</span>);</span><br><span class="line">    process.exit(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 使用 prettier 格式化代码</span></span><br><span class="line">  <span class="keyword">const</span> formattedCode = <span class="keyword">await</span> prettier.format(data, &#123; <span class="attr">parser</span>: <span class="string">'babel'</span> &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 使用 js-beautify 进一步格式化代码</span></span><br><span class="line">  <span class="keyword">const</span> beautifiedCode = jsBeautify(formattedCode, &#123; <span class="attr">indent_size</span>: <span class="number">2</span> &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 将格式化后的代码写回文件</span></span><br><span class="line">  fs.writeFile(filePath, beautifiedCode, <span class="string">'utf8'</span>, (err) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="built_in">console</span>.error(<span class="string">`Error writing file: <span class="subst">$&#123;err&#125;</span>`</span>);</span><br><span class="line">      process.exit(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'File formatted successfully'</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>然后在命令行执行 <code>node format.js ./WAWebview.js</code> ，接下来就看到格式化的代码了：</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20231202081803850.png" alt=""></p>
<p>是 <code>2.32.3</code> 版本，目前微信已经更到 <code>3.x.x</code> 了，新增了渲染引擎 <code>Skyline</code>，为了简单些这次就先看 <code>2.x</code> 的版本了。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20231202082009585.png" alt=""></p>
<p>总共有 <code>14</code> 万行</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20231202082112148.png" alt=""></p>
<p>接下来通过搜索、折行，找一下 <code>Exparser</code> 的部分，因为都是压缩过的代码，逐行理解肯定不现实，就找几个关键点看一下：</p>
<p>提供了注册组件的方法 <code>registerElement</code> 。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20231202090844714.png" alt=""></p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20231202091928675.png" alt=""></p>
<p>提前注册了内置的组件：</p>
<p><code>wx-view</code>：</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20231202091334728.png" alt=""></p>
<p><code>wx-text</code> ：</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20231202091413794.png" alt=""></p>
<p>可以看到上边最终转成了 <code>span</code> 标签，和我们开发者工具看到的也是一致的：</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20231202091522286.png" alt=""></p>
<p>提供了 <code>createElement</code> 方法，将注册的组件生成为最终的 <code>dom</code> 。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20231202092329181.png" alt=""></p>
<p>最终会调用 <code>document</code>  来创建 <code>dom</code> 。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20231202092914565.png" alt=""></p>
<h1 id="生成流程"><a href="#生成流程" class="headerlink" title="生成流程"></a>生成流程</h1><p>再回到加载的 <code>dom</code>  看一下 <code>wxml</code> 转换成了什么：</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20231202093121268.png" alt=""></p>
<p>右键打开这个文件：</p>
<p>定义了 <code>$gw</code> 这个函数，接收 <code>path</code> 参数。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20231202093657732.png" alt=""></p>
<p>返回一个函数：</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20231202093756333.png" alt=""></p>
<p>内部有我们 <code>wxml</code> 的变量：</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20231202093851877.png" alt=""></p>
<p>对应于原文件：</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20231202093943000.png" alt=""></p>
<p>看一下调用这个函数的地方：</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20231202100111614.png" alt=""></p>
<p>传入当前页面路径将生成的函数赋值给了 <code>generateFunc</code> ，接着用 <code>document.dispatchEvent</code> 触发事件 <code>generateFuncReady</code>，并且将 <code>generateFunc</code> 传入。</p>
<p>我们在控制台手动执行一下 <code>generateFunc</code> ，看下返回值：</p>
<p>可以看到 <code>3</code> 个子元素：</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20231202160157283.png" alt=""></p>
<p>但因为前两个的值是在逻辑层 <code>data</code>  中，因为我们没有传递，所以上边前两个子元素 <code>children</code> 都是空字符串</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20231202160244055.png" alt=""></p>
<p>这个 <code>data</code> 需要在调用 <code>generateFunc</code> 的时候传入：</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20231202160620254.png" alt=""></p>
<p>现在就正常返回了标签的结构，接着渲染层内部就会利用它生成虚拟 <code>dom</code> ，再利用 <code>Exparser</code> 生成最终的 <code>dom</code> 元素了。</p>
<p>大概是下边的流程（下边的代码是最早期的基础库，目前的版本已经不是下边的结构了，目前先按下边的流程理解，后边再理清当前基础库的逻辑）：</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20231202175146660.png" alt=""></p>
<p>调用 <code>virtualTree</code> 将 <code>generateFunc</code> 返回的结构变为虚拟 <code>dom</code> ，接着调用 <code>render</code>  ，<code>render</code> 内部就是调用前边介绍的 <code>Exparser</code> 的 <code>createElement</code> 方法生成真正的 <code>dom</code> ，最后通过 <code>replaceChild</code> 挂载到页面上。</p>
<p>当然 <code>generateFunc</code> 需要的 <code>data</code> 数据需要等待逻辑层传过来，后边的文章再介绍通信机制。</p>
<h1 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h1><p>剩下最后一个问题，<code>wxml.js</code> 是哪里来的？</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20231202093121268.png" alt=""></p>
<p>和 <a href="https://zhuanlan.zhihu.com/p/668845449" target="_blank" rel="noopener">wxss</a> 一样，是微信提前编译生成的。编译工具可以在微信开发者工具目录搜索 <code>wcc</code> ，<code>Library</code> 是个隐藏目录。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20231202180839768.png" alt=""></p>
<p>我们把这个 <code>wcc</code> 文件拷贝到 <code>index.wxml</code> 的所在目录，然后将我们的 <code>index.wxml</code> 手动编译一下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">./wcc -js ./index.wxml &gt;&gt; wxml.js</span><br></pre></td></tr></table></figure>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20231202181028950.png" alt=""></p>
<p>可以看到  <code>$gw</code>  函数就生成了。</p>
<h1 id="总"><a href="#总" class="headerlink" title="总"></a>总</h1><p>大概过程就是上边了，先提前编译出了  <code>$gw</code>  函数，会返回一个函数，可以把 <code>wxml</code> 实例为一个 <code>dom</code> 的标签结构。传入当前页面的路径执行该函数生成 <code>generateFunc</code> 函数，将函数传给视图层。</p>
<p>视图层拿到逻辑层的数据后将 <code>generateFunc</code> 函数返回的 <code>dom</code> 结构生成虚拟 <code>dom</code> ，通过 <code>Exparser</code> 执行 <code>render</code> 生成最终的 <code>dom</code> 挂载到页面。</p>
<p>至于拿到逻辑层的数据的时机，相互通信的逻辑就放到后边的文章了，看着混淆的代码，头大。</p>
<p>历史文章：</p>
<p><a href="https://zhuanlan.zhihu.com/p/668845449" target="_blank" rel="noopener">小程序原理系列一之wxss</a></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>微信小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>工作三年后的胡思乱想</title>
    <url>/2023/07/02/%E5%B7%A5%E4%BD%9C%E4%B8%89%E5%B9%B4%E5%90%8E%E7%9A%84%E8%83%A1%E6%80%9D%E4%B9%B1%E6%83%B3/</url>
    <content><![CDATA[<p>一眨眼工作已经三年了，前两年的总结 <a href="https://windliang.wang/2021/05/29/%E5%9C%A8%E7%BE%8E%E5%9B%A2%E5%B7%A5%E4%BD%9C%E7%9A%84%E7%AC%AC%E4%B8%80%E5%B9%B4/">工作第一年</a>、<a href="https://windliang.wang/2022/06/30/%E5%9C%A8%E7%BE%8E%E5%9B%A2%E5%B7%A5%E4%BD%9C%E7%9A%84%E7%AC%AC%E4%BA%8C%E5%B9%B4/">工作第二年</a> 基本上把在公司做的事情都介绍了，今年站在「前端已死」、互联网大裁员的环境下，想想未来的路可能更为应景。</p>
<p>经常说这是最好的时代，也是最坏的时代，互联网便是如此。通过互联网将人与人之间的各种链接都成为了可能，在互联网诞生之前，人与人之间的交流就是现实生活中的圈子，而现在本来这一辈子都不会在现实中产生交集的人在互联网却会相遇。</p>
<p>各种写书的大佬、开源的大佬，以往可能只是从文字、代码中了解他们，但现在通过社交媒体、微信竟然就产生了互动。当然不好一面就是也会遇到和自己不相投的人，也许会影响自己的心情。</p>
<p>通过互联网极大的扩宽了我们的视野，看到了别人在怎么生活，也放大了自己的焦虑和欲望。我们需要认清自己的边界，知道自己想要什么，自己能做什么，不需要对本来不可能发生在自己身上的事情而焦虑。</p>
<p>当迷茫焦虑时，看看宇宙的纪录片，从宇宙的视角去看自己，无论从空间大小还是时间维度，其实自己什么都不是，想那么多干啥。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/milky-way-2695569_1280.jpg" style="zoom: 50%;"></p>
<p>再想想其他动物，吃饭睡觉喵喵叫，也挺好的。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20230630080510771.png" style="zoom: 25%;"></p>
<h1 id="前端已死"><a href="#前端已死" class="headerlink" title="前端已死"></a>前端已死</h1><p>互联网已经结束了快速扩张的时期，这是个客观事实，因此招聘的人数相对于之前减少了很多，但远没到一个已死的状态，相对于其他行业，选择互联网依旧是一个不错的选择。</p>
<p>前端会不会死不知道，互联网肯定会一直存在下去，现在整个社会都是基于互联网，已经变成了像电、水一样的基础设施，没有人可以离开它。因此互联网的相关的岗位一定会一直一直存在。</p>
<p>至于互联网中具体的职业划分，前端、后端、算法、数据库等，它们各自使用的语言、技术一定会发生变化的，当选择互联网技术行业的时候，就应该抱有持续学习的态度。</p>
<p>塞班操作系统被安卓、iOS 取代、.Net 岗位的减少、客户端大量岗位转前端，这些也就发生在近十几二十年。当某一个岗位减少的时候，一定又会出现新的岗位，保持开放的心态去学就可以，变化再多肯定也有不变的东西。当掌握一门技术再学习另一门技术的时候，肯定会比小白学习一门新技术快很多很多，很多经验也会迁移过去。</p>
<p>去年 12 月出来的 chatGPT 为代表的大模型，到现在也就半年多的时间，很多以前完全不敢想的事情就这样发生了。可以预见的是一部分岗位数量肯定也会减少，目前影响最大的应该是  UI 岗，其次一定程度上可以提高程序员的开发以及学习效率，但还没有到取代的程度，但未来会再怎么发展就不得而知了。</p>
<p>相对于其他行业，虽然互联网相关技术迭代确实很快，但如果是因为热爱而选择这个行业，我觉得去做一辈子是没问题的。</p>
<h1 id="技术"><a href="#技术" class="headerlink" title="技术"></a>技术</h1><p>底层技术服务于上层技术，上层技术服务于应用，真正赚钱的是应用，它可能提升了用户的效率、也可能提升了用户的生活体验，这样用户才愿意付费。上层技术的人收到了钱，进一步也愿意为底层技术的人付费。</p>
<p>但对于一个应用，技术并不是最重要的，更多需要的是产品和运营，一个应用在 chatGPT 和各种框架、云服务的加持下做出来变得太简单了，更多的是我们需要思考如何设计产品和如何推广运营产品，和用户产生更亲密的连接，用户才愿意付费。</p>
<p>极端一点，即使现在所有的应用都停止更新了，其实也并不会产生多大的影响。</p>
<p>在公司中亦是如此，对于技术开发，没有谁是不可取代的，公司更期望的是那些可以发现问题、分析问题、定义问题的人，至于怎么解决，问题定义清楚以后，解决方案自然可以出来，谁去解决并不重要了。</p>
<p>但也不用太过悲观，虽然技术不是最重要的，但一定是不可或缺的，在解决问题的过程中也会区分出能力强和能力差的：方案的设定、代码编写的好坏、线上的 bug 数、代码的扩展性等。</p>
<h1 id="赚钱"><a href="#赚钱" class="headerlink" title="赚钱"></a>赚钱</h1><p>赚钱很大程度又是需要运气的，比如同一个人十年前进入互联网和现在进入互联网差别就会很大，再比如开发一个应用突然爆火，例如「羊了个羊」，这些我们是很难控制的，我们只能「尽人事，听天命」。</p>
<p>最近几年，除了在公司工作，对于有技术的同学赚钱有下边的方式：</p>
<ul>
<li><p>付费课程、出书</p>
<p>最近几年越来越多的人在极客时间、掘金小册写课程或者直接出书。</p>
<p>对于写课的人赚到了钱，对于买课的人只要跟着看完了，多多少少都会有很多收获。付费课程会比较系统， 如果没有这些课程，去学东西肯定也是可以学的，但需要花很多时间去网上搜一些零碎的资料，由于没有经验甚至可能走很多弯路。</p>
</li>
<li><p>付费社群</p>
<p>市面上也会有一些付费训练的社群或者知识星球</p>
<p>对于组织付费社群的人会花费很大的精力，需要持续运营并且照顾到每一个人，不然就等着挨骂吧。因此这类收益也会很高，一些人会辞去工作专职来搞。</p>
</li>
<li><p>开源</p>
<p>大部分开源基本上是用爱发电，更多是收获一些朋友、流量、提升技术。</p>
<p>比如 <a href="https://www.infoq.cn/article/s8jsfyhxu8vowd1uphkp" target="_blank" rel="noopener">core-js</a> 作者的经历，一个 22.6k star 的项目，几乎各个网站都在用的一个项目，作者却因为钱的问题被很多人谩骂。因此如果是个人专职开源一个项目靠  GitHub Sponsor 会很难很难。</p>
<p>当然，开源也是能赚到钱的，比如 Vue 开源就赚到了很多钱，但毕竟是很少很少数了。</p>
<p>依赖纯开源项目赚到钱，还是需要背靠公司。比如阿里云谦的 Umi、通过开源加入 NuxtLab 的 Anthony Fu、在 AFFiNE 的雪碧等等。</p>
</li>
<li><p>应用</p>
<p>身为一个程序员，尤其是前端程序员，当然可以自己维护一个应用来赚钱。</p>
<p>做得很成功的比如 Livid 的 V2ex 社区，Abner Lee 的 Typora（后来知道作者竟然是国内开发者）。</p>
<p>也有一些没有那么出名的，比如大鹏的 <a href="https://mdnice.com/" target="_blank" rel="noopener">mdnice</a>，秋风的 <a href="https://www.mujicv.com/index.html" target="_blank" rel="noopener">木及简历</a>。</p>
<p>当然如果要做一个很大的项目，背靠公司也是一个很好的选择，比如之前阿里玉伯的语雀、之前极客邦池建强的极客时间。</p>
<p>还有一些小的创业公司会做的，冯大辉的「抽奖助手」、吴鲁加的「知识星球」等。</p>
<p>做出这些应用不需要很多时间，需要我们善于发现生活中的痛点以及强大的执行力，当然想成功的话需要再加一点运气，在成功前需要不断尝试不同的东西。</p>
</li>
<li><p>流量变现</p>
<p>有流量就会赚钱，不管是接广告、还是带货。互联网上也会有部分人专注于怎么搞流量，知乎怎么获得更多曝光、视频号怎么获得更多流量、怎么批量注册号，各个平台规则可能是什么，怎么对抗规则，这类有技术加持也会更加顺利，很多人也在专职做。</p>
</li>
</ul>
<p>赚钱的方式有很多，对于我来说，我会尽量选择复利的事情，这样才能产生更大的价值。比如一对一咨询，一份时间换一份收入。但如果把东西写成课程，只需要花一份的时间就能获得 N 份的收入。</p>
<p>另外就是需要保持分享，分享除了能帮助其他人，对自己也会有很大的帮助，写文章的过程中也会不断的有新的认知得到。虽然当下可能没有金钱方面的收入，但时间放宽到几十年，相信一定会有很大的回报。</p>
<p>人的欲望是无穷的，也不能陷入赚钱的极端，目标应该是关注此刻，体验生活，享受生活，而不是不停的赚钱。之前听播客，有一个恰当的比喻，钱就好比汽油，不停的赚钱相当于不停的加油，但如果汽车停着一直不动，再多的汽油也是无意义的。</p>
<h1 id="健康"><a href="#健康" class="headerlink" title="健康"></a>健康</h1><p>最近几年总是爆出程序员突然离世的新闻，前段时间耗子叔突然离世的消息听到之后真的很震惊。twitter 经常刷到耗子叔的动态，然后突然一天竟然就戛然而止了，毫无征兆。</p>
<p>意外是无法避免的，只能尽可能的从饮食、作息、锻炼三方面降低生病的风险。</p>
<h2 id="饮食"><a href="#饮食" class="headerlink" title="饮食"></a>饮食</h2><p>我是工作第一年体检的时候检查出了中度脂肪肝、尿酸高，当时因为是刚毕业，体重是我的巅峰，140 多斤，脂肪都堆在了肚子上。那段时间就开始跑步加吃沙拉，少吃米饭、面条。降的也快，几个月就回到了 130 斤以下，甚至到 120 多点。</p>
<p>第二年体检的时候，脂肪肝基本没有了，尿酸也降了许多。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20230702141922024.png" alt="image-20230702141922024" style="zoom:50%;"></p>
<p>后来就保持少吃米饭，多吃蛋白质、蔬菜的饮食了。</p>
<h2 id="作息"><a href="#作息" class="headerlink" title="作息"></a>作息</h2><p>有一次得了带状疱疹，那种非常痛的类似于痘痘的东西，后来了解了一下是因为免疫力低导致病毒入侵的。猜测因为晚上坐在电脑前，气温降低了没注意，从而导致了生病。</p>
<p>病好之后就决心养成早睡早起的习惯。</p>
<p>之前作息基本上是 1 点到 2 点睡觉，9 点前后起床。现在基本上保持在 11 点前后睡觉，6 点到 7 点间起床了。</p>
<p>早起的好处就是早上会有大把的时间，而且这段时间是专属于自己的，并且因为大脑刚苏醒，效率也会很高。但如果是工作一天，晚上回家再做自己的事情，此时大脑已经很疲惫了，效率会比较低。</p>
<h2 id="运动"><a href="#运动" class="headerlink" title="运动"></a>运动</h2><p>最开始是跑步，但确实很难坚持下去，跑步需要换衣服、出门，还依赖于外边的天气，成本很高。后来陆续尝试过 keep、一些付费课程，都做了但没有完全养成习惯。</p>
<p>后来知道了 switch 的健身环大冒险，然后就一路坚持到了现在，前段时间已经通关了。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20230702143219493.png" alt="image-20230702143219493" style="zoom:50%;"></p>
<p>目前也一直在坚持，基本上一周会运动三到四次，一次大概花费 50 分钟左右。</p>
<h1 id="投资"><a href="#投资" class="headerlink" title="投资"></a>投资</h1><p>大学的时候开始接触到理财，知道了基金的概念，看了银行螺丝钉的「指数基金定投指南」，也看了「穷爸爸富爸爸」、「小狗钱钱」这类理财入门的书。当时赚到的一些钱，就跟着银行螺丝钉投了，主要是一些宽基和中概、医疗。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20230702153842246.png" alt="image-20230702153842246" style="zoom:50%;"></p>
<p>一直到工作的第一年，基金收入确实不错，甚至赚了百分之四五十。当时想着原来股市这么简单，这咋还能亏钱了。</p>
<p>接着疫情不断发展，还有外部经济的变化，中概、医疗都大跌，当时发了年终奖还不停的补仓中概，到现在亏损也有百分之三四十了。</p>
<p>但我心态是可以的，一切都是浮亏和浮盈，只要不卖一切都是浮云。</p>
<p>经历了大起大落后吸取了一些教训，那就是一定要严格执行计划，现金流多不一定要立刻全部投入，而是按计划定投，因为没人知道会跌多久，只有有充足的现金流，才能够把亏损逐步拉平。</p>
<p>现在国家规定互联网基金这些必须走「投顾」，也就是主理人帮我们买入、卖出，我们只需要交一定的投顾费即可。目前我都是在雪球上投，跟投的有孟岩的「长钱账户」、alex 的「全球精选」、螺丝钉的指数增强和主动优选。</p>
<p>能设置自动跟投的就自动跟投了，我相信专业的事交给专业的人肯定是没问题的。</p>
<p>投资肯定是财富自由不了的，但一定比把钱放余额宝强一些，只要耐心持有，尤其是目前这样的熊市投入，相信到下一个牛市会有不错的回报。</p>
<p>（以上仅个人看法，股市有风险，入市需谨慎）</p>
<h1 id="保险"><a href="#保险" class="headerlink" title="保险"></a>保险</h1><p>如果开始接触理财，除了投资，一个绕不过去的点就是保险。</p>
<p>对于保险是什么的比喻，之前听薛兆丰的课时候印象深刻。</p>
<blockquote>
<p>我现在还年轻力壮，将来年纪大了可能会生病，为了防止以后生病要花一大笔医药费，今天就开始存钱，每个月拿出 10% 的收入存起来，未雨绸缪。这是一种做法。</p>
<p>另外一种做法，是我每个月也拿出 10% 的收入去买保险。</p>
<p>这两种做法有什么区别呢？</p>
<p>区别在于，如果我是用储蓄来未雨绸缪，那么未来可能就会发生两种不同的情形。</p>
<p>如果我将来年纪大了也没生病，我存的钱就还是我的钱，我不需要花出去，这时候我还是很幸运的，能够保有我原来的收入，这份储蓄没有被花掉，我赚了。</p>
<p>但是如果我运气不好，生病了，这份储蓄就会被用掉，甚至需要借很多钱去治病，生活会发生巨大的变化。</p>
<p>所以通过储蓄来未雨绸缪，它的特点是未来的结局是可变的，是变动的、是带有风险的。要么高、要么低，要么能够保有原来的这份储蓄，要么这份储蓄就被用掉了甚至借更多的钱。</p>
<p>而对于保险来说，如果你没病，那你的生活该怎么样还是怎么样。如果你病了，那会有保险公司给你支付一大笔钱，你也不用和别人借钱，病好后继续该干啥干啥。</p>
</blockquote>
<p>因此存钱去防止生病就有赌的成分了，如果没病就白赚了很多钱，如果病了生活质量可能会发生很大的变化。</p>
<p>而保险就可以降低风险，未来即使生病了，由于看病不需要花钱了，病好后生活质量也尽可能的维持在原来轨道 。</p>
<p>我期望未来肯定是尽量稳定的，所以在不影响当前生活质量的条件下我愿意拿出一部分钱来买保险。原计划我可能会 30 岁以后开始买重疾险，之前女朋友的朋友有推荐保险的，然后就跟女朋友一起配置了重疾险。</p>
<p>选保险一定要慎重，一些看起来很划算的保险， 到理赔的时候可能会推三阻四，甚至理赔前公司破产了，尽量要选择大公司。</p>
<h1 id="总"><a href="#总" class="headerlink" title="总"></a>总</h1><p>当然生活没有标准答案，每个人看到世界也都是不同的，我也一直在成长，一直在认识新的东西，上边的所想的也不能保证说未来不会再变。</p>
<p>未来能做的就是多看看书，不限制自己，看看经济学的、哲学的、心理学的、人文的，多出去走走看看，尽可能多的增加人生体验，去认识世界，认识自己，做自己想做的事，爱自己所爱的人，走下去就好了。</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>随想</tag>
      </tags>
  </entry>
  <entry>
    <title>建立博客系列（三）：hexo安装配置</title>
    <url>/2017/01/23/%E5%BB%BA%E7%AB%8B%E5%8D%9A%E5%AE%A2%E7%B3%BB%E5%88%97%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9Ahexo%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h2 id="翻墙"><a href="#翻墙" class="headerlink" title="翻墙"></a>翻墙</h2><p>查一些资料，或者下载东西都得到一些国外网站，这里介绍一种翻墙的方式———修改hosts配置文件。</p>
<h3 id="原理介绍"><a href="#原理介绍" class="headerlink" title="原理介绍"></a>原理介绍</h3><p>之前讲过我们输入域名，然后会去从域名解析服务器得到对应的ip然后访问。而一种“墙”的方式，是我们从域名解析服务器得到了无效的ip，所以使得Google,Facebook等不能进行访问。幸运的是，计算机是先从我们本地电脑中的hosts文件中查找域名对应的ip，如果没有的话才从域名解析服务器去获得。所以我们可以把Google，Facebook的ip都写到hosts文件中，这样就可以正常访问国外的一些网站了。</p>
<h3 id="更改方法"><a href="#更改方法" class="headerlink" title="更改方法"></a>更改方法</h3><p>虽然原理很简单，但即使这样做了，也不能保证我们一直正常访问，因为一些ip会直接被封掉，导致我们不能访问，所以我们得时常手动更新我们的hosts文件，那么多的ip一个一个找一个一个改也太麻烦了，这里感谢<a href="https://laod.cn/hosts" target="_blank" rel="noopener">老D博客</a>，我们只需要下载其帮我们写好的hosts文件，然后简单点几下就可以成功翻墙了，一段时间后不能翻墙，下载最新的重新配置就可以了。<br>1.打开hosts下载地址<a href="https://laod.cn/hosts" target="_blank" rel="noopener">老D博客</a><br><img src="/2017/01/23/建立博客系列（三）：hexo安装配置/title.png" alt=" "><br>2.选择一种方式进行下载<br><img src="/2017/01/23/建立博客系列（三）：hexo安装配置/download.png" alt=" "><br>3.下载完成后解压，然后打开Windows自动替换脚本<br><img src="/2017/01/23/建立博客系列（三）：hexo安装配置/open.png" alt=" "><br>4.输入1，点回车，如果电脑管家等禁止了，点允许<br><img src="/2017/01/23/建立博客系列（三）：hexo安装配置/last.png" alt=" "><br>5.然后出现以下界面，试着访问 <a href="https://www.google.com/ncr" target="_blank" rel="noopener">谷歌搜索</a>，<a href="https://www.facebook.com/" target="_blank" rel="noopener">Facebook</a>，可以打开就意味着成功了。<br><img src="/2017/01/23/建立博客系列（三）：hexo安装配置/success.png" alt=" "></p>
<h2 id="Notepad"><a href="#Notepad" class="headerlink" title="Notepad++"></a>Notepad++</h2><p>因为后边会修改很多配置，所以需要一个文本编辑器，这里推荐Notepad++,百度搜索下载即可。<br><img src="/2017/01/23/建立博客系列（三）：hexo安装配置/notepad.png" alt=" "></p>
<h2 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h2><p>hexo是一款基于Node.js的静态博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>
<h3 id="安装node-js"><a href="#安装node-js" class="headerlink" title="安装node.js"></a>安装node.js</h3><p>简单的讲node是一个Javascript运行环境，下载地址<a href="http://nodejs.cn/download/" target="_blank" rel="noopener">node.js</a>,选择Windows.msi,64位或32位即可，安装的时候除了更改安装位置一路Next即可。<br><img src="/2017/01/23/建立博客系列（三）：hexo安装配置/node.png" alt=" "><br>打开git bash,输入 node -v,npm -v,出现下图即代表安装成功。<br><img src="/2017/01/23/建立博客系列（三）：hexo安装配置/npm.png" alt=" "></p>
<h3 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h3><p>NPM是随同NodeJS一起安装的包管理工具,我们可以使用它从服务器上下载其他的程序，例如这里hexo即可使用Npm下载，但由于安装国外的东西速度会很慢，所以这里先安装淘宝NPM，代替npm使用。安装后使用cnpm代替原来的npm命令即可。<br>打开git bash 执行命令<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure></p>
<h3 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h3><p>首先在之前的git目录（D:\git)新建一个目录，起名为blog<br><img src="/2017/01/23/建立博客系列（三）：hexo安装配置/blog.png" alt=" "><br>打开git bash依次执行命令<br>cnpm install -g hexo-cli<br>hexo init blog<br>cd blog<br>cnpm install<br>hexo s<br><img src="/2017/01/23/建立博客系列（三）：hexo安装配置/s.png" alt=" "><br>打开浏览器 输入 localhost:4000,之前讲过域名这里的localhost其实代表ip127.0.0.1,回送地址，就是代表本地主机，而hexo的端口是4000。出现以下，代表hexo安装成功了。<br><img src="/2017/01/23/建立博客系列（三）：hexo安装配置/brower.png" alt=" "></p>
<h3 id="相关命令"><a href="#相关命令" class="headerlink" title="相关命令"></a>相关命令</h3><ul>
<li>cd(change directory),即改变当前的路径，一打开git bash的目录是D:/git,而博客在blog目录里，所以一般先执行cd blog，进入blog目录</li>
<li>hexo clean,清除缓存文件 (db.json) 和已生成的静态文件 (public)</li>
<li>hexo g(或者 hexo generate)，生成静态文件(public目录下)。</li>
<li>hexo d(或者 hexo deploy)，将代码部署到Coding</li>
<li>hexo s(或者 hexo server)，hexo运行在本地，在localhost:4000即可预览效果。</li>
<li>如果命令输错了，按 ctrl+c 终止当前命令即可。<h3 id="部署到Coding"><a href="#部署到Coding" class="headerlink" title="部署到Coding"></a>部署到Coding</h3>打开之前创建的blog项目<br>点击代码， 将SSH底下的地址复制一下<br><img src="/2017/01/23/建立博客系列（三）：hexo安装配置/SSH.png" alt=" "><br>用notepad++打开blog目录下的config_yml，也就是hexo的配置文件<br><img src="/2017/01/23/建立博客系列（三）：hexo安装配置/config.png" alt=" "><br>把下边的代码复制到最后，将coding后边的地址改成刚刚复制的那个地址,然后保存<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository:</span><br><span class="line">    coding: git@git.coding.net:wind_liang/blog.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p><img src="/2017/01/23/建立博客系列（三）：hexo安装配置/code.png" alt=" "><br>在git bash执行<br>以下命令注意都在blog目录下执行，如果当前不是blog目录，先执行cd blog,转到blog目录<br><img src="/2017/01/23/建立博客系列（三）：hexo安装配置/cd.png" alt=" "><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cnpm install hexo-deployer-git --save</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure></p>
<p>点开Coding的代码，出现了东西即代表成功<br><img src="/2017/01/23/建立博客系列（三）：hexo安装配置/codecode.png" alt=" "><br>继续点开之前的pages服务，选择master保存即可，等几分钟出现以下界面即成功<br><img src="/2017/01/23/建立博客系列（三）：hexo安装配置/pagespages.png" alt=" "></p>
<p>如果要绑定域名，下边一步不要执行，即不要加 /blog/ 。如果不购买域名，则执行下边的（如果后来又买了域名，记得将这里的 /blog/ 改回到 / ）。</p>
<hr>
<p>用notepad++打开hexo的配置文件，即blog目录下的config_yml，在root处加入/blog/,记住冒号后的空格<br>现在访问http://你的名字.coding.me/blog即可访问你的博客了。</p>
<p><img src="/2017/01/23/建立博客系列（三）：hexo安装配置/url.png" alt=" "></p>
<hr>
<h2 id="关联自己的域名"><a href="#关联自己的域名" class="headerlink" title="关联自己的域名"></a>关联自己的域名</h2><p>如果你之前买了域名，现在可以将你的域名解析到博客的地址上。</p>
<h3 id="设置解析"><a href="#设置解析" class="headerlink" title="设置解析"></a>设置解析</h3><p>打开阿里云，进入域名解析，点击自己的域名<br><img src="/2017/01/23/建立博客系列（三）：hexo安装配置/DNS1.png" alt=" "><br>点击新建,添加一个 CNAME 解析，地址写 你的名字.coding.me ，也就是把域名解析到域名<br><img src="/2017/01/23/建立博客系列（三）：hexo安装配置/DNS2.png" alt=" "></p>
<h3 id="添加CNAME到Coding"><a href="#添加CNAME到Coding" class="headerlink" title="添加CNAME到Coding"></a>添加CNAME到Coding</h3><p>打开Coding，pages服务，绑定域名<br><img src="/2017/01/23/建立博客系列（三）：hexo安装配置/bind.png" alt=" "><br>设置完成后，等待10分钟左右，若在浏览器中输入自己的域名可成功访问即可。</p>
<h2 id="hexo-的简单配置"><a href="#hexo-的简单配置" class="headerlink" title="hexo 的简单配置"></a>hexo 的简单配置</h2><p>用notepad++打开hexo的配置文件，即blog目录下的config_yml。<br>修改以下几项，注意冒号后边有一个空格，除了language不变，其它的改成你自己的。<br><img src="/2017/01/23/建立博客系列（三）：hexo安装配置/sss.png" alt=" "><br>点击格式，转为utf-8无BOM格式（即支持中文的一种格式）,然后记住保存<br><img src="/2017/01/23/建立博客系列（三）：hexo安装配置/utf.png" alt=" "><br>打开git bash,注意先cd 到blog目录<br>然后依次执行，hexo clean,hexo g,hexo d,然后进入自己的博客观察是否更改成功。</p>
<h2 id="hexo-绑定域名（2017-8-12）"><a href="#hexo-绑定域名（2017-8-12）" class="headerlink" title="hexo 绑定域名（2017.8.12）"></a>hexo 绑定域名（2017.8.12）</h2><p>coding 推出了银牌会员，可以免费升级，绑定了自定义域名后，会先跳到下边的页面<br><img src="/2017/01/23/建立博客系列（三）：hexo安装配置/coding.png" alt=" "><br>我们需要在自己的博客加入 Hosted by Coding Pages ，审核通过就没有跳转的 pages 了<br><img src="/2017/01/23/建立博客系列（三）：hexo安装配置/p.png" alt=" "></p>
<h3 id="以-Next-主题为例"><a href="#以-Next-主题为例" class="headerlink" title="以 Next 主题为例"></a>以 Next 主题为例</h3><p>进入下边的路径</p>
<blockquote>
<p>博客所在目录 \themes\next\layout_partials</p>
</blockquote>
<p>使用 Notepad 编辑 footer.swig ，加入以下代码<br><img src="/2017/01/23/建立博客系列（三）：hexo安装配置/c.png" alt=" "></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class=&quot;powered-by&quot;&gt;</span><br><span class="line">  Hosted by  </span><br><span class="line">  &lt;a class=&quot;theme-link&quot; href=&quot;https://pages.coding.me&quot;&gt;</span><br><span class="line">    Coding Pages</span><br><span class="line">  &lt;/a&gt;   </span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<p>然后执行下边代码即可<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure></p>
<p>会有下边的效果<br><img src="/2017/01/23/建立博客系列（三）：hexo安装配置/by.png" alt=" "><br>然后在 pages 页面勾选已放置即可<br><img src="/2017/01/23/建立博客系列（三）：hexo安装配置/f.png" alt=" "><br>然后等待审核通过。</p>
]]></content>
      <categories>
        <category>建立博客</category>
      </categories>
      <tags>
        <tag>域名</tag>
        <tag>hexo</tag>
        <tag>翻墙</tag>
      </tags>
  </entry>
  <entry>
    <title>前端的设计模式系列-装饰器模式</title>
    <url>/2022/01/17/%E5%89%8D%E7%AB%AF%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B3%BB%E5%88%97-%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%A3%85%E9%A5%B0%E5%99%A8%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<p>代码也写了几年了，设计模式处于看了忘，忘了看的状态，最近对设计模式有了点感觉，索性就再学习总结下吧。</p>
<p>大部分讲设计模式的文章都是使用的 <code>Java</code>、<code>C++</code> 这样的以类为基础的静态类型语言，作为前端开发者，<code>js</code> 这门基于原型的动态语言，函数成为了一等公民，在实现一些设计模式上稍显不同，甚至简单到不像使用了设计模式，有时候也会产生些困惑。</p>
<p>下面按照「场景」-「设计模式定义」- 「代码实现」- 「易混设计模式」-「总」的顺序来总结一下，如有不当之处，欢迎交流讨论。</p>
<h1 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h1><p>微信小程序定义一个页面是通过微信提供的 <code>Page</code> 方法，然后传入一个配置对象进去。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Page(&#123;</span><br><span class="line">  data: &#123; <span class="comment">// 参与页面渲染的数据</span></span><br><span class="line">    logs: []</span><br><span class="line">  &#125;,</span><br><span class="line">  onLoad: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 页面渲染后 执行</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>如果我们有个需求是在每个页面加载的时候上报一些自定义数据。</p>
<p>最直接的当然是去每个页面加就好了，但上报数据的逻辑是一致的，一个一个加有些傻了，这里就可以用到装饰器模式了。</p>
<h1 id="装饰器模式"><a href="#装饰器模式" class="headerlink" title="装饰器模式"></a>装饰器模式</h1><p>看下维基百科的定义。</p>
<blockquote>
<p><strong>装饰器（修饰）模式</strong>，是<a href="https://zh.wikipedia.org/w/index.php?title=面向对象程式&amp;action=edit&amp;redlink=1" target="_blank" rel="noopener">面向对象程式</a>领域中，一种动态地往一个类别中添加新的行为的<a href="https://zh.wikipedia.org/wiki/软件设计模式" target="_blank" rel="noopener">设计模式</a>。就功能而言，修饰模式相比生成<a href="https://zh.wikipedia.org/wiki/子類別" target="_blank" rel="noopener">子类别</a>更为灵活，这样可以给某个对象而不是整个类别添加一些功能。</p>
</blockquote>
<p>看一下 <code>UML</code> 类图和次序图。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220117093402007.png" alt="image-20220117093402007"></p>
<p>当访问 <code>Component1</code> 中的 <code>operation</code> 方法时，会先调用预先定义的两个装饰器 <code>Decorator1</code> 和 <code>Decorator2</code> 中的 <code>operation</code> 方法，执行一些额外操作，最后再执行原始的 <code>operation</code> 方法。</p>
<p>举一个简单的例子：</p>
<p>买奶茶的话可以额外加珍珠、椰果等，不同小料有不同的价格、也可以自由组合，此时就可以用到装饰器模式，对原始奶茶进行加料、算价。</p>
<p>原始的奶茶有一个接口和类。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">MilkTea</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getCost</span><span class="params">()</span></span>; <span class="comment">// 返回奶茶的价格</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getIngredients</span><span class="params">()</span></span>; <span class="comment">// 返回奶茶的原料</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SimpleMilkTea</span> <span class="keyword">implements</span> <span class="title">MilkTea</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getCost</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getIngredients</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"MilkTea"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>下边引入装饰器，进行加料。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 添加一个装饰器的抽象类</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">MilkTeaDecorator</span> <span class="keyword">implements</span> <span class="title">MilkTea</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> MilkTea decoratedMilkTea;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MilkTeaDecorator</span><span class="params">(MilkTea c)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.decoratedMilkTea = c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getCost</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> decoratedMilkTea.getCost();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getIngredients</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> decoratedMilkTea.getIngredients();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加珍珠</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WithPearl</span> <span class="keyword">extends</span> <span class="title">MilkTeaDecorator</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WithPearl</span><span class="params">(MilkTea c)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(c); <span class="comment">// 调用父类构造函数</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getCost</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        <span class="comment">// 调用父类方法</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.getCost() + <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getIngredients</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="comment">// 调用父类方法</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.getIngredients() + <span class="string">", 加珍珠"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加椰果</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WithCoconut</span> <span class="keyword">extends</span> <span class="title">MilkTeaDecorator</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WithCoconut</span><span class="params">(MilkTea c)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(c);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getCost</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.getCost() + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getIngredients</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.getIngredients() + <span class="string">", 加椰果"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>让我们测试一下，</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printInfo</span><span class="params">(MilkTea c)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"价格: "</span> + c.getCost() + <span class="string">"; 加料: "</span> + c.getIngredients());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MilkTea c = <span class="keyword">new</span> SimpleMilkTea();</span><br><span class="line">        printInfo(c); <span class="comment">// 价格: 10.0; 加料: MilkTea</span></span><br><span class="line">        </span><br><span class="line">        c = <span class="keyword">new</span> WithPearl(<span class="keyword">new</span> SimpleMilkTea());</span><br><span class="line">        printInfo(c); <span class="comment">// 价格: 12.0; 加料: MilkTea, 加珍珠</span></span><br><span class="line">        </span><br><span class="line">        c = <span class="keyword">new</span> WithCoconut(<span class="keyword">new</span> WithPearl(<span class="keyword">new</span> SimpleMilkTea()));</span><br><span class="line">        printInfo(c); <span class="comment">// 价格: 13.0; 加料: MilkTea, 加珍珠, 加椰果</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>未来如果需要新增一种小料，只需要新写一个装饰器类，并且可以和之前的小料随意搭配。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 添加冰淇淋</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WithCream</span> <span class="keyword">extends</span> <span class="title">MilkTeaDecorator</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WithCream</span><span class="params">(MilkTea c)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(c);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getCost</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.getCost() + <span class="number">5</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getIngredients</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.getIngredients() + <span class="string">", 加冰淇淋"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printInfo</span><span class="params">(MilkTea c)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"价格: "</span> + c.getCost() + <span class="string">"; 加料: "</span> + c.getIngredients());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        c = <span class="keyword">new</span> WithCoconut(<span class="keyword">new</span> WithCream(<span class="keyword">new</span> WithPearl(<span class="keyword">new</span> SimpleMilkTea())));</span><br><span class="line">        printInfo(c); <span class="comment">// 价格: 18.0; 加料: MilkTea, 加珍珠, 加冰淇淋, 加椰果</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>让我们用 <code>js</code> 改写一下，达到同样的效果。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> SimpleMilkTea = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        getCost() &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        getIngredients() &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"MilkTea"</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加珍珠</span></span><br><span class="line"><span class="keyword">const</span> WithPearl = <span class="function">(<span class="params">milkTea</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        getCost() &#123;</span><br><span class="line">            <span class="keyword">return</span> milkTea.getCost() + <span class="number">2</span>;</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        getIngredients() &#123;</span><br><span class="line">            <span class="keyword">return</span> milkTea.getIngredients() + <span class="string">", 加珍珠"</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加椰果</span></span><br><span class="line"><span class="keyword">const</span> WithCoconut = <span class="function">(<span class="params">milkTea</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        getCost() &#123;</span><br><span class="line">            <span class="keyword">return</span> milkTea.getCost() + <span class="number">1</span>;</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        getIngredients() &#123;</span><br><span class="line">            <span class="keyword">return</span> milkTea.getIngredients() + <span class="string">", 加椰果"</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加冰淇淋</span></span><br><span class="line"><span class="keyword">const</span> WithCream = <span class="function">(<span class="params">milkTea</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        getCost() &#123;</span><br><span class="line">            <span class="keyword">return</span> milkTea.getCost() + <span class="number">5</span>;</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        getIngredients() &#123;</span><br><span class="line">            <span class="keyword">return</span> milkTea.getIngredients() + <span class="string">", 加冰淇淋"</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// test</span></span><br><span class="line"><span class="keyword">const</span> printInfo = <span class="function">(<span class="params">c</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(</span><br><span class="line">        <span class="string">"价格: "</span> + c.getCost() + <span class="string">"; 加料: "</span> + c.getIngredients()</span><br><span class="line">    );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> c = SimpleMilkTea();</span><br><span class="line">printInfo(c); <span class="comment">// 价格: 10; 加料: MilkTea</span></span><br><span class="line"></span><br><span class="line">c = WithPearl(SimpleMilkTea());</span><br><span class="line">printInfo(c); <span class="comment">// 价格: 12; 加料: MilkTea, 加珍珠</span></span><br><span class="line"></span><br><span class="line">c = WithCoconut(WithPearl(SimpleMilkTea()));</span><br><span class="line">printInfo(c); <span class="comment">// 价格: 13; 加料: MilkTea, 加珍珠, 加椰果</span></span><br><span class="line"></span><br><span class="line">c = WithCoconut(WithCream(WithPearl(SimpleMilkTea())));</span><br><span class="line">printInfo(c); <span class="comment">// 价格: 18; 加料: MilkTea, 加珍珠, 加冰淇淋, 加椰果</span></span><br></pre></td></tr></table></figure>
<p>没有再定义类和接口，<code>js</code> 中用函数直接表示。</p>
<p>原始的 <code>SimpleMilkTea</code> 方法返回一个奶茶对象，然后又定义了三个装饰函数，传入一个奶茶对象，返回一个装饰后的对象。</p>
<h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><p>回到文章最开头的场景，我们需要为每个页面加载的时候上报一些自定义数据。其实我们只需要引入一个装饰函数，将传入的 <code>option</code> 进行装饰返回即可。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Base = <span class="function">(<span class="params">option</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; onLoad ...rest &#125; = option;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    ...rest,</span><br><span class="line">    <span class="comment">// 重写 onLoad 方法</span></span><br><span class="line">    onLoad(...args) &#123; </span><br><span class="line">      <span class="comment">// 增加路由字段</span></span><br><span class="line">      <span class="keyword">this</span>.reportData(); <span class="comment">// 上报数据</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// onLoad</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> onLoad === <span class="string">'function'</span>) &#123;</span><br><span class="line">        onLoad.call(<span class="keyword">this</span>, ...args);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    reportData() &#123;</span><br><span class="line">      <span class="comment">// 做一些事情</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后回到原始页面增加 <code>Base</code> 的调用即可。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Page(Base(&#123;</span><br><span class="line">  data: &#123; <span class="comment">// 参与页面渲染的数据</span></span><br><span class="line">    logs: []</span><br><span class="line">  &#125;,</span><br><span class="line">  onLoad: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 页面渲染后 执行</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>同理，利用装饰器模式我们也可以对其它生命周期统一插入我们需要做的事情，而不需要业务方自己再写一遍。</p>
<p>在大团队的话，每个业务方可能都需要在小程序生命周期做一些事情，此时只需要利用装饰器模式，编写一个装饰函数，然后在业务代码中调用即可。</p>
<p>最终的业务代码可能会装饰很多层，最终才传给小程序 <code>Page</code> 函数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Page(Base(Log(Ce(&#123;</span><br><span class="line">  data: &#123; <span class="comment">// 参与页面渲染的数据</span></span><br><span class="line">    logs: []</span><br><span class="line">  &#125;,</span><br><span class="line">  onLoad: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 页面渲染后 执行</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h1 id="易混设计模式"><a href="#易混设计模式" class="headerlink" title="易混设计模式"></a>易混设计模式</h1><p>如果之前看过 <a href="https://windliang.wang/2022/01/07/%E5%89%8D%E7%AB%AF%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B3%BB%E5%88%97-%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%99%9A%E6%8B%9F%E6%A8%A1%E5%BC%8F/">代理模式</a>，到这里可能会有一些困惑，因为和代理模式的作用很像，都是对原有对象进行包装，增强原有对象。</p>
<p>但还是有很大的不同点：</p>
<p>代理模式中，我们是直接将原对象封装到代理对象之中，对于业务方并不关系原始对象，直接使用代理对象即可。</p>
<p>装饰器模式中，我们只提供了装饰函数，输入原始对象，输出增强对象。输出的增强对象，还可以接着传入到新的装饰器函数中继续增强。对于业务方，可以随意组合装饰函数，但得有一个最最开始的原始对象。</p>
<p>再具体点：</p>
<p>代理模式的话，对象之间的依赖关系已经写死了，原始对象 <code>A</code>，新增代理对象 <code>A1</code>， <code>A1</code> 的基础上再新增代理对象 <code>A2</code>。如果我们不想要 <code>A1</code> 新增的功能了，我们并不能直接使用 <code>A2</code> ，因为 <code>A2</code> 已经包含了 <code>A1</code> 的功能，我们只能在 <code>A</code> 的基础上再新写一个代理对象 <code>A3</code>。</p>
<p>而装饰器模式，我们只提供装饰函数 <code>A1</code>，装饰函数 <code>A2</code>，然后对原始对象进行装饰 <code>A2(A1(A))</code>。如果不想要 <code>A1</code> 新增的功能，只需要把 <code>A1</code> 这个装饰器去掉，调用 <code>A2(A)</code> 即可。</p>
<p>所以使用代理模式还是使用装饰器模式，取决于我们是要把所有功能包装后最终产出一个对象给业务方使用，还是提供许多功能，让业务方自由组合。</p>
<h1 id="总"><a href="#总" class="headerlink" title="总"></a>总</h1><p>装饰器模式同样践行了「单一职责原则」，可以把对象/函数的各个功能独立出来，降低它们之间的耦合性。</p>
<p>业务开发中，如果某个对象/函数拥有了太多功能，可以考虑使用装饰器模式进行拆分。</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>油猴脚本制作微信公众号批量添加全局可转载账号脚本</title>
    <url>/2021/06/21/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E6%89%B9%E9%87%8F%E6%B7%BB%E5%8A%A0%E5%85%A8%E5%B1%80%E5%8F%AF%E8%BD%AC%E8%BD%BD%E8%B4%A6%E5%8F%B7/</url>
    <content><![CDATA[<h1 id="想法来源"><a href="#想法来源" class="headerlink" title="想法来源"></a>想法来源</h1><p>在一个公众号号主群里，有新人进来的时候就会甩出这样的一个列表。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/mp4.jpg" alt="img"></p>
<p>这如果一个一个加到公众号转载白名单里，可能就想退群了[旺柴]。于是就有了做一个批量添加公众号转载白名单的想法。</p>
<h1 id="必备神器"><a href="#必备神器" class="headerlink" title="必备神器"></a>必备神器</h1><p>我立刻就想到了用油猴脚本（<code>Tampermonkey</code>）来实现。</p>
<blockquote>
<p><strong>Tampermonkey</strong> 是一款免费的浏览器扩展和最为流行的用户脚本管理器，它适用于 <a href="https://www.tampermonkey.net/#" target="_blank" rel="noopener"><strong>Chrome</strong></a>, <a href="https://www.tampermonkey.net/#" target="_blank" rel="noopener"><strong>Microsoft Edge</strong></a>, <a href="https://www.tampermonkey.net/#" target="_blank" rel="noopener"><strong>Safari</strong></a>, <a href="https://www.tampermonkey.net/#" target="_blank" rel="noopener"><strong>Opera Next</strong></a>, 和 <a href="https://www.tampermonkey.net/#" target="_blank" rel="noopener"><strong>Firefox</strong></a>。</p>
<p>虽然有些受支持的浏览器拥有原生的用户脚本支持，但 Tampermonkey 将在您的用户脚本管理方面提供更多的便利。 它提供了诸如便捷脚本安装、自动更新检查、标签中的脚本运行状况速览、内置的编辑器等众多功能， 同时Tampermonkey还有可能正常运行原本并不兼容的脚本。</p>
</blockquote>
<p>简单的说，在控制台执行的任何 <code>js</code> 操作，处理 <code>dom</code> 、发送网络请求等，都可以通过油猴脚本在某个网站打开的时候去自动执行。</p>
<p>之所以可以想到油猴脚本，是因为前段时间我已经写过了一个油猴脚本，主要是可以<a href="https://greasyfork.org/zh-CN/scripts/424169-美团评论过滤1" target="_blank" rel="noopener">过滤美团一些内部网站的评论区</a>中的 <code>1</code>（我也不知道为什么会有评论区刷 <code>1</code> 的习惯），甚至在美团内部得到了各个官方号的推荐。主要原理就是重写了全局的 <code>fetch</code> 函数，拿到数据后将评论区内容进行一遍过滤，然后再 <code>return</code> 出去，通过这个脚本对油猴有了一个初步的认识。</p>
<h1 id="MVP-验证"><a href="#MVP-验证" class="headerlink" title="MVP 验证"></a>MVP 验证</h1><p>走一遍添加转载白名单的过程，抓一抓接口然后在控制台执行一下，看是否能成功。</p>
<p>首先搜索会发一个请求。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/mp5.jpg" alt="img"></p>
<p>选择搜索出来的公众号，添加也会发一次请求。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/mp6.jpg" alt="img"></p>
<p>将刚刚添加的 <code>小甜文</code> 公众号删除，然后将请求导出 <code>fetch</code> 代码，在控制台执行。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/mp7.jpg" alt="img"></p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/mp8.jpg" alt="img"></p>
<p>完美！如下图，执行完上边的网络请求后成功添加了「小甜文」。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/mp9.jpg" alt="img"></p>
<p>有了上边的实验基本可以确定这个功能肯定是可以做的，我们只需要传入一个公众号数组进行遍历，首先发送 <code>search</code> 请求得到相关信息，最后将信息传入到 <code>add</code> 请求中即可。</p>
<h1 id="关键代码"><a href="#关键代码" class="headerlink" title="关键代码"></a>关键代码</h1><h2 id="dom-操作"><a href="#dom-操作" class="headerlink" title="dom 操作"></a>dom 操作</h2><p>为了方便用户操作，我们需要加一些 <code>dom</code> 元素，比如 <code>批量添加</code> 这个 <code>button</code>，因为之前没在油猴脚本写过 <code>dom</code> ，所以同样先在控制台试了一下。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const fatherNode = document.getElementsByClassName(</span><br><span class="line">      &quot;global-article__add-button&quot;</span><br><span class="line">)[0]; //得到包含「添加」 button 的父元素，如下图</span><br><span class="line">const addNode = fatherNode.firstElementChild.cloneNode(true); //复制原有的「添加」 button</span><br><span class="line">addNode.innerText = &quot;批量添加&quot;;</span><br><span class="line">addNode.style = &quot;margin-left:10px&quot;;</span><br><span class="line">fatherNode.appendChild(addNode); //添加到原有的「添加」button 后边</span><br></pre></td></tr></table></figure>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/mp10.jpg" alt="img"></p>
<p>上边的代码在控制台执行，成功添加了 <code>button</code>。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/mp11.jpg" alt="img"></p>
<p>之后就是再写一个对话框，用来让用户输入公众号，这个过程慢慢调样式就可以了。</p>
<h2 id="token"><a href="#token" class="headerlink" title="token"></a>token</h2><p>还有一个关键的地方就是发送请求的参数有一个 <code>token</code> 参数。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/mp12.jpg" alt="img"></p>
<p>这个 <code>token</code> 参数从哪里来呢？因为大学的时候写过一些爬虫，所以对这个参数很敏感，第一反应就是去网页的源代码中拿。</p>
<p>下边验证了一下，打开源代码搜索 <code>token</code>。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/mp13.jpg" alt="img"></p>
<p>会发现 <code>html</code> 中有很多 <code>token</code> ，我们随便从一个 <code>dom</code> 元素中去拿即可。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const getToken = () =&gt; &#123;</span><br><span class="line">  try &#123;</span><br><span class="line">    const url = document.getElementsByClassName(</span><br><span class="line">      &quot;weui-desktop-account__nickname&quot;</span><br><span class="line">    )[0].href;</span><br><span class="line">    return url.match(/.*token=(\d+)&amp;.*/)[1];</span><br><span class="line">  &#125; catch (e) &#123;</span><br><span class="line">    return &quot;&quot;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>Ps:</p>
<p>原本以为上边就足够了，文章写完把下边的整个名单都输入的时候</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">掘金开发者社区,不正经的前端,前端公虾米,编程微刊,胡哥有话说,若川视野,前端壹栈,Vue中文社区,深圳湾码农,编程如画,前端UpUp,印记中文,全栈面试,前端森林,全栈修炼,前端GitHub,洛竹早茶馆,前端简报,前端布道师,前端Q,脑洞前端,前端三元同学,歪立邪说,前端加加,前端下午茶,前端那些趣事,前端皮小蛋,前端开发攻城狮,前端技术优选,前端自学社区,前端印象,前端迷,前端技术江湖,iCSS前端趣闻,全栈前端精选,前端复习课,前端迷社区,最帅的坏兔子,技术漫谈,1024译站,前端进阶指南,前端宇宙,全栈成长之路,豆皮范儿,小生方勤,前端巅峰,前端桃园,秋风的笔记,前端秦爱德,程序员自习室,前端食堂,鱼头的Web海洋,TianTianUp,前端从进阶到入院,编程每日一题,Hello FE</span><br></pre></td></tr></table></figure>
<p>没想到翻了车。。。由于调用的过快，微信把<strong>搜索公众号的接口</strong>给我封了，而且不是封的 <code>token</code> ，是按照账号封的，重新登录获取新的 <code>token</code> 也不行了。<strong>无法通过公众号名称搜了，只能通过公众号的微信号来搜</strong>。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/mp16.jpg" alt="img"></p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/mp17.jpg" alt="img">为了防止上边的问题出现，代码里需要停顿一下，模拟一个 <code>sleep</code> 函数。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const sleep = async (time) =&gt; &#123;</span><br><span class="line">  return new Promise((resolve) =&gt; &#123;</span><br><span class="line">    setTimeout(() =&gt; resolve(), time);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>调用完搜索接口停顿 <code>2</code> 秒，调用完添加接口停顿 <code>1</code>秒 <code>sleep(1000)</code> 。</p>
<p>pps:</p>
<p>又找了一个号测试了一下，发现事情并不简单。虽然限制了速度，但另一个号测试的时候发现搜索接口调用到大概 <code>100</code> 次的时候，出现了同样的问题，<strong>不能通过公众号名称搜索，只能通过微信号搜索</strong>。我猜测，公众号的名称搜索接口的每日调用量做了限制，会在第二天某个时间点恢复。</p>
<p>第二天的时候，果然搜索接口正常了，然后我又重复了几次批量调用，果然又不能正常搜索了。。。</p>
<h1 id="最终效果"><a href="#最终效果" class="headerlink" title="最终效果"></a>最终效果</h1><p>使用方法：</p>
<p>在浏览器插件市场安装 Tampermonkey，Chrome 的安装地址如下</p>
<p><a href="https://chrome.google.com/webstore/detail/tampermonkey/dhdgffkkebhmkfjojejmpbldmpobfkfo" target="_blank" rel="noopener">https://chrome.google.com/webstore/detail/tampermonkey/dhdgffkkebhmkfjojejmpbldmpobfkfo</a></p>
<p><img src="https://p0.meituan.net/voice/28ce63ca15877276ee8cc5fa5d0be03a37166.png" alt="img"></p>
<p>打不开的话我下了一个油猴脚本离线的包，可以从百度网盘下，链接: <a href="https://pan.baidu.com/s/1S0KmVvuoYGjul3l1XCh-mA" target="_blank" rel="noopener">https://pan.baidu.com/s/1S0KmVvuoYGjul3l1XCh-mA</a> 密码: 6bfd ，下载好后把文件拖到 Chrome 的扩展程序页面就自动安装了</p>
<p>然后通过下边的链接安装公众号脚本：</p>
<p><a href="https://greasyfork.org/zh-CN/scripts/428231-微信公众号批量添加全局可转载账号" target="_blank" rel="noopener">https://greasyfork.org/zh-CN/scripts/428231-%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E6%89%B9%E9%87%8F%E6%B7%BB%E5%8A%A0%E5%85%A8%E5%B1%80%E5%8F%AF%E8%BD%AC%E8%BD%BD%E8%B4%A6%E5%8F%B7</a></p>
<p>安装成功后进入微信公众号 -&gt; 原创 -&gt; 全局可转载账号，会发现多了一个「批量添加」的 <code>button</code>，输入所有的公众号然后添加即可。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/mp14.jpg" alt="img"></p>
<h1 id="感受"><a href="#感受" class="headerlink" title="感受"></a>感受</h1><p>很久没有写过原生的 <code>dom</code> 操作了，有种奇妙的感觉。再次感叹下油猴脚本的强大，大家浏览器上有什么痛点的话也可以试一试。另外还见识到了微信的风控能力。。。应该就是为了防止用户去爬公众号的信息。</p>
<p>文章本来周一早上就该发出来了，没想到逻辑都好了却遇到了微信这一出。用几个公众号做了几次实验，得出的结论大概是：公众号<strong>搜索接口</strong>调用频率太快以及调用次数超过某个值的时候，就无法通过公众号名称搜索公众号了，只能通过微信号进行搜索。调用过快引起的话过一会儿就恢复了，但如果是调用过多需要第二天才能恢复了。</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>工具</tag>
        <tag>油猴脚本</tag>
      </tags>
  </entry>
  <entry>
    <title>我对指针的理解</title>
    <url>/2019/12/11/%E6%88%91%E5%AF%B9%E6%8C%87%E9%92%88%E7%9A%84%E7%90%86%E8%A7%A3/</url>
    <content><![CDATA[<p>如果最开始接触的是 C/C++ 语言，一定会对指针这个概念感到困惑，一不小心就会被它绕进去，不知所云。最近看 <code>linux</code> 内核的一些代码，自己又开始接触了指针的一些东西，索性也就总结一下，写一下自己目前对于它的理解。</p>
<h1 id="关于地址"><a href="#关于地址" class="headerlink" title="关于地址"></a>关于地址</h1><p>在程序中，我们会声明一些变量，然后将数据存到变量中。例如 <code>int a = 3</code>。而在计算机内部，这个值会存到内存（RAM）中。存的话就会涉及存到哪里，因此内存会进行编址。</p>
<p>就像一栋楼的每户人家，会有门牌号，101，102，103，201，202…</p>
<p>内存也是一样的道理，会对内存空间进行分配，而最小的分配单元是字节。换句话说，一个地址对于一个字节，也就是 <code>8</code> 比特。</p>
<p>还有一个问题，用几位数进行编址，早几年都是采用 <code>32</code> 个比特就行编址，现在大部分都是 <code>64</code> 个比特了。</p>
<p>如果用 <code>32</code> 个比特进行编址，那么我们的地址数量就是 <code>2</code> 的 <code>32</code> 次方，$1K = 2^{10}$，$1M = 2^{20}$，$1G = 2^{30}$，所以 $2^{32} = 2^2 * 2^{30} = 4G$，也就是我们有 <code>4G</code> 个地址，注意这里 <code>4G</code> 就是一个数字，它是二进制下的简写形式，本质上和十进制下的 <code>1, 1231, 989932</code> 这些数字一样。</p>
<p>又因为一个地址对应一个字节，所以我们总共有 <code>4G</code> 个字节，即 <code>4GB</code>。这也是我们常说的，<code>32</code> 位操作系统下最多支持 <code>4G</code> 内存条的原因了。内存再增加的话，没有多余的地址去表示，也就没用了。</p>
<p>最后，关于地址和内存我们可以抽象成下边的图。因为 <code>32</code> 位太长了，所以书写上我们用 <code>16</code> 进制书写，每 <code>4</code> 位二进制对应一位 <code>16</code> 进制。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/point1.jpg" alt=""></p>
<p>而对于 <code>int a = 3</code>，操作系统会帮我们在内存中找一个地址，然后把 <code>3</code> 放入内存中，变成下边的样子。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/point2.jpg" alt=""></p>
<p>操作系统把 <code>3</code> 放到了地址 <code>0x00000001</code> 的位置，此外需要注意的是 <code>int</code> 是四个字节，所以需要占据四个地址，而对于 <code>3</code> 写成二进制就是 <code>0000000000...11</code>，<code>30</code> 个 <code>0</code>。</p>
<p>接下来的问题，因为是四个字节，那么对于 <code>00000000 00000000 00000000 00000011</code>，我们先存储高位的 <code>00000000</code> 还是低位的 <code>00000011</code> 呢？这和处理器架构有关，比如常见的Intel x86系列是小端序，也就是先存低位的 <code>0000011</code> ，如上图所示。相应的另外一种就是大端序，先存高位的 <code>00000000</code>。</p>
<p>那么我们如果想知道 <code>a</code> 存放数据的地址该怎么办呢？C/C++ 为我们提供了 <code>&amp;</code> 这个操作符，可以得到变量的首地址。</p>
<p>因为 <code>&amp;a</code> 得到的就是一个数字，即 <code>0x00000001</code>。那么，如果我们想把它存到一个变量中，我们需要声明一个什么类型呢？</p>
<h1 id="关于指针"><a href="#关于指针" class="headerlink" title="关于指针"></a>关于指针</h1><p>接着上边的问题，有没有一个专门存地址的类型呀，比如 <code>pointer</code> ，然后 <code>pointer p = &amp;a</code>。或者更直接点，地址不就是一个数字吗，我们也用 <code>int</code> 去存，比如 <code>int p = &amp;a</code> 。这样做看起来没什么问题，我们确实可以把地址存到一个变量中。但有一个问题，怎么逆回去呢？</p>
<p>现在，<code>p</code> 保存了数字 <code>3</code> 的首地址，怎么得到 <code>p</code> 地址对应的数据呢？直接把 <code>p</code> 地址对应的字节拿出来吗？显然是不够的，因为 <code>int</code> 是四个字节，我们应该把连续的四个字节拿出来组成一个数。</p>
<p>而不同类型 <code>double</code>、<code>int</code> 、<code>char</code> 所需要的字节数是不一样的，所以只有首地址是不够的，我们还需要知道这个地址对应的类型占几个字节。</p>
<p>所以我们需要 <code>double</code> 指针类型去存 <code>double</code> 类型的地址，也需要 <code>int</code> 指针类型去存 <code>int</code> 类型的地址，还需要 <code>char</code> 指针类型去存 <code>char</code> 类型的地址。</p>
<p>为了方便，我们就规定在一种类型后边加 <code>*</code> 号就来表示该类型的指针，也就是去存该类型的地址。</p>
<p>所以 <code>int a = 3</code>，我们就可以 <code>int* p = &amp;a</code>。</p>
<p>现在 <code>p</code> 就存了 <code>a</code> 的地址，同时也知道了当前存的是 <code>int</code> 类型的地址，也就是 <code>4</code> 个字节，我们就可以把 <code>p</code> 对应的地址中的数据正确的拿出来了。</p>
<p>同样的，C/C++ 中规定了 <code>*</code> 操作符来从对应指针类型存放的地址中拿出相应数据。</p>
<p><code>int b = *p</code>，此时 <code>b</code> 得到的就是 <code>3</code> 了。</p>
<p>所以说了这么多，指针其实就是一种存<strong>地址</strong>的类型，而又因为不同类型所占的字节数不同，所以只有地址还不够，就有了不同的类型指针。</p>
<p>做个实验，看看我们能否直接通过地址来得到对应的数据。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">1024</span>;</span><br><span class="line"><span class="keyword">int</span>* p1 = &amp;a;</span><br><span class="line"><span class="keyword">int</span> p2 = (<span class="keyword">int</span>)&amp;a;</span><br><span class="line">cout &lt;&lt; p1 &lt;&lt; endl; <span class="comment">//16 进制的地址 004FFC84</span></span><br><span class="line">cout &lt;&lt; p2 &lt;&lt; endl; <span class="comment">//10 进制的地址 5241988</span></span><br><span class="line"></span><br><span class="line">cout &lt;&lt; *p1 &lt;&lt; endl; <span class="comment">//1024</span></span><br><span class="line">cout &lt;&lt; *(<span class="keyword">int</span>*)p2 &lt;&lt; endl; <span class="comment">//1024</span></span><br></pre></td></tr></table></figure>
<p>对于 <code>p2</code> 我们需要把它强转成 <code>int*</code> 类型，作用就是告诉计算机当前的这个数字是个地址，并且对应存储的是 <code>int</code> 类型的数字。</p>
<h1 id="关于数组"><a href="#关于数组" class="headerlink" title="关于数组"></a>关于数组</h1><p>对于数组，<code>int a[3] = {1,2,3}</code>，我们知道 <code>a[0]</code> 就是 <code>1</code>，<code>a[1]</code> 就是 <code>2</code> ，<code>a[2]</code> 就是 <code>3</code>。</p>
<p><code>a</code>  是一个 <code>int[3]</code> 类型。当然如果 <code>int a[4] = {1,2,3,4}</code>，那么 <code>a</code> 就是一个 <code>int[4]</code> 类型。</p>
<p><code>int[3]</code> 类型和 <code>int*</code> 类型有一个共同点就是，它们存的都是地址。区别在于 <code>int[3]</code> 类型还代表总共连续有 <code>3</code> 个数字。</p>
<p>因此对于 <code>int[3]</code> 类型，我们得到当前有多少个数字。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a[<span class="number">3</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line"><span class="keyword">int</span> len = sizeof(a)/sizeof(a[<span class="number">0</span>]); <span class="comment">//3</span></span><br></pre></td></tr></table></figure>
<p>如果我们人为的把 <code>a</code> 赋值过来，也就是 <code>int* b = a</code>，怎么取到 <code>a[0]</code> 的值呢？只需要 <code>*b</code> 即可。怎么知道 <code>a[1]</code> 的值呢？只需要 <code>*(b + 1)</code>，注意这里对 <code>b</code> 进行加 <code>1</code>，事实上并不只是加了 <code>1</code>。因为 <code>b</code> 是一个 <code>int</code> 类型的指针，所以加一的含义是移动到下一个元素的首位置，所以会加 <code>4</code>。我们来验证下。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a []  = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line"><span class="keyword">int</span>* b = a;</span><br><span class="line">cout &lt;&lt; b &lt;&lt; endl; <span class="comment">//00DDF8AC</span></span><br><span class="line">cout &lt;&lt; b + <span class="number">1</span> &lt;&lt; endl; <span class="comment">//00DDF8B0</span></span><br><span class="line"></span><br><span class="line">cout &lt;&lt; *b &lt;&lt; endl; <span class="comment">//1</span></span><br><span class="line">cout &lt;&lt; *(b + <span class="number">1</span>) &lt;&lt; endl; <span class="comment">//2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cout &lt;&lt; b[<span class="number">0</span>] &lt;&lt; endl; <span class="comment">//1</span></span><br><span class="line">cout &lt;&lt; b[<span class="number">1</span>] &lt;&lt; endl; <span class="comment">//2</span></span><br></pre></td></tr></table></figure>
<p><code>00DDF8AC</code> 和 <code>00DDF8B0</code> 确实是差了 <code>4</code>。此外 <code>*（b+1)</code> 和 <code>b[1]</code> 是完全等价的，可以互换。</p>
<p><code>a</code> 是数组元素的首地址，此外我们知道 <code>a[0]</code> 是第一个元素，我们之前用过的取地址符 <code>&amp;</code> 在这里也可以用到。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a []  = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line"><span class="keyword">int</span>* b = &amp;a[<span class="number">0</span>]; <span class="comment">// &lt; == &gt; int* b = a;</span></span><br><span class="line">cout &lt;&lt; b &lt;&lt; endl; <span class="comment">//00DDF8AC</span></span><br><span class="line">cout &lt;&lt; b + <span class="number">1</span> &lt;&lt; endl; <span class="comment">//00DDF8B0</span></span><br><span class="line"></span><br><span class="line">cout &lt;&lt; *b &lt;&lt; endl; <span class="comment">//1</span></span><br><span class="line">cout &lt;&lt; *(b + <span class="number">1</span>) &lt;&lt; endl; <span class="comment">//2</span></span><br></pre></td></tr></table></figure>
<p>当然，因为 <code>a</code> 是一个地址，我们也可以直接对 <code>a</code> 进行取元素。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">cout &lt;&lt; *a &lt;&lt; endl; <span class="comment">//1</span></span><br><span class="line">cout &lt;&lt; *(a + <span class="number">1</span>) &lt;&lt; endl; <span class="comment">//2</span></span><br></pre></td></tr></table></figure>
<p>既然 <code>int[3]</code> 和 <code>int*</code> 都存的地址，我们把 <code>a</code> 赋值给了 <code>b</code>，那么我们能把 <code>b</code> 赋值给 <code>a</code> 吗？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a []  = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> c = <span class="number">9</span>;</span><br><span class="line"><span class="keyword">int</span>* b = &amp;c;</span><br><span class="line"></span><br><span class="line">a = b; <span class="comment">//可以吗？</span></span><br></pre></td></tr></table></figure>
<p>答案是否定的，虽然两者都存的是一个地址，但是 <code>int[3]</code> 还有一个信息，那就是代表有连续的 <code>3</code> 个元素，而指针 <code>int*</code> 仅仅是一个地址信息，所以不能直接把 <code>int* b</code>  赋值给 <code>int[3] a</code>。此外还有一个原因，数组名 <code>a</code> 是一个 <code>const</code> 变量，不可更改。</p>
<h1 id="多级指针"><a href="#多级指针" class="headerlink" title="多级指针"></a>多级指针</h1><p>我们知道指针存的是一个普通类型的地址，它就是一个数字，也需要放到内存中，就会有对应的地址，那么这个地址如果想放到一个变量中，放到什么类型呢？也就是指针的指针。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">int</span>* b = &amp;a;</span><br><span class="line"><span class="keyword">int</span>** c = &amp;b;</span><br><span class="line"><span class="keyword">int</span>*** d = &amp;c;</span><br><span class="line">cout &lt;&lt; d &lt;&lt; endl; <span class="comment">//004FFDA8</span></span><br><span class="line">cout &lt;&lt; *d &lt;&lt; endl; <span class="comment">//004FFDB4</span></span><br><span class="line">cout &lt;&lt; **d &lt;&lt; endl; <span class="comment">//004FFDC0</span></span><br><span class="line">cout &lt;&lt; ***d &lt;&lt; endl; <span class="comment">//3</span></span><br></pre></td></tr></table></figure>
<p><code>**d</code> 保存了 <code>3</code> 所在的地址，而 <code>**d</code> 也需要存在内存中，它存到了 <code>004FFDB4</code> 的地方，由 <code>*d</code> 进行保存。同样的 <code>*d</code> 也需要存到内存中，它存到了 <code>004FFDA8</code> 的地方，由 <code>d</code> 来保存，如下图所示。</p>
<p><img src="https://windliang.oss-cn-beijing.aliyuncs.com/point3.jpg" alt=""></p>
<p>事实上，<code>*</code> 的数量只是表明我们需要 <code>*</code> 几次才能拿到数据，比如 <code>int ***d = &amp;c</code>，所以我们对 <code>d</code> 进行三次的 <code>*</code> 操作就能拿到最初的元素而不是地址。</p>
<p>但不管是 <code>int *</code> 还是 <code>int **</code> 还是 <code>int ****</code> 类型，它们都存的只是地址，没有其他的信息，所以我们可以进行强制转换。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">int</span> ***********p = (<span class="keyword">int</span> ***********)&amp;a;</span><br><span class="line">cout &lt;&lt; *p &lt;&lt; endl;　<span class="comment">//00000003</span></span><br></pre></td></tr></table></figure>
<p>我们看到它输出的是 <code>00000003</code> ，因为程序以为进行 <code>*</code> 一次操作后得到的是一个地址，但事实上，我们已经得到了原本的数值。</p>
<p>当然上边的这些写法，仅用于对指针的理解，实际上不要这样做。</p>
<h1 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h1><p>二维数组我们也经常用到，比如下边的例子。就相当于一个二维矩阵。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a[<span class="number">2</span>][<span class="number">3</span>]  = &#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;&#125;</span><br><span class="line">   [<span class="number">0</span>] [<span class="number">1</span>] [<span class="number">2</span>]</span><br><span class="line">[<span class="number">0</span>] <span class="number">1</span>   <span class="number">2</span>   <span class="number">3</span></span><br><span class="line">[<span class="number">1</span>] <span class="number">4</span>   <span class="number">5</span>   <span class="number">6</span></span><br></pre></td></tr></table></figure>
<p>因此 <code>a[1][1]</code> 就会取到 <code>5</code>。</p>
<p>那么 <code>a</code> 是什么类型呢？ <code>int[2][3]</code> 类型，含义就是有连续的两个 <code>int[3]</code> 类型，和一维数组一样，存的也是一个地址。</p>
<p>那么二级指针和二维数组什么关系呢？是不是直接把二维数组的变量赋值给二级指针就可以了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a[<span class="number">2</span>][<span class="number">3</span>] = &#123; &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span> &#125;,&#123; <span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span> &#125; &#125;;</span><br><span class="line"><span class="keyword">int</span> **b = (<span class="keyword">int</span> **)a;</span><br><span class="line">cout &lt;&lt; b[<span class="number">1</span>][<span class="number">1</span>] &lt;&lt; endl;</span><br></pre></td></tr></table></figure>
<p>程序运行会直接崩溃，想一下为什么。</p>
<p>如果是 <code>cout &lt;&lt; a[1][1] &lt;&lt; endl</code> 肯定是没有问题的，我们拆分一下 <code>a[1][1]</code> 做了什么。</p>
<p>前半部分的 <code>a[1]</code> 得到的是一个 <code>int[3]</code> 类型，也就是之前分析的一维数组，换言之得到了一个地址。因此可以用一维指针存储，然后再进行 <code>(a[1])[1]</code> 就会得到 <code>5</code> 了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a[<span class="number">2</span>][<span class="number">3</span>] = &#123; &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span> &#125;,&#123; <span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span> &#125; &#125;;</span><br><span class="line"><span class="keyword">int</span> *b = a[<span class="number">1</span>]; <span class="comment">// &lt;==&gt; int *b = *(a + 1)</span></span><br><span class="line">cout&lt;&lt; b[<span class="number">1</span>] &lt;&lt; endl; <span class="comment">//5</span></span><br><span class="line">cout&lt;&lt; *(b + <span class="number">1</span>） &lt;&lt; endl; <span class="comment">//5</span></span><br></pre></td></tr></table></figure>
<p>回到最开始的问题，我们把 <code>a</code> 强制赋值给了 <code>b</code>，<code>int **b = (int **)a;</code>，然后 <code>b[1][1]</code> 会得到什么呢？</p>
<p><code>b[1][1]</code> 等价于 <code>*(*(b + 1) + 1)</code>，<code>b</code> 是 <code>int</code> 类型的指针，所以 <code>b + 1</code> 相当于在 <code>b</code> 存储的地址上加 <code>4</code>。那么 <code>*(b + 1)</code> 得到的其实是一个数字，也就是二维数组中的第二个元素 <code>2</code>，那么再进行加 <code>1</code>，最后执行的是 <code>*(2 + 1)</code>，把 <code>0x00000003</code> 当成地址去取元素，而这个地址是受保护的，不能随便去取，所以程序也就崩溃了。</p>
<p>所以怎么让 <code>b</code> 数组输出 <code>a[1][1]</code> 呢？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a[<span class="number">2</span>][<span class="number">3</span>] = &#123; &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span> &#125;,&#123; <span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span> &#125; &#125;;</span><br><span class="line"><span class="keyword">int</span>* b = (<span class="keyword">int</span> *)a;</span><br><span class="line">cout &lt;&lt; b[<span class="number">4</span>] &lt;&lt; endl; <span class="comment">//5</span></span><br></pre></td></tr></table></figure>
<p>为什么可以这样，因为二维数组在内存中也是线性存储的，我们把所有的地址打印一下。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a[<span class="number">2</span>][<span class="number">3</span>] = &#123; &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span> &#125;,&#123; <span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span> &#125; &#125;;</span><br><span class="line">cout &lt;&lt; &amp;a[<span class="number">0</span>][<span class="number">0</span>] &lt;&lt; <span class="string">" -&gt; "</span>&lt;&lt; a[<span class="number">0</span>][<span class="number">0</span>] &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &amp;a[<span class="number">0</span>][<span class="number">1</span>] &lt;&lt; <span class="string">" -&gt; "</span> &lt;&lt; a[<span class="number">0</span>][<span class="number">1</span>] &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &amp;a[<span class="number">0</span>][<span class="number">2</span>] &lt;&lt; <span class="string">" -&gt; "</span> &lt;&lt; a[<span class="number">0</span>][<span class="number">2</span>] &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &amp;a[<span class="number">1</span>][<span class="number">0</span>] &lt;&lt; <span class="string">" -&gt; "</span> &lt;&lt; a[<span class="number">1</span>][<span class="number">0</span>] &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &amp;a[<span class="number">1</span>][<span class="number">1</span>] &lt;&lt; <span class="string">" -&gt; "</span> &lt;&lt; a[<span class="number">1</span>][<span class="number">1</span>] &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &amp;a[<span class="number">1</span>][<span class="number">2</span>] &lt;&lt; <span class="string">" -&gt; "</span> &lt;&lt; a[<span class="number">1</span>][<span class="number">2</span>] &lt;&lt; endl;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">0099FBF4 -&gt; 1</span></span><br><span class="line"><span class="comment">0099FBF8 -&gt; 2</span></span><br><span class="line"><span class="comment">0099FBFC -&gt; 3</span></span><br><span class="line"><span class="comment">0099FC00 -&gt; 4</span></span><br><span class="line"><span class="comment">0099FC04 -&gt; 5</span></span><br><span class="line"><span class="comment">0099FC08 -&gt; 6</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<p>把它们的地址依次打印输出，会发现它们是连续的，并且两两相差 <code>4</code>。</p>
<p>而 <code>b[4]</code> 实际上就相当于在 <code>b</code> 的地址上加 <code>4 * 4 = 16</code>，也就是 <code>0099FBF4 + 10 = 0099FBF4</code>，这个地址就对应的是  <code>a[1][1]</code> ，也就是 <code>5</code> 了。</p>
<p>此外，首地址 <code>0099FBF4</code> 其实也有三种得到的方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a[<span class="number">2</span>][<span class="number">3</span>] = &#123; &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span> &#125;,&#123; <span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span> &#125; &#125;;</span><br><span class="line"><span class="keyword">int</span> *b = (<span class="keyword">int</span> * )a;</span><br><span class="line">cout &lt;&lt; b[<span class="number">4</span>] &lt;&lt; endl; <span class="comment">//5</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> *b = a[<span class="number">0</span>];</span><br><span class="line">cout &lt;&lt; b[<span class="number">4</span>] &lt;&lt; endl; <span class="comment">//5</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> *b = &amp;a[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">cout &lt;&lt; b[<span class="number">4</span>] &lt;&lt; endl; <span class="comment">//5</span></span><br></pre></td></tr></table></figure>
<p>其中，<code>a</code> 和 <code>a[0]</code> 存的其实都是地址，而且是相等的。但类型不同，<code>a</code> 的类型是 <code>int[2][3]</code> ，而 <code>a[0]</code> 的类型是<code>int[3]</code>。</p>
<p>一维数组可以用指针来保存其地址，二维数组刚才探讨了不能用二级指针表示，那么怎么办呢？</p>
<p>一维数组中，对于 <code>int a [2]</code> 代表连续的 <code>2</code> 个 <code>int</code>，所以我们可以定义一个 <code>int *</code> 指针来保存 <code>a</code> 。</p>
<p>二维数组中，对于 <code>int a [2][3]</code> 代表连续的 <code>2</code> 个 <code>int[3]</code>，同理我们可以定义一个 <code>int * [3]</code> 指针来保存 <code>a</code> 。</p>
<p>写法的话就是 <code>int (*b) [3] = a</code>。</p>
<p>这样的话，除了 <code>b</code> 不知道有几个 <code>int[3]</code> 以外，<code>b</code> 和 <code>a</code> 就可以混用了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a[<span class="number">2</span>][<span class="number">3</span>] = &#123; &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span> &#125;,&#123; <span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span> &#125; &#125;;</span><br><span class="line"><span class="keyword">int</span> (*b)[<span class="number">3</span>] = a;</span><br><span class="line">cout &lt;&lt; a[<span class="number">1</span>][<span class="number">1</span>] &lt;&lt; endl; <span class="comment">//5</span></span><br><span class="line">cout &lt;&lt; b[<span class="number">1</span>][<span class="number">1</span>] &lt;&lt; endl; <span class="comment">//5</span></span><br><span class="line">cout &lt;&lt; *(*(a + <span class="number">1</span>) + <span class="number">1</span>) &lt;&lt; endl; <span class="comment">//5</span></span><br><span class="line">cout &lt;&lt; *(*(b + <span class="number">1</span>) + <span class="number">1</span>) &lt;&lt; endl; <span class="comment">//5</span></span><br></pre></td></tr></table></figure>
<p>这里的话，要注意的是，<code>*(b + 1)</code> ，由于此时 <code>b</code> 是 <code>int [3]</code>  类型的指针，所以其实是加了 <code>3 * 4 = 12</code>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">cout &lt;&lt; b &lt;&lt; endl; <span class="comment">//012FF774</span></span><br><span class="line">cout &lt;&lt; b + <span class="number">1</span> &lt;&lt; endl; <span class="comment">//012FF780</span></span><br></pre></td></tr></table></figure>
<p>总之，最主要的就是要抓住指针存储的是<strong>地址</strong>，然后有各种类型的指针，当对其进行加一操作的时候，加的数值是该类型的大小。</p>
<h1 id="更多"><a href="#更多" class="headerlink" title="更多"></a>更多</h1><p>C/C++ 中的指针知识就写这么多了，另外我们平常在描述一些数据结构和算法的时候也会提到指针这个词，其实和上边的关系并不大，这里的指针就是字面意思。</p>
<p>举个例子，找出有序数字的两个数字，使得其和是 <code>sum</code> 的时候，常常用到双指针法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> <span class="number">4</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> sum = <span class="number">13</span></span><br><span class="line"></span><br><span class="line">使用 i,j 两个指针分别指向头尾</span><br><span class="line"><span class="number">1</span> <span class="number">4</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span></span><br><span class="line">^       ^</span><br><span class="line">i       j</span><br><span class="line">上边的两个指针指向的数字的和 <span class="number">1</span> + <span class="number">8</span> 小于 sum, i 指针后移</span><br><span class="line"></span><br><span class="line"><span class="number">1</span> <span class="number">4</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span></span><br><span class="line">  ^     ^</span><br><span class="line">  i     j</span><br><span class="line">上边的两个指针指向的数字的和 <span class="number">4</span> + <span class="number">8</span> 小于 sum, i 指针后移</span><br><span class="line"></span><br><span class="line"><span class="number">1</span> <span class="number">4</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span></span><br><span class="line">    ^   ^</span><br><span class="line">    i   j</span><br><span class="line">上边的两个指针指向的数字的和 <span class="number">6</span> + <span class="number">8</span> 大于 sum, j 指针前移</span><br><span class="line"></span><br><span class="line"><span class="number">1</span> <span class="number">4</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span></span><br><span class="line">    ^ ^</span><br><span class="line">    i j</span><br><span class="line">上边的两个指针指向的数字的和 <span class="number">6</span> + <span class="number">7</span> 等于 sum, 结束</span><br></pre></td></tr></table></figure>
<p>此外，当我们谈论链表的时候，也常常说 <code>next</code>  指针，但对于一些更高层的语言，比如 <code>java</code>，其实是没有我们上边分析的指针的概念的，我们并不能知道变量的地址。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    Node next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>比如上边的例子，我们常常说 <code>next</code> 指针，但其实和 C/C++ 中的指针还是有区别的，对于 <code>java</code> ，<code>next</code> 其实是个引用。</p>
<h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>其实本来是想总结 <code>linux</code> 内核源码中链表的实现的，没想到将指针概念就讲了这么多，哈哈，那就下篇文章写 <code>linux</code> 的链表吧，非常有意思，会对指针有个更深的了解。</p>
<p>前边讲了那么多，其实我们只要把握住一点，指针类型变量存的是<strong>地址</strong>，然后有各种各样类型的指针，类型是告诉我们当通过这个地址取元素的时候，要取连续几个字节的数据。</p>
]]></content>
      <categories>
        <category>计算机</category>
      </categories>
      <tags>
        <tag>编程</tag>
        <tag>语言</tag>
      </tags>
  </entry>
  <entry>
    <title>我的秋招之路</title>
    <url>/2019/10/29/%E6%88%91%E7%9A%84%E7%A7%8B%E6%8B%9B%E4%B9%8B%E8%B7%AF/</url>
    <content><![CDATA[<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/meituan.png" alt=""></p>
<p>秋招差不多以上海美团的签约结束了，在此记录一下秋招自己的时间线，以及秋招需要准备的东西吧。</p>
<p>先说下背景，本科是中国地质大学（武汉），然后是去年保研到华中科技大学，两年制专硕，所以基本上去年来了华科，感觉还啥也没干今年就秋招了。和女朋友商量了下未来的工作地点，最终决定去上海了，所以后边也只投了上海的部门，岗位是前端。</p>
<h1 id="时间线"><a href="#时间线" class="headerlink" title="时间线"></a>时间线</h1><p>6.18 投了今日头条（字节跳动）的提前批「超级工程师」计划，当时本来是去现场直接面试的。后来改成了在 7.6  在北京参观总部，变为远程面试。</p>
<p>在 7.8 号迎来了人生的第一场面试，采用的视频面试，在「牛客网」上进行（找互联网相关工作一定会知道这个网站），面试的界面除了视频交流还可以现场写代码，是的，头条比较喜欢考算法题。</p>
<p>一面面试官当时竟然问了「2048」这个游戏怎么拿最高分，设计一种算法。当时我说了用贪心的算法，讲了下自己的思路，接着面试官说了他的想法，表示这个题比较开放，也没有标准答案。</p>
<p>当时感觉自己表现的不好，但没想到又收到了第二天的面试，第二天有了第一天的经验，感觉也没那么紧张了，和面试官聊的自我感觉良好。但后来就一直没消息了，几周后给 HR 发短信，得知自己没有通过，和字节的缘分也就到此结束了。（后来 9.8 号又参加字节跳动正式批的笔试，题目比较难，最后收到了感谢信）</p>
<p>一眨眼 7 月就结束了，此外在 7.28 号参加了拼多多的第一次笔试，「学霸批」计划，遗憾的是第一次笔试并没有过。</p>
<p>面头条都到的经验就是有些东西还是得去刻意的记一下的，很像我们一直以来的应试教育。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/toutiao.jpg" alt=""></p>
<p>在 8.2 号和 8.8 又分别投了腾讯和阿里的提前批，8.13 号又投了拼多多的第二次提前批「寻梦计划」，15 号还投了携程的提前批。</p>
<p>8.15 号晚上进行了腾讯的第一次电话面试，表现的可以说很不好了。和腾讯面试官通话期间，阿里面试官也打进了电话。和腾讯面试官一结束，立刻又开始了和阿里的第一次电话面试，当时已经晚上 10 点了，阿里面试官问的几个问题，刚好又是腾讯刚刚问的，又恰好是我不会的，当时真的很绝望了，感觉各种回答都语无伦次了。</p>
<p>面完以后，真的有些抑郁了，和女朋友电话还探讨了很久人生意义，突然对这个世界失去了兴趣，然后也没啥结论，就是心情突然很低落，可能因为给自己的压力太大了吧，然后就躺下思考人生了，幸运的是，睡前还是想通了。</p>
<p>在第二天，恰巧在知乎看到这样一个问题。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/zhihu.jpg" alt=""></p>
<p>感觉题主的男朋友和自己很像，然后就顺手去回答了问题，并且把前一天的感悟也加了进去。<br><a href="https://www.zhihu.com/question/335453235/answer/791492481" target="_blank" rel="noopener">https://www.zhihu.com/question/335453235/answer/791492481</a></p>
<p>总之，最后的结论就是「人生就是一场体验」，说白了，就是看开点，一切随缘。然后从 16 号开始，报着看开的心态，开始准备了前端，自己也开始看了看别人的面经，各种知识点也仔细准备了一下。</p>
<p>一周后没想到又接到了阿里的二面，同样是自我感觉良好，不过和字节一样，也到了二面就结束了。</p>
<p>接着 8.30 进行了拼多多的二次笔试。</p>
<p>转眼就到了 9 月份，当时的感觉就是太快了，太快了，感觉还没准备好，秋招就要结束了。当时其实有些慌了，毕竟提前批一个 offer 都没拿到，然后自己在 9 月初的前几天，把上海有的公司差不多都投了一遍，小红书，美团，B 站，百度，华为，爱奇艺，流利说，阅文集团，同时这几天做了很多的笔试。</p>
<p>9.9 号猫眼来华科宣讲会，自己在官网看了一下有上海部门就去了，现场进行了笔试。就在宣讲会期间，分别接到了美团约电话一面，9.10 号下午小红书现场面试。</p>
<p>9.10 上午进行了美团电话一面，很愉快，面试官表示尽快给约二面面试官。</p>
<p>9.10 下午去了小红书武汉部门，进行现场面试。人很多，很慢，但体验还是不错的，到了晚上饭点的时候还给了盒饭。最终，三面 + HR 全部通过，这也是自己第一家到了 HR 面的，终于也松了口气。</p>
<p>9.11 上午，猫眼现场面试，这个进展很快，三面 + HR 很快结束了，遗憾的是猫眼主要只招北京的，所以当时我也就拒绝了。</p>
<p>然后又清闲了几天，9.16 美团进行了电话二面。</p>
<p>9.18 中午美团现场终面 +  HR 面，第三次进入了 HR 面，感觉最近这几次现场面都很顺利。</p>
<p>由于 9.10 晚上面小红书，所以错过了当天 B 站（百度，他俩冲突了）的笔试 ，因此 9.18 下午去 B 站宣讲会手动投了一份简历。</p>
<p>9.19 号，同学收到了携程的面试通知，自己没收到，虽然已经过了小红书和美团的 HR 面，但还是怕不稳，所以去在武大的宣讲会又手动投了一份简历。（不过到现在，依旧也没收到 B 站和携程的面试，似乎现场投了简历并没有什么用）</p>
<p>9.21 号拼多多现场面，一面挂。</p>
<p>至此，面试笔试基本结束，就焦急的等待小红书和美团的意向书。</p>
<p>9.25 拿到了小红书的录取意向书，大大的松了一口气，可以愉快的过一个国庆了。</p>
<p>国庆期间美团也一直没消息，觉得应该会去小红书了，也挺好的，最后也不用纠结去哪里。美团感觉自己面的还可以，想不通为什么还没给意向书。</p>
<p>9.26 流利说进行了电话一面，但此时其实已经无心面试了（后来约二面，也就直接拒掉了）。</p>
<p>10.11 收到了美团的录取意向书。</p>
<p>10.15 华科三方开通，下午小红书 HR 就约到公司谈薪资，签三方。不过当时，美团薪资还没谈，所以也和 HR 商量，等美团下来再选择。</p>
<p>10.17 被阿里捞起来了，约面试，但此时已然是一条咸鱼了，没有心思面试，只想等着了。还有，之前腾讯广州微信小程序部门的 HR 也陆续给自己打过三次电话约面试，但由于部门在广州，我也就直接拒了。阿里腾讯秋招的缘分，也就此结束了。</p>
<p>接下来就是折磨人的时间了，美团迟迟不谈薪资，offershow 上大家也是编各种段子进行调侃。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/of1.jpg" alt=""></p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/of3.jpg" alt=""></p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/of2.jpg" alt=""></p>
<p>我相对于他们还好，我是 10.11 号才收到意向书，他们提前批 9 月初就有收到意向书的了，一直等到了 10 月中旬还是没有谈薪资。</p>
<p>10.24 号，美团终于和我谈了薪资，在可接受范围内，就准备签美团了。</p>
<p>10.28 号，小红书这边打过来又给调薪，但自己最终还是决定去美团了。说实话感觉真的很对不起小红书，小红书发的意向书早，而且还等了自己这么久。</p>
<p>10.29 号，收到了美团正式 offer，也收到了三方邀约，至此，秋招正式结束。</p>
<h1 id="分享"><a href="#分享" class="headerlink" title="分享"></a>分享</h1><ul>
<li><p>秋招必备的工具</p>
<p>牛客网，<a href="https://www.nowcoder.com/" target="_blank" rel="noopener">https://www.nowcoder.com/</a> ，可以在上边看面经，刷相关笔试面试题，看其他人各个厂的进度，有人也会发各个公司微信群的二维码，加进去也可以一起等待 offer。</p>
<p>力扣（leetcode），<a href="https://leetcode.com/problemset/all/" target="_blank" rel="noopener">https://leetcode.com/problemset/all/</a>，现在也有中国站  <a href="https://leetcode-cn.com/problemset/all/" target="_blank" rel="noopener">https://leetcode-cn.com/problemset/all/</a> 了，当然还要推荐一下我的刷题总结，哈哈，每道题都有详细的题解，现在有 150 到了，大家给的反馈也都表示总结的很好，地址是 <a href="https://leetcode.wang/" target="_blank" rel="noopener">https://leetcode.wang/</a>。刷题可以说是必备的了，不管是笔试或是面试，都会涉及到，运气好的话，笔试和面试可能碰到上边的原题。</p>
<p>offershow，一个小程序，上边会有一些人去匿名公开自己谈的薪资，可以上去瞅瞅，自己多少会有一个底。</p>
</li>
<li><p>秋招流程</p>
<p>提前批 -&gt;（正式批）-&gt; 拿到录取意向书，又叫 oc -&gt;（签订两方协议） -&gt; ( sc）-&gt; 谈薪资 -&gt; 签订三方协议</p>
<p>上边加括号表示是可选的，可能有，可能没有。</p>
<p>基本上都是笔试 + 面试，有的公司会免笔试。面试前有的公司会有一个测评，基本上就是一些找规律，还有语文段落提取，性格测试的题，都是选择题。</p>
<p>oc，offer call 的简称，一般会收到 HR 的电话或者邮件，给你发一个录取意向书，也就是一张图片吧。</p>
<p>两方协议，现场或者邮寄签，如果违约的话会有一定的违约金，具体看协议规定。大多数人为了保底 offer，HR 给 oc 或者签订两方协议，都会先同意下来，虽然不诚信，但也没办法。所以一些公司，发的 oc 会多于 hc（head count，也就是要招的人）。大家相互备胎。</p>
<p>sc，suvery call 的简称，HR 会打电话问你目前的 offer，以便更好的给你定薪资。</p>
<p>谈薪资，一般就是拿手上更有竞争力的 offer 和 HR argue，HR 会告诉你能不能帮你再争取更高的薪资。</p>
<p>签订三方协议，有的学校是网签，有的学校是纸质的，这个签了以后就基本定了。我们学校的话，99% 签了就不能违约了，具体还是看学校怎么规定，有的学校可能可以违约一下，所谓的撕三方。</p>
<p>另外补充下，只要过了 HR 面，并且没有收到感谢信，最后都还是有机会的，不要太慌。</p>
</li>
<li><p>面试会有哪些内容</p>
<p>每家公司其实差不多，我只了解前端和后台岗位的，基本上就是四大块。</p>
<p>第一块，自己所做的项目，基本上会给不同面试官讲一次又一次，所以一定要熟悉自己的项目，总结出来。</p>
<p>第二块，自己岗位的基础知识，各种数据结构啦，语言的一些特性啦，可以在牛客网上看面经。</p>
<p>第三块，算法题，上边讲到的，leetcode 的题目，一般现场写到纸上或者面试官电脑上，有的要求调通，有的只需要写出大概思路即可。</p>
<p>第四块，比较开放性的问题，未来的规划？自己最自豪的事情？</p>
</li>
</ul>
<h1 id="一些经验"><a href="#一些经验" class="headerlink" title="一些经验"></a>一些经验</h1><p>最早 7 月份就有公司开始秋招了，所以要提前关注，以免错过。8 月份提前批就多了起来，像腾讯、阿里，这些大厂也在这个时候开始，可以找学长学姐内推，也可以在牛客网上找内推码。然后就是 9 月份了，所谓的金 9 银 10，9 月份就是找工作的黄金时期，大部分人基本在 9 月份就会拿到几个 offer。不过 9 月份没找到的话，也不要灰心，10 月份依旧有很多机会。</p>
<p>对于宣讲会，如果是现场笔试的可以去参加，基本上第二天就开始现场面试了。至于只是投简历的，我觉得不是很有必要去。</p>
<p>秋招确实将一定程度上决定自己未来的一些发展，所以压力难免会大一些，要多和身边的同学交流，不管是谈心也好，还是交流面试经验，都挺好。</p>
<p>能提早面试就提早去参加，不要拖，不然到后边会发现自己还没开始，各个公司都要结束了。还有就是到后期，如果已经拿到了几个 offer 的话，再有面试其实已经无心面试了，一般就直接拒掉了。所以基本上状态好的时候，就是在 9 月份，可以多面几个公司，多一些选择。</p>
<h1 id="总"><a href="#总" class="headerlink" title="总"></a>总</h1><p>明年就会开启新的一段旅程了，不管怎么样，尽情体验吧，越努力，越幸运，共勉。</p>
]]></content>
      <categories>
        <category>随想</category>
      </categories>
      <tags>
        <tag>随想</tag>
      </tags>
  </entry>
  <entry>
    <title>机器学习理论系列五 : Logistic Regression (逻辑回归)</title>
    <url>/2018/01/20/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%90%86%E8%AE%BA%E7%B3%BB%E5%88%97%E4%BA%94-Logistic-Regression-%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92/</url>
    <content><![CDATA[<blockquote>
<p>Sigmoid 美 [‘sɪgmɔɪd] : S 形的<br>Discriminative 美 [dɪ’skrɪməˌneɪtɪv] : 判别</p>
</blockquote>
<p>本文是对李宏毅教授课程的笔记加上自己的理解重新组织，如有错误，感谢指出。<br>视频及 PPT 原教程：<a href="https://pan.baidu.com/s/1brbb6rX" target="_blank" rel="noopener">https://pan.baidu.com/s/1brbb6rX</a> 密码：ty1r</p>
<p>接着上篇的生成模型，我们进行下公式的变形，见证奇迹的发生！</p>
<p><img src="/2018/01/20/机器学习理论系列五-Logistic-Regression-逻辑回归/1.jpg" alt=" "></p>
<p>问题的关键是求出 P( x | C1) 和 P( x | C2)，我们对它们的分布做出假设，用贝叶斯或者高斯分布最终求出了 P( x | C1) 和 P( x | C2)，从而解决了我们的问题。而在这里我们先对公式进行一下变形。</p>
<p><img src="/2018/01/20/机器学习理论系列五-Logistic-Regression-逻辑回归/2.jpg" alt=" "><br>exp( -z ) 代表 e 的负 z 次方 </p>
<p>最终的结果其实就是 S 型函数，即 Sigmoid function ，记为 $\sigma(z)$ 。</p>
<p><img src="/2018/01/20/机器学习理论系列五-Logistic-Regression-逻辑回归/3.jpg" alt=" "><br>我们再来看一下 z 长什么样子。</p>
<p>为了方便推导，我们依旧假设 P( x | C1) 、P( x | C2) 符合高斯分布，并且  <img src="/2018/01/20/机器学习理论系列五-Logistic-Regression-逻辑回归/5.jpg" alt=" "> 当然如果假设它是别的分布，最终依旧可以推导出同样的公式。    </p>
<p><img src="/2018/01/20/机器学习理论系列五-Logistic-Regression-逻辑回归/4.jpg" alt=" "><br>经过代入、合并、化简，它变成了下边的样子。</p>
<p><img src="/2018/01/20/机器学习理论系列五-Logistic-Regression-逻辑回归/6.jpg" alt=" "><br>仔细观察，我们可以把 x 前边的系数记为一个向量 w , 而后边的一大串其实这是一个标量，一个常数项，我们记为 b 。</p>
<p>因为假设不同的分布最终都可以得到这个式子，所以我们如果对 w 和 b 直接求解，求得的 w 和 b 就可能是任何一种分布， 它可以是高斯分布，可以是贝叶斯，甚至是一些没有命名的分布。</p>
<p>而这个模型就是 LR ( Logistic Regression )，也是判别 ( Discriminative ) 模型的一种。虽然和生成模型经过变化长一个样子，但由于求参数方式的不同，最终的效果也不一样。</p>
<p><img src="/2018/01/20/机器学习理论系列五-Logistic-Regression-逻辑回归/7.jpg" alt=" "><br>判别模型中我们直接求 w 和 b （当然是梯度下降的方式，后边我们进行推导），生成模型中我们先假设一种分布，然后再往出推导公式从而算出 w 和 b。</p>
<p>区别很容易理解，判别模型中我们直接求出 w 和 b ，此时代表的分布并不是确定的，可能是贝叶斯，可能是高斯或者其他。而生成模型开始假设什么分布它就是什么分布。</p>
<p>很明显，判别模型在大多数情况下会优于生成模型，因为生成模型需要人为的假设分布，一旦假设错了，它的 w 和 b 即使求的再正确，最终结果也不会太好。</p>
<p>生成模型就没有什么好处了吗？ 当然是有的</p>
<ul>
<li><p>如果我们的数据很少，而此时我们先假设一个分布再去求，最终效果肯定会比判别模型中盲目的求要好。</p>
</li>
<li><p>如果数据的噪音比较多，也就是很多错误的数据，如果我们开始假设了分布，这些噪声对模型不会造成太大的影响，这种情况下它更鲁棒 ( 稳定、健壮 ) 些。</p>
</li>
</ul>
<p>说了这么多，那么我们如何求 w 和 b 呢？</p>
<p>下边进入我们熟悉的流程 Model → Goodness of a Function → Find the best function 。</p>
<h2 id="Model"><a href="#Model" class="headerlink" title="Model"></a>Model</h2><p>再强调一下，忘掉我们怎么推出的这个模型，它和高斯分布没什么关系，即使假设其他的分布依旧会推出下边这个模型。现在我们的重点是如果有了这个模型，怎么去求 w 和 b 。</p>
<p><img src="/2018/01/20/机器学习理论系列五-Logistic-Regression-逻辑回归/8.jpg" alt=" "><br>阙值可以选 0.5 ，也可以选其他，具体看问题需要。<br>换一种画法</p>
<p><img src="/2018/01/20/机器学习理论系列五-Logistic-Regression-逻辑回归/9.jpg" alt=" "></p>
<h2 id="Goodness-of-Function"><a href="#Goodness-of-Function" class="headerlink" title="Goodness of Function"></a>Goodness of Function</h2><p>看下我们的数据</p>
<p><img src="/2018/01/20/机器学习理论系列五-Logistic-Regression-逻辑回归/10.jpg" alt=" "><br>此时我们的输出是 C1 、C2 ，首先我们得把它数值化，我们假设 C1 是 1，C2 是 0 。</p>
<p><img src="/2018/01/20/机器学习理论系列五-Logistic-Regression-逻辑回归/11.jpg" alt=" "><br>有了这些数据，有了模型，我们先假设所有数据其实是从下边这个模型（LR）得到的。</p>
<p><img src="/2018/01/20/机器学习理论系列五-Logistic-Regression-逻辑回归/12.jpg" alt=" "><br>记得线性回归中的 Loss function 怎么定义的吗？我们是不是也可以这样做呢？</p>
<p><img src="/2018/01/20/机器学习理论系列五-Logistic-Regression-逻辑回归/13.jpg" alt=" "><br>很可惜，不可以，此时的 L 不是一个凸函数，局部最优值太多了，根本没法去梯度下降，所以我们得找其他的 Loss Function 。</p>
<p>这里我们假设原来的每一个数据是一个伯努利分布，也就是我们熟悉的两点分布。</p>
<p><img src="/2018/01/20/机器学习理论系列五-Logistic-Regression-逻辑回归/14.jpg" alt=" "><br>我们假设这样一个事件，假设一个随机变量是 Y ，数据属于 C1 类记为成功，记做 Y = 1 ，如果不属于 C1 类记为失败，记做 Y =  0 。</p>
<p>这样的话，所有数据都可以统一为一个式子 , n 代表第几个数据：</p>
<p><img src="/2018/01/20/机器学习理论系列五-Logistic-Regression-逻辑回归/15.jpg" alt=" "><br>而我们的模型算出的每个数据的概率，也可以统一为一个式子：</p>
<p><img src="/2018/01/20/机器学习理论系列五-Logistic-Regression-逻辑回归/16.jpg" alt=" "><br>如何让分布 q 尽可能的接近分布 p 呢？让他们的交叉熵最小！交叉熵的概念可以看下<a href="https://www.zhihu.com/question/41252833" target="_blank" rel="noopener">知乎</a>里的讨论。交叉熵的公式如下：</p>
<p><img src="/2018/01/20/机器学习理论系列五-Logistic-Regression-逻辑回归/17.jpg" alt=" "><br>x 这里指的是 Y 的取值。</p>
<p>然后对于每一个数据的交叉熵是</p>
<p><img src="/2018/01/20/机器学习理论系列五-Logistic-Regression-逻辑回归/18.jpg" alt=" "><br>我们再把所有的交叉熵求和，就是我们的 Loss Function 了。</p>
<p><img src="/2018/01/20/机器学习理论系列五-Logistic-Regression-逻辑回归/19.jpg" alt=" "></p>
<p>我们再换种思路求 Loss Function , 即用最大似然估计的方法，也就是利用所有的数据，找到一组参数使得数据尽可能的符合模型。假设我们的分布如下</p>
<p><img src="/2018/01/20/机器学习理论系列五-Logistic-Regression-逻辑回归/16.jpg" alt=" "></p>
<p>最大似然估计就是把每个样本带进去，然后乘起来，也就是</p>
<p><img src="/2018/01/20/机器学习理论系列五-Logistic-Regression-逻辑回归/20.jpg" alt=" "><br>我们需要做的就是找到 w , b 使得这里的 likelihood 最大。</p>
<p><img src="/2018/01/20/机器学习理论系列五-Logistic-Regression-逻辑回归/21.jpg" alt=" "><br>我们把 L 取一下自然对数，然后添一个负号，求最大变成求最小。</p>
<p><img src="/2018/01/20/机器学习理论系列五-Logistic-Regression-逻辑回归/22.jpg" alt=" "><br>接下来进行化简，把 L 代入，ln 里的拿出来乘法变加法</p>
<p><img src="/2018/01/20/机器学习理论系列五-Logistic-Regression-逻辑回归/23.jpg" alt=" "><br>神奇的第二个等号后边的变化是怎么回事呢？其实我们利用了数据</p>
<p><img src="/2018/01/20/机器学习理论系列五-Logistic-Regression-逻辑回归/11.jpg" alt=" "><br>我们把 $\hat{y}^1 , \hat{y}^2 , \hat{y}^3$代入就可以反推回第一个等号后边的式子了。</p>
<p>然后我们把式子合并就变成了下边这样</p>
<p><img src="/2018/01/20/机器学习理论系列五-Logistic-Regression-逻辑回归/24.jpg" alt=" "></p>
<p>是的，你没有看错，我们得到了和之前用交叉熵推出的一样的公式！！！究竟是道德的沦丧？还是人性的缺失？让我们一起来走近科学。</p>
<h2 id="Best-Function"><a href="#Best-Function" class="headerlink" title="Best  Function"></a>Best  Function</h2><p>让我们看下对 wi 求偏导， b 就先不看了。</p>
<p><img src="/2018/01/20/机器学习理论系列五-Logistic-Regression-逻辑回归/25.jpg" alt=" "><br>所以我们的 wi 的更新方式就是</p>
<p><img src="/2018/01/20/机器学习理论系列五-Logistic-Regression-逻辑回归/26.jpg" alt=" "><br>有了参数的更新方式，下边就不用讲了吧，嘻嘻嘻。</p>
<h2 id="与线性回归对比"><a href="#与线性回归对比" class="headerlink" title="与线性回归对比"></a>与线性回归对比</h2><p><img src="/2018/01/20/机器学习理论系列五-Logistic-Regression-逻辑回归/28.jpg" alt=" "></p>
<p><img src="/2018/01/20/机器学习理论系列五-Logistic-Regression-逻辑回归/27.jpg" alt=" "><br>神奇之处又来了，梯度下降参数更新的公式竟然一样！！！究竟是道德的沦丧？还是人性的缺失？让我们一起来走近科学。</p>
<script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML">
</script>
<script type="text/x-mathjax-config">
MathJax.Hub.Config({tex2jax: {inlineMath: [['$','$'], ['\\(','\\)']]}});
</script>
]]></content>
      <tags>
        <tag>机器学习</tag>
        <tag>分类</tag>
        <tag>逻辑回归</tag>
      </tags>
  </entry>
  <entry>
    <title>油猴脚本重写fetch和xhr请求</title>
    <url>/2022/08/23/%E6%B2%B9%E7%8C%B4%E8%84%9A%E6%9C%AC%E9%87%8D%E6%96%B0fetch%E5%92%8Cxhr%E8%AF%B7%E6%B1%82/</url>
    <content><![CDATA[<p>写过几个油猴脚本，经常对页面请求返回的数据进行拦截或者覆盖，这篇文章就做个总结，涉及到 <code>fetch</code> 和 <code>xhr</code> 两种类型的请求。</p>
<h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><p>先简单写个 <code>html</code> 页面，搭一个 <code>koa</code> 服务进行测试。</p>
<p><code>html</code> 页面提供一个 <code>id=json</code> 的 <code>dom</code> 用来加数据，后边我们补充 <code>test.js</code> 文件来请求接口。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        我运行了</span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"json"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"test.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>将 <code>html</code> 通过 <code>VSCode</code> 的 <code>live-server</code> 插件运行在 <code>http://127.0.0.1:5500/</code> 上。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220823080047006.png" alt="image-20220823080047006"></p>
<p>安装 <code>koa</code> 和 <code>koa-route</code> 的 <code>node</code> 包，提供一个接口。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> koa = <span class="built_in">require</span>(<span class="string">"koa"</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> koa();</span><br><span class="line"><span class="keyword">const</span> router = <span class="built_in">require</span>(<span class="string">"koa-router"</span>)();</span><br><span class="line">router.get(<span class="string">"/api/query"</span>, <span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">    ctx.body = &#123;</span><br><span class="line">        data: [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],</span><br><span class="line">        code: <span class="number">0</span>,</span><br><span class="line">        msg: <span class="string">"成功"</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 跨域</span></span><br><span class="line">app.use(<span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">    ctx.set(<span class="string">"Access-Control-Allow-Origin"</span>, <span class="string">"http://127.0.0.1:5500"</span>);</span><br><span class="line">    ctx.set(</span><br><span class="line">        <span class="string">"Access-Control-Allow-Headers"</span>,</span><br><span class="line">        <span class="string">"Content-Type, Content-Length, Authorization, Accept, X-Requested-With"</span></span><br><span class="line">    );</span><br><span class="line">    ctx.set(<span class="string">"Access-Control-Allow-Methods"</span>, <span class="string">"PUT, POST, GET, DELETE, OPTIONS"</span>);</span><br><span class="line">    <span class="keyword">if</span> (ctx.method === <span class="string">"OPTIONS"</span>) &#123;</span><br><span class="line">        ctx.body = <span class="number">200</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">await</span> next();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 启动路由</span></span><br><span class="line">app.use(router.routes());</span><br><span class="line"><span class="comment">// 设置响应头</span></span><br><span class="line">app.use(router.allowedMethods());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听端口</span></span><br><span class="line">app.listen(<span class="number">3002</span>);</span><br></pre></td></tr></table></figure>
<p>提供了 <code>/api/query</code> 接口，返回 <code>data: [1,2,3],</code> 。运行在本地的 <code>3002</code> 端口上，并且设置跨域，允许从 <code>http://127.0.0.1:5500</code> 访问。</p>
<h1 id="油猴脚本"><a href="#油猴脚本" class="headerlink" title="油猴脚本"></a>油猴脚本</h1><p>先简单写一个插入 <code>我是油猴脚本的文本</code> 的脚本，后边再进行修改。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ==UserScript==</span></span><br><span class="line"><span class="comment">// @name         网络拦截测试</span></span><br><span class="line"><span class="comment">// @namespace    https://windliang.wang/</span></span><br><span class="line"><span class="comment">// @version      0.1</span></span><br><span class="line"><span class="comment">// @description  测试</span></span><br><span class="line"><span class="comment">// @author       windliang</span></span><br><span class="line"><span class="comment">// @match        http://127.0.0.1:5500/index.html</span></span><br><span class="line"><span class="comment">// @run-at       document-start</span></span><br><span class="line"><span class="comment">// @grant        unsafeWindow</span></span><br><span class="line"><span class="comment">// ==/UserScript==</span></span><br><span class="line"></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">window</span>.unsafeWindow)</span><br><span class="line">    <span class="keyword">const</span> dom = <span class="built_in">document</span>.createElement(<span class="string">"div"</span>);</span><br><span class="line">    dom.innerText = <span class="string">'我是油猴脚本的文本'</span></span><br><span class="line">    <span class="built_in">document</span>.getElementsByTagName(<span class="string">"body"</span>)[<span class="number">0</span>].append(dom);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>
<p>此时页面已经被成功拦截：</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220823101447976.png" alt="image-20220823101447976"></p>
<p>这里提一句，油猴脚本如果使用 <code>@grant</code> 申请了权限，此时脚本会运行在一个沙箱环境中，如果想访问原始的 <code>window</code> 对象，可以通过 <code>window.unsafeWindow</code> 。</p>
<p>并且我们加了 <code>@run-at</code> ，让脚本尽快执行。</p>
<h1 id="fetch-请求"><a href="#fetch-请求" class="headerlink" title="fetch 请求"></a>fetch 请求</h1><p>在 <code>html</code> 请求的 <code>test.js</code> 中添加 <code>fetch</code> 的代码。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">fetch(<span class="string">"http://localhost:3002/api/query"</span>)</span><br><span class="line">  .then(<span class="function">(<span class="params">response</span>) =&gt;</span> response.json())</span><br><span class="line">  .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> dom = <span class="built_in">document</span>.getElementById(<span class="string">"json"</span>); </span><br><span class="line">  dom.innerText = res.data;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>看下页面，此时就会把 <code>data</code> 显示出来。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220823102924464.png" alt="image-20220823102924464"></p>
<p>如果想更改返回的数据，我们只需要在油猴脚本中重写 <code>fetch</code> 方法，将原数据拿到以后再返回即可。 </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ==UserScript==</span></span><br><span class="line"><span class="comment">// @name         网络拦截测试</span></span><br><span class="line"><span class="comment">// @namespace    https://windliang.wang/</span></span><br><span class="line"><span class="comment">// @version      0.1</span></span><br><span class="line"><span class="comment">// @description  测试</span></span><br><span class="line"><span class="comment">// @author       windliang</span></span><br><span class="line"><span class="comment">// @match        http://127.0.0.1:5500/index.html</span></span><br><span class="line"><span class="comment">// @run-at       document-start</span></span><br><span class="line"><span class="comment">// @grant        unsafeWindow</span></span><br><span class="line"><span class="comment">// ==/UserScript==</span></span><br><span class="line"></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">window</span>.unsafeWindow)</span><br><span class="line">    <span class="keyword">const</span> dom = <span class="built_in">document</span>.createElement(<span class="string">"div"</span>);</span><br><span class="line">    dom.innerText = <span class="string">'我是油猴脚本的文本'</span></span><br><span class="line">    <span class="built_in">document</span>.getElementsByTagName(<span class="string">"body"</span>)[<span class="number">0</span>].append(dom);</span><br><span class="line">    <span class="keyword">const</span> originFetch = fetch;</span><br><span class="line">    <span class="built_in">console</span>.log(originFetch)</span><br><span class="line">    <span class="built_in">window</span>.unsafeWindow.fetch = <span class="function">(<span class="params">url, options</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> originFetch(url, options).then(<span class="keyword">async</span> (response) =&gt; &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(url)</span><br><span class="line">            <span class="keyword">if</span>(url === <span class="string">'http://localhost:3002/api/query'</span>)&#123;</span><br><span class="line">                <span class="keyword">const</span> responseClone = response.clone();</span><br><span class="line">                <span class="keyword">let</span> res = <span class="keyword">await</span> responseClone.json();</span><br><span class="line">                res.data.push(<span class="string">'油猴脚本修改数据'</span>)</span><br><span class="line">                <span class="keyword">const</span> responseNew = <span class="keyword">new</span> Response(<span class="built_in">JSON</span>.stringify(res), response);</span><br><span class="line">                <span class="keyword">return</span> responseNew;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> response;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>
<p>对 <code>response</code> 的处理有点绕，当时也是试了好多次才试出了这种方案。</p>
<p>做的事情就是把原来返回的 <code>respones</code> 复制，通过 <code>json</code> 方法拿到数据，进行修改数据，最后新生成一个 <code>Response</code> 进行返回。</p>
<p>看下效果：</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220823173813341.png" alt="image-20220823173813341"></p>
<p>成功修改了返回的数据。</p>
<h1 id="xhr"><a href="#xhr" class="headerlink" title="xhr"></a>xhr</h1><p>我们将 <code>fetch</code> 改为用 <code>xhr</code> 发送请求，因为页面简单所以请求可能在油猴脚本重写之前就发送了，正常网站不会这么快，所以这里加一个 <code>setTimeout</code> 进行延时。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">    xhr.open(<span class="string">'GET'</span>, <span class="string">'http://localhost:3002/api/query'</span>);</span><br><span class="line">    xhr.send();</span><br><span class="line">    xhr.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">const</span> res = <span class="built_in">JSON</span>.parse(<span class="keyword">this</span>.responseText);</span><br><span class="line">        <span class="keyword">const</span> dom = <span class="built_in">document</span>.getElementById(<span class="string">"json"</span>);</span><br><span class="line">        dom.innerText = res.data;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br></pre></td></tr></table></figure>
<p>和 <code>fetch</code> 的思路一样，我们可以在返回前更改 <code>responseText</code> 。</p>
<p>重写 <code>XMLHttpRequest</code> 原型对象的 <code>open</code> 或者 <code>send</code> 方法，在函数内拿到用户当前的 <code>xhr</code> 实例，监听 <code>readystatechange</code> 事件，然后重写 <code>responseText</code> 。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> originOpen = XMLHttpRequest.prototype.open;</span><br><span class="line">XMLHttpRequest.prototype.open = <span class="function"><span class="keyword">function</span> (<span class="params">_, url</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (url === <span class="string">"http://localhost:3002/api/query"</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.addEventListener(<span class="string">"readystatechange"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.readyState === <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> res = <span class="built_in">JSON</span>.parse(<span class="keyword">this</span>.responseText);</span><br><span class="line">        res.data.push(<span class="string">"油猴脚本修改数据"</span>);</span><br><span class="line">        <span class="keyword">this</span>.responseText = <span class="built_in">JSON</span>.stringify(res);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  originOpen.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>运行一下：</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220824084014585.png" alt="image-20220824084014585"></p>
<p>拦截失败了，网上搜寻下答案，原因是  <code>responseText</code> 不是可写的，我们将原型对象上的 <code>responseText</code> 属性描述符打印一下。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220824084726967.png" alt="image-20220824084726967"></p>
<p>可以看到 <code>set</code> 属性是 <code>undefined</code> ，因此我们重写 <code>responseText</code> 失败了。</p>
<p>我们无法修改原型对象上的 <code>responseText</code> ，我们可以在当前 <code>xhr</code> 对象，也就是 <code>this</code> 上边定义一个同名的 <code>responseText</code> 属性，赋值的话有两种思路。</p>
<h2 id="1、直接赋值"><a href="#1、直接赋值" class="headerlink" title="1、直接赋值"></a>1、直接赋值</h2><p>我们定义一个 <code>writable: true,</code> 的属性，然后直接赋值为我们修改后的数据。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> originOpen = XMLHttpRequest.prototype.open;</span><br><span class="line">XMLHttpRequest.prototype.open = <span class="function"><span class="keyword">function</span> (<span class="params">_, url</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (url === <span class="string">"http://localhost:3002/api/query"</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.addEventListener(<span class="string">"readystatechange"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.readyState === <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> res = <span class="built_in">JSON</span>.parse(<span class="keyword">this</span>.responseText);</span><br><span class="line">        <span class="comment">// 当前 xhr 对象上定义 responseText</span></span><br><span class="line">        <span class="built_in">Object</span>.defineProperty(<span class="keyword">this</span>, <span class="string">"responseText"</span>, &#123; </span><br><span class="line">          writable: <span class="literal">true</span>,</span><br><span class="line">        &#125;);</span><br><span class="line">        res.data.push(<span class="string">"油猴脚本修改数据"</span>);</span><br><span class="line">        <span class="keyword">this</span>.responseText = <span class="built_in">JSON</span>.stringify(res);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  originOpen.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>看下页面会发现成功拦截了：</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220824085203088.png" alt="image-20220824085203088"></p>
<h2 id="2、重写-get"><a href="#2、重写-get" class="headerlink" title="2、重写 get"></a>2、重写 get</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> originOpen = XMLHttpRequest.prototype.open;</span><br><span class="line">XMLHttpRequest.prototype.open = <span class="function"><span class="keyword">function</span> (<span class="params">_, url</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (url === <span class="string">"http://localhost:3002/api/query"</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> xhr = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">const</span> getter = <span class="built_in">Object</span>.getOwnPropertyDescriptor(</span><br><span class="line">      XMLHttpRequest.prototype,</span><br><span class="line">      <span class="string">"response"</span></span><br><span class="line">    ).get;</span><br><span class="line">    <span class="built_in">Object</span>.defineProperty(xhr, <span class="string">"responseText"</span>, &#123;</span><br><span class="line">      get: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> result = getter.call(xhr);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="keyword">const</span> res = <span class="built_in">JSON</span>.parse(result);</span><br><span class="line">          res.data.push(<span class="string">'油猴脚本修改数据'</span>)</span><br><span class="line">          <span class="keyword">return</span> <span class="built_in">JSON</span>.stringify(res);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">          <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  originOpen.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>我们拿到原型对象的 <code>get</code> ，然后在当前对象上定义 <code>responseText</code> 的 <code>get</code>属性，修改数据后返回即可。</p>
<p>相比于第一种方案，这种方案无需等待  <code>readystatechange</code> ，在开始的时候重写即可。</p>
<p>需要注意的是，上边方案都只是重写了 <code>responseText</code> 字段，不排除有的网站读取的是 <code>response</code> 字段，但修改的话和上边是一样的，这里就不写了。</p>
<h1 id="总"><a href="#总" class="headerlink" title="总"></a>总</h1><p>通过对 <code>fetch</code> 和 <code>xhr</code> 的重写，我们基本上可以对网页「为所欲为」了，发挥想象力通过油猴脚本应该可以做很多有意思的事情。</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>油猴</tag>
      </tags>
  </entry>
  <entry>
    <title>理解进制转换的原理</title>
    <url>/2019/07/23/%E7%90%86%E8%A7%A3%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2%E7%9A%84%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<p>准备写一篇关于浮点数存储的，然后先写了进制转换，越写越多，就单独作为一篇文章吧。</p>
<p><code>2019.723</code>，这个数的二进制形式是什么样呢？让我们慢慢考虑。</p>
<h1 id="数字的概念"><a href="#数字的概念" class="headerlink" title="数字的概念"></a>数字的概念</h1><p>首先思考一下数字是什么？为什么要有数字。</p>
<p>我有<strong>一</strong>个苹果，你脑海中会出现<strong>一</strong>个苹果。</p>
<p>我有<strong>五</strong>个苹果，你脑海中会出现<strong>五</strong>个苹果。</p>
<p>我有<strong>三十</strong>个苹果，你脑海中会出现<strong>三十</strong>个苹果。</p>
<p>我有<strong>一千</strong>个苹果，你可能想象不出来了。</p>
<p>数字的作用，就是让我们对一个东西的数量有一个更精确的认识。如果没有数字，我可能只能说我有一桌子苹果，我有一堆苹果，我有一大堆苹果，我有一大大堆苹果，这些都是感性的认知，每个人的认知可能是不一样的，而数字统一了我们对「量」的概念。</p>
<p>此外，另一个神奇的地方在于数字仅仅是「量」的概念，他没有限制去描述什么。</p>
<p>比如说五个苹果，五只小狗，五头牛，五粒大米，数量都是五，但他们的体积、质量、形状都和他们本身有关了。</p>
<h1 id="数字的记录"><a href="#数字的记录" class="headerlink" title="数字的记录"></a>数字的记录</h1><p>后来人类发明了纸笔，如果把这个「量」的概念写下来该怎么办呢？</p>
<p>最简单的想法就是画竖线，每增加一个，就加一条竖线。</p>
<p>1 -&gt; I</p>
<p>2 -&gt; II</p>
<p>3 -&gt; III</p>
<p>4 -&gt; IIII</p>
<p>5 -&gt; IIIII</p>
<p>20 -&gt; ???</p>
<p>如果数字大了，一直画竖线显然是不现实的，在出土的甲骨文中发现了当时人们对数字的认识。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/Oracle_numeral.jpg" alt=""></p>
<p>一些大的数字用一些特定的符号来表示，这样如果表示 108 的话，我们只需要画出这两个图形就可以了。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/float2.jpg" alt=""></p>
<p>顺序无所谓，另一个人可能画出的是下边的</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/float3.jpg" alt=""></p>
<p>即使顺序不一样，但他们表示的数字都是 <code>108</code>。</p>
<h1 id="进制的概念"><a href="#进制的概念" class="headerlink" title="进制的概念"></a>进制的概念</h1><p>上边的依旧不是很方便，比如我要是想表示 <code>1000</code>，如果我们只有 <code>100</code> 对应的符号，我还是需要画 <code>10</code> 个才行。接下来，人们用了一个更伟大的发明，进位制，也许因为人有 <code>10</code> 根手指，所以采用了 <code>10</code> 进制，其实就是我们现在的计数法。用<code>0 - 9</code> 十个符号就可以表示任意数字了。</p>
<p>这里边最伟大的发明就是<code>0</code>的概念了，它除了表示数量上的 <code>0</code>，也可以用来占位。从而数字在不同的位置有了不同的含义。拿十进制来举例，就是逢十进一。</p>
<p>得到<strong>一</strong>个苹果，写个 <code>1</code>，得到<strong>六</strong>个苹果，写个<code>6</code>，得到<strong>十</strong>个苹果了，怎么表达<strong>十</strong>这个数量呢，低位用<code>0</code>占位，高位写<code>1</code>就可以了。也就是<code>10</code>。此时的<code>1</code>不再是一，而是一个十。同理<code>100</code>，就表明有十个十的数量。此外再发明一个小数点，<code>0.1</code>，小数点右边的一表明是十分之一。</p>
<p>每个位置就有了不同的含义，可以看作下边的公式。e 是小数点后开始的数位。</p>
<p>$$…+a\times10^3+b\times10^2+c\times10^1+d\times10^0+e\times10^{-1}+f\times10^{-2}+g\times10^{-3}+…$$</p>
<p>a，b，c … 代表<code>0 - 9</code>中的任意一个符号，现在的数量是<code>a</code>个<code>1000</code>，b 个 <code>100</code>，c 个 <code>10</code>……</p>
<p>比如<code>2019.723</code>就可以看成下边的样子</p>
<p>$$2\times10^3+0\times10^2+1\times10^1+9\times10^0+7\times10^{-1}+2\times10^{-2}+3\times10^{-3}$$</p>
<p>上边是十进制，让我们想一下 2 进制。</p>
<p>2 进制只有两个符号可以用，那就是<code>0</code>和 <code>1</code>，规则是满<code>2</code> 就要进 <code>1</code>。</p>
<p>如果有一个苹果那么就记做<code>1</code>，如果有两个苹果要利用<code>0</code>来占位，高位写<code>1</code>，也就是<code>10</code>，如果有四个苹果，那就用<code>100</code>来表示。</p>
<p>因为我们对十进制太熟悉了，如果我说「我考了<code>100</code>分」。大家第一反应就是我考的不错，但如果是在二进制的世界，<code>100</code>其实是一个蛮小的数字。</p>
<p>如果把二进制换两个符号，比如<code>&gt;</code>来表示<strong>一</strong>个苹果，<code>&lt;</code>来表示零的概念，用来占位。我如果说我考了<code>&gt;&lt;&lt;</code>分，这样大家就没有条件反射觉得我考的很高了。</p>
<p>所以我们要明确一个概念，不同进制下，可能用了同一个符号，但对于同一个数量，那么表示法是不一样的。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/float4.jpg" alt=""></p>
<p>看到这么多苹果，</p>
<p>商朝人可能会写下，我有<code>| 二</code>个苹果。</p>
<p>十进制的人们会写下，我有 <code>12</code> 个苹果。</p>
<p>二进制的人们会写下，我有 <code>1100</code> 个苹果。</p>
<p>可以看到对于同一个数量，大家的表示是不一样的，即使十进制和二进制的人们用了相同的符号<code>0</code>和<code>1</code>，但由于进制不同，他们写出来是不一样的。</p>
<p>有一天二进制的人和十进制的人相遇了，二进制的人说，我买了<code>1100</code>个苹果，然后对于十进制的人第一反应，哇，一千多个苹果，也太多了吧。</p>
<p>二进制的人们，看到<code>1100</code>立马脑海中联想到了上图的数量，但是对于十进制人们必须把这个数量转换成自己熟悉的十进制表示，才可以在脑海里想象<code>1100</code>个苹果的数量是多少。那么怎么转换呢？</p>
<h1 id="二进制转十进制"><a href="#二进制转十进制" class="headerlink" title="二进制转十进制"></a>二进制转十进制</h1><p>让我们从十进制的角度去看一下二进制，二进制是满二进一，所以他的每一位的权重其实是以 2 为权重的，就是下边的样子。</p>
<p>$$…+a\times2^3+b\times2^2+c\times2^1+d\times2^0+e\times2^{-1}+f\times2^{-2}+g\times2^{-3}+…$$</p>
<p>a，b，c … 代表<code>0</code>和 <code>1</code>中的一个，现在的数量是 a 个 8，b 个 4，c 个 2 ……</p>
<p>所以<code>1100</code>如果用十进制表示，就是 1 个 8 加上 1 个 4，也就是<code>12</code>了。这样的话，我们就可以理解他买了多少苹果了。</p>
<h1 id="十进制转二进制"><a href="#十进制转二进制" class="headerlink" title="十进制转二进制"></a>十进制转二进制</h1><p>那么十进制怎么转换成二进制呢？最开始的问题，怎么用二进制去表示 <code>2019.723</code>。</p>
<h2 id="整数的转换"><a href="#整数的转换" class="headerlink" title="整数的转换"></a>整数的转换</h2><p>其实这就是数学上的问题了，首先我们考虑整数部分<code>2019</code>。根据前边二进制转十进制的公式，我们知道可以有下边的等式。</p>
<p>$$…a\times2^4+b\times2^3+c\times2^2+d\times2^1+e\times2^0=2019$$</p>
<p>两边如果同时除以 2 会发生什么呢，</p>
<p>$$…a\times2^3+b\times2^2+c\times2^1+d\times2^0+e/2=2018/2+1/2$$</p>
<p>可以看到系数是 <code>a，b，c，d</code>的部分都整除了，只剩下 <code>e/2</code>。</p>
<p>右边的话，把<code>2019</code>分成两部分<code>2018</code>和<code>1</code>。然后就是$2018/2$和$1/2$两部分。</p>
<p>左边也看做$…a\times2^3+b\times2^2+c\times2^1+d\times2^0$和$e/2$两部分。</p>
<p>左右两部分对应相等。</p>
<p>右边的部分。</p>
<p>$$e/2==1/2$$</p>
<p>所以算出了 $e=1$。</p>
<p>再看左边的部分。</p>
<p>$$…a\times2^3+b\times2^2+c\times2^1+d\times2^0=2018/2=1009$$</p>
<p>我们可以两边继续同时除以<code>2</code>，就可以求出<code>d</code>。同理就可以求出<code>a，b，c</code>以及更多的系数。</p>
<p>再来回想一下我们的方法，两边同时除以<code>2</code>，然后被分成$2018/2$和$1/2$两部分，其实左边就是商，右边是余数。<code>2019/2=1009······1</code>，对应等式左边的部分，e 其实就等于余数。</p>
<p>所以转换的方法就是用<code>2019</code>除以<code>2</code>，余数作为二进制的低位。商作为新的除数，继续除以<code>2</code>，余数作为二进制的低位…直到商为 0。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/float5.jpg" alt=""></p>
<p>因为我们每次求出的都是二进制对应的低位，书写的话习惯于先写高位，所以倒着写过来 <code>11111100011</code>就是<code>2019</code>的二进制形式了。</p>
<p>写成代码的形式。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;Integer&gt; <span class="title">integerTrans</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">while</span> (n != <span class="number">0</span>) &#123;</span><br><span class="line">        list.add(n % <span class="number">2</span>);</span><br><span class="line">        n /= <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = list.size() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        System.out.print(list.get(i));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="小数的转换"><a href="#小数的转换" class="headerlink" title="小数的转换"></a>小数的转换</h2><p>考虑完整数，再来想一下小数<code>0.723</code>怎么处理。同样的，利用二进制转十进制的公式，写出下边的等式。</p>
<p>$$e\times2^{-1}+f\times2^{-2}+g\times2^{-3}+…=0.723$$</p>
<p>之前同时是利用两边同时除以<code>2</code>，对于上边的等式肯定不行了。换一下，两边同时乘以<code>2</code>呢？看看会发生什么。</p>
<p>$$e\times2^{0}+f\times2^{-1}+g\times2^{-2}+…=0.723\times2$$</p>
<p>和之前一样，把两边分别分成两部分。</p>
<p>$$e+f\times2^{-1}+g\times2^{-2}+…=1+0.446$$</p>
<p>两部分分别对应相等，可以知道</p>
<p>$$e==1$$</p>
<p>另外一部分的话</p>
<p>$$f\times2^{-1}+g\times2^{-2}+…=0.446$$</p>
<p>我们继续同时乘以<code>2</code>，变成下边的样子。</p>
<p>$$f+g\times2^{-1}+…=0 + 0.892$$</p>
<p>这样又可以求出$f=0$，同样的一直不停的继续下去，直到得到的新的小数部分是<code>0</code>。</p>
<p>所以我们的算法就是不停的乘<code>2</code>取整数部分，有可能得到的新的数永远不等于 0，这就取决于我们需要的精度了，可以随时停止。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/float6.jpg" alt=""></p>
<p>小数的话正着写出来就可以了，<code>0.1011</code>就是十进制<code>0.723</code>的近似值了。</p>
<p>所以十进制小数转成二进制并不会像十进制整数那么顺利。原因的话，因为二进制小数它的权重依次是<code>0.5</code>,<code>0.25</code>,<code>0.125</code>…，所以只有这些数的任意相加才能被精确表示。大部分的十进制小数都不能精确的用二进制表示。</p>
<p>甚至看起来最简单的<code>0.1</code>如果转成二进制，会是什么样呢？</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/float7.jpg" alt=""></p>
<p>可以看到计算过程中，出现了循环，<code>0.4，0.8，0.6，0.2</code>会循环出现，所以<code>0.1</code>的二进制表示就是<code>0.0 0011 0011 0011...</code>是一个无限循环小数了。它就相当于我们十进制中的<code>1/3</code>，写成小数形式是<code>0.3333333...</code>。</p>
<p>用代码表示一下，我们只保留 <code>10</code> 位小数。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;Integer&gt; <span class="title">decimalTrans</span><span class="params">(<span class="keyword">double</span> n)</span> </span>&#123;</span><br><span class="line">    ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">while</span> (count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        n = n * <span class="number">2</span>;</span><br><span class="line">        list.add((<span class="keyword">int</span>) (n));</span><br><span class="line">        n = n - (<span class="keyword">int</span>) (n);</span><br><span class="line">        count--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">        System.out.print(list.get(i));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="历史的发展"><a href="#历史的发展" class="headerlink" title="历史的发展"></a>历史的发展</h1><p>可以看一下现实生活中数字的发展，引自维基百科。</p>
<blockquote>
<p>无位值十进制</p>
<ul>
<li><a href="https://zh.wikipedia.org/wiki/%E5%8F%A4%E5%9F%83%E5%8F%8A" target="_blank" rel="noopener">古埃及</a>十进制：以一个竖道代表1，二并排竖道代表2，三竖道代表3，一横道代表4，左二撇右竖道代表5，上三撇下三撇代表6，上下两道代表8，四个（并排代表9，一个“人”字形代表10，“人”上加一横代表20，20左加一点代表30，横道上加一点代表40，横道上加三竖道（如中国筹算的8）代表60，横道上加四竖道代表80（形同中国筹算中的9）代表80，两横道上加三竖代表90……。</li>
<li><a href="https://zh.wikipedia.org/wiki/%E5%8F%A4%E5%B8%8C%E8%85%8A" target="_blank" rel="noopener">古希腊</a>十进制，1至9，10至90，100至900各有不同的单字母代表。</li>
<li>古印度Kharosshi十进制，以一个竖道代表1，二并排竖道代表2，三竖道代表3，一个X代表4，IX代表5，||X代表6，XX代表8，10，20个有单字符代表。</li>
<li>古印度和Brahmi十进制，和希腊十进制相似，1至9，10至90，100至900各有不同的单字母代表。符号很多。</li>
</ul>
<p>非十进的进位制</p>
<ul>
<li><a href="https://zh.wikipedia.org/wiki/%E5%B7%B4%E6%AF%94%E4%BC%A6" target="_blank" rel="noopener">巴比伦</a>60进位制：以一个上大下小的楔形代表1，两个并列楔形代表2，三个并列楔形代表3，上二个楔形下二个楔形代表4，上三楔下二楔代表5，上三楔下三楔代表6，上四楔下三楔代表7，上四楔下四楔代表8，上五楔下四楔代表9；一个左小右大横楔代10，两个横楔并排代表20，三个横楔并排代表30，四个横楔并排代表40。</li>
<li><a href="https://zh.wikipedia.org/wiki/%E7%8E%9B%E9%9B%85" target="_blank" rel="noopener">玛雅</a>20进位制：以一个点代表1，两个点并列代表2，三点并列代表3，四点并列代表4，短横线代表5，横线上加一点代表6，横线上加二点代表7，横线上加三点代表8，横线上加四点代表9；上下两横线代表10，上下两横线之上加一点代表11，三重叠横线代表15，三横线上加一，二，三点代表16，17，18；小椭圆圈上加一点代表20。</li>
</ul>
<p>十进位制</p>
<ul>
<li>中国古代的十进制有书写式和<a href="https://zh.wikipedia.org/wiki/%E7%AE%97%E7%AD%B9" target="_blank" rel="noopener">算筹</a>两种型式。</li>
<li>印度-阿拉伯十进位制。</li>
</ul>
</blockquote>
<h1 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h1><p>不得不感慨下人类的聪明，将量的概念抽象出来，不同地区的独立发展，最后又是那么的相像。所以数字，其实就是符号对数量的映射，并且人们达成了共识。</p>
]]></content>
      <categories>
        <category>计算机组成</category>
      </categories>
      <tags>
        <tag>二进制</tag>
        <tag>计算机</tag>
      </tags>
  </entry>
  <entry>
    <title>用 TypeScript 实现斐波那契数列</title>
    <url>/2021/10/31/%E7%94%A8TypeScript%E5%AE%9E%E7%8E%B0%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97/</url>
    <content><![CDATA[<p>前几天在知乎看到一篇文章，<a href="https://zhuanlan.zhihu.com/p/426966480" target="_blank" rel="noopener">用 TypeScript 类型运算实现一个中国象棋程序</a> ：</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/typescript1.jpg" style="width:80%;"></p>
<p>边看边 <code>woc</code>，<code>TypeScript</code> 不是一个类型系统吗，咋还实现象棋了，感觉发现了新大陆一样，然后把大佬的代码 <code>clone</code>下来，本地「运行」了一下，只能是带引号的运行了，因为 <code>TS</code>就是动态推导类型，只需要安装相关插件，鼠标 <code>hover</code> 上去就可以看到结果了。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/typescript2.jpg" style="width:80%;"></p>
<p>看到这种神奇魔法，于是自己就查了查这是为什么。</p>
<h1 id="图灵完备"><a href="#图灵完备" class="headerlink" title="图灵完备"></a>图灵完备</h1><p>这是接触到的第一个概念，维基百科是这样定义的：</p>
<blockquote>
<p>一个计算系统可以计算任何图灵-<a href="https://zh.wikipedia.org/wiki/可计算函数" target="_blank" rel="noopener">可计算函数</a>，被称作图灵完全（或者图灵完备）。或者任何可以模拟<a href="https://zh.wikipedia.org/wiki/通用图灵机" target="_blank" rel="noopener">通用图灵机</a>的系统。</p>
</blockquote>
<p>可计算函数粗暴的理解为「人能计算的问题」，而现在例如 <code>C++</code>、<code>JAVA</code>几乎所有编程语言都是具有图灵完备性的，关于图灵完备是一个更大的问题，更通俗的解释可以看 <a href="https://www.zhihu.com/question/20115374/answer/288346717" target="_blank" rel="noopener">什么是图灵完备？</a> 知乎这篇回答，很有意思，还了解到了一门有趣的编程语言 —— <code>1993</code> 年<code>Urban Müller</code> 发明的<code>Brainfuck</code> 语言，感受一下它怎么打印 <code>Hello World</code>。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">+++++ +++++             initialize counter (cell #0) to 10</span><br><span class="line">[                       use loop to set <span class="number">70</span>/<span class="number">100</span>/<span class="number">30</span>/<span class="number">10</span></span><br><span class="line">    &gt; +++++ ++              add  7 to cell #1</span><br><span class="line">    &gt; +++++ +++++           add 10 to cell #2</span><br><span class="line">    &gt; +++                   add  3 to cell #3</span><br><span class="line">    &gt; +                     add  1 to cell #4</span><br><span class="line">&lt;&lt;<span class="xml"><span class="tag">&lt;&lt; <span class="attr">-</span>                  <span class="attr">decrement</span> <span class="attr">counter</span> (<span class="attr">cell</span> #<span class="attr">0</span>)</span></span></span><br><span class="line"><span class="xml">]</span></span><br><span class="line"><span class="xml">&gt; ++ .                  print 'H'</span></span><br><span class="line"><span class="xml">&gt; + .                   print 'e'</span></span><br><span class="line"><span class="xml">+++++ ++ .              print 'l'</span></span><br><span class="line"><span class="xml">.                       print 'l'</span></span><br><span class="line"><span class="xml">+++ .                   print 'o'</span></span><br><span class="line"><span class="xml">&gt; ++ .                  print ' '</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;&lt; +++++ +++++ +++++ <span class="attr">.</span>  <span class="attr">print</span> '<span class="attr">W</span>'</span></span></span><br><span class="line"><span class="xml">&gt; .                     print 'o'</span></span><br></pre></td></tr></table></figure>
<p>是的，你没有看错，左边是代码，右边是注释，<a href="http://fatiherikli.github.io/brainfuck-visualizer/" target="_blank" rel="noopener">这里</a> 有运行的单句执行图示，可以感受一下：</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/typescript3.gif" style="width:80%;"></p>
<p>上边的纸带代表内存中的情况，然后通过左移右移加加减减，最终输出了 <code>Hello world!</code>。</p>
<p>而在 <code>TypeScript</code> 仓库的一个 <a href="https://github.com/Microsoft/TypeScript/issues/14833" target="_blank" rel="noopener">issues</a>  中也讨论过 <code>TypeScript</code> 的图灵完备了，作者还分享了一个判断是否是质数的代码，也很有意思。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/typescript4.jpg" style="width:80%;"></p>
<h1 id="TypeScript-相关知识"><a href="#TypeScript-相关知识" class="headerlink" title="TypeScript 相关知识"></a>TypeScript 相关知识</h1><p>为了实现文章的标题 「用 <code>TypeScript</code> 实现斐波那契数列」，需要先学习下相关的知识点。</p>
<h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><p>如果之前学过 <code>C++</code> 或者 <code>Java</code> 之类的语言，对泛型一定不陌生，泛型可以让我们定义函数参数的时候不指定参数类型，用一个占位符代替，当运行的时候再由外界传过来的类型决定。</p>
<p>举个简单的例子，实现两个元素相加，如果用 <code>TypeScript</code> 限制的话，即使是相同的逻辑也要写多次了。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addTwoNumber</span>(<span class="params">a: number, b: number</span>):<span class="title">number</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addTwoNumberString</span>(<span class="params">a: string, b: string</span>):<span class="title">string</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">addTwoNumber(<span class="number">1</span>,<span class="number">3</span>)</span><br><span class="line">addTwoNumberString(<span class="string">'1'</span>, <span class="string">'2'</span>);</span><br></pre></td></tr></table></figure>
<p>不然的话就只能 <code>anyScript</code> 了，完全失去了类型校验。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addTwoNumber</span>(<span class="params">a: any, b: any</span>):<span class="title">any</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">addTwoNumber(<span class="number">1</span>,<span class="number">3</span>)</span><br><span class="line">addTwoNumber(<span class="string">'1'</span>, <span class="string">'2'</span>);</span><br><span class="line"></span><br><span class="line">addTwoNumber(<span class="string">'1'</span>, <span class="number">2</span>); <span class="comment">//不报错</span></span><br></pre></td></tr></table></figure>
<p>如果有泛型的话，就既可以达到逻辑的复用，同时对类型进行校验。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addTwoNumber</span>&lt;<span class="title">T</span>&gt;(<span class="params">a: T, b: T</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &lt;any&gt;a + &lt;any&gt;b; //这里需要强制转换下，不然会报 Operator '+' cannot be applied to types 'T' and 'T'.ts(2365)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">addTwoNumber(1, 3);</span><br><span class="line">addTwoNumber("1", "3");</span><br><span class="line"></span><br><span class="line">addTwoNumber('1', 2); //报错</span><br></pre></td></tr></table></figure>
<p>当然上边有强行用泛型的嫌疑了，不过能大体理解泛型的作用就好，哈哈。上边的情况用 <code>TS</code> 的重载会更好些。</p>
<h2 id="类型-type"><a href="#类型-type" class="headerlink" title="类型 type"></a>类型 type</h2><p><code>TS</code> 中除了基本的类型，<code>number</code>、<code>string</code> 、<code>number[]</code> 等，比较特殊的地方 <code>1</code> 、<code>abc</code> 、<code>true</code> 也可以单独算一个类型。<code>1</code> 的类型是 <code>1</code>，当然也属于 <code>number</code>。</p>
<p>最重要的是 <code>TS</code> 允许我们定义新的类型，而且我们还可以通过泛型变量，进行类型的运算然后产生新的类型。举几个例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">type Type1&lt;T&gt; = T extends number ? number : string;</span><br><span class="line">type Type2 = Type1&lt;<span class="number">2121</span>&gt;; <span class="comment">// 此时 Type2 就相当于 number</span></span><br><span class="line">type Type3 = Type1&lt;&#123;&#125;&gt;; <span class="comment">// 此时 Type3 就相当于 string</span></span><br></pre></td></tr></table></figure>
<p><code>exstends</code> 和后边的 <code>?</code> 构成了一个三元表达式，如果 <code>extends</code> 前面的类型能够赋值给 <code>extends</code> 后面的类型，那么表达式判断为真，否则为假。</p>
<p>因为单个数字也是一个类型，所以我们就可以判断传入的 <code>T</code> 是否等于某个数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">type Type4&lt;T&gt; = T extends <span class="number">1</span> ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line">type Type5 = Type4&lt;<span class="number">2121</span>&gt;; <span class="comment">// 此时 Type5 就相当于 false 类型</span></span><br><span class="line">type Type6 = Type4&lt;<span class="number">1</span>&gt;; <span class="comment">// 此时 Type6 就相当于 true 类型</span></span><br></pre></td></tr></table></figure>
<p>可以仔细体会一下这里，很关键，后边写斐波那契数列的时候，一不小心就会被绕进去，因为我们是在操控类型之间的运算，和平时的编程感觉很不一样。</p>
<p>一句话总结，每个类型可以看成一个函数，传入的泛型是函数参数，并且也是一个类型，最后再返回一个新的类型。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Type(type, type) =&gt; type</span><br></pre></td></tr></table></figure>
<h2 id="infer"><a href="#infer" class="headerlink" title="infer"></a>infer</h2><p><code>infer</code> 表示在 <code>extends</code> 条件语句中待推断的类型变量。</p>
<p>简单理解，我们是为了判断某个类型是否 <code>extends</code> 某个「结构」，但结构中参数的类型我们并不知道，此时我们写一个 <code>infer R</code>（<code>R</code>只是占位，任何名字都可以），在类型推导的时候，<code>R</code> 就是当前类型真正的参数类型。举个例子：</p>
<p>我们判断 <code>T</code> 是否是 <code>{a: XXX, b: XXX}</code>的类型，因为 <code>T</code> 是泛型，我们并不知道<code>T</code> 中的 <code>a</code> 是什么类型，此时就可以用 <code>infer</code> 占位。当传入具体的类型是就可以拿到 <code>a</code> 是什么类型了。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">type Foo&lt;T&gt; = T extends &#123; <span class="attr">a</span>: infer U; b: infer U &#125; ? U : never;</span><br><span class="line"></span><br><span class="line">type T1 = Foo&lt;&#123; <span class="attr">a</span>: string; b: string &#125;&gt;; <span class="comment">// T1 类型为 string</span></span><br><span class="line">type T2 = Foo&lt;&#123; <span class="attr">a</span>: string; b: number &#125;&gt;; <span class="comment">// T2 类型为 string | number</span></span><br></pre></td></tr></table></figure>
<h1 id="斐波那契数列"><a href="#斐波那契数列" class="headerlink" title="斐波那契数列"></a>斐波那契数列</h1><p>斐波那契数列就不多解释了，先用 <code>js</code> 实现一个斐波那契数列。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fibonacci</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (n === <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (n === <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> Fibonacci(n - <span class="number">1</span>) + Fibonacci(n - <span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最关键的递归不用担心，<code>TS</code> 支持类型的递归定义，我们先写一个大概的雏形，看象棋直接用中文定义类型挺有意思，这里也直接中文了。之前总结的那句话这里再加深一下，<code>每个类型可以看成一个函数，传入的泛型是函数参数，并且也是一个类型，最后再返回一个新的类型</code>。</p>
<p>我们先定义「斐波那契」类型，泛型是传入一个数字（这里的数字是当作类型），先判断传入的类型是否是 <code>1</code> 或者 <code>2</code>，然后直接返回 <code>1</code> 类型。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">type 斐波那契&lt;某数 extends number&gt; = 某数 extends <span class="number">1</span> </span><br><span class="line">  ? <span class="number">1</span></span><br><span class="line">  : 某数 extends <span class="number">2</span></span><br><span class="line">  ? <span class="number">1</span></span><br><span class="line">  : 相加&lt;斐波那契&lt;减一&lt;某数&gt;&gt;, 斐波那契&lt;减一&lt;减一&lt;某数&gt;&gt;&gt;&gt;;</span><br></pre></td></tr></table></figure>
<p><em>上边需要注意的是 <code>&lt;&gt;</code>    里边的 <code>extends</code> 是为了限定传入的类型，和外边的 <code>extends</code> 不一样</em>。</p>
<p>我们还需要定义一个「相加」类型和一个「减一」类型。</p>
<p>相加是两个类型相加，但是类型系统是不支持数字直接相加的，<code>1 + 2</code> 并不能直接相加，这里有个 <code>trick</code>。</p>
<p>数组类型和 <code>js</code> 中的数组一样，同样拥有 <code>length</code> 属性，返回一个具体的数字类型，也支持扩展运算符。举个例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">type A = [any, any, any]</span><br><span class="line">type B = A[<span class="string">"length"</span>] <span class="comment">// B 就是 3 类型</span></span><br></pre></td></tr></table></figure>
<p>所以我们可以将数字转为数组，操作数组，然后再将数组通过 <code>length</code> 转回数字。</p>
<p>先写一个得到对应数组的 <code>Type</code>，这里就需要用到递归了。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">type 得到长度&lt;数组 extends any[]&gt; = 数组[<span class="string">"length"</span>];</span><br><span class="line"></span><br><span class="line">type 转为数组&lt;</span><br><span class="line">  某数 extends number,</span><br><span class="line">  对应数组 extends any[] = [] <span class="comment">// 默认值赋一个空数组，外部调用的时候不需要传</span></span><br><span class="line">&gt; = 得到长度&lt;对应数组&gt; extends 某数 <span class="comment">// 长度是否等于了需要的长度</span></span><br><span class="line">  ? 对应数组 <span class="comment">// 如果长度等于所需要的了就返回</span></span><br><span class="line">  : 转为数组&lt;某数, [any, ...对应数组]&gt;; <span class="comment">// 否则再添加一个元素进入数组，然后递归调用</span></span><br></pre></td></tr></table></figure>
<p>有了转为数组的的 <code>Type</code>，相加方法就很好写了，我们只需要将两个数先转为对应的数组，将两个数组连接，最后返回连接后的数组长度即可。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> 相加&lt;某数甲 <span class="keyword">extends</span> <span class="built_in">number</span>, 某数乙 <span class="keyword">extends</span> <span class="built_in">number</span>&gt; = 得到长度&lt;</span><br><span class="line">  [...转为数组&lt;某数甲&gt;, ...转为数组&lt;某数乙&gt;]</span><br><span class="line">&gt;;</span><br></pre></td></tr></table></figure>
<p>然后定义减一的方法，也就是数组长度减 <code>1</code>，这里就利用到了 <code>infer</code>，还需要利用数组的解构。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">type 数组减一&lt;某数组类型 extends any[]&gt; = ((</span><br><span class="line">  ...参数: 某数组类型</span><br><span class="line">) =&gt; any) extends (拆一个元素: any, ...剩下的数组: infer 剩下的数组类型) =&gt; any</span><br><span class="line">  ? 剩下的数组类型</span><br><span class="line">  : [];</span><br></pre></td></tr></table></figure>
<p>我们定义了一个函数类型，通过函数参数的解构，使得剩下的数组少了一个元素。</p>
<p>有了「数组减一」的类型，数字「减一」就水到渠成了，将数字转为对应数组，数组减去一个元素，然后恢复为数字即可。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">type 减一&lt;某数 extends number&gt; = 得到长度&lt;数组减一&lt;转为数组&lt;某数&gt;&gt;&gt;;</span><br></pre></td></tr></table></figure>
<p>整体代码就出来了：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">type 斐波那契&lt;某数 extends number&gt; = 某数 extends <span class="number">1</span></span><br><span class="line">  ? <span class="number">1</span></span><br><span class="line">  : 某数 extends <span class="number">2</span></span><br><span class="line">  ? <span class="number">1</span></span><br><span class="line">  : 相加&lt;斐波那契&lt;减一&lt;某数&gt;&gt;, 斐波那契&lt;减一&lt;减一&lt;某数&gt;&gt;&gt;&gt;;</span><br><span class="line"></span><br><span class="line">type 得到长度&lt;数组 extends any[]&gt; = 数组[<span class="string">"length"</span>];</span><br><span class="line"></span><br><span class="line">type 转为数组&lt;</span><br><span class="line">  某数 extends number,</span><br><span class="line">  对应数组 extends any[] = []</span><br><span class="line">&gt; = 得到长度&lt;对应数组&gt; extends 某数</span><br><span class="line">  ? 对应数组</span><br><span class="line">  : 转为数组&lt;某数, [any, ...对应数组]&gt;;</span><br><span class="line"></span><br><span class="line">type 相加&lt;某数甲 extends number, 某数乙 extends number&gt; = 得到长度&lt;</span><br><span class="line">  [...转为数组&lt;某数甲&gt;, ...转为数组&lt;某数乙&gt;]</span><br><span class="line">&gt;;</span><br><span class="line"></span><br><span class="line">type 数组减一&lt;某数组类型 extends any[]&gt; = ((</span><br><span class="line">  ...参数: 某数组类型</span><br><span class="line">) =&gt; any) extends (拆一个元素: any, ...剩下的数组: infer 剩下的数组类型) =&gt; any</span><br><span class="line">  ? 剩下的数组类型</span><br><span class="line">  : [];</span><br><span class="line"></span><br><span class="line">type 减一&lt;某数 extends number&gt; = 得到长度&lt;数组减一&lt;转为数组&lt;某数&gt;&gt;&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line">type 斐波那契八 = 斐波那契&lt;<span class="number">8</span>&gt;</span><br></pre></td></tr></table></figure>
<p>看下结果：</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/typescript5.jpg" style="width:80%;"></p>
<p>不过到斐波那契 <code>11</code> 就因为递归层度太深 <code>gg</code> 了。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/typescript6.jpg" style="width:80%;"></p>
<p>这里主要就是体验下 <code>TS</code> 的图灵完备，优化就不考虑了。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>通过写一个这个例子对 <code>TS</code> 的类型有了更多的了解，但平时开发肯定不会这样搞，主要是写着玩哈哈，毕竟一个简单的斐波那契数列都写的这么麻烦，引用 <code>Linus Torvalds</code> 自传的书名结束吧，<code>Just for Fun</code>！</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>TypeScript</tag>
        <tag>图灵完备</tag>
      </tags>
  </entry>
  <entry>
    <title>给大一计算机的建议,来自一名即将大四的老货</title>
    <url>/2017/08/18/%E7%BB%99%E5%A4%A7%E4%B8%80%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9A%84%E5%BB%BA%E8%AE%AE-%E6%9D%A5%E8%87%AA%E4%B8%80%E5%90%8D%E5%8D%B3%E5%B0%86%E5%A4%A7%E5%9B%9B%E7%9A%84%E8%80%81%E8%B4%A7/</url>
    <content><![CDATA[<blockquote>
<p>本文纯属个人观点，勿喷，愿意和大家一起交流进步</p>
</blockquote>
<h2 id="致有缘人"><a href="#致有缘人" class="headerlink" title="致有缘人"></a>致有缘人</h2><p>自己即将升入大四，犹记得自己大一的时候的迷茫，当时自己多么希望有个带自己的学长，然而无奈只能自己摸索，特写此篇献给即将踏入大学的你们。</p>
<p>不管什么原因来了计算机专业，既然来了，就要努力爱上它。这里你将见识到很多很多新名词，Web，html，JavaScript，C++，python，框架，包，复杂度，函数，库，协议，TCP，UDP，CPU，if，else，循环，算法，递归，迭代，内存，指针，Android，比特，爬虫，二进制，调制，服务器，VPS……开始的自己和你们一样，什么也不知道，但这不重要，要相信自己可以做到，缺的只是去开始，一篇 <a href="https://zhuanlan.zhihu.com/p/19959253" target="_blank" rel="noopener">编程入门</a>，先推荐给大家。</p>
<h2 id="学计算机能做什么"><a href="#学计算机能做什么" class="headerlink" title="学计算机能做什么"></a>学计算机能做什么</h2><p>大一的时候开始学 C++ ，整天对着黑框框，不禁在想，自己学了假计算机吗，这是在干什么？但我想告诉你的是，计算机不仅如此，他可以做应用，电脑上的应用，QQ，迅雷，手机上的游戏王者荣耀，斗地主，计算器，时钟，各种每天浏览的网页，研究算法，打败柯洁的阿尔法狗，汽车的自动驾驶，共享单车……所有的所有我们都可以做，没错，我们应该自豪，我们每天使用的各种东西，都是我们程序员所能做出来的。</p>
<h2 id="三条大学的道路"><a href="#三条大学的道路" class="headerlink" title="三条大学的道路"></a>三条大学的道路</h2><p>大学早已不同高中，不再有人管，但最重要的还是「好好学习，天天向上」，真的，即使大一，也要认真，只要拿出高中的百分之八十去学，相信就会取得不错的成绩。有了成绩，大四的时候会有更多的选择，保研？读研？工作？</p>
<h3 id="ACM"><a href="#ACM" class="headerlink" title="ACM"></a>ACM</h3><p>ACM 说简单了就是一个比赛，一般三个人组队，然后在规定时间和其他小组比谁做对的算法题多。题目做完提交，如果成功了就会得到令人兴奋的 「AC」，accept，就是题目做对了，还有就是「AK」，all kill，完成了所有题目。</p>
<p>自己大一的时候，对 ACM 不是很感冒，总觉得那些题目很无聊。现在反而有点喜欢上了算法（算法就是解决一个问题的思路，方法，具体操作），每解一道题的喜悦，是他人无法体会的。我推荐大家先去尝试尝试 ACM ，因为不管保研，还是找工作，很深的算法基础都会得到青睐。我们院也有自己的 ACM 队，可以去加入。</p>
<p>这里给几个地址，大家可以去尝试下<br><a href="http://acm.hdu.edu.cn/listproblem.php?vol=1" target="_blank" rel="noopener">杭电 OJ</a> ,大多数人用这个<br><a href="http://poj.org/problemlist" target="_blank" rel="noopener">北大 OJ</a> ，和杭电 OJ 类似<br><a href="https://leetcode.com/problemset/all/" target="_blank" rel="noopener">LeetCode</a> ，国外的一个网站，Facebook ，谷歌的笔试算法题都可能出自上边。</p>
<h3 id="科研"><a href="#科研" class="headerlink" title="科研"></a>科研</h3><p>所谓科研就是看别人的论文，了解别人的思想，去改进作者的算法。怎么判断是否改进了呢？举个简单的例子，预测明天天气，作者的正确率 90%，你的算法经过实验发现是 95%，你这个算法就比原作者的好。然后你就可以发论文了，从此走上人生巅峰。就是看论文，写代码，做实验，分析实验数据，尝试尝试再尝试。当然更牛的人就是提出崭新的算法，从此留名青史，如果你做到了，记得带我飞。</p>
<p>怎么开始科研呢？做到不要脸，直接去找老师，问老师有没有什么项目，自己想跟着做。大学老师真的都很好，他带你其实得不到任何的好处，因为把你带出来，你可能研究生也不会跟他。这里感谢一直带我的龚文引老师，谢谢老师。不要想着老师找你，大学最重要的是要主动。</p>
<h3 id="做应用"><a href="#做应用" class="headerlink" title="做应用"></a>做应用</h3><p>做应用，相比其他两个会更有成就感。因为做出来可以很快的让你的同学用到，或者服务自己。主要有三个方向。</p>
<p>Web。 就是网页，你每天用浏览器进的所有东西都是网页。做网页你需要去学 html ，JavaScript，css。微信推出的小程序，也可以算做在这里。当然由于越来越多的人进入 IT 行业，除了了解 Web 前端，你还得了解一些后端的东西，例如一些脚本语言 PHP，python，或者 java 都可以。你如果全精通了，就可以走上人生巅峰，成为一名传说中的全栈工程师。</p>
<p>移动端。Android，iOS，手机上所有的 APP 我们都可以做。对于 Android 你需要学习 java 或者最新的 ktolin。对于 iOS 你需要学习 Objective-C 或者 swift ，当然你还需要买苹果的手机和电脑。</p>
<p>后端。这里的东西就比较杂了，大家接触的也比较少，因为我们只会用 APP ，浏览网页，背后的东西谁知道呢。你需要去了解 Linux 系统，做后端的东西它比 Windows 方便的多。你需要学习 python ，go，java 等等中的几种。你需要学数据库，网络，系统安全。总之很杂，慢慢的了解。</p>
<p>总之，由于现在越来越多的库，做一个 APP ，网页成本越来越低，随随便便就可以做出来一个。你如果想往这方面走，一定要记录深入你所学的，不然仅仅做个东西没什么竞争力的。重要的是他设计的思想，方法，你的目标应该是成为造轮子的人，而不是用别人的东西。</p>
<p>最后，不管哪个方向，我们都可以去尝试，甚至都去做到极致。</p>
<h2 id="科学上网"><a href="#科学上网" class="headerlink" title="科学上网"></a>科学上网</h2><p>大一的一个巧合，我才意识到，天哪我们原来上的是假网。由于 GFW 的存在，一些国外的东西，我们都不能用。之所有我们不会感觉缺了什么，是因为国内所有东西都有了对应的替代。作为程序员，我们至少会使用 Google 搜索，所以大家要想办法去使用它。这里推荐修改 hosts 或者 ss ，话题敏感，不多谈。</p>
<h2 id="一些有用的东西"><a href="#一些有用的东西" class="headerlink" title="一些有用的东西"></a>一些有用的东西</h2><p><a href="https://github.com/" target="_blank" rel="noopener">github</a>/<a href="https://coding.net/" target="_blank" rel="noopener">coding</a><br>两个可以找到开源项目，或者放自己项目的地方，一个国外的一个国内的。里边有世界上各种各样的大牛贡献的项目，也有 BAT，也就是国内的百度阿里腾讯贡献的项目。所谓开源就是，在遵循某些协议的前提下，我们可以把它的代码用到我们自己的代码里。 </p>
<p><a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="noopener">git</a><br>要使用 github ，当然少不了 git。一个版本控制和协作的工具，你一定会爱上它。推荐廖雪峰老师的 git 教程。</p>
<p><a href="https://shimo.im/desktop" target="_blank" rel="noopener">石墨</a><br>可以进行多人协作，实时编辑保存文档，用了就知道了，不解释。</p>
<p><a href="https://segmentfault.com" target="_blank" rel="noopener">segmentfault</a><br>一个问答平台，当你有什么 BUG 解决不了的话可以到上边提问</p>
<p><a href="https://stackoverflow.com/" target="_blank" rel="noopener">stackoverflow</a><br>国外的问答平台，你如果用英文搜索问题，多半会进入这个网站，几乎没有它解决不了的问题。</p>
<p><a href="https://www.zhihu.com/" target="_blank" rel="noopener">知乎</a> 以及 其 APP<br>上边很多程序员，这里推荐下 温兆伦，即 winter，赵劼，vczh，虽然他们现在都是在水知乎，但可以看看他们的之前的回答，感受下和牛人直接的差距。还有 萧井陌 ，蓝色 翻翻他们的答案会有一些好处的。</p>
<p><a href="https://www.quora.com/" target="_blank" rel="noopener">quora</a>  以及其 APP<br>一个国外的问答网站，可以提高自己英语，以及了解下世界上有趣的事情。说道英语，一定要学好英语，一定要学好英语，一定要学好英语，背单词可以用扇贝，百词斩等，也可以用我最近用的 <a href="https://learn.lingvist.com/#guess" target="_blank" rel="noopener">Lingvist</a>。推荐一个口语教程，链接：<a href="http://pan.baidu.com/s/1c184jNa" target="_blank" rel="noopener">http://pan.baidu.com/s/1c184jNa</a> 密码：rpbf 。</p>
<p>Telegram<br>一个 IM 应用，也就是即时通讯，与QQ，微信类似。安全性很高，上边可以找一些有趣的群组，和外国人交流学习，会发现很多很多有趣的事情。但需要科学上网。</p>
<p>微信公众号<br>stormzhang ,主要做安卓的，现在分享一些他的经历、经验<br>一个程序员的日常，主要做 python，数据分析<br>小道消息，互联网最新的见解</p>
<h2 id="社团"><a href="#社团" class="headerlink" title="社团"></a>社团</h2><p>根据自己的兴趣要选择加入一些社团，这是高中所不具有的，你会认识更多的全国各地的朋友，增长自己的见识，这里介绍两个我加入的。</p>
<p><a href="https://pointstone.org/" target="_blank" rel="noopener">点石团队</a><br>地大唯一的互联网团队，加入后至少可以增加你的见识，你也可以和里边的小伙伴合作完成一些东西， APP ，网页 什么的，充实自己的大学生活。</p>
<p>计算机羽毛球队<br>自己虽然球打的不怎么样，但认识了很多朋友，一起打球，一起吃饭，一起出去玩，一起过生日，很棒。</p>
<h2 id="能力"><a href="#能力" class="headerlink" title="能力"></a>能力</h2><p>计算机最重要的就是解决问题的能力，搜索的能力，我们会遇到各种各样的 BUG，无穷无尽的 BUG，但我们要养成自己解决的习惯，不要动不动就去问别人，这样提高的只会是别人，自己永远提高不了。你要相信没有搜不到的问题。</p>
<p>还有就是该学哪门语言的问题，至少会两种类型的语言，编译型的语言 JAVA，C++ 之类的，解释型的语言，python，php 之类的。但最后你会发现，语言其实仅仅是一种工具，最重要还是解决问题的思路方法。</p>
<h2 id="End"><a href="#End" class="headerlink" title="End"></a>End</h2><p>「当你觉得已经很厉害的时候，其实仍旧什么也不会」，计算机相关的东西真的太多太多了，学的越多，不会的也将越多，这方面我们一定要谦逊，多向其他人学习。大学很短，真的很短，「starting is half the battle」，共勉~</p>
]]></content>
      <categories>
        <category>随想</category>
      </categories>
      <tags>
        <tag>随想</tag>
        <tag>计算机</tag>
        <tag>建议</tag>
      </tags>
  </entry>
  <entry>
    <title>趣谈计算机补码</title>
    <url>/2019/05/25/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A1%A5%E7%A0%81%E8%A1%A8%E7%A4%BA/</url>
    <content><![CDATA[<p>小亮：小杨呀，考你个问题。</p>
<p>小杨：我不听，我不听，我不听。</p>
<p>小亮：非常有意思的，你听听。你说如果给你一个计算器，但只能算加法，那你减法该怎么办呀？</p>
<p>小杨：这么神奇的吗，你难道有方法？</p>
<p>小亮：其实原理很简单的，日常生活中我们其实一直都有用到的，你看一下现在闹钟几点了？</p>
<p><img src="https://windliang.oss-cn-beijing.aliyuncs.com/clock.jpg" alt=""></p>
<p>小杨：8 点！</p>
<p>小亮：那 3 小时前是几点呢？</p>
<p>小杨：8 - 3 = 5，5 点！</p>
<p>小亮：那 9 小时以后呢？</p>
<p>小杨：嗯嗯，你等等，一五得五，二五一十，五一劳动节，8 + 9 - 12 = 5，还是 5 点！</p>
<p>小亮：你为什么减去了一个 12 呀？</p>
<p>小杨：小学老师这样教我的呀，至于为什么？Emmmm，因为总共只有 12 个数呀！</p>
<p>小亮：就是这里，你完成了一个伟大的操作！模运算。你进行了模 12 操作，还有一个关键点，总共只有 12 个数！</p>
<p>小杨：我是不是很厉害，嘻嘻嘻，但是…然后呢？</p>
<p>小亮：你想一想，8 - 3 和 8 + 9 的结果是一样的，而最开始我给你的计算器只能进行加法操作，所以再进一步，把 8 - 3 当做 8 + （- 3），它和 8 + 9 的结果一致，所以…</p>
<p>小杨：所以我们用 9 去表示 -3，然后如果想计算减法 8 - 3，就直接在计算器上输 8 + 9，就可以得到正确结果了！</p>
<p>小亮：bingo！但你忘了一个前提，就是计算器必须只能存 12 个数，它会自动进行取模操作。还有一个事，现在是 8 点，4 小时后呢？</p>
<p>小杨：8 + 4 = 12，12 点！</p>
<p>小亮：咦？你为什么不进行取模了，你看之前还多减了一个 12 呢？为了统一操作，我们每次都进行取模吧，12 - 12 = 0，这样也比较符合取模的含义，这样对 12 取模，意味着我们数的范围就是 0 到 11 了。</p>
<p>小杨：好的，好的，我知道了，我现在只知道了 -3 可以用 9 表示，那我们想算 8 - 5 呢？-5 用多少表示呢？</p>
<p>小亮：你自己拨动下表针看看，5 小时前和几小时后是等价的呢？</p>
<p>小杨：我看看，7 点！算 8 - 5 的话，用 8 + 7 就可以了。好了，其他的我也知道了，来，我给你画张表。</p>
<table>
<thead>
<tr>
<th>0</th>
<th>-1</th>
<th>-2</th>
<th>-3</th>
<th>-4</th>
<th>-5</th>
<th>-6</th>
<th>-7</th>
<th>-8</th>
<th>-9</th>
<th>-10</th>
<th>-11</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>11</td>
<td>10</td>
<td>9</td>
<td>8</td>
<td>7</td>
<td>6</td>
<td>5</td>
<td>4</td>
<td>3</td>
<td>2</td>
<td>1</td>
</tr>
</tbody>
</table>
<p>小亮：哇，你是怎么把这个表列出来的？</p>
<p>小杨：因为是模 12 ，所以 1+ 11 = 0，1 - 1 = 0，所以 -1 用 11 代替，2 + 10 等于 0，2 - 2 = 0，-2 用 10 代替，其他也是这样的。</p>
<p>小亮：棒棒棒，那现在计算会有一个问题的，之前的 8 - 3，8 - 5，结果都是正的，没有问题。那如果，3 - 5 呢？</p>
<p>小杨：3 - 5，-5 对应 7，那就是 3 + 7 等于 10 ，看上边的表格，10 对应 -2，所以答案是 -2！骗子！明明没有问题！</p>
<p>小亮：那你 5 - 3 呢？？？ -3 对应 9，5 + 9 = 2，看下上边的表格，这时候你咋不进行 2 对应 -10 了。</p>
<p>小杨：因为我知道 5 - 3 是正的，3 - 5 是负的，嘻嘻嘻。</p>
<p>小亮：所以这就是问题所在了，既然要让计算器算，它肯定不知道是正的还是负的，所以这样肯定不行的。我们不能把每一个正数都对应一个负数，你看看下边这个表。</p>
<table>
<thead>
<tr>
<th>0</th>
<th>-1</th>
<th>-2</th>
<th>-3</th>
<th>-4</th>
<th>-5</th>
<th>-6</th>
<th>5</th>
<th>4</th>
<th>3</th>
<th>2</th>
<th>1</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>11</td>
<td>10</td>
<td>9</td>
<td>8</td>
<td>7</td>
<td>6</td>
<td>5</td>
<td>4</td>
<td>3</td>
<td>2</td>
<td>1</td>
</tr>
</tbody>
</table>
<p>小杨：3 - 5 和之前一样，-5 对应 7，那就是 3 + 7 等于 10 ，10 对应 -2，然后的话，5 - 3 = 2，-3 对应 9，5 + 9 = 2，2 对应 2，哇！这次没有问题了。</p>
<p>小亮：是的，这次我们只是用一部分正数表示了负数，另一部分保持不变。每一个数都有了一个对应关系，9 不再是 9 了，它其实是 -3。但这有个缺点，给你一个数，你并不能立刻知道它代表几，只能去查表才会知道。</p>
<p>小杨：对呀，我用的计算机能算的数的范围非常大呀，它内部不会也有这样一个表格吧。</p>
<p>小亮：不不不，它实现了一种转换关系，给定一个数立马知道它代表的几。</p>
<p>小杨：那会不会很复杂呀，我想听听。</p>
<p>小亮：其实和那个钟表是一个意思的，计算机里寄存器存的位数是固定的，就像表盘的数是固定的。表盘里，11 点过 1 个小时后，就变成了 0 点，因为是进行的模 12 操作。如果寄存器只能存 4 位数字，那就总共可以表示 16 个数字，那么 15 再加 1 的话就变成了 0，那么怎么实现减法…</p>
<p>小杨：我懂了，一样的道理，用一部分数字来表示负数就可以了!</p>
<p>小亮：聪明！因为计算机里是都是用 2 进制存储的，我们来看看这些数字都长什么样子。</p>
<table>
<thead>
<tr>
<th>0000 0</th>
<th>1000 8</th>
</tr>
</thead>
<tbody>
<tr>
<td>0001 1</td>
<td>1001 9</td>
</tr>
<tr>
<td>0010 2</td>
<td>1010 10</td>
</tr>
<tr>
<td>0011 3</td>
<td>1011 11</td>
</tr>
<tr>
<td>0100 4</td>
<td>1100 12</td>
</tr>
<tr>
<td>0101 5</td>
<td>1101 13</td>
</tr>
<tr>
<td>0110 6</td>
<td>1110 14</td>
</tr>
<tr>
<td>0111 7</td>
<td>1111 15</td>
</tr>
</tbody>
</table>
<p>小杨：那我来分一下吧！</p>
<table>
<thead>
<tr>
<th>0000 0</th>
<th>0001 1</th>
<th>0010 2</th>
<th>0011 3</th>
<th>0100 4</th>
<th>0101 5</th>
<th>0110 6</th>
<th>0111 7</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>1</td>
<td>2</td>
<td>3</td>
<td>4</td>
<td>5</td>
<td>6</td>
<td>7</td>
</tr>
<tr>
<td>1000 8</td>
<td>1001 9</td>
<td>1010 10</td>
<td>1011 11</td>
<td>1100 12</td>
<td>1101 13</td>
<td>1110 14</td>
<td>1111 15</td>
</tr>
<tr>
<td>8</td>
<td>9</td>
<td>-6</td>
<td>-5</td>
<td>-4</td>
<td>-3</td>
<td>-2</td>
<td>-1</td>
</tr>
</tbody>
</table>
<p>让我来算一个减法，7 - 4 = 7 + 12 模 16 = 3！哇，成功了！</p>
<p>小亮：等等，你为什么搞了 8 个正数，只搞了 6 个负数呀。</p>
<p>小杨：因为我喜欢！</p>
<p>小亮：那这样又回到之前的问题了，如果我问 8 代表的正数还是负数？你是不是还是只能查表呀。</p>
<p>小杨：对哦，那该怎么分呀。</p>
<p>小亮：很自然呀，你看上边表格的二进制部分，最高位是不是有的是 0 ，有的是 1，我们把最高位是 1 的正数来表示负数，最高位是 0 的数表示正数，是不是就可以了。</p>
<table>
<thead>
<tr>
<th>0000 0</th>
<th>0001 1</th>
<th>0010 2</th>
<th>0011 3</th>
<th>0100 4</th>
<th>0101 5</th>
<th>0110 6</th>
<th>0111 7</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>1</td>
<td>2</td>
<td>3</td>
<td>4</td>
<td>5</td>
<td>6</td>
<td>7</td>
</tr>
<tr>
<td>1000 8</td>
<td>1001 9</td>
<td>1010 10</td>
<td>1011 11</td>
<td>1100 12</td>
<td>1101 13</td>
<td>1110 14</td>
<td>1111 15</td>
</tr>
<tr>
<td>-8</td>
<td>-7</td>
<td>-6</td>
<td>-5</td>
<td>-4</td>
<td>-3</td>
<td>-2</td>
<td>-1</td>
</tr>
</tbody>
</table>
<p>小杨：对呀，这样的话，给我一个数，我就知道它是负的还是正的了，比如 13，二进制是 1101，开头是 1，那它代表的一定是一个负数。那开始你说可以直接知道它代表的是几，该怎么算呢？</p>
<p>小亮：嗯嗯，你想一想，你得出表格的时候是怎么操作的呢？首先二进制开头是 0 的，它是几就代表几，就不讨论了。负数的话，你为什么用  12 表示 -4 呢？</p>
<p>小杨：因为现在是模 16 的，所以两数和如果是 16 的话，就会变成 0。12 + 4 = 16 = 0，-4 + 4 = 0，所以 12 可以代替 -4。</p>
<p>小亮：所以如果给你一个数，如果是二进制开头是 1，我们先确定它是一个负数，至于是负几，我们直接用 16 减它就够了！如果给你 13，我们看一下二进制是多少，1101，开头是 1 所以它是负数，负几呢？16 - 13 = 3，所以 13 代表 -3，看下上边的表格，是不是对的？</p>
<p>小杨：等等，这个我一直知道呀，之前表盘的时候我就是这样算的呀。16 - 13，我们是为了用加法表示减法，这怎么又出来减法了。</p>
<p>小亮：到了见证奇迹的时候了！让我们用二进制的形式看一下，16 - 13 = 1 0000 - 1101 = （1 + 1111） - 1101 = （1111 - 1101）+ 1 = 0010 + 1 = 0011 = 3。</p>
<p>小杨：哪里奇迹了，1111 - 1101，这不又出现减法了。</p>
<p>小亮：不不不，这步不用减法，只需要把 1101 按位取反就够了，也就是 0010！</p>
<p>小杨：神奇！所以我来总结下，给我们一个数，如果二进制开头是 0，那就不管了，它是几就是几。如果开头是 1，那它代表负数，负几呢？按位取反，再加一就够了！但还有个问题，现在给我一个数我只能它代表几，但反过来，给我一个数，我怎么知道用几去代表它呢？如果给我 -3，我们用多少代表它呢？</p>
<p>小亮：是同样的道理，13 + 3 = 16 = 0，-3 + 3 = 0，所以用 13 代表 -3。所以算的话，还是用 16 去减这个数，所以同样的推导，最后的结论是一样的，按位取反，末位加 1，-3 的话，根据推导我们是用 16 减去的 3，所以用 3 对应的 2 进制 0011，按位取反，1100，末位加一，1101，所以 -3 就用 1101 表示。</p>
<p>小杨：哇，懂了懂了，这样完美的把加法和减法统一了，只不过计算前进行数字的转换就够了。</p>
<p>小亮：对的，其实这就是补码，计算机中所有的整数都用补码存储，这样算减法用加法器就足够了。举个例子，3 的补码是 3 不变，也就是 0011，-4 的补码，4 的二进制按位取反末位加 1，也就是 0100 变成 1011，再加 1 变成 1100，所以算 3 - 4 = 3 + （-4）= 0011 + 1100 = 1111，1111 代表多少呢？首先肯定代表一个负数，然后按位取反末位加 1，就是 0001 了，所以结果就是 -1。</p>
<p>小杨：我明白了，只要学会把一个数转成补码，然后补码再还原就够了，而且两个转换的方法还一样，按位取反，末位加 1，很清晰了。</p>
<p>小亮：让我们回到真正的计算机里， 我们知道 int 一般情况是 4 个字节，也就是 32 位，一样的道理，我们把最高位是 0 的代表正数，最高位是 1 的代表负数，所以最大的正数就是 0111 1111 … 1111 1111，这个数代表多少呢？</p>
<p>小杨：这个我知道，为了方便计算，先把它加 1，变成 1000 0000 … 0000 0000，这个是 $$2^{31}$$，也就是 2147483648，然后减 1，就是 2147483647。</p>
<p>小亮：那最大负数呢？</p>
<p>小杨：最大负数的话，因为 1 开头代表负数，然后其他部分当然越小越好，所以就是 1000 0000 … 0000 0000，那它代表多少呢？直接套用公式，按位取反，末位加一，变成 1000 0000 … 0000 0000，它竟然又变了回来，之前算了这个数是  $$2^{31}$$，也就是 2147483648，所以它代表 -2147483648，咦，怎么感觉负数比正数多了一个，没有对称呀？</p>
<p>小亮：你想一下呀，0 开头的数和 1 开头的数，个数是不是一样的，但是 0 开头的数包括了 0，所以正数就少了一个咯。顺便再问你个问题，最小的负数是 -2147483648，那 -2147483648 - 1 是多少呢？</p>
<p>小杨：-2147483649！！哈哈，开个玩笑，我知道你是问我计算机里边的情况。我来算一下，-2147483648 的补码是 1000 0000 … 0000 0000，-1 的补码是把 1 按位取反末位加 1，就是 1111 1111 … 1111 1111，然后把这两个数加起来就是 0111 1111 … 1111 1111，这不是那个最大的正数吗，所以  -2147483648 - 1 是 2147483647！</p>
<p>小亮：感觉你出师了呀，竟然没中套。这其实也很好理解对不对</p>
<table>
<thead>
<tr>
<th>0000 0</th>
<th>0001 1</th>
<th>0010 2</th>
<th>0011 3</th>
<th>0100 4</th>
<th>0101 5</th>
<th>0110 6</th>
<th>0111 7</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>1</td>
<td>2</td>
<td>3</td>
<td>4</td>
<td>5</td>
<td>6</td>
<td>7</td>
</tr>
<tr>
<td>1000 8</td>
<td>1001 9</td>
<td>1010 10</td>
<td>1011 11</td>
<td>1100 12</td>
<td>1101 13</td>
<td>1110 14</td>
<td>1111 15</td>
</tr>
<tr>
<td>-8</td>
<td>-7</td>
<td>-6</td>
<td>-5</td>
<td>-4</td>
<td>-3</td>
<td>-2</td>
<td>-1</td>
</tr>
</tbody>
</table>
<p>看上边的表格，这个只有 4 位，所以最大的数是 7，最小的数是 -8。上边的 7 后边是 -8 了，所以 -8 减 1，也就是 -8 前边那个数当然就是 7 了。</p>
<p>小杨：其实这个表格化成圆其实更好理解了，就像表盘一样，哈哈。</p>
<p>小亮：对的，总结一下，其实我们利用了寄存器存的位数是有限的，所以它到达最大的数以后会自动置零，相当于完成了取模操作，就像钟表一样，到了 11 点，之后又会从 0 点开始。然后我们再定义用哪些数表示正数，哪些数表示负数，从而完成了加法和减法的统一。并且做到了给一个数知道它的补码表示，知道补码，也可以算出它代表几。</p>
<p>小杨：那计算机设计补码的时候就是这样想的吗？</p>
<p>小亮：这我就不知道了，但可能和我想的一样？哈哈哈。最后留给你一个题，不用乘法除法也不用减法怎么求一个数的相反数呢？ -2147483648 * （-1）等于多少呢？</p>
]]></content>
      <categories>
        <category>计算机组成</category>
      </categories>
      <tags>
        <tag>计算机</tag>
        <tag>补码</tag>
      </tags>
  </entry>
  <entry>
    <title>追本溯源：字符串及编码</title>
    <url>/2019/07/15/%E8%BF%BD%E6%9C%AC%E6%BA%AF%E6%BA%90-%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8F%8A%E7%BC%96%E7%A0%81/</url>
    <content><![CDATA[<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><p> 先考虑下边的问题。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220401211405994.png" alt="image-20220401211405994"></p>
<p>我们知道 length 就是字符串的字符数，所以输出的依次是 2，1，1，对吗？</p>
<h1 id="探索一"><a href="#探索一" class="headerlink" title="探索一"></a>探索一</h1><p>我们知道，计算机里只能存 0 和 1，换言之，只能存数字，而我们现在在屏幕上看到的文字只是将数字对应到图形而已。</p>
<p>早期的 ASCII 码就是典型的例子，如下图，为了书写方便我在数字前边加了 0x 代表是 16 进制。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/ascii.jpg" alt=""></p>
<p>我们用 106 代表 ‘ j ‘，115 代表 ‘ s ‘。然后如果用 ASCII 码表示 “js” 的话，其实就是 <code>0110101001110011</code> ，然后每 8 位也就是一个字节组成一个数字，根据对应关系电脑把本来的数字转换成了字符 “js” 展示到了我们面前。</p>
<p>有一个缺点就是 ASCII 码是 8 位，那么只能表示 $2^8$ 个数字，也就是 256 个数字，这对于英文字母已经足够了。但是对于汉字的话，还远远不够。</p>
<h1 id="探索二"><a href="#探索二" class="headerlink" title="探索二"></a>探索二</h1><p>所以我们加 1 个字节，用两个字节的数字去对应汉字，$2^{16}$ 也就是 65536，肯定足够了。</p>
<p>当然，每个国家都会这样想，然后都制定了自己的语言相应的对应规则，这当然不方便大家在互联网上互通有无，如果本机不知道对应国家的编码对应关系，从而会造成乱码。所以后来有了 Unicode。</p>
<p>我们用 0x000000 - 0x10FFFF 这么多的数字去对应全世界所有的语言、公式、符号。然后把这些数字分成 17 部分，把常用的放到 0x0000 - 0xFFFF，也就是 2 个字节，叫做基本平面 （BMP）。从 0x010000 - 0x10FFFF 再划分为其他平面。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/unicode.jpg" alt=""></p>
<p>和 ASCII 码一样，我们可以把每个符号对应于一个数字，这个数字我们也把它叫做<strong>码点值</strong>。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/uni.jpg" alt=""></p>
<p>有了对应关系，我们可以像 ASCII 码那样去存了。当然这里的话因为每个字符都对应 24 比特位的数字，所以我们就用 3 个字节去存它吧。但是考虑到 CPU 的寄存器都是 8 位，16 位，32 位。。。翻倍来的，所以即使用 24 位，最终还得转到 32 位，所以我们直接用 32 位吧。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/utf32.jpg" alt=""></p>
<p>是的，这就是传说中的 UTF - 32 编码，简单明了，码点值是多少，内存中就存多少。</p>
<h1 id="探索三"><a href="#探索三" class="headerlink" title="探索三"></a>探索三</h1><p>UTF - 32  缺点很明显了，字母 A 原本只需要 1 个字节去存储，而现在却用了 4 个字节去存，大部分位置都是 0。</p>
<p>我们为什么要多存那么多零呢？能不能 <code>A</code> 只存 <code>0x41</code>，<code>亮</code>只存 <code>0x4eae</code>。如果 <code>A亮</code>这个字符串放到内存中就是 <code>0x414eae</code>。问题来了，计算机怎么知道，几个字节代表一个字符呢？是 <code>0x41</code>呢？还是 <code>0x414e</code> 呢？还是 <code>0x414eae</code>？</p>
<p>于是，就有了 UTF - 8，将码点值进行一定的转换再去存储。</p>
<p>把阮一峰老师的讲解搬过来。</p>
<blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&gt; Unicode 符号范围     |        UTF-<span class="number">8</span> 编码方式</span><br><span class="line">&gt; (十六进制)           |           （二进制）</span><br><span class="line">&gt; ----------------------+---------------------------------------------</span><br><span class="line">&gt; <span class="number">0000</span> <span class="number">0000</span> - <span class="number">0000</span> <span class="number">007F</span> | <span class="number">0</span>xxxxxxx</span><br><span class="line">&gt; <span class="number">0000</span> <span class="number">0080</span> - <span class="number">0000</span> <span class="number">07F</span>F | <span class="number">110</span>xxxxx <span class="number">10</span>xxxxxx</span><br><span class="line">&gt; <span class="number">0000</span> <span class="number">0800</span> - <span class="number">0000</span> FFFF | <span class="number">1110</span>xxxx <span class="number">10</span>xxxxxx <span class="number">10</span>xxxxxx</span><br><span class="line">&gt; <span class="number">0001</span> <span class="number">0000</span> - <span class="number">0010</span> FFFF | <span class="number">11110</span>xxx <span class="number">10</span>xxxxxx <span class="number">10</span>xxxxxx <span class="number">10</span>xxxxxx</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<p>根据上表，解读 UTF-8 编码非常简单。如果一个字节的第一位是<code>0</code>，则这个字节单独就是一个字符；如果第一位是<code>1</code>，则连续有多少个<code>1</code>，就表示当前字符占用多少个字节。</p>
<p>下面，还是以汉字<code>严</code>为例，演示如何实现 UTF-8 编码。</p>
<p><code>严</code>的 Unicode 是<code>4E25</code>（<code>100111000100101</code>），根据上表，可以发现<code>4E25</code>处在第三行的范围内（<code>0000 0800 - 0000 FFFF</code>），因此<code>严</code>的 UTF-8 编码需要三个字节，即格式是<code>1110xxxx 10xxxxxx 10xxxxxx</code>。然后，从<code>严</code>的最右边二进制位开始，依次从右往左填入上边格式中的<code>x</code>，多出的位补<code>0</code>。这样就得到了，<code>严</code>的 UTF-8 编码是<code>11100100 10111000 10100101</code>，转换成十六进制就是<code>E4 B8 A5</code>。</p>
</blockquote>
<p>让我们再看下「亮」，码点值是<code>0x4eae</code>，二进制就是 <code>100111010101110</code>，同样符合第三行，即格式是<code>1110xxxx 10xxxxxx 10xxxxxx</code>。从<code>亮</code>的最右边二进制位开始，依次从右往左填入上边格式中的<code>x</code>，多出的位补<code>0</code>。这样就得到了，<code>亮</code>的 UTF-8 编码是 <code>1110(0100) 10(111010) 10(101110)</code>，16 进制就是 <code>e4 ba ae</code>。</p>
<p>所以现在的对应关系变成了下边的样子。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/utf8.jpg" alt=""></p>
<p>和 UTF - 32 不同之处在于，我们不再用 4 个字节存储码点值，而是通过规则转换后再存储，这样的好处就是之前的<code>A</code>的话就只需 1 个字节就够了，而其他的可能是 2 个或 3 个，4 个字节，所以 UTF - 8 也叫变字长编码。</p>
<p>由于 UTF - 8 的变字长，而对于大部分常用字符都是 1 或 2 个字节，所以对于 html、邮件的传输多用 UTF-8 进行编码后传输。</p>
<h1 id="探索四"><a href="#探索四" class="headerlink" title="探索四"></a>探索四</h1><p>UTF - 8 有什么缺点吗？</p>
<p>对于一个字符串<code>abc天气不错</code>，如果我们知道它的总共大小是 19 字节，但是我们很难算出它有多少个字符。因为有的字符是 1 个字节，有的是 2 个字节，有的是 3 个。所以为了知道字符数，我们还需要遍历一遍所有字节，从而确定有多少个字符。此外如果我们想取第 3 个字符，我们还是得从第 0 个字节开始遍历，因为我们不知道每个字符有多少字节。</p>
<p>如果每个字符都用固定长度编码就好了，这不又回到 UTF - 32 了吗？不不不，我们折中一下。</p>
<p>对于 Unicode 字符集，基本平面是我们常用的一些字符，用两个字节就可以编码。所以对于<code>亮</code>字的话，码点值是<code>0x4eae</code>，那么我们内部就用 <code>0x4eae</code> 去存。而 ASCII 码只需要一个字节，那么我们把通过高位补零扩充至两个字节去存。例如<code>A</code>的码点值是 65，16 进制对应 0x41，用 <strong>U+41</strong> 表示。那么内部的话就用 0x0041 去存。</p>
<p>那么基本面以外的字符呢？比如<code>𫠂</code>这个字就属于基本面以外，它的 Unicode  码点值是 178178，也就是 0x2b802 ，显然用两个字节是存不下的，那怎么办呢？</p>
<p>用四个字节存呗，像 UTF - 32 那样直接存码点值，然后高位补零吗？显然不行了，因为第一平面我们是用的两个字节，如果第一平面外的直接用四个字节去存码点值的话，可能会导致前两个字节和基本面的两个字节重复，导致我们无法区分当前字符是两个字节还是四个字节。</p>
<p>UTF - 8 中，我们根据二进制开头的 1 的个数来表示当前字符是几个字节。这里的话，幸运的是在第一平面 U+D800..U+DFFF 的值不对应于任何字符。所以我们可以根据一些算法，把码点值转换为 4 个字节，前两个字节就用 U+D800..U+DFFF 中的值，这样如果前两个字节是 U+D800..U+DFFF 范围内的数，那就意味着该字符是 4 个字节编码的。否则就是两个字节。</p>
<p>这就是 UTF - 16 的编码方式了（具体的算法大家可以网上找一下），相对于 UTF - 8 的优势就是固定字节数，大部分字符都是两个字节。所以如果对于一个字符串<code>abc天气不错</code>如果采用 UTF - 16 编码，我们知道了它的总大小是 14 字节，那么字符数就很好知道了，它的大小除以 2 就是它的字符数了。而取第 4 个字符，如果知道了字符串开头的地址，也只需要加 2 * 4 就可以了（下标从 0 开始）。对于字符串的切割合并也都很好操作了。</p>
<p>所以对于一些语言 java，javascript 里的字符串也都用了 UTF - 16 编码。所以回到最开始的问题。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220401211405994.png" alt="image-20220401211405994"></p>
<p>那么就取决于这些字符是不是在第一平面内了，如果是的话，那么结果就会就是 2 1 1。遗憾的是 “𫠂” 并不在基本平面，所以它内部是用四个字节编码，而 js 为了方便简单，它简单粗暴的认为两个字节就是一个字符，所以输出的就是 2 了。</p>
<p>此外关于，Unicdoe 所有的字符的码点值可以在 <a href="https://unicode.org/charts/" target="_blank" rel="noopener">这个</a> 网站找到。</p>
<h1 id="实验验证"><a href="#实验验证" class="headerlink" title="实验验证"></a>实验验证</h1><p>接下来说一下文件的存储。</p>
<p>我们打开一个 .txt，看到很多文字、符号，而内部其实也是用 0、1 存储的。既然要存储，就需要把 Unicode 的码点值进行编码。</p>
<p>如果是 UTF - 8 编码，那么一个码点值会生成 1 个或多个字节，然后把这些字节按顺序存就可以了。</p>
<p>如果是 UTF - 16 编码呢？</p>
<p>我们知道一个 Unicode 的码点值会对应一个数字，对于基本平面的字符，我们直接把这个数字存到内存中。那么问题来了，我们知道<code>亮</code>的码点值是 20142，换成 16 进制就是 <code>0x4eae</code>，内存中是按字节进行编址的。所以我们是先存<code>4e</code>呢？还是<code>ae</code>？先存<code>4e</code>吧，这样就符合我们人类阅读顺序，先读<code>4e</code>，所以先存<code>4e</code>呗。所以在内存中就是下边的样子。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">内存地址       内存值</span><br><span class="line"><span class="number">0x00000000</span>    <span class="number">01001110</span> (<span class="number">4</span>e)</span><br><span class="line"><span class="number">0x00000001</span>    <span class="number">10101110</span> (ae)</span><br></pre></td></tr></table></figure>
<p>那么问题又来了，计算机处理的话先读取的是低地址，也就是<code>4e</code>，而<code>4e</code>对应数字<code>0x4eae</code>的高位（如果是 10 进制，个十百千，千就叫做高位）。有时候我们希望从低位读（也就是十进制中的个位）数字，所以我们希望这样去存。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">内存地址       内存值</span><br><span class="line"><span class="number">0x00000000</span>    <span class="number">01001110</span> (ae)</span><br><span class="line"><span class="number">0x00000001</span>    <span class="number">10101110</span> (<span class="number">4</span>e)</span><br></pre></td></tr></table></figure>
<p>这就是多个字节存储的时候的字节序问题，把数字的高位存到低地址，低位存到高地址，叫做大端序（big endian），存储顺序符合我们人类习惯。反之就叫小端序（little endian）。</p>
<p>如果把<code>亮</code>字存到一个 .txt 中。</p>
<p>如果用 UTF-8 编码，那么前边算过的，就是<code>e4 ba ae</code>。</p>
<p>如果用 UTF-16 编码，大端序的话就是<code>4eae</code>。</p>
<p>如果用 UTF-16 编码，小端序的话就是<code>ae4e</code>。</p>
<p>我们可以验证一下，可以用 notepad++，安装一个 HEXEditor 插件即可。或者其他的可以查看内部编码的也行。</p>
<p>写一个<code>亮</code>到 text.txt</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/test1.jpg" alt=""></p>
<p>以 UTF - 8 编码。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/test2.jpg" alt=""></p>
<p>如果用 UTF - 16 编码，大端序</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/test3.jpg" alt=""></p>
<p>如果用 UTF - 16 编码，小端序</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/test4.jpg" alt=""></p>
<p>可以看到 UTF - 16 编码的时候，除了本身的字节，最开头还多了两个字节，<code>ff</code>和<code>fe</code>。原因很直接了，就是为了区分大端序和小端序。<code>feff</code>代表大端序，<code>fffe</code>代表小端序。</p>
<p><code>feff</code>和<code>fffe</code>也叫做 BOM，它可以区分不同编码。我们也听过 UTF - 8 无 BOM 或者 UTF - 8 BOM。UTF - 8 的 BOM 是 <code>EF BB BF</code>，windows 记事本编写的 .txt ，如果以 UTF - 8 编码保存，它默认就是有 BOM 的，所以如果看他的内存存储就是下边的样子。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/test5.jpg" alt=""></p>
<p>而 UTF - 8 并不存在字节序的问题，因为它的最小编码单位就是字节，而 UTF - 16 编码最小单位是两个字节，所以有字节序的问题，从而加了 BOM 来区分是大端序还是小端序。但是 UTF - 8 并不需要区分大端序还是小端序，所以可以不需要 BOM。如果加了 BOM，对于一些读取操作，它可能会把读取到的 BOM 认为是字符，从而造成一些错误。所以我们保存 UTF - 8 编码的文件时，最好选择无 BOM。</p>
<p>我们也可以在浏览器的控制台上直接验证，因为 js 允许我们直接给字符串赋 Unicode 的码点值。格式是 \u 加上 16 进制的码点值即可。对于超过 2 个字节的码点值，用大括号括起来。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/text6.jpg" alt=""></p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/text7.jpg" alt=""></p>
<p>我们所熟知的 emoji 表情其实在 Unicode 字符集上也有对应的码点值。</p>
<p>比如最常用的笑哭脸的码点值是 U+1F602，当然 Unicode 只规定了码点值，并没有规定怎么实现，不同平台对于笑哭的表情展现也是不一样的。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/emoji.jpg" alt=""></p>
<p>同样我们也可以在浏览器上进行验证。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/emoji2.jpg" alt=""></p>
<h1 id="更多好玩"><a href="#更多好玩" class="headerlink" title="更多好玩"></a>更多好玩</h1><p>知道了上边的编码原则，我们就可以做些有趣的事情了，还记得「神奇字体」小程序吗？可以生成不同样式的字体，在微信、知乎发送。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/mini.png" alt=""></p>
<p>𝙄 𝙡𝙤𝙫𝙚 𝙮𝙤𝙪 𝙩𝙝𝙧𝙚𝙚 𝙩𝙝𝙤𝙪𝙨𝙖𝙣𝙙</p>
<p>其实上边的每一个字母并不是对应 ASCII 码值，而是对应基本平面外的 Unicode 码点值。所以我们如果输出上边的 I 字母，”𝙄”.length，输出的就是 2，因为它是基本平面外的字符，用了 4 个字节编码。</p>
<p>大家可以回顾下，我之前写的探索过程，就会明白「神奇字体」的原理了。</p>
<p><a href="https://mp.weixin.qq.com/s/CQTk6KMV6sWlF3A2hYEF1Q" target="_blank" rel="noopener">「神奇字体」小程序的从零到一</a></p>
<p>此外，Unicode 还有一些组合字符、控制字符，实现不同字符的组合，比如删除线、下划线和字符的组合，实现字符的逆序输出等等，大家可以自己去探索下，蛮有意思的。</p>
<h1 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h1><p>以上就是字符串编码的全部了，这里只介绍了 ASCII，Unicode，UTF 系列，其他的编码方式还有 GBK，GB2312，Big5，ISO 8859-6 等等，这块内容真的是太多太多了，大家感兴趣的话可以自己再去找找资料，上边我总结的如果发现问题可以及时和我反馈，感谢。</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>编码</tag>
        <tag>utf-8</tag>
        <tag>unicode</tag>
      </tags>
  </entry>
  <entry>
    <title>通过js或者nginx实现域名重定向</title>
    <url>/2020/04/11/%E9%80%9A%E8%BF%87js%E6%88%96%E8%80%85nginx%E5%AE%9E%E7%8E%B0%E5%9F%9F%E5%90%8D%E9%87%8D%E5%AE%9A%E5%90%91/</url>
    <content><![CDATA[<p>大学的时候买了 <a href="http://windliang.cc/" target="_blank" rel="noopener">windliang.cc</a> 的域名当做自己的博客，然后一直使用的是 <code>github</code> 的 <code>pages</code> 服务。最近国内访问 <code>github</code> 有些慢，想把博客迁移到阿里云的服务器上。</p>
<p>之前已经把刷题博客 <a href="https://leetcode.wang/" target="_blank" rel="noopener">leetcode.wang</a> 通过 <code>nginx</code> 成功放到阿里云上了，参考 <a href="https://windliang.wang/2020/02/23/云服务器搭建网站全过程/">云服务器搭建网站全过程</a>。</p>
<p>但是大学买的 <code>.cc</code> 域名有一个最大的问题，现在不能备案了，不能备案的话就不能放到国内服务器上。于是前段时间又买了一个 <a href="https://windliang.wang/">windliang.wang</a> 域名，备案成功后，按照之前的总结，很快就放到了阿里云上。</p>
<p>现在需要做的是当访问 <code>.cc</code> 域名的时候，重新定向到 <code>.wang</code> 域名上。</p>
<p>有两种方式，一种是在前端通过 <code>js</code> 进行重定向，另一种就是在后端通过 <code>nginx</code> 。</p>
<h1 id="通过-js"><a href="#通过-js" class="headerlink" title="通过 js"></a>通过 js</h1><p>因为 <code>.cc</code> 域名没有备案，所以我们需要在国外的服务器上放一个 <code>html</code> 来实现重定向。</p>
<p>最简单的方法，就是依旧使用 <code>github</code> 的 <code>pages</code> 服务。需要的<code>index.html</code> 写法如下。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> domain = <span class="string">"windliang.wang"</span>;</span></span><br><span class="line"><span class="javascript">    <span class="comment">//得到 https://windliang.cc/XXXXX</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> src = <span class="built_in">window</span>.location.href;</span></span><br><span class="line"><span class="undefined">    </span></span><br><span class="line"><span class="javascript">    <span class="comment">//得到 https</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> prtc = src.substring(<span class="number">0</span>, src.indexOf(<span class="string">':'</span>));</span></span><br><span class="line"><span class="undefined">    </span></span><br><span class="line"><span class="javascript">    <span class="comment">//得到 /XXXXX</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//indexOf 的第二个参数是开始查找的位置</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> target = src.substring(src.indexOf(<span class="string">'/'</span>, src.indexOf(<span class="string">':'</span>) + <span class="number">3</span>));</span></span><br><span class="line"><span class="undefined">    </span></span><br><span class="line"><span class="javascript">    <span class="comment">//组合在一起</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//https://windliang.wang/XXXXX</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.location.href = prtc + <span class="string">"://"</span> + domain + target;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>比较好理解，上边也都注释了。</p>
<p>我们只需要把它保存为 <code>index.html</code> 然后放到 <code>github</code> 仓库里。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/redirect1.jpg" alt=""></p>
<p>在 <code>Settings</code> 里开启 <code>pages</code> 服务，并且绑定我们的域名。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/redirect2.jpg" alt=""></p>
<p>并且在自己的 <code>DNS</code> 里面添加一个 <code>CNAME</code> 记录，将域名解析到 <code>wind-liang.github.io</code>。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/redirect3.jpg" alt=""></p>
<p>然后再去打开 <code>windliang.cc</code> 的任意地址，就会自动跳转到 <code>windliang.wang</code> 了。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/redirect4.gif" alt=""></p>
<p>这样就成功实现域名的重定向了。但这样做的话，可能对搜索引擎不是很友好，我也没研究过 SEO，仅仅是我的猜测。下边再介绍通过 <code>nginx</code> 方式的重定向。</p>
<p>但是这里有一点我不能理解的是，访问 <code>windliang.cc</code> 的时候会有一个 <code>404</code> 的状态码，这里我也不知道是为什么，如果谁知道的话可以告诉我。</p>
<h1 id="通过-nginx"><a href="#通过-nginx" class="headerlink" title="通过 nginx"></a>通过 nginx</h1><p>因为原来的域名没有备案，所以你需要一个国外的服务器，我的服务器操作系统是 <code>Debian</code> 。</p>
<p>对于 <code>http</code> 的重定向很简单，只需要在 <code>/etc/nginx/conf.d</code> 文件夹下新建一个配置文件。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">vim /etc/nginx/conf.d/windliang.cc.conf</span><br></pre></td></tr></table></figure>
<p>然后添加下边的内容。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen <span class="number">80</span>;</span><br><span class="line">        server_name  windliang.cc;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">301</span> https:<span class="comment">//windliang.wang$request_uri;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样的话就可以了。但因为监听的是 <code>80</code> 端口，所以只会对 <code>http://windliang.cc</code> 进行重定向，对于 <code>https</code> 的链接就无能为力了。</p>
<p>所以我们还需要为 <code>windliang.cc</code> 申请一个 <code>SSL</code> 证书，从而完成 <code>https</code> 的跳转。</p>
<p>需要知道两个东西。</p>
<p><strong>Let’s Encrypt</strong></p>
<blockquote>
<p>Let’s Encrypt由<a href="https://zh.wikipedia.org/w/index.php?title=互联网安全研究小组&amp;action=edit&amp;redlink=1" target="_blank" rel="noopener">互联网安全研究小组</a>（缩写ISRG）提供服务。主要赞助商包括<a href="https://zh.wikipedia.org/wiki/电子前哨基金会" target="_blank" rel="noopener">电子前哨基金会</a>、<a href="https://zh.wikipedia.org/wiki/Mozilla基金会" target="_blank" rel="noopener">Mozilla基金会</a>、<a href="https://zh.wikipedia.org/wiki/Akamai" target="_blank" rel="noopener">Akamai</a>以及<a href="https://zh.wikipedia.org/wiki/思科" target="_blank" rel="noopener">思科</a>。2015年4月9日，ISRG与<a href="https://zh.wikipedia.org/wiki/Linux基金會" target="_blank" rel="noopener">Linux基金会</a>宣布合作。<a href="https://zh.wikipedia.org/wiki/Let&#39;s_Encrypt#cite_note-5" target="_blank" rel="noopener">[5]</a></p>
<p>用以实现新的数字证书认证机构的协议被称为自动证书管理环境（ACME）。<a href="https://zh.wikipedia.org/wiki/Let&#39;s_Encrypt#cite_note-le-getinvolved-6" target="_blank" rel="noopener">[6]</a><a href="https://zh.wikipedia.org/wiki/GitHub" target="_blank" rel="noopener">GitHub</a>上有这一规范的草案，<a href="https://zh.wikipedia.org/wiki/Let&#39;s_Encrypt#cite_note-le-getinvolved-6" target="_blank" rel="noopener">[6]</a><a href="https://zh.wikipedia.org/wiki/Let&#39;s_Encrypt#cite_note-7" target="_blank" rel="noopener">[7]</a>且提案的一个版本已作为一个<a href="https://zh.wikipedia.org/wiki/RFC" target="_blank" rel="noopener">Internet草案</a>发布。<a href="https://zh.wikipedia.org/wiki/Let&#39;s_Encrypt#cite_note-8" target="_blank" rel="noopener">[8]</a></p>
<p>Let’s Encrypt宣称这一过程将十分简单、自动化并且免费。<a href="https://zh.wikipedia.org/wiki/Let&#39;s_Encrypt#cite_note-9" target="_blank" rel="noopener">[9]</a></p>
</blockquote>
<p><strong>Certbot</strong></p>
<blockquote>
<p>Certbot is a free, open source software tool for automatically using <a href="https://letsencrypt.org/" target="_blank" rel="noopener">Let’s Encrypt</a> certificates on manually-administrated websites to enable HTTPS.</p>
<p>Certbot is made by the <a href="https://www.eff.org/" target="_blank" rel="noopener">Electronic Frontier Foundation (EFF)</a>, a 501(c)3 nonprofit based in San Francisco, CA, that defends digital privacy, free speech, and innovation.</p>
</blockquote>
<p>是一个可以帮我们自动获取证书的软件。我们可以在 <a href="https://certbot.eff.org/instructions" target="_blank" rel="noopener">官网</a> 选择自己的后端软件以及操作系统，它会列出我们需要操作的步骤。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/redirect4.jpg" alt=""></p>
<p>然后就会出现下边的步骤，我只截了一部分图。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/redirect5.jpg" alt=""></p>
<p>首先是安装 <code>Certbot</code>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">sudo apt-get install certbot python-certbot-nginx</span><br></pre></td></tr></table></figure>
<p>有两种获得证书的方式，一种是自动获取证书并且配置 <code>nginx</code> ，一种是仅获取证书。因为我的网站是在阿里云上，不在这个服务器上，所以我采用仅获取证书的方式。</p>
<p>运行之前，要把之前的 <code>CNAME</code> 记录删除，添加一个 <code>A</code> 记录，将域名指向当前服务器的 <code>ip</code>。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/redirect6.jpg" alt=""></p>
<p>然后执行下边的命令。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">sudo certbot certonly --nginx</span><br></pre></td></tr></table></figure>
<p>执行过程中会让你填邮箱，选择域名，然后等几秒钟就生成成功了，记住最后输出的证书的地址和密钥的地址。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/redirect7.jpg" alt=""></p>
<p>更改之前的配置文件。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">vim /etc/nginx/conf.d/windliang.cc.conf</span><br></pre></td></tr></table></figure>
<p>把 <code>80</code> 端口和 <code>443</code> 端口合在一起，然后将上边保存的证书和密钥地址填上。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen <span class="number">80</span>;</span><br><span class="line">    listen <span class="number">443</span> ssl;</span><br><span class="line">    server_name windliang.cc;</span><br><span class="line">    ssl_certificate   /etc/letsencrypt/live/windliang.cc/fullchain.pem;</span><br><span class="line">    ssl_certificate_key  /etc/letsencrypt/live/windliang.cc/privkey.pem;</span><br><span class="line">    ssl_session_timeout <span class="number">5</span>m;</span><br><span class="line">    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line">    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;</span><br><span class="line">    ssl_prefer_server_ciphers on;</span><br><span class="line">    # 将80端口的http请求 301 重定向到新域名</span><br><span class="line">    <span class="keyword">if</span> ( $scheme = <span class="string">"http"</span> ) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">301</span> https:<span class="comment">//windliang.wang$request_uri;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    # 将443端口的https请求 rewrite 重定向到新域名</span><br><span class="line">    location / &#123;</span><br><span class="line">        rewrite ^(.*)$ https:<span class="comment">//windliang.wang$1 permanent;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后，就会发现可以得到 <code>301</code> 的状态码了。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/redirect8.jpg" alt=""></p>
<p>最后一步，仔细看之前得到证书的截图，会发现证书的有效期是 <code>3</code> 个月。但没有关系，教程说如果通过上边的步骤走的话，到期前它会自动帮我们更新。</p>
<p>我也不敢确定，只能到时候看它有没有更新了，哈哈。</p>
<h1 id="总"><a href="#总" class="headerlink" title="总"></a>总</h1><p>以上就是域名重定向的过程了，主要是前端通过 <code>js</code> 和后端通过 <code>nginx</code>。</p>
<p>上边流程看起来很流畅，但今天用 <code>nginx</code> 做重定向的过程相当曲折了。因为一开始我只对 <code>80</code> 端口做了重定向，当我在浏览器输入 <code>windliang.cc</code> 的时候，因为之前是通过 <code>https</code> 访问的，所以浏览器会自动在前边加上 <code>https://</code> ，所以导致一直不能成功跳转。</p>
<p>最神奇的是不知道为什么中午吃饭前有一次跳转成功了，然后吃完饭回来心想再放个网站到服务器，毕竟国外服务器的话，域名就不需要备案了，但是突然发现 <code>windliang.cc</code> 不能跳转了。</p>
<p>然后自己就各种尝试，一直以为是 <code>nginx</code> 的原因，各种看日志，重启 <code>nginx</code>，但始终没找到问题，把 <code>nginx</code> 重装了两遍，甚至想把服务器重装了，最最后，终于意识到了这个 <code>https</code> 的问题，才想到了上边的解决方案。</p>
]]></content>
      <tags>
        <tag>网站</tag>
        <tag>云服务器</tag>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>2021年从零开发前端项目指南</title>
    <url>/2021/08/19/2021%E5%B9%B4%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%8F%91%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AE%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<p>之前翻译过一篇 <a href="https://mp.weixin.qq.com/s/rWK_4CwFoBZyXZe_1I2TrQ" target="_blank" rel="noopener">前端工程化发展历史</a> 的文章，<code>Webpack</code>、<code>Babel</code> 、<code>Eslint</code> 现在基本上就是前端项目的标配了。</p>
<p>但工作以后一般很少接触这些配置，都是在前人配置好的基础上去写业务代码。即使有机会从零配置一个项目，一般也不会自己手动建这些配置文件，直接用 <code>create-react-app</code>、<code>Ant Design Pro</code> 等自动帮我们生成各个目录和配置文件就可以了，省时省力。</p>
<p>这篇文章的话就从零手动去配置一个前端项目，会涉及到 <code>Webpack</code>、<code>React</code>、<code>Babel</code>、<code>TypeScript</code>、<code>Ant Design</code>、<code>Sass</code>、<code>Eslint</code>、<code>Prettier</code>，本文的话就本着「不求甚解」的态度，主要过一下各个模块的使用，适合从零一步一步跟着操作。</p>
<p>前端工程化项目是建立在 <code>node.js</code> 环境下的，之后需要安装各个 <code>npm</code> 包，所以首先电脑必须已经配置好了 <code>node</code> 环境。</p>
<p>新建一个目录然后执行 <code>npm init</code> 来初始化一个项目。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm init</span><br></pre></td></tr></table></figure>
<p>然后一路回车就可以，只是生成了 <code>package.json</code> 文件，后续想改的话也能改。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/fe-learn1.jpg" alt="img" style="width:70%;"></p>
<h1 id="Webpack"><a href="#Webpack" class="headerlink" title="Webpack"></a>Webpack</h1><p>前端不断发展，但很多特性浏览器不一定会支持，<code>ES6</code> 模块，<code>CommonJs</code> 模块、<code>Scss/less</code> 、<code>jsx</code> 等等，通过 <code>Webpack</code> 我们可以将所有文件进行打包、压缩混淆，最终转换为浏览器识别的代码。</p>
<p>除了安装 <code>Webpack</code> ，我们需要安装对应的命令行工具 <code>webpack-cli</code>，以及实现了热加载，也就是自动监听我们文件变化然后刷新网页的 <code>webpack-dev-server</code>。</p>
<p>由于这些工具只在开发阶段使用，所以我们安装的时候可以加上 <code>-D(--save-dev)</code> 命令，这样开发环境就不会打包了。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i -D webpack webpack-cli webpack-dev-server</span><br></pre></td></tr></table></figure>
<p>安装之后 <code>package.json</code> 会自动记录我们安装的 <code>node</code> 包，对应版本如下，如果安装的和我不一样的话，后边的一些配置可能略有不同。</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  ...</span><br><span class="line">  "devDependencies": &#123;</span><br><span class="line">    "webpack": "^5.51.1",</span><br><span class="line">    "webpack-cli": "^4.8.0",</span><br><span class="line">    "webpack-dev-server": "^4.0.0"</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>接下来在根目录新建 <code>webpack.config.js</code> 进行项目的配置，主要配置入口文件，打包输目录，以及 <code>devServer</code> 的目录。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="string">'./src/main.js'</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'./dist'</span>),</span><br><span class="line">    filename: <span class="string">'bundle.js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    <span class="keyword">static</span>: path.resolve(__dirname, <span class="string">'./dist'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>新建一下上边相应的文件。</p>
<p><code>main.js</code> 文件主要实现在网页写 <code>hello world</code>。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// /src/main.js</span></span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">'hello world'</span>)</span><br></pre></td></tr></table></figure>
<p>新建 <code>dist</code> 目录，在里边新建 <code>index.html</code> 文件，引入 <code>&lt;script src=&quot;bundle.js&quot;&gt;&lt;/script&gt;</code>。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width,initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>前端工程化<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"bundle.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>最后在 <code>package.json</code> 新建两条命令，默认的 <code>test</code> 命令可以直接删掉了。</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">"scripts": &#123;</span><br><span class="line">    "dev": "webpack-dev-server --mode development --open",</span><br><span class="line">    "build": "webpack --mode production"</span><br><span class="line">&#125;,</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>执行 <code>npm run dev</code> ，此时会自动打开 <code>http://localhost:8080/</code>。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/fe-learn2.jpg" alt="img" style="width:70%;"></p>
<h1 id="React"><a href="#React" class="headerlink" title="React"></a>React</h1><p><code>React</code> 可以让我们专注于构建用户界面，而不需要再手动维护 <code>dom</code> 元素的更新，当然还可以用 <code>VUE</code>。</p>
<p>安装核心库 <code>react</code> ，以及渲染 <code>Web</code> 的 <code>react-dom</code> 。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i react react-dom</span><br></pre></td></tr></table></figure>
<p>修改 <code>src/main.js</code> 体验一下。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// /src/main.js</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> React.createElement(<span class="string">'div'</span>, <span class="literal">null</span>, <span class="string">`Hello <span class="subst">$&#123;<span class="keyword">this</span>.props.toWhat&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">    React.createElement(Hello, &#123; <span class="attr">toWhat</span>: <span class="string">'World by React'</span> &#125;, <span class="literal">null</span>),</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">'app'</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p><code>npm run dev</code> 看下效果：</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/fe-learn3.jpg" alt="img" style="width:70%;"></p>
<p>这里会发现上边都调用了 <code>React.createElement</code> 来创建元素，如果页面复杂的的话，那一层套一层就太繁琐了，<code>React</code> 为我们提供了 <code>JSX</code> 语法来简化写法。</p>
<p>让我们改写一下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// /src/main.js</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Hello &#123;this.props.toWhat&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">  &lt;Hello toWhat=<span class="string">"World by jsx"</span> /&gt;,</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'app'</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p>但此时会发现项目跑不起来了</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/fe-learn4.jpg" alt="img" style="width:70%;"></p>
<p>现在，我们就需要 <code>Babel</code> 了。</p>
<h1 id="Babel"><a href="#Babel" class="headerlink" title="Babel"></a>Babel</h1><p><code>babel</code> 可以为我们把各种语法、新功能转换为浏览器所能识别的 <code>js</code> 。这里我们先安装一下 <code>babel</code> 以及在 <code>webpack</code> 中使用的 <code>babel-loader</code>。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i -D @babel/core babel-loader</span><br></pre></td></tr></table></figure>
<p>然后在 <code>webpack</code> 中引入 <code>babel-loader</code> ，用来对 <code>js</code> 进行转换，更改 <code>webpack.config.js</code> 文件。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="string">'./src/main.js'</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'./dist'</span>),</span><br><span class="line">    filename: <span class="string">'bundle.js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.(js)x?$/</span>,</span><br><span class="line">        exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">        use: &#123;</span><br><span class="line">          loader: <span class="string">'babel-loader'</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    <span class="keyword">static</span>: path.resolve(__dirname, <span class="string">'./dist'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后我们来安装 <code>@babel/preset-react</code>  来转换 <code>jsx</code> 语法。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm i -D @babel/preset-react</span><br></pre></td></tr></table></figure>
<p>在根目录新建 <code>babel</code> 的配置文件 <code>babel.config.json</code>。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">// babel.config.json</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"presets"</span>: [</span><br><span class="line">        <span class="string">"@babel/preset-react"</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>此时再运行 <code>npm run dev</code>  就发现项目成功跑起来了！</p>
<p>然后我们还可以安装一些其他 <code>babel</code> 以便使用最新的 <code>ES</code> 语法，比如箭头函数、<code>async await</code>、问号表达式等等， 需要什么就可以配置什么。当浏览器不支持这些特性时，<code>babel</code> 可以帮我们实现 <code>polyfill</code> 进行降级。</p>
<p><code>@babel/preset-env</code> 包含了许多 <code>ES</code> 的新特性，<code>core-js</code> 实现 <code>ployfill</code>，通过这两个 <code>babel</code> 各种 <code>ES</code> 最新的特性就都可以放心使用了，如果有不满足的我们可以单独配置 <code>babel</code> 的插件。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i -D @babel/preset-env core-js</span><br></pre></td></tr></table></figure>
<p>然后我们再修改下 <code>babel</code> 的配置文件。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">// babel.config.json</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"presets"</span>: [</span><br><span class="line">        [</span><br><span class="line">            <span class="string">"@babel/preset-env"</span>,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"useBuiltIns"</span>: <span class="string">"usage"</span>,</span><br><span class="line">                <span class="attr">"corejs"</span>: <span class="number">3</span></span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">        <span class="string">"@babel/preset-react"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"plugins"</span>: [</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其中 <code>useBuiltIns&quot;: &quot;usage&quot;</code> 代表自动判断每个文件是否引入 <code>ployfill</code>，<code>corejs: 3</code> 是指定版本。</p>
<h1 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h1><p>越来越多的项目引入了 <code>TypeScript</code> ，尤其是规模比较大的项目，通过 <code>ts</code> 可以让一些 <code>bug</code> 提前暴露，平时自己开发的话也可以引入 <code>ts</code>，提前了解学习。</p>
<p>项目引入 <code>ts</code> 的话有两种方式：</p>
<ol>
<li>使用  <code>TypeScript Compiler (TSC)</code> 将 <code>ts</code> 编译为 <code>ES5</code> 以便能够在浏览器中运行。并且使用 <code>TSC</code> 进行类型检查。</li>
<li>使用 <code>Babel</code> 翻译 <code>TS</code>，使用 <code>TSC</code> 进行类型检查。</li>
</ol>
<p>这里的话使用第二种方式，让 <code>Babel</code> 和 <code>TSC</code> 各司其职。</p>
<p>首先安装 <code>TypeScript</code> 以及 <code>React</code>  的 <code>type</code> 。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i -D typescript @types/react @types/react-dom</span><br></pre></td></tr></table></figure>
<p>根目录新建 <code>tsconfig.json</code> 进行 <code>ts</code> 的配置。</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">// tsconfig.json</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"compilerOptions"</span>: &#123;</span><br><span class="line">        <span class="attr">"target"</span>: <span class="string">"es5"</span>,</span><br><span class="line">        <span class="attr">"module"</span>: <span class="string">"commonjs"</span>,</span><br><span class="line">        <span class="attr">"lib"</span>: [</span><br><span class="line">            <span class="string">"dom"</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">"jsx"</span>: <span class="string">"react"</span>,</span><br><span class="line">        <span class="attr">"noEmit"</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">"sourceMap"</span>: <span class="literal">true</span>,</span><br><span class="line">        /* Strict Type-Checking Options */</span><br><span class="line">        "strict": true,</span><br><span class="line">        "noImplicitAny": true,</span><br><span class="line">        "strictNullChecks": true,</span><br><span class="line">    &#125;,</span><br><span class="line">    "include": [</span><br><span class="line">        <span class="string">"src"</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>&quot;noEmit&quot;: true,</code> 表明 <code>ts</code> 只做类型检查，不进行编译输出。</p>
<p>然后我们将 <code>src/main.js</code> 修改为 <code>src/main.tsx</code>，并且加上类型。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// /src/main.js</span><br><span class="line">import * as React from &apos;react&apos;;</span><br><span class="line">import * as ReactDOM from &apos;react-dom&apos;;</span><br><span class="line"></span><br><span class="line">type Props = &#123;</span><br><span class="line">  toWhat: string;</span><br><span class="line">&#125;;</span><br><span class="line">type State = &#123;</span><br><span class="line"> </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class Hello extends React.Component&lt;Props, State&gt;  &#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    return &lt;div&gt;Hello &#123;this.props.toWhat&#125;&lt;/div&gt;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">  &lt;Hello toWhat=&quot;World by jsx&quot; /&gt;,</span><br><span class="line">  document.getElementById(&apos;app&apos;)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p>接下来进行 <code>babel</code> 的配置，安装 <code>@babel/preset-typescript</code>，将我们代码从 <code>ts</code> 转为 <code>js</code>。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i -D @babel/preset-typescript</span><br></pre></td></tr></table></figure>
<p><code>babel</code> 配置文件中加入。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">// babel.config.json</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"presets"</span>: [</span><br><span class="line">        <span class="string">"@babel/preset-typescript"</span>,</span><br><span class="line">        [</span><br><span class="line">            <span class="string">"@babel/preset-env"</span>,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"useBuiltIns"</span>: <span class="string">"usage"</span>,</span><br><span class="line">                <span class="attr">"corejs"</span>: <span class="number">3</span></span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">        <span class="string">"@babel/preset-react"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"plugins"</span>: [</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最后在 <code>webpack.config.js</code> 中 <code>babel</code> 匹配的路径中加入 <code>tsx</code>。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="string">'./src/main.tsx'</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'./dist'</span>),</span><br><span class="line">    filename: <span class="string">'bundle.js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.(js|ts)x?$/</span>,</span><br><span class="line">        exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">        use: &#123;</span><br><span class="line">          loader: <span class="string">'babel-loader'</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  resolve: &#123;</span><br><span class="line">    <span class="comment">// 引入模块的时候可以省略这些后缀</span></span><br><span class="line">    extensions: [<span class="string">'.tsx'</span>, <span class="string">'.ts'</span>, <span class="string">'.jsx'</span>, <span class="string">'.js'</span>],</span><br><span class="line">  &#125;,</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    <span class="keyword">static</span>: path.resolve(__dirname, <span class="string">'./dist'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们可以全局安装一下 <code>typescript</code> ，便于使用 <code>tsc</code> 命令进行类型检查。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g typescript</span><br></pre></td></tr></table></figure>
<p>可以运行一下 <code>tsc -w</code> 实时进行类型检查。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/fe-learn6.jpg" alt="img" style="width:70%;"></p>
<h1 id="Ant-Design"><a href="#Ant-Design" class="headerlink" title="Ant Design"></a>Ant Design</h1><p>引入组件库，方便更快的开发。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install antd</span><br></pre></td></tr></table></figure>
<p>顺便可以按照习惯把 <code>main.tsx</code> 中的 <code>hello</code> 组件抽离出来并且命名为 <code>app.tsx</code>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// /src/App.tsx</span><br><span class="line">import * as React from &apos;react&apos;;</span><br><span class="line">import &#123; DatePicker &#125; from &apos;antd&apos;;</span><br><span class="line"></span><br><span class="line">type Props = &#123;</span><br><span class="line">    toWhat: string;</span><br><span class="line">&#125;;</span><br><span class="line">type State = &#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class App extends React.Component&lt;Props, State&gt;  &#123;</span><br><span class="line">    render(): JSX.Element &#123;</span><br><span class="line">        return &lt;div&gt;</span><br><span class="line">            Hello &#123;this.props.toWhat&#125;</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;DatePicker&gt;&lt;/DatePicker&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default App;</span><br></pre></td></tr></table></figure>
<p>然后我们在 <code>main.tsx</code> 引入 <code>antd</code> 的 <code>css</code> 文件。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// /src/main.tsx</span><br><span class="line">import * as React from &apos;react&apos;;</span><br><span class="line">import * as ReactDOM from &apos;react-dom&apos;;</span><br><span class="line">import &apos;antd/dist/antd.css&apos;;</span><br><span class="line">import App from &apos;./App&apos;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">  &lt;App toWhat=&quot;World by jsx&quot; /&gt;,</span><br><span class="line">  document.getElementById(&apos;app&apos;)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p>此时就需要在 <code>webpack.config.js</code> 配置文件中补上 <code>css</code> 的 <code>loader</code> ，先安装一下。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i -D style-loader css-loader</span><br></pre></td></tr></table></figure>
<p><code>css-loader</code> 可以让我们在 <code>js</code> 中引入 <code>css</code>，<code>style-loader</code> 帮我们将 <code>css</code> 以 <code>style</code> 标签的形式插入到页面。</p>
<p>安装好后进行配置 <code>loader</code>。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="string">'./src/main.tsx'</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'./dist'</span>),</span><br><span class="line">    filename: <span class="string">'bundle.js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.(js|ts)x?$/</span>,</span><br><span class="line">        exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">        use: &#123;</span><br><span class="line">          loader: <span class="string">'babel-loader'</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.css$/i</span>,</span><br><span class="line">        use: [<span class="string">"style-loader"</span>, <span class="string">"css-loader"</span>],</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  resolve: &#123;</span><br><span class="line">    <span class="comment">// 引入模块的时候可以省略这些后缀</span></span><br><span class="line">    extensions: [<span class="string">'.tsx'</span>, <span class="string">'.ts'</span>, <span class="string">'.jsx'</span>, <span class="string">'.js'</span>],</span><br><span class="line">  &#125;,</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    <span class="keyword">static</span>: path.resolve(__dirname, <span class="string">'./dist'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后就成功引入日期选择器了。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/fe-learn8.jpg" alt="img" style="width:70%;"></p>
<h1 id="Sass"><a href="#Sass" class="headerlink" title="Sass"></a>Sass</h1><p><code>Sass</code> 是 <code>css</code> 的预编译器，可以让我们写样式更顺手，具体特性可以参考 <a href="https://sass-lang.com/guide" target="_blank" rel="noopener">官网</a>，我用的最多的就是可以嵌套形式写 <code>css</code>，很方便。</p>
<p>我们安装一下 <code>Sass</code> 以及它的 <code>loader</code>。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install sass-loader sass  --save-dev</span><br></pre></td></tr></table></figure>
<p>然后在 <code>webpack.config.js</code> 配置一下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="string">'./src/main.tsx'</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'./dist'</span>),</span><br><span class="line">    filename: <span class="string">'bundle.js'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.(js|ts)x?$/</span>,</span><br><span class="line">        exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">        use: &#123;</span><br><span class="line">          loader: <span class="string">'babel-loader'</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.css$/i</span>,</span><br><span class="line">        use: [<span class="string">'style-loader'</span>, <span class="string">'css-loader'</span>],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.s[ac]ss$/i</span>,</span><br><span class="line">        use: [</span><br><span class="line">          <span class="comment">// 将 JS 字符串生成为 style 节点</span></span><br><span class="line">          <span class="string">'style-loader'</span>,</span><br><span class="line">          <span class="comment">// 将 CSS 转化成 CommonJS 模块</span></span><br><span class="line">          <span class="string">'css-loader'</span>,</span><br><span class="line">          <span class="comment">// 将 Sass 编译成 CSS</span></span><br><span class="line">          <span class="string">'sass-loader'</span>,</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  resolve: &#123;</span><br><span class="line">    <span class="comment">// 引入模块的时候可以省略这些后缀</span></span><br><span class="line">    extensions: [<span class="string">'.tsx'</span>, <span class="string">'.ts'</span>, <span class="string">'.jsx'</span>, <span class="string">'.js'</span>],</span><br><span class="line">  &#125;,</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    <span class="keyword">static</span>: path.resolve(__dirname, <span class="string">'./dist'</span>),</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>在 <code>App.jsx</code> 加几个类名，引入 <code>App.scss</code>。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// /src/App.tsx</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; DatePicker &#125; <span class="keyword">from</span> <span class="string">'antd'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'./App.scss'</span>;</span><br><span class="line"></span><br><span class="line">type Props = &#123;</span><br><span class="line">  toWhat: string;</span><br><span class="line">&#125;;</span><br><span class="line">type State = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span>&lt;<span class="title">Props</span>, <span class="title">State</span>&gt; </span>&#123;</span><br><span class="line">  render(): JSX.Element &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div className=<span class="string">"app"</span>&gt;</span><br><span class="line">        &lt;div className=<span class="string">"text"</span>&gt;Hello&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        &lt;div&gt;&#123;this.props.toWhat&#125;&lt;/</span>div&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">          &lt;DatePicker&gt;<span class="xml"><span class="tag">&lt;/<span class="name">DatePicker</span>&gt;</span></span></span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure>
<p>新建 <code>App.scss</code>，添加颜色实验一下。</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.app</span> &#123;</span><br><span class="line">  <span class="selector-class">.text</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#f00</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>npm run dev</code> 看下效果</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/fe-learn9.jpg" alt="img" style="width:70%;"></p>
<h1 id="Eslint"><a href="#Eslint" class="headerlink" title="Eslint"></a>Eslint</h1><p>可以配置 <code>eslint</code> 来进行语法上静态的检查，也可以对 <code>ts</code> 进行检查。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i eslint -D</span><br></pre></td></tr></table></figure>
<p>可以全局安装一下 <code>npm i -g npx</code> 命令，能够更方便的运行 <code>node_modules/.bin</code> 目录下的命令.</p>
<p>不然的话我们要执行 <code>eslint</code> 命令的话需要执行 <code>./node_modules/.bin/eslint --version</code> 才能取到。或者像上边为了执行 <code>tsc</code> 命令，全局安装了 <code>typescript</code>。或者在 <code>package.json</code> 里边添加一个自定义命令。不过还是 <code>npx</code> 是最方便的。</p>
<p>让我们初始化 <code>eslint</code>.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npx eslint --init</span><br></pre></td></tr></table></figure>
<p>然后按照项目需要选择对应的选项，最后自动安装相应的依赖。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/fe-learn7.jpg" alt="img" style="width:70%;"></p>
<p>然后 <code>eslint</code> 就自动为我们生成了 <code>.eslintrc.js</code> 配置文件，顺便补一个 <code>&quot;node&quot;: true</code>，不然的话 <code>module.exports</code> 直接报错。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="string">"env"</span>: &#123;</span><br><span class="line">        <span class="string">"browser"</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">"es2021"</span>: <span class="literal">true</span>,</span><br><span class="line">      	<span class="string">"node"</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"extends"</span>: [</span><br><span class="line">        <span class="string">"eslint:recommended"</span>,</span><br><span class="line">        <span class="string">"plugin:react/recommended"</span>,</span><br><span class="line">        <span class="string">"plugin:@typescript-eslint/recommended"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"parser"</span>: <span class="string">"@typescript-eslint/parser"</span>,</span><br><span class="line">    <span class="string">"parserOptions"</span>: &#123;</span><br><span class="line">        <span class="string">"ecmaFeatures"</span>: &#123;</span><br><span class="line">            <span class="string">"jsx"</span>: <span class="literal">true</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"ecmaVersion"</span>: <span class="number">12</span>,</span><br><span class="line">        <span class="string">"sourceType"</span>: <span class="string">"module"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"plugins"</span>: [</span><br><span class="line">        <span class="string">"react"</span>,</span><br><span class="line">        <span class="string">"@typescript-eslint"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"rules"</span>: &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>然后我们在 <code>package.json</code> 中可以添加一个 <code>lint</code> 命令来修复代码。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"fe-learn"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">"前端工程化项目学习"</span>,</span><br><span class="line">  <span class="attr">"main"</span>: <span class="string">"index.js"</span>,</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"dev"</span>: <span class="string">"webpack-dev-server --mode development --open"</span>,</span><br><span class="line">    <span class="attr">"build"</span>: <span class="string">"webpack --mode production"</span>,</span><br><span class="line">    <span class="attr">"lint"</span>: <span class="string">"eslint src --fix"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"author"</span>: <span class="string">"windliang"</span>,</span><br><span class="line">  <span class="attr">"license"</span>: <span class="string">"ISC"</span>,</span><br><span class="line">  <span class="attr">"devDependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"@babel/core"</span>: <span class="string">"^7.15.0"</span>,</span><br><span class="line">    <span class="attr">"@babel/preset-env"</span>: <span class="string">"^7.15.0"</span>,</span><br><span class="line">    <span class="attr">"@babel/preset-react"</span>: <span class="string">"^7.14.5"</span>,</span><br><span class="line">    <span class="attr">"@babel/preset-typescript"</span>: <span class="string">"^7.15.0"</span>,</span><br><span class="line">    <span class="attr">"@types/react"</span>: <span class="string">"^17.0.19"</span>,</span><br><span class="line">    <span class="attr">"@types/react-dom"</span>: <span class="string">"^17.0.9"</span>,</span><br><span class="line">    <span class="attr">"@typescript-eslint/eslint-plugin"</span>: <span class="string">"^4.29.2"</span>,</span><br><span class="line">    <span class="attr">"@typescript-eslint/parser"</span>: <span class="string">"^4.29.2"</span>,</span><br><span class="line">    <span class="attr">"babel-loader"</span>: <span class="string">"^8.2.2"</span>,</span><br><span class="line">    <span class="attr">"core-js"</span>: <span class="string">"^3.16.2"</span>,</span><br><span class="line">    <span class="attr">"eslint"</span>: <span class="string">"^7.32.0"</span>,</span><br><span class="line">    <span class="attr">"eslint-plugin-react"</span>: <span class="string">"^7.24.0"</span>,</span><br><span class="line">    <span class="attr">"typescript"</span>: <span class="string">"^4.3.5"</span>,</span><br><span class="line">    <span class="attr">"webpack"</span>: <span class="string">"^5.51.1"</span>,</span><br><span class="line">    <span class="attr">"webpack-cli"</span>: <span class="string">"^4.8.0"</span>,</span><br><span class="line">    <span class="attr">"webpack-dev-server"</span>: <span class="string">"^4.0.0"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"dependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"react"</span>: <span class="string">"^17.0.2"</span>,</span><br><span class="line">    <span class="attr">"react-dom"</span>: <span class="string">"^17.0.2"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后执行 <code>npm run lint</code> 即可进行 <code>eslint</code> 的相关修复。</p>
<p>配合 <code>Vscode</code> 我们也可以做到边写代码边自动检测 <code>eslint</code>，以及保存的时候自动修复 <code>eslint</code> 相关错误。</p>
<p>可以安装 <code>Eslint</code> 插件，以及在 <code>vscode</code> 的设置中加入以下配置，点击下图的右上角可以直接进行配置的编辑。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/fe-learn10.jpg" alt="img" style="width:70%;"></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"eslint.validate"</span>: [<span class="string">"javascript"</span>, <span class="string">"javascriptreact"</span>, <span class="string">"vue"</span>, <span class="string">"typescript"</span>, <span class="string">"typescriptreact"</span>],</span><br><span class="line">  <span class="attr">"editor.codeActionsOnSave"</span>: &#123;</span><br><span class="line">    <span class="attr">"source.fixAll.eslint"</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>为了使用更完善的 <code>eslint</code> 配置，我们也可以直接引用腾讯 <code>Alloy</code> 团队的推荐配置，参考 <a href="https://github.com/AlloyTeam/eslint-config-alloy" target="_blank" rel="noopener">这里</a>。</p>
<h1 id="Prettier"><a href="#Prettier" class="headerlink" title="Prettier"></a>Prettier</h1><p><code>prettier</code> 主要做代码风格上的检查，字符串双引号还是单引号？几个空格？类似这样的。</p>
<p>当然 <code>eslint</code> 也可以配置这些，但为了分离它们各自的职责，最好还是用 <code>prettier</code> 来格式化代码风格，先安装一下。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i -D prettier</span><br></pre></td></tr></table></figure>
<p>然后新建一个配置文件 <code>.prettierrc.js</code>，这里直接引用 <a href="https://github.com/AlloyTeam/eslint-config-alloy" target="_blank" rel="noopener">腾讯 Alloy</a> 团队推荐的配置。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// .prettierrc.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// max 120 characters per line</span></span><br><span class="line">  printWidth: <span class="number">120</span>,</span><br><span class="line">  <span class="comment">// use 2 spaces for indentation</span></span><br><span class="line">  tabWidth: <span class="number">2</span>,</span><br><span class="line">  <span class="comment">// use spaces instead of indentations</span></span><br><span class="line">  useTabs: <span class="literal">false</span>,</span><br><span class="line">  <span class="comment">// semicolon at the end of the line</span></span><br><span class="line">  semi: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">// use single quotes</span></span><br><span class="line">  singleQuote: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">// object's key is quoted only when necessary</span></span><br><span class="line">  quoteProps: <span class="string">'as-needed'</span>,</span><br><span class="line">  <span class="comment">// use double quotes instead of single quotes in jsx</span></span><br><span class="line">  jsxSingleQuote: <span class="literal">false</span>,</span><br><span class="line">  <span class="comment">// no comma at the end</span></span><br><span class="line">  trailingComma: <span class="string">'all'</span>,</span><br><span class="line">  <span class="comment">// spaces are required at the beginning and end of the braces</span></span><br><span class="line">  bracketSpacing: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">// end tag of jsx need to wrap</span></span><br><span class="line">  jsxBracketSameLine: <span class="literal">false</span>,</span><br><span class="line">  <span class="comment">// brackets are required for arrow function parameter, even when there is only one parameter</span></span><br><span class="line">  arrowParens: <span class="string">'always'</span>,</span><br><span class="line">  <span class="comment">// format the entire contents of the file</span></span><br><span class="line">  rangeStart: <span class="number">0</span>,</span><br><span class="line">  rangeEnd: <span class="literal">Infinity</span>,</span><br><span class="line">  <span class="comment">// no need to write the beginning @prettier of the file</span></span><br><span class="line">  requirePragma: <span class="literal">false</span>,</span><br><span class="line">  <span class="comment">// No need to automatically insert @prettier at the beginning of the file</span></span><br><span class="line">  insertPragma: <span class="literal">false</span>,</span><br><span class="line">  <span class="comment">// use default break criteria</span></span><br><span class="line">  proseWrap: <span class="string">'preserve'</span>,</span><br><span class="line">  <span class="comment">// decide whether to break the html according to the display style</span></span><br><span class="line">  htmlWhitespaceSensitivity: <span class="string">'css'</span>,</span><br><span class="line">  <span class="comment">// vue files script and style tags indentation</span></span><br><span class="line">  vueIndentScriptAndStyle: <span class="literal">false</span>,</span><br><span class="line">  <span class="comment">// lf for newline</span></span><br><span class="line">  endOfLine: <span class="string">'lf'</span>,</span><br><span class="line">  <span class="comment">// formats quoted code embedded</span></span><br><span class="line">  embeddedLanguageFormatting: <span class="string">'auto'</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>同样的，为了保存的时候自动帮我们格式化，我们可以安装 <code>Vscode</code> 的 <code>Prettier</code> 插件，以及再修改 <code>Vscode</code> 的配置。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"files.eol"</span>: <span class="string">"\n"</span>,</span><br><span class="line">  <span class="attr">"editor.tabSize"</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">"editor.formatOnSave"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"editor.defaultFormatter"</span>: <span class="string">"esbenp.prettier-vscode"</span>,</span><br><span class="line">  <span class="attr">"eslint.validate"</span>: [<span class="string">"javascript"</span>, <span class="string">"javascriptreact"</span>, <span class="string">"vue"</span>, <span class="string">"typescript"</span>, <span class="string">"typescriptreact"</span>],</span><br><span class="line">  <span class="attr">"editor.codeActionsOnSave"</span>: &#123;</span><br><span class="line">    <span class="attr">"source.fixAll.eslint"</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>通过上边一系列的操作后，就可以开始愉快的开始写项目了，经验有限，上边有问题的地方还请大家指出。</p>
<p>上边的代码都比较零碎，可以在 <a href="https://github.com/wind-liang/fe-learn" target="_blank" rel="noopener">github</a> 上看整个代码。</p>
<p>上边每一块都是一个很大的地方，未来的话会继续边学习边总结，欢迎一起交流。</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>eslint</tag>
        <tag>React</tag>
        <tag>webpack</tag>
        <tag>typescript</tag>
        <tag>babel</tag>
      </tags>
  </entry>
  <entry>
    <title>Webpack打包commonjs和esmodule混用模块的产物对比</title>
    <url>/2022/05/06/Webpack%E6%89%93%E5%8C%85commonjs%E5%92%8Cesmodule%E6%B7%B7%E7%94%A8%E6%A8%A1%E5%9D%97%E7%9A%84%E4%BA%A7%E7%89%A9%E5%AF%B9%E6%AF%94/</url>
    <content><![CDATA[<p>接 <a href="https://zhuanlan.zhihu.com/p/508808789" target="_blank" rel="noopener">Webpack 打包 commonjs 和 esmodule 模块的产物对比</a> 继续，这篇文章来测试下 <code>commonjs</code> 模块和 <code>esmodule</code> 混用的情况，也就是 <code>import</code> 导入 <code>commonjs</code> 的模块，<code>require</code> 导入 <code>esomodule</code> 的模块，看一下它们在 <code>Webpack</code> 下的产物。</p>
<h1 id="import-导入-commonjs-模块"><a href="#import-导入-commonjs-模块" class="headerlink" title="import 导入 commonjs 模块"></a>import 导入 commonjs 模块</h1><p><code>commonjs</code> 模块会为我们预设一个 <code>module = {exports: {}}</code> 的对象，导出模块的话我们可以直接给 <code>module.exports.xxx = xxxx</code> 或者 <code>exports.xxx = xxx</code> 加属性，也可以给 <code>module.exports = xxx</code> 赋值为一个新对象或者函数。</p>
<p>下边看下这两种情况的异同：</p>
<h2 id="exports-添加属性"><a href="#exports-添加属性" class="headerlink" title="exports 添加属性"></a>exports 添加属性</h2><p>两个文件的代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// src/commonjs/add.js</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"add开始引入"</span>);</span><br><span class="line"><span class="keyword">const</span> add = <span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports.add = add;</span><br><span class="line"></span><br><span class="line">exports.sub = <span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b;</span><br><span class="line"></span><br><span class="line"><span class="comment">// src/commonjs/index.js</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"commonjs开始执行"</span>);</span><br><span class="line"><span class="keyword">import</span> &#123; add &#125; <span class="keyword">from</span> <span class="string">"./add"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"1+1="</span>, add(<span class="number">1</span>, <span class="number">1</span>));</span><br></pre></td></tr></table></figure>
<p>如果还记得  <a href="https://zhuanlan.zhihu.com/p/508808789" target="_blank" rel="noopener">Webpack 打包 commonjs 和 esmodule 模块的产物对比</a>  这里总结的，我们的 <code>import</code> 会导入整个对象，然后执行的时候再通过 <code>xxx.add</code> 的形式调用。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> _add__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(</span><br><span class="line">  <span class="string">"./src/commonjs/add.js"</span></span><br><span class="line">);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"commonjs开始执行"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"1+1="</span>, (<span class="number">0</span>, _add__WEBPACK_IMPORTED_MODULE_0__.add)(<span class="number">1</span>, <span class="number">1</span>));</span><br></pre></td></tr></table></figure>
<p>而 <code>_add__WEBPACK_IMPORTED_MODULE_0__</code> 就是我们导出的整个 <code>module.exports</code> 对象。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">"./src/commonjs/add.js"</span>: <span class="function">(<span class="params"><span class="built_in">module</span>, exports</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"add开始引入"</span>);</span><br><span class="line">  <span class="keyword">const</span> add = <span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">module</span>.exports.add = add;</span><br><span class="line"></span><br><span class="line">  exports.sub = <span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p>因此这种情况两种模式是完全契合的，不会有问题。</p>
<p>全部代码如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> __webpack_modules__ = &#123;</span><br><span class="line">        <span class="string">"./src/commonjs/add.js"</span>: <span class="function">(<span class="params"><span class="built_in">module</span>, exports</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"add开始引入"</span>);</span><br><span class="line">            <span class="keyword">const</span> add = <span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> a + b;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">module</span>.exports.add = add;</span><br><span class="line"></span><br><span class="line">            exports.sub = <span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> __webpack_module_cache__ = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__webpack_require__</span>(<span class="params">moduleId</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> cachedModule = __webpack_module_cache__[moduleId];</span><br><span class="line">        <span class="keyword">if</span> (cachedModule !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> cachedModule.exports;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> <span class="built_in">module</span> = (__webpack_module_cache__[moduleId] = &#123;</span><br><span class="line">            exports: &#123;&#125;,</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        __webpack_modules__[moduleId](</span><br><span class="line">            <span class="built_in">module</span>,</span><br><span class="line">            <span class="built_in">module</span>.exports,</span><br><span class="line">            __webpack_require__</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">module</span>.exports;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    (<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        __webpack_require__.r = <span class="function">(<span class="params">exports</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">Symbol</span> !== <span class="string">"undefined"</span> &amp;&amp; <span class="built_in">Symbol</span>.toStringTag) &#123;</span><br><span class="line">                <span class="built_in">Object</span>.defineProperty(exports, <span class="built_in">Symbol</span>.toStringTag, &#123;</span><br><span class="line">                    value: <span class="string">"Module"</span>,</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">Object</span>.defineProperty(exports, <span class="string">"__esModule"</span>, &#123;</span><br><span class="line">                value: <span class="literal">true</span>,</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;)();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> __webpack_exports__ = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    (<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line"><span class="meta">        "use strict"</span>;</span><br><span class="line"></span><br><span class="line">        __webpack_require__.r(__webpack_exports__);</span><br><span class="line">        <span class="keyword">var</span> _add__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(</span><br><span class="line">            <span class="string">"./src/commonjs/add.js"</span></span><br><span class="line">        );</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"commonjs开始执行"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"1+1="</span>, (<span class="number">0</span>, _add__WEBPACK_IMPORTED_MODULE_0__.add)(<span class="number">1</span>, <span class="number">1</span>));</span><br><span class="line">    &#125;)();</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>
<h2 id="exports-赋值为新对象"><a href="#exports-赋值为新对象" class="headerlink" title="exports 赋值为新对象"></a>exports 赋值为新对象</h2><p>这次我们将 <code>module.exports</code> 整个赋值为一个新对象，这种情况我们一般是直接赋值为一个新的函数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// src/commonjs/add.js</span></span><br><span class="line"><span class="keyword">const</span> add = <span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = add;</span><br></pre></td></tr></table></figure>
<p><code>index.js</code> 我们可以直接导入函数，不需要这样子 <code>import { xxx } from &#39;yyy&#39;</code>  再进行对象解构。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// src/commonjs/index.js</span></span><br><span class="line"><span class="keyword">import</span> add <span class="keyword">from</span> <span class="string">"./add"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"1+1="</span>, add(<span class="number">1</span>, <span class="number">1</span>));</span><br></pre></td></tr></table></figure>
<p>我们知道，对于直接 <code>import</code> 导入的话， <code>esmodule</code> 相当于导入 <code>default</code> 属性，事实上 <code>commonjs</code> 并没有导出 <code>default</code> ，但 <code>webpack</code> 帮我们进行了兼容。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> _add__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__( <span class="string">"./src/commonjs/add.js"</span>);</span><br><span class="line"><span class="keyword">var</span> _add__WEBPACK_IMPORTED_MODULE_0___default = __webpack_require__.n(_add__WEBPACK_IMPORTED_MODULE_0__);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"1+1="</span>, _add__WEBPACK_IMPORTED_MODULE_0___default()(<span class="number">1</span>, <span class="number">1</span>));</span><br></pre></td></tr></table></figure>
<p>看一下 <code>__webpack_require__.n</code> 方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">__webpack_require__.n = <span class="function">(<span class="params"><span class="built_in">module</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> getter = <span class="built_in">module</span> &amp;&amp; <span class="built_in">module</span>.__esModule ? <span class="comment">// 判断是否为 esmodule 模块</span></span><br><span class="line">      () =&gt; (<span class="built_in">module</span>[<span class="string">'default'</span>]) :</span><br><span class="line">  () =&gt; (<span class="built_in">module</span>); <span class="comment">// 直接返回整个模块</span></span><br><span class="line">  __webpack_require__.d(getter, &#123; <span class="attr">a</span>: getter &#125;); <span class="comment">// 这句没懂</span></span><br><span class="line">  <span class="keyword">return</span> getter;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>如果不是 <code>esmodule</code> 模块的话，我们会将整个模块作为 <code>default</code> 属性返回，但为什么在模块内又加了个 <code>a</code> 属性，这里没太懂，谁知道的话可以和我交流一下哈。</p>
<p>再看下整个的代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> __webpack_modules__ = &#123;</span><br><span class="line">        <span class="string">"./src/commonjs/add.js"</span>: <span class="function">(<span class="params"><span class="built_in">module</span></span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> add = <span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> a + b;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">module</span>.exports = add;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> __webpack_module_cache__ = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__webpack_require__</span>(<span class="params">moduleId</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> cachedModule = __webpack_module_cache__[moduleId];</span><br><span class="line">        <span class="keyword">if</span> (cachedModule !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> cachedModule.exports;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> <span class="built_in">module</span> = (__webpack_module_cache__[moduleId] = &#123;</span><br><span class="line">            exports: &#123;&#125;,</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        __webpack_modules__[moduleId](</span><br><span class="line">            <span class="built_in">module</span>,</span><br><span class="line">            <span class="built_in">module</span>.exports,</span><br><span class="line">            __webpack_require__</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">module</span>.exports;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    (<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        __webpack_require__.n = <span class="function">(<span class="params"><span class="built_in">module</span></span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">var</span> getter =</span><br><span class="line">                <span class="built_in">module</span> &amp;&amp; <span class="built_in">module</span>.__esModule</span><br><span class="line">                    ? <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">module</span>[<span class="string">"default"</span>]</span><br><span class="line">                    : <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">module</span>;</span><br><span class="line">            __webpack_require__.d(getter, &#123; <span class="attr">a</span>: getter &#125;);</span><br><span class="line">            <span class="keyword">return</span> getter;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;)();</span><br><span class="line"></span><br><span class="line">    (<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        __webpack_require__.d = <span class="function">(<span class="params">exports, definition</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> definition) &#123;</span><br><span class="line">                <span class="keyword">if</span> (</span><br><span class="line">                    __webpack_require__.o(definition, key) &amp;&amp;</span><br><span class="line">                    !__webpack_require__.o(exports, key)</span><br><span class="line">                ) &#123;</span><br><span class="line">                    <span class="built_in">Object</span>.defineProperty(exports, key, &#123;</span><br><span class="line">                        enumerable: <span class="literal">true</span>,</span><br><span class="line">                        get: definition[key],</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;)();</span><br><span class="line"></span><br><span class="line">    (<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        __webpack_require__.o = <span class="function">(<span class="params">obj, prop</span>) =&gt;</span></span><br><span class="line">            <span class="built_in">Object</span>.prototype.hasOwnProperty.call(obj, prop);</span><br><span class="line">    &#125;)();</span><br><span class="line"></span><br><span class="line">    (<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        __webpack_require__.r = <span class="function">(<span class="params">exports</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">Symbol</span> !== <span class="string">"undefined"</span> &amp;&amp; <span class="built_in">Symbol</span>.toStringTag) &#123;</span><br><span class="line">                <span class="built_in">Object</span>.defineProperty(exports, <span class="built_in">Symbol</span>.toStringTag, &#123;</span><br><span class="line">                    value: <span class="string">"Module"</span>,</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">Object</span>.defineProperty(exports, <span class="string">"__esModule"</span>, &#123; <span class="attr">value</span>: <span class="literal">true</span> &#125;);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;)();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> __webpack_exports__ = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    (<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line"><span class="meta">        "use strict"</span>;</span><br><span class="line"></span><br><span class="line">        __webpack_require__.r(__webpack_exports__);</span><br><span class="line">        <span class="keyword">var</span> _add__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(</span><br><span class="line">            <span class="string">"./src/commonjs/add.js"</span></span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">var</span> _add__WEBPACK_IMPORTED_MODULE_0___default = __webpack_require__.n(</span><br><span class="line">            _add__WEBPACK_IMPORTED_MODULE_0__</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"1+1="</span>, _add__WEBPACK_IMPORTED_MODULE_0___default()(<span class="number">1</span>, <span class="number">1</span>));</span><br><span class="line">    &#125;)();</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>
<h1 id="require-导入-esmodule-模块"><a href="#require-导入-esmodule-模块" class="headerlink" title="require 导入 esmodule 模块"></a>require 导入 esmodule 模块</h1><p><code>esmodule</code> 模块除了正常的 <code>export</code> ，我们把 <code>export default</code> 也加一下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// src/esmodule/add.js</span></span><br><span class="line"><span class="keyword">const</span> add = <span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> sub = <span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> add;</span><br></pre></td></tr></table></figure>
<p>然后 <code>index.js</code> 通过 <code>require</code> 来导入：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// src/esmodule/index.js</span></span><br><span class="line"><span class="keyword">const</span> m = <span class="built_in">require</span>(<span class="string">"./add"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(m)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"1+1="</span>, m.default(<span class="number">1</span>, <span class="number">1</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"1-1="</span>, m.sub(<span class="number">1</span>, <span class="number">1</span>));</span><br></pre></td></tr></table></figure>
<p>因为 <code>require</code> 是直接导入整个对象，没有专门导入 <code>default</code> 的形式，所以调用 <code>default</code> 方法的时候，我们需要通过 <code>m.default</code> 来调用。</p>
<p>运行起来是没有问题的：</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220508085606651.png" alt="image-20220508085606651"></p>
<p>让我们回忆下 <a href="https://zhuanlan.zhihu.com/p/508808789" target="_blank" rel="noopener">Webpack 打包 commonjs 和 esmodule 模块的产物对比</a>  这里介绍的 <code>esmodule</code> 模块的导出产物：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> __webpack_modules__ = &#123;</span><br><span class="line">  <span class="string">"./src/esmodule/add.js"</span>: (</span><br><span class="line">    __unused_webpack_module,</span><br><span class="line">    __webpack_exports__,</span><br><span class="line">    __webpack_require__</span><br><span class="line">  ) =&gt; &#123;</span><br><span class="line"><span class="meta">    "use strict"</span>;</span><br><span class="line">    __webpack_require__.r(__webpack_exports__);</span><br><span class="line">    __webpack_require__.d(__webpack_exports__, &#123;</span><br><span class="line">      sub: <span class="function"><span class="params">()</span> =&gt;</span> sub,</span><br><span class="line">      <span class="keyword">default</span>: <span class="function"><span class="params">()</span> =&gt;</span> __WEBPACK_DEFAULT_EXPORT__,</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">const</span> add = <span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">const</span> sub = <span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> __WEBPACK_DEFAULT_EXPORT__ = add;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>相当于导出了一个 <code>module.exports</code> 大的对象，包含 <code>sub</code> 和 <code>default</code> 属性。</p>
<p>然后是 <code>index.js</code> </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> m = __webpack_require__(<span class="string">"./src/esmodule/add.js"</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(m);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"1+1="</span>, m.default(<span class="number">1</span>, <span class="number">1</span>));</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"1-1="</span>, m.sub(<span class="number">1</span>, <span class="number">1</span>));</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>
<p>需要注意的是虽然导出的是整个对象，但对于 <code>index.js</code> 我们不可以通过对象解构来拿到 <code>default</code> 方法。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// src/esmodule/index.js</span></span><br><span class="line"><span class="keyword">const</span> &#123; <span class="keyword">default</span>&#125; = <span class="built_in">require</span>(<span class="string">"./add"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"1+1="</span>, <span class="keyword">default</span>(<span class="number">1</span>, <span class="number">1</span>));</span><br></pre></td></tr></table></figure>
<p><code>default</code> 会在这里被认为是一个关键字，直接抛错：</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220508090141724.png" alt="image-20220508090141724"></p>
<p>来看下整体代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> __webpack_modules__ = &#123;</span><br><span class="line">        <span class="string">"./src/esmodule/add.js"</span>: (</span><br><span class="line">            __unused_webpack_module,</span><br><span class="line">            __webpack_exports__,</span><br><span class="line">            __webpack_require__</span><br><span class="line">        ) =&gt; &#123;</span><br><span class="line"><span class="meta">            "use strict"</span>;</span><br><span class="line">            __webpack_require__.r(__webpack_exports__);</span><br><span class="line">            __webpack_require__.d(__webpack_exports__, &#123;</span><br><span class="line">                sub: <span class="function"><span class="params">()</span> =&gt;</span> sub,</span><br><span class="line">                <span class="keyword">default</span>: <span class="function"><span class="params">()</span> =&gt;</span> __WEBPACK_DEFAULT_EXPORT__,</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">const</span> add = <span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> a + b;</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="keyword">const</span> sub = <span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">const</span> __WEBPACK_DEFAULT_EXPORT__ = add;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> __webpack_module_cache__ = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__webpack_require__</span>(<span class="params">moduleId</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> cachedModule = __webpack_module_cache__[moduleId];</span><br><span class="line">        <span class="keyword">if</span> (cachedModule !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> cachedModule.exports;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> <span class="built_in">module</span> = (__webpack_module_cache__[moduleId] = &#123;</span><br><span class="line">            exports: &#123;&#125;,</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        __webpack_modules__[moduleId](</span><br><span class="line">            <span class="built_in">module</span>,</span><br><span class="line">            <span class="built_in">module</span>.exports,</span><br><span class="line">            __webpack_require__</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">module</span>.exports;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    (<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        __webpack_require__.d = <span class="function">(<span class="params">exports, definition</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> definition) &#123;</span><br><span class="line">                <span class="keyword">if</span> (</span><br><span class="line">                    __webpack_require__.o(definition, key) &amp;&amp;</span><br><span class="line">                    !__webpack_require__.o(exports, key)</span><br><span class="line">                ) &#123;</span><br><span class="line">                    <span class="built_in">Object</span>.defineProperty(exports, key, &#123;</span><br><span class="line">                        enumerable: <span class="literal">true</span>,</span><br><span class="line">                        get: definition[key],</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;)();</span><br><span class="line"></span><br><span class="line">    (<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        __webpack_require__.o = <span class="function">(<span class="params">obj, prop</span>) =&gt;</span></span><br><span class="line">            <span class="built_in">Object</span>.prototype.hasOwnProperty.call(obj, prop);</span><br><span class="line">    &#125;)();</span><br><span class="line"></span><br><span class="line">    (<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        __webpack_require__.r = <span class="function">(<span class="params">exports</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">Symbol</span> !== <span class="string">"undefined"</span> &amp;&amp; <span class="built_in">Symbol</span>.toStringTag) &#123;</span><br><span class="line">                <span class="built_in">Object</span>.defineProperty(exports, <span class="built_in">Symbol</span>.toStringTag, &#123;</span><br><span class="line">                    value: <span class="string">"Module"</span>,</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">Object</span>.defineProperty(exports, <span class="string">"__esModule"</span>, &#123; <span class="attr">value</span>: <span class="literal">true</span> &#125;);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;)();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> __webpack_exports__ = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    (<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> m = __webpack_require__(<span class="string">"./src/esmodule/add.js"</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(m);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"1+1="</span>, m.default(<span class="number">1</span>, <span class="number">1</span>));</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"1-1="</span>, m.sub(<span class="number">1</span>, <span class="number">1</span>));</span><br><span class="line">    &#125;)();</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>
<h1 id="同时导出-commonjs-和-esmodule"><a href="#同时导出-commonjs-和-esmodule" class="headerlink" title="同时导出 commonjs 和 esmodule"></a>同时导出 commonjs 和 esmodule</h1><p>我们在一个文件同时使用 <code>module.exports</code> 和 <code>export</code> 。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> add = <span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">module</span>.exports.add = add;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> sub = <span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>浏览器会直接抛错：</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220508092644764.png" alt="image-20220508092644764"></p>
<p>如果直接重写 <code>module.exports</code> 呢？</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> add = <span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">module</span>.exports = add;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> sub = <span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220508092737165.png" alt="image-20220508092737165"></p>
<p>同样会抛错，让我们看一下 <code>webpack</code> 的产物。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">"./src/commonjs/add.js"</span>: (</span><br><span class="line">           <span class="built_in">module</span>,</span><br><span class="line">           __webpack_exports__,</span><br><span class="line">           __webpack_require__</span><br><span class="line">       ) =&gt; &#123;</span><br><span class="line">           __webpack_require__.r(__webpack_exports__);</span><br><span class="line">           __webpack_require__.d(__webpack_exports__, &#123;</span><br><span class="line">               sub: <span class="function"><span class="params">()</span> =&gt;</span> sub,</span><br><span class="line">           &#125;);</span><br><span class="line">           <span class="built_in">module</span> = __webpack_require__.hmd(<span class="built_in">module</span>);</span><br><span class="line"></span><br><span class="line">           <span class="keyword">const</span> add = <span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">               <span class="keyword">return</span> a + b;</span><br><span class="line">           &#125;;</span><br><span class="line">           <span class="built_in">module</span>.exports.add = add;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">const</span> sub = <span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">               <span class="keyword">return</span> a + b;</span><br><span class="line">           &#125;;</span><br><span class="line">       &#125;,</span><br></pre></td></tr></table></figure>
<p>调用了 <code>__webpack_require__.hmd</code> 方法拿到 <code>module</code> 。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">__webpack_require__.hmd = <span class="function">(<span class="params"><span class="built_in">module</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">module</span> = <span class="built_in">Object</span>.create(<span class="built_in">module</span>);</span><br><span class="line">  <span class="keyword">if</span> (!<span class="built_in">module</span>.children) <span class="built_in">module</span>.children = [];</span><br><span class="line">  <span class="built_in">Object</span>.defineProperty(<span class="built_in">module</span>, <span class="string">"exports"</span>, &#123;</span><br><span class="line">    enumerable: <span class="literal">true</span>,</span><br><span class="line">    set: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(</span><br><span class="line">        <span class="string">"ES Modules may not assign module.exports or exports.*, Use ESM export syntax, instead: "</span> +</span><br><span class="line">        <span class="built_in">module</span>.id</span><br><span class="line">      );</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">module</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><code>hmd</code> 方法重新定义了 <code>exports</code> 属性，没有定义 <code>get</code> 属性，所以 <code>module.exports</code> 返回的是 <code>undefined</code>，<code>module.exports.add</code> 就直接抛错了。</p>
<p>重新定义了 <code>set</code> 函数，所以 <code>module.exports = xxx</code> ，重新赋值属性的时候走到 <code>set</code> 后直接抛错。</p>
<h1 id="同时导入-commonjs-和-esmodule"><a href="#同时导入-commonjs-和-esmodule" class="headerlink" title="同时导入 commonjs 和 esmodule"></a>同时导入 commonjs 和 esmodule</h1><p>定义一个 <code>commonjs</code> 模块：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// src/commonjs/add.js</span></span><br><span class="line"><span class="keyword">const</span> add = <span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">module</span>.exports = add;</span><br></pre></td></tr></table></figure>
<p>定义一个 <code>esmodule</code> 模块：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// src/esmodule/sub.js</span></span><br><span class="line"><span class="keyword">const</span> sub = <span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a - b;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> sub;</span><br></pre></td></tr></table></figure>
<p>然后在 <code>index.js</code> 同时引入：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> add = <span class="built_in">require</span>(<span class="string">"./add"</span>) ;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"1+1="</span>, add(<span class="number">1</span>, <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sub <span class="keyword">from</span> <span class="string">'../esmodule/sub'</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"1-1="</span>, sub(<span class="number">1</span>, <span class="number">1</span>));</span><br></pre></td></tr></table></figure>
<p>没什么问题，正常运行：</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220508094440422.png" alt="image-20220508094440422"></p>
<p>因为导入的话它们是互不影响的，各自导入自己的即可，可以看下完整代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> __webpack_modules__ = &#123;</span><br><span class="line">        <span class="string">"./src/commonjs/add.js"</span>: <span class="function">(<span class="params"><span class="built_in">module</span></span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> add = <span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> a + b;</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="built_in">module</span>.exports = add;</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        <span class="string">"./src/esmodule/sub.js"</span>: (</span><br><span class="line">            __unused_webpack_module,</span><br><span class="line">            __webpack_exports__,</span><br><span class="line">            __webpack_require__</span><br><span class="line">        ) =&gt; &#123;</span><br><span class="line"><span class="meta">            "use strict"</span>;</span><br><span class="line">            __webpack_require__.r(__webpack_exports__);</span><br><span class="line">            __webpack_require__.d(__webpack_exports__, &#123;</span><br><span class="line">                <span class="keyword">default</span>: <span class="function"><span class="params">()</span> =&gt;</span> __WEBPACK_DEFAULT_EXPORT__,</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">const</span> sub = <span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> a - b;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">const</span> __WEBPACK_DEFAULT_EXPORT__ = sub;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> __webpack_module_cache__ = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__webpack_require__</span>(<span class="params">moduleId</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> cachedModule = __webpack_module_cache__[moduleId];</span><br><span class="line">        <span class="keyword">if</span> (cachedModule !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> cachedModule.exports;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> <span class="built_in">module</span> = (__webpack_module_cache__[moduleId] = &#123;</span><br><span class="line">            exports: &#123;&#125;,</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        __webpack_modules__[moduleId](</span><br><span class="line">            <span class="built_in">module</span>,</span><br><span class="line">            <span class="built_in">module</span>.exports,</span><br><span class="line">            __webpack_require__</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">module</span>.exports;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    (<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        __webpack_require__.d = <span class="function">(<span class="params">exports, definition</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> definition) &#123;</span><br><span class="line">                <span class="keyword">if</span> (</span><br><span class="line">                    __webpack_require__.o(definition, key) &amp;&amp;</span><br><span class="line">                    !__webpack_require__.o(exports, key)</span><br><span class="line">                ) &#123;</span><br><span class="line">                    <span class="built_in">Object</span>.defineProperty(exports, key, &#123;</span><br><span class="line">                        enumerable: <span class="literal">true</span>,</span><br><span class="line">                        get: definition[key],</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;)();</span><br><span class="line"></span><br><span class="line">    (<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        __webpack_require__.o = <span class="function">(<span class="params">obj, prop</span>) =&gt;</span></span><br><span class="line">            <span class="built_in">Object</span>.prototype.hasOwnProperty.call(obj, prop);</span><br><span class="line">    &#125;)();</span><br><span class="line"></span><br><span class="line">    (<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        __webpack_require__.r = <span class="function">(<span class="params">exports</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">Symbol</span> !== <span class="string">"undefined"</span> &amp;&amp; <span class="built_in">Symbol</span>.toStringTag) &#123;</span><br><span class="line">                <span class="built_in">Object</span>.defineProperty(exports, <span class="built_in">Symbol</span>.toStringTag, &#123;</span><br><span class="line">                    value: <span class="string">"Module"</span>,</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">Object</span>.defineProperty(exports, <span class="string">"__esModule"</span>, &#123; <span class="attr">value</span>: <span class="literal">true</span> &#125;);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;)();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> __webpack_exports__ = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    (<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line"><span class="meta">        "use strict"</span>;</span><br><span class="line"></span><br><span class="line">        __webpack_require__.r(__webpack_exports__);</span><br><span class="line">        <span class="keyword">var</span> _esmodule_sub__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(</span><br><span class="line">            <span class="string">"./src/esmodule/sub.js"</span></span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">const</span> add = __webpack_require__(<span class="string">"./src/commonjs/add.js"</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"1+1="</span>, add(<span class="number">1</span>, <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">        <span class="built_in">console</span>.log(</span><br><span class="line">            <span class="string">"1-1="</span>,</span><br><span class="line">            (<span class="number">0</span>, _esmodule_sub__WEBPACK_IMPORTED_MODULE_0__[<span class="string">"default"</span>])(<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">        );</span><br><span class="line">    &#125;)();</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>
<h1 id="总"><a href="#总" class="headerlink" title="总"></a>总</h1><p>不管是 <code>esmodule</code> 还是 <code>commonjs</code> 模块，最终都转换成了 <code>module = {exports: {}}</code> 形式的模块，所以它们之间的混用成为了可能。</p>
<p><code>import</code> <code>commonjs</code> 模块的话，<code>import</code> 拿到的就是整个 <code>module.exports</code> 对象，正常使用即可。如果我们直接改写 <code>module.exports</code> 对象，<code>webpack</code> 会认为等同于 <code>export default</code> ，进行兼容处理。</p>
<p><code>require</code> <code>esmodule</code> 模块的话，如果之前 <code>esmodule</code> 模块中有 <code>export default</code> ，那么使用的时候需要显示的调用 <code>xxx.default</code> ，对于其他的 <code>export</code> 正常使用即可。</p>
<p>虽然可以混用，但一般情况下能不混用就不混用，以免遇到未知问题，目前更推荐 <code>esmodule</code> 模块。</p>
<p>如果遇到奇怪问题的话，可以考虑直接去查看 <code>webpack</code> 的产物，能更快的排查出问题。</p>
<h1 id="讨论"><a href="#讨论" class="headerlink" title="讨论"></a>讨论</h1><p>对产物其实有两个问题，然后去请教了下 <code>Tecvan</code> ，杰哥。</p>
<p>第一个问题就是上边提到，当使用 <code>imports</code> 导入 <code>commonjs</code> 模块的时候，会调用 <code>n</code> 方法。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">__webpack_require__.n = <span class="function">(<span class="params"><span class="built_in">module</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> getter =</span><br><span class="line">      <span class="built_in">module</span> &amp;&amp; <span class="built_in">module</span>.__esModule</span><br><span class="line">  ? <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">module</span>[<span class="string">"default"</span>]</span><br><span class="line">  : <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">module</span>;</span><br><span class="line">  __webpack_require__.d(getter, &#123; <span class="attr">a</span>: getter &#125;);</span><br><span class="line">  <span class="keyword">return</span> getter;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>这里会挂一个 <code>a</code> 属性，原因的话如下：</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220508095931458.png" alt="image-20220508095931458"></p>
<p>主要是兼容 <code>webpack</code> 混用的情况，场景可能如下：</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220508100718016.png" alt="image-20220508100718016"></p>
<p>第二个问题，还是 <code>import</code> 导入 <code>commonjs</code> 模块的时候，打包产物如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> _add__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(</span><br><span class="line">  <span class="string">"./src/commonjs/add.js"</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">var</span> _add__WEBPACK_IMPORTED_MODULE_0___default = __webpack_require__.n(</span><br><span class="line">  _add__WEBPACK_IMPORTED_MODULE_0__</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"1+1="</span>, _add__WEBPACK_IMPORTED_MODULE_0___default()(<span class="number">1</span>, <span class="number">1</span>));</span><br></pre></td></tr></table></figure>
<p>这里会触发 <code>__webpack_require__.n</code> 方法去生成 <code>_add__WEBPACK_IMPORTED_MODULE_0___default</code> 变量。触发这个逻辑的原因并不是因为我们使用了 <code>import xxx from &#39;yyy&#39;</code> 的格式，而是因为导出 <code>commonjs</code> 模块的时候直接使用 <code>module.exports = xxx</code> 进行了覆盖，这种情况 <code>webpack</code> 就会认为等效于 <code>export default</code> 的情况。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220508101552792.png" alt="image-20220508101552792"></p>
<p>但对于代码，因为 <code>_add__WEBPACK_IMPORTED_MODULE_0__</code> 和 <code>_add__WEBPACK_IMPORTED_MODULE_0___default</code> 是同一个值，我们不处理 <code>default</code> 逻辑其实也是通的：</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220508101628186.png" alt="image-20220508101628186"></p>
<p><code>webpack</code> 为什么会这样处理，具体原因就不知道了，欢迎大家一起来讨论，下边是杰哥的猜测：</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220508101715288.png" alt="image-20220508101715288"></p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>算上这篇，总结了三篇 <code>webpack</code> 的产物的文章  <a href="https://zhuanlan.zhihu.com/p/508808789" target="_blank" rel="noopener">Webpack 打包 commonjs 和 esmodule 模块的产物对比</a> 、<a href="https://windliang.wang/2022/05/03/Webpack%E6%89%93%E5%8C%85commonjs%E5%92%8Cesmodule%E5%8A%A8%E6%80%81%E5%BC%95%E5%85%A5%E6%A8%A1%E5%9D%97%E7%9A%84%E4%BA%A7%E7%89%A9%E5%AF%B9%E6%AF%94/">Webpack 打包 commonjs 和 esmodule 动态引入模块的产物对比</a>，可以加深平常开发中对于模块之间的理解。</p>
<p>大家如果还对 <code>Webpack</code> 原理感兴趣的话，可以去看杰哥的 <a href="https://juejin.cn/column/6978684601921175583" target="_blank" rel="noopener">Webpack 原理系列</a>。目前我没有总结这个系列的计划了，哈哈。</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>elementUI中el-tabs或者说Vue现存的一个bug排查</title>
    <url>/2022/08/14/elementUI%E4%B8%ADel-tabs%E7%9A%84%E4%B8%80%E4%B8%AAbug%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h1 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象</h1><p> <code>element-ui</code> 版本是 <code>2.15.9</code>，<code>vue</code> 版本是 <code>2.7.8</code> 。</p>
<p>在 <code>el-dialog</code> 中使用 <code>el-tabs</code> ，并且 <code>el-dialog</code> 添加 <code>destroy-on-close</code> 属性，当关闭弹窗的时候页面就直接无响应了。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">        &lt;el-dialog</span><br><span class="line">            title=<span class="string">"提示"</span></span><br><span class="line">            :visible.sync=<span class="string">"dialogVisible"</span></span><br><span class="line">            width=<span class="string">"30%"</span></span><br><span class="line">            destroy-on-close</span><br><span class="line">        &gt;</span><br><span class="line">            &lt;el-tabs type=<span class="string">"border-card"</span>&gt;</span><br><span class="line">                &lt;el-tab-pane label=<span class="string">"用户管理"</span>&gt;用户管理&lt;<span class="regexp">/el-tab-pane&gt;</span></span><br><span class="line"><span class="regexp">                &lt;el-tab-pane label="配置管理"&gt;配置管理&lt;/</span>el-tab-pane&gt;</span><br><span class="line">                &lt;el-tab-pane label=<span class="string">"角色管理"</span>&gt;角色管理&lt;<span class="regexp">/el-tab-pane&gt;</span></span><br><span class="line"><span class="regexp">                &lt;el-tab-pane label="定时任务补偿"&gt;定时任务补偿&lt;/</span>el-tab-pane&gt;</span><br><span class="line">            &lt;<span class="regexp">/el-tabs&gt;</span></span><br><span class="line"><span class="regexp">            &lt;span slot="footer" class="dialog-footer"&gt;</span></span><br><span class="line"><span class="regexp">                &lt;el-button @click="dialogVisible = false"&gt;取 消&lt;/</span>el-button&gt;</span><br><span class="line">                &lt;el-button type=<span class="string">"primary"</span> @click=<span class="string">"dialogVisible = false"</span></span><br><span class="line">                    &gt;确 定&lt;<span class="regexp">/el-button</span></span><br><span class="line"><span class="regexp">                &gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>span&gt;</span><br><span class="line">        &lt;<span class="regexp">/el-dialog&gt;</span></span><br><span class="line"><span class="regexp">        &lt;el-button @click="dialogVisible = true"&gt;打开弹窗&lt;/</span>el-button&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    name: <span class="string">"App"</span>,</span><br><span class="line">    data() &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            dialogVisible: <span class="literal">false</span>,</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>
<p>效果如下：</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.com11.gif" alt="11"></p>
<p>再等一会儿 <code>Chrome</code> 就直接抛错了：</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220814073751320.png" alt="image-20220814073751320"></p>
<p>操作过程中控制台也没有任何报错，去 <code>github</code> 的 <code>issues</code> 看一眼发现已经有 <code>3</code> 个人遇到过这个问题了：</p>
<p><a href="https://github.com/ElemeFE/element/issues/21114" target="_blank" rel="noopener">[bug report] El dialog [destroy on close] El tabs page crashes #21114</a></p>
<p><a href="https://github.com/ElemeFE/element/issues/20974" target="_blank" rel="noopener">[Bug Report] When set a attribute “destory-on-close=’true’” on a el-dialog which has a child el-tabs component will cause the browser crash #20974</a></p>
<p><a href="https://github.com/ElemeFE/element/issues/20947" target="_blank" rel="noopener">[Bug Report] el-tabs in el-dialog with destroy-on-close=‘true’ ,dialog can’t be closed</a></p>
<p>看表现应该是哪里陷入了死循环，猜测是 <code>el-tabs</code> 的 <code>render</code> 函数在无限执行。</p>
<p>为了证实这个猜测，我们直接在 <code>node_modules</code> 中 <code>el-tabs</code> 的 <code>render</code> 函数添加 <code>console</code> 。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220814080300663.png" alt="image-20220814080300663"></p>
<p>打开控制台观察一下是否有输出：</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comKapture%202022-08-14%20at%2008.05.56.gif" alt="Kapture 2022-08-14 at 08.05.56"></p>
<p>直接原因找到了，下边需要排查一下 <code>render</code> 进入死循环的原因。</p>
<h1 id="问题排查"><a href="#问题排查" class="headerlink" title="问题排查"></a>问题排查</h1><p>可能出现问题的点，<code>el-dialog</code>、<code>el-tabs</code>、<code>el-tab-pane</code>，当然如果上述都没问题的话，也不排除 <code>Vue</code> 的问题，虽然可能性很低。</p>
<h2 id="el-dialog"><a href="#el-dialog" class="headerlink" title="el-dialog"></a>el-dialog</h2><p>如果我们把 <code>destroy-on-close</code> 属性去掉，然后一切就恢复正常了。所以我们先看一下 <code>destroy-on-close</code>  做了什么。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;transition</span><br><span class="line">    name=<span class="string">"dialog-fade"</span></span><br><span class="line">    @after-enter=<span class="string">"afterEnter"</span></span><br><span class="line">    @after-leave=<span class="string">"afterLeave"</span>&gt;</span><br><span class="line">    &lt;div</span><br><span class="line">      v-show=<span class="string">"visible"</span></span><br><span class="line">      <span class="class"><span class="keyword">class</span></span>=<span class="string">"el-dialog__wrapper"</span></span><br><span class="line">      @click.self=<span class="string">"handleWrapperClick"</span>&gt;</span><br><span class="line">      &lt;div</span><br><span class="line">        role=<span class="string">"dialog"</span></span><br><span class="line">        :key=<span class="string">"key"</span></span><br><span class="line">        :style=<span class="string">"style"</span>&gt;</span><br><span class="line">        ...</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"el-dialog__body"</span> v-<span class="keyword">if</span>=<span class="string">"rendered"</span>&gt;<span class="xml"><span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        ...</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">  &lt;<span class="regexp">/transition&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br></pre></td></tr></table></figure>
<p>最关键的的是 <code>&lt;el-dialog__body&gt;</code> 的外层 <code>div</code> 中设置了一个 <code>key</code> 。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">watch: &#123;</span><br><span class="line">  visible(val) &#123;</span><br><span class="line">    <span class="keyword">if</span> (val) &#123;</span><br><span class="line">      ...</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.$el.removeEventListener(<span class="string">'scroll'</span>, <span class="keyword">this</span>.updatePopper);</span><br><span class="line">      <span class="keyword">if</span> (!<span class="keyword">this</span>.closed) <span class="keyword">this</span>.$emit(<span class="string">'close'</span>);</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.destroyOnClose) &#123;</span><br><span class="line">        <span class="keyword">this</span>.$nextTick(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">this</span>.key++;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p>当我们把 <code>dialog</code> 的 <code>visible</code> 置为 <code>false</code> 的时候，会判断 <code>this.destroyOnClose</code> 的值，然后修改 <code>key</code> 的值。</p>
<p>当 <code>key</code> 值修改以后，<code>div</code> 中的元素就会整个重新渲染了，这就是官网中所说明 <code>this.destroyOnClose</code> 的作用。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220814095416654.png" alt="image-20220814095416654"></p>
<p>为了排除 <code>el-dialog</code> 的问题，我们写一个自定义组件来替代 <code>el-dialog</code> 。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div v-show=<span class="string">"showDialog"</span> :key=<span class="string">"key"</span>&gt;</span><br><span class="line">        &lt;slot&gt;<span class="xml"><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    components: &#123;&#125;,</span><br><span class="line">    data() &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            key: <span class="number">1</span>,</span><br><span class="line">            showDialog: <span class="literal">false</span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        open() &#123;</span><br><span class="line">            <span class="keyword">this</span>.showDialog = <span class="literal">true</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">        close() &#123;</span><br><span class="line">            <span class="keyword">this</span>.key += <span class="number">1</span></span><br><span class="line">            <span class="keyword">this</span>.showDialog = <span class="literal">false</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;style scoped&gt;&lt;/</span>style&gt;</span><br></pre></td></tr></table></figure>
<p>接着我们将 <code>el-dialog</code>  换为上边的组件。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">        &lt;wrap ref=<span class="string">"wrap"</span>&gt;</span><br><span class="line">            &lt;el-tabs type=<span class="string">"border-card"</span>&gt;</span><br><span class="line">                &lt;el-tab-pane label=<span class="string">"用户管理"</span>&gt;用户管理&lt;<span class="regexp">/el-tab-pane&gt;</span></span><br><span class="line"><span class="regexp">                &lt;el-tab-pane label="配置管理"&gt;配置管理&lt;/</span>el-tab-pane&gt;</span><br><span class="line">                &lt;el-tab-pane label=<span class="string">"角色管理"</span>&gt;角色管理&lt;<span class="regexp">/el-tab-pane&gt;</span></span><br><span class="line"><span class="regexp">                &lt;el-tab-pane label="定时任务补偿"&gt;定时任务补偿&lt;/</span>el-tab-pane&gt;</span><br><span class="line">            &lt;<span class="regexp">/el-tabs&gt;</span></span><br><span class="line"><span class="regexp">            &lt;el-button @click="close"&gt;关闭&lt;/</span>el-button&gt;</span><br><span class="line">        &lt;<span class="regexp">/wrap&gt;</span></span><br><span class="line"><span class="regexp">        &lt;el-button @click="open"&gt;打开弹窗&lt;/</span>el-button&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> Wrap <span class="keyword">from</span> <span class="string">"./Wrap.vue"</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    name: <span class="string">"App"</span>,</span><br><span class="line">    components: &#123;</span><br><span class="line">        Wrap,</span><br><span class="line">    &#125;,</span><br><span class="line">    data() &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        open() &#123;</span><br><span class="line">            <span class="keyword">this</span>.$refs.wrap.open();</span><br><span class="line">        &#125;,</span><br><span class="line">        close() &#123;</span><br><span class="line">            <span class="keyword">this</span>.$refs.wrap.close();</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;style&gt;</span></span><br><span class="line"><span class="regexp">#app &#123;</span></span><br><span class="line"><span class="regexp">    font-family: Avenir, Helvetica, Arial, sans-serif;</span></span><br><span class="line"><span class="regexp">    -webkit-font-smoothing: antialiased;</span></span><br><span class="line"><span class="regexp">    -moz-osx-font-smoothing: grayscale;</span></span><br><span class="line"><span class="regexp">    text-align: center;</span></span><br><span class="line"><span class="regexp">    color: #2c3e50;</span></span><br><span class="line"><span class="regexp">    margin-top: 60px;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>style&gt;</span><br></pre></td></tr></table></figure>
<p>运行之后发现问题依旧存在，因此我们可以排除是 <code>el-dialog</code> 的问题了。</p>
<h2 id="el-tabs-el-tab-pane"><a href="#el-tabs-el-tab-pane" class="headerlink" title="el-tabs el-tab-pane"></a>el-tabs el-tab-pane</h2><p>接下来就是一个二选一问题了，问题代码是在 <code>el-tabs</code> 还是 <code>el-tab-pane</code> 中。</p>
<p>我们把 <code>el-tab-pane</code> 从 <code>el-tabs</code> 去掉再来看一下还有没有问题。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">wrap</span> <span class="attr">ref</span>=<span class="string">"wrap"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-tabs</span> <span class="attr">type</span>=<span class="string">"border-card"</span>&gt;</span></span><br><span class="line">                hello World</span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-tabs</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-button</span> @<span class="attr">click</span>=<span class="string">"close"</span>&gt;</span>关闭<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">wrap</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-button</span> @<span class="attr">click</span>=<span class="string">"open"</span>&gt;</span>打开弹窗<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>运行一下发现一切正常了：</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comKapture%202022-08-14%20at%2010.07.33.gif" alt="Kapture 2022-08-14 at 10.07.33"></p>
<p>至此，可以基本确认是 <code>el-tab-pane</code> 问题了。</p>
<h1 id="直接原因"><a href="#直接原因" class="headerlink" title="直接原因"></a>直接原因</h1><p>我们来定位是哪行代码出现了问题，看一下 <code>el-tab-pane</code> 的整个代码。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div</span><br><span class="line">    <span class="class"><span class="keyword">class</span></span>=<span class="string">"el-tab-pane"</span></span><br><span class="line">    v-<span class="keyword">if</span>=<span class="string">"(!lazy || loaded) || active"</span></span><br><span class="line">    v-show=<span class="string">"active"</span></span><br><span class="line">    role=<span class="string">"tabpanel"</span></span><br><span class="line">    :aria-hidden=<span class="string">"!active"</span></span><br><span class="line">    :id=<span class="string">"`pane-$&#123;paneName&#125;`"</span></span><br><span class="line">    :aria-labelledby=<span class="string">"`tab-$&#123;paneName&#125;`"</span></span><br><span class="line">  &gt;</span><br><span class="line">    &lt;slot&gt;<span class="xml"><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    name: <span class="string">'ElTabPane'</span>,</span><br><span class="line"></span><br><span class="line">    componentName: <span class="string">'ElTabPane'</span>,</span><br><span class="line"></span><br><span class="line">    props: &#123;</span><br><span class="line">      label: <span class="built_in">String</span>,</span><br><span class="line">      labelContent: <span class="built_in">Function</span>,</span><br><span class="line">      name: <span class="built_in">String</span>,</span><br><span class="line">      closable: <span class="built_in">Boolean</span>,</span><br><span class="line">      disabled: <span class="built_in">Boolean</span>,</span><br><span class="line">      lazy: <span class="built_in">Boolean</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    data() &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        index: <span class="literal">null</span>,</span><br><span class="line">        loaded: <span class="literal">false</span></span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    computed: &#123;</span><br><span class="line">      isClosable() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.closable || <span class="keyword">this</span>.$parent.closable;</span><br><span class="line">      &#125;,</span><br><span class="line">      active() &#123;</span><br><span class="line">        <span class="keyword">const</span> active = <span class="keyword">this</span>.$parent.currentName === (<span class="keyword">this</span>.name || <span class="keyword">this</span>.index);</span><br><span class="line">        <span class="keyword">if</span> (active) &#123;</span><br><span class="line">          <span class="keyword">this</span>.loaded = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> active;</span><br><span class="line">      &#125;,</span><br><span class="line">      paneName() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name || <span class="keyword">this</span>.index;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    updated() &#123;</span><br><span class="line">      <span class="keyword">this</span>.$parent.$emit(<span class="string">'tab-nav-update'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>
<p>定位 <code>bug</code> 所在行数一般无脑采取二分注释法很快就出来了，经过两次尝试，我们只需要把 <code>updated</code> 中的代码注释掉就一切正常了。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">updated() &#123;</span><br><span class="line">  <span class="comment">// this.$parent.$emit('tab-nav-update');</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="根本原因"><a href="#根本原因" class="headerlink" title="根本原因"></a>根本原因</h1><p>子组件发送了 <code>tab-nav-update</code> 事件，看一下父组件 <code>el-tabs</code> 接收  <code>tab-nav-update</code> 事件的代码。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">created() &#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="keyword">this</span>.currentName) &#123;</span><br><span class="line">    <span class="keyword">this</span>.setCurrentName(<span class="string">'0'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.$on(<span class="string">'tab-nav-update'</span>, <span class="keyword">this</span>.calcPaneInstances.bind(<span class="literal">null</span>, <span class="literal">true</span>));</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p>这里会执行 <code>calcPaneInstances</code> 方法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">calcPaneInstances(isForceUpdate = <span class="literal">false</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.$slots.default) &#123;</span><br><span class="line">    <span class="keyword">const</span> paneSlots = <span class="keyword">this</span>.$slots.default.filter(<span class="function"><span class="params">vnode</span> =&gt;</span> vnode.tag &amp;&amp;</span><br><span class="line">                                                 vnode.componentOptions &amp;&amp; vnode.componentOptions.Ctor.options.name === <span class="string">'ElTabPane'</span>);</span><br><span class="line">    <span class="comment">// update indeed</span></span><br><span class="line">    <span class="keyword">const</span> panes = paneSlots.map(<span class="function">(<span class="params">&#123; componentInstance &#125;</span>) =&gt;</span> componentInstance);</span><br><span class="line">    <span class="keyword">const</span> panesChanged = !<span class="function">(<span class="params">panes.length === <span class="keyword">this</span>.panes.length &amp;&amp; panes.every((pane, index</span>) =&gt;</span> pane === <span class="keyword">this</span>.panes[index]));</span><br><span class="line">    <span class="keyword">if</span> (isForceUpdate || panesChanged) &#123;</span><br><span class="line">      <span class="keyword">this</span>.panes = panes;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.panes.length !== <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.panes = [];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p>主要是比较前后的 <code>panes</code> 是否一致，如果不一致就直接用新的覆盖旧的 <code>this.panes</code> 。</p>
<p>由于 <code>render</code> 函数中使用了 <code>panes</code> ，当修改 <code>panes</code> 的值的时候就会触发 <code>el-tabs</code> 的 <code>render</code> 。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">render(h) &#123;</span><br><span class="line">      <span class="keyword">let</span> &#123;</span><br><span class="line">        type,</span><br><span class="line">        handleTabClick,</span><br><span class="line">        handleTabRemove,</span><br><span class="line">        handleTabAdd,</span><br><span class="line">        currentName,</span><br><span class="line">        panes, <span class="comment">// 这里用到了</span></span><br><span class="line">        editable,</span><br><span class="line">        addable,</span><br><span class="line">        tabPosition,</span><br><span class="line">        stretch</span><br><span class="line">      &#125; = <span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line">      ...</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure>
<p>打印一下关闭弹窗的时候发生了什么：</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220816063309490.png" alt="image-20220816063309490"></p>
<p>当关闭弹窗的时候，触发了 <code>el-tabs</code> 的 <code>render</code> ，但此时除了触发了 <code>el-tabs</code> 的 <code>updated</code> ，同时也触发到了 <code>el-tabs-pane</code> 的 <code>updated</code> 。</p>
<p>在 <code>el-tab-pane</code> 的 <code>updated</code> 中我们发送 <code>tab-nav-update</code> 事件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">updated() &#123;</span><br><span class="line">  <span class="keyword">this</span>.$parent.$emit(<span class="string">'tab-nav-update'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>tab-nav-update</code> 事件的回调是 <code>calcPaneInstances</code> ，除了改变 <code>this</code> 指向，同时传了一个默认参数 <code>true</code> 。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.$on(<span class="string">'tab-nav-update'</span>, <span class="keyword">this</span>.calcPaneInstances.bind(<span class="literal">null</span>, <span class="literal">true</span>));</span><br></pre></td></tr></table></figure>
<p>对于 <code>calcPaneInstances</code> 第一个参数的含义是 <code>isForceUpdate</code> 。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">calcPaneInstances(isForceUpdate = <span class="literal">false</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.$slots.default) &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">if</span> (isForceUpdate || panesChanged) &#123;</span><br><span class="line">      <span class="keyword">this</span>.panes = panes;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.panes.length !== <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.panes = [];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p>如果 <code>isForceUpdate</code> 为 <code>true</code> 就会更新 <code>panes</code> 的值，接着又触发 <code>el-tabs</code> 的 <code>render</code> 函数，又一次引发 <code>el-tab-pane</code> 的 <code>updated</code> ，最终造成了 <code>render</code> 的死循环，使得浏览器卡死。</p>
<h1 id="bug-最小说明"><a href="#bug-最小说明" class="headerlink" title="bug 最小说明"></a>bug 最小说明</h1><p>一句话总结：某些场景下如果父组件重新 <code>render</code>，即使子组件没有变化，但子组件传递了 <code>slot</code> ，此时就会触发子组件的 <code>updated</code> 函数。</p>
<p>上边的逻辑确实不符合直觉，我们将代码完全从 <code>Element</code> 中抽离，举一个简单的例子来复现这个问题：</p>
<p><code>App.vue</code> 代码，依旧用 <code>wrap</code> 包裹。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">        &lt;wrap ref=<span class="string">"wrap"</span>&gt;</span><br><span class="line">            &lt;tabs&gt;</span><br><span class="line">                &lt;pane&gt;我来自pane的slot&lt;<span class="regexp">/pane&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>tabs&gt;</span><br><span class="line">            &lt;el-button @click=<span class="string">"close"</span>&gt;关闭&lt;<span class="regexp">/el-button&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>wrap&gt;</span><br><span class="line">        &lt;el-button @click=<span class="string">"open"</span>&gt;打开弹窗&lt;<span class="regexp">/el-button&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">import Wrap from "./</span>Wrap.vue<span class="string">";</span></span><br><span class="line"><span class="string">import Pane from "</span>./Pane.vue<span class="string">";</span></span><br><span class="line"><span class="string">import Tabs from "</span>./Tabs.vue<span class="string">";</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">export default &#123;</span></span><br><span class="line"><span class="string">    name: "</span>App<span class="string">",</span></span><br><span class="line"><span class="string">    components: &#123;</span></span><br><span class="line"><span class="string">        Wrap,</span></span><br><span class="line"><span class="string">        Pane,</span></span><br><span class="line"><span class="string">        Tabs,</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">    data() &#123;</span></span><br><span class="line"><span class="string">        return &#123;</span></span><br><span class="line"><span class="string">            show: false,</span></span><br><span class="line"><span class="string">        &#125;;</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">    methods: &#123;</span></span><br><span class="line"><span class="string">        open() &#123;</span></span><br><span class="line"><span class="string">            this.$refs.wrap.open();</span></span><br><span class="line"><span class="string">            this.show = true;</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        close() &#123;</span></span><br><span class="line"><span class="string">            this.$refs.wrap.close();</span></span><br><span class="line"><span class="string">            this.show = false;</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">&#125;;</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;style&gt;</span></span><br><span class="line"><span class="string">#app &#123;</span></span><br><span class="line"><span class="string">    font-family: Avenir, Helvetica, Arial, sans-serif;</span></span><br><span class="line"><span class="string">    -webkit-font-smoothing: antialiased;</span></span><br><span class="line"><span class="string">    -moz-osx-font-smoothing: grayscale;</span></span><br><span class="line"><span class="string">    text-align: center;</span></span><br><span class="line"><span class="string">    color: #2c3e50;</span></span><br><span class="line"><span class="string">    margin-top: 60px;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&lt;/style&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>Tabs.vue</code> ，提供一个 <code>slot</code> ，并且提供一个方法更新自己包含的 <code>data</code> 属性 <code>i</code> 。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;div&gt;我是 Tabs，第 &#123;&#123; i &#125;&#125; 次渲染&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        &lt;slot&gt;&lt;/</span>slot&gt;</span><br><span class="line">        &lt;el-button @click=<span class="string">"change"</span>&gt;触发 Tabs 重新渲染&lt;<span class="regexp">/el-button&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">export default &#123;</span></span><br><span class="line"><span class="regexp">    data() &#123;</span></span><br><span class="line"><span class="regexp">        return &#123;</span></span><br><span class="line"><span class="regexp">            i: 0,</span></span><br><span class="line"><span class="regexp">        &#125;;</span></span><br><span class="line"><span class="regexp">    &#125;,</span></span><br><span class="line"><span class="regexp">    methods: &#123;</span></span><br><span class="line"><span class="regexp">        change() &#123;</span></span><br><span class="line"><span class="regexp">            this.i++;</span></span><br><span class="line"><span class="regexp">        &#125;,</span></span><br><span class="line"><span class="regexp">    &#125;,</span></span><br><span class="line"><span class="regexp">    updated() &#123;</span></span><br><span class="line"><span class="regexp">        console.log("Tabs:updated");</span></span><br><span class="line"><span class="regexp">    &#125;,</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    mounted() &#123;</span></span><br><span class="line"><span class="regexp">        console.log("Tabs:mounted");</span></span><br><span class="line"><span class="regexp">    &#125;,</span></span><br><span class="line"><span class="regexp">&#125;;</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;<span class="xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p><code>Pane.vue</code> ，提供一个 <code>slot</code> 。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;<span class="xml"><span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">    export default &#123;</span></span><br><span class="line"><span class="regexp">mounted() &#123;</span></span><br><span class="line"><span class="regexp">  console.log("Pane:mounted");</span></span><br><span class="line"><span class="regexp">&#125;,</span></span><br><span class="line"><span class="regexp">  updated() &#123;</span></span><br><span class="line"><span class="regexp">    console.log("Pane:updated");</span></span><br><span class="line"><span class="regexp">  &#125;,</span></span><br><span class="line"><span class="regexp">&#125;;</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;<span class="xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>操作路径：</p>
<p>打开弹窗 -&gt; 关闭弹窗 -&gt; 再打开弹窗（此时 <code>pane</code> 就会触发 <code>updated</code> ） -&gt; 更新 <code>Tabs</code> 的值，会发现 <code>pane</code> 一直触发 <code>updated</code> 。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.com3.gif" alt="3"></p>
<p>如果我们在 <code>Pane</code> 的 <code>updated</code> 中引发 <code>Tabs</code> 的 <code>render</code> ，就会造成死循环了。</p>
<h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>关于这个问题网上前几年已经讨论过了：</p>
<p><a href="https://segmentfault.com/q/1010000040171066" target="_blank" rel="noopener">https://segmentfault.com/q/1010000040171066</a></p>
<p><a href="https://github.com/vuejs/vue/issues/8342" target="_blank" rel="noopener">https://github.com/vuejs/vue/issues/8342</a></p>
<p><a href="https://stackoverflow.com/questions/57536067/why-vue-need-to-forceupdate-components-when-they-include-static-slot" target="_blank" rel="noopener">https://stackoverflow.com/questions/57536067/why-vue-need-to-forceupdate-components-when-they-include-static-slot</a></p>
<p>但是上边网站的例子试了下已经不能复现了，看起来这个问题被修过一次了，但没有完全解决，可能是当做 <code>feature</code> 了。</p>
<h2 id="Vue-2-6"><a href="#Vue-2-6" class="headerlink" title="Vue 2.6+"></a>Vue 2.6+</h2><p>如果你的版本是 <code>Vue 2.6</code> 以上，当时尤大提过了一个<a href="https://github.com/vuejs/vue/pull/9371" target="_blank" rel="noopener">解决方案</a>：</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220816085852972.png" alt="image-20220816085852972"></p>
<p>指明 <code>slot</code> 的名字，这里就是 <code>default</code> 。</p>
<p>代码中我们在 <code>Pane</code> 中包裹一层 <code>template</code> 指明 <code>default</code> 。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">        &lt;wrap ref=<span class="string">"wrap"</span>&gt;</span><br><span class="line">            &lt;tabs&gt;</span><br><span class="line">                &lt;pane&gt;</span><br><span class="line">                    &lt;template v-slot:<span class="keyword">default</span>&gt; 我来自pane的slot &lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp">                &lt;/</span>pane&gt;</span><br><span class="line">            &lt;<span class="regexp">/tabs&gt;</span></span><br><span class="line"><span class="regexp">            &lt;el-button @click="close"&gt;关闭&lt;/</span>el-button&gt;</span><br><span class="line">        &lt;<span class="regexp">/wrap&gt;</span></span><br><span class="line"><span class="regexp">        &lt;el-button @click="open"&gt;打开弹窗&lt;/</span>el-button&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br></pre></td></tr></table></figure>
<p>再运行一下会发现 <code>pane</code> 的 <code>updated</code> 就不会触发了。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220816082327739.png" alt="image-20220816082327739"></p>
<h2 id="Vue-2-6-以下"><a href="#Vue-2-6-以下" class="headerlink" title="Vue 2.6 以下"></a>Vue 2.6 以下</h2><p>仔细想一下，我们第一次渲染的时候并不会出现问题，因此我们干脆在关闭弹窗的时候把 <code>Pane</code> 销毁掉（<code>Pane</code> 添加 <code>v-if</code> ），再打开弹窗的时候现场就和第一次保持一致，就不会引起 <code>Element</code> 的死循环了。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">        &lt;wrap ref=<span class="string">"wrap"</span>&gt;</span><br><span class="line">            &lt;tabs&gt;</span><br><span class="line">                &lt;pane v-<span class="keyword">if</span>=<span class="string">"show"</span>&gt; 我来自pane的slot &lt;<span class="regexp">/pane&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>tabs&gt;</span><br><span class="line">            &lt;el-button @click=<span class="string">"close"</span>&gt;关闭&lt;<span class="regexp">/el-button&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>wrap&gt;</span><br><span class="line">        &lt;el-button @click=<span class="string">"open"</span>&gt;打开弹窗&lt;<span class="regexp">/el-button&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">import Wrap from "./</span>Wrap.vue<span class="string">";</span></span><br><span class="line"><span class="string">import Pane from "</span>./Pane.vue<span class="string">";</span></span><br><span class="line"><span class="string">import Tabs from "</span>./Tabs.vue<span class="string">";</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">export default &#123;</span></span><br><span class="line"><span class="string">    name: "</span>App<span class="string">",</span></span><br><span class="line"><span class="string">    components: &#123;</span></span><br><span class="line"><span class="string">        Wrap,</span></span><br><span class="line"><span class="string">        Pane,</span></span><br><span class="line"><span class="string">        Tabs,</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">    data() &#123;</span></span><br><span class="line"><span class="string">        return &#123;</span></span><br><span class="line"><span class="string">            show: false,</span></span><br><span class="line"><span class="string">        &#125;;</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">    methods: &#123;</span></span><br><span class="line"><span class="string">        open() &#123;</span></span><br><span class="line"><span class="string">            this.$refs.wrap.open();</span></span><br><span class="line"><span class="string">            this.show = true;</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        close() &#123;</span></span><br><span class="line"><span class="string">            this.$refs.wrap.close();</span></span><br><span class="line"><span class="string">            this.show = false;</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">&#125;;</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br></pre></td></tr></table></figure>
<p>同样的，<code>Pane</code> 的 <code>updated</code> 也不会被触发了。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220816083018335.png" alt="image-20220816083018335"></p>
<h2 id="等-Element-兼容"><a href="#等-Element-兼容" class="headerlink" title="等 Element 兼容"></a>等 Element 兼容</h2><p>讲道理，这个问题其实也不能算作是 <code>Element</code> 的，但在 <code>updated</code> 生命周期触发渲染其实 <code>Vue</code> 官方已经给出过警告了。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220816083227156.png" alt="image-20220816083227156"></p>
<p><code>Element</code> 兼容的话，需要分析一下当时为什么在 <code>updated</code> 更新父组件状态，然后换一种方式了。</p>
<h2 id="等-Vue-修复？"><a href="#等-Vue-修复？" class="headerlink" title="等 Vue 修复？"></a>等 Vue 修复？</h2><p>应该不会再修复了，毕竟有方案可以绕过这个问题，强制更新子组件应该是某些场景确实需要更新。</p>
<p>但 <code>slot</code> 为什么会引发这个问题，源代码到时候我会再研究下，最近也一直在看源代码相关的，目前 <code>Vue2</code> 响应式系统和虚拟 <code>dom</code> 两大块原理解析已经完成了，模版编译已经开始写了，关于 <code>slot</code> 应该也快写到了，感兴趣的同学也可以到 <a href="https://vue.windliang.wang/" target="_blank" rel="noopener">vue.windliang.wang</a> 一起学习，文章会将 <code>Vue</code> 的每个点都拆出来并且配有相应的源代码进行调试。</p>
<h1 id="总"><a href="#总" class="headerlink" title="总"></a>总</h1><p>在业务开发中，如果业务方能解决的问题，一般就自己解决了，一方面底层包团队更新速度确实慢，另一方面，因为业务代码依赖的包可能和最新版本差很多了，即使底层库修复了，我们也不会去更新库版本，罗老师镇楼。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220816084114944.png" alt="image-20220816084114944"></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>elementUI</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>echarts 画中国地图及省份切换</title>
    <url>/2022/05/10/echarts%E7%94%BB%E4%B8%AD%E5%9B%BD%E5%9C%B0%E5%9B%BE/</url>
    <content><![CDATA[<p>最近用 <code>ehcarts</code> 写了一个有关中国地图的需求，这篇文章来总结下基本的原理和用法。</p>
<h1 id="Geojson"><a href="#Geojson" class="headerlink" title="Geojson"></a>Geojson</h1><p>首先了解一下 <code>GeoJSON</code> ，看下 <a href="https://zh.wikipedia.org/wiki/GeoJSON" target="_blank" rel="noopener">维基百科</a> 的定义：</p>
<blockquote>
<p><strong>GeoJSON </strong>是一种基于 <a href="https://zh.wikipedia.org/wiki/JSON" target="_blank" rel="noopener">JSON</a> 的地理空间数据交换格式，它定义了几种类型 JSON 对象以及它们组合在一起的方法，以表示有关地理要素、属性和它们的空间范围的数据。</p>
<p>2015年，互联网工程任务组（<a href="https://zh.wikipedia.org/wiki/互联网工程任务组" target="_blank" rel="noopener">IETF</a>）与原始规范作者组建了一个 GeoJSON 工作组，一起规范 GeoJSON 标准。在2016年8月，推出了最新的GeoJSON数据格式标准规范(<a href="https://tools.ietf.org/html/rfc7946" target="_blank" rel="noopener">RFC 7946</a>)。</p>
<p>GeoJSON 使用唯一地理坐标参考系统 WGS1984 和十进制度单位，一个 GeoJSON 对象可以是 Geometry, Feature 或者FeatureCollection.</p>
<p>其几何对象包括有点（表示地理位置）、线（表示街道、公路、边界）、<a href="https://zh.wikipedia.org/wiki/多边形" target="_blank" rel="noopener">多边形</a>（表示国家、省、领土），以及由以上类型组合成的复合几何图形。</p>
</blockquote>
<p>简单说就是通过坐标系来描述点、线、面，看几个例子就明白它们是什么了。</p>
<p>单个点：<code>&quot;type&quot;: &quot;Point&quot;</code> </p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220510095405517.png" alt="image-20220510095405517"></p>
<p>多个点，<code>&quot;type&quot;: &quot;MultiPoint&quot;</code> </p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220510095158715.png" alt="image-20220510095158715"></p>
<p>多个线：<code>&quot;type&quot;: &quot;MultiLineString&quot;</code> </p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220510095241321.png" alt="image-20220510095241321"></p>
<p>多个面：<code>&quot;type&quot;: &quot;MultiPolygon&quot;</code> </p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220510095257874.png" alt="image-20220510095257874"></p>
<h1 id="地图-Geojson"><a href="#地图-Geojson" class="headerlink" title="地图 Geojson"></a>地图 Geojson</h1><p> 中国地图和省份的 <code>geoJson</code> 可以在 <a href="https://github.com/echarts-maps" target="_blank" rel="noopener">echarts-map</a> 或者阿里的 <a href="https://datav.aliyun.com/portal/school/atlas/area_selector" target="_blank" rel="noopener">数据可视化中心</a> 进行下载。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220510101045037.png" alt="image-20220510101045037"></p>
<p><code>echarts 4.x</code> 的版本自带了一些 <code>Geojson</code> 的数据，在 <code>node_modules/echarts/map/json</code> 目录，但可能考虑到一些省区数据不能及时更新，<code>echarts 5</code> 版本就没有自带数据了。</p>
<p>让我们看一下全国地图中山西省的 <code>geoJson</code> 长什么样子。</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"type"</span>: <span class="string">"FeatureCollection"</span>,</span><br><span class="line">    <span class="attr">"features"</span>: [</span><br><span class="line">      	...</span><br><span class="line">        &#123;</span><br><span class="line">          ...</span><br><span class="line">        &#125;</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"Feature"</span>,</span><br><span class="line">            <span class="attr">"properties"</span>: &#123;</span><br><span class="line">                <span class="attr">"adcode"</span>: <span class="number">140000</span>,</span><br><span class="line">                <span class="attr">"name"</span>: <span class="string">"山西省"</span>,</span><br><span class="line">                <span class="attr">"center"</span>: [<span class="number">112.549248</span>, <span class="number">37.857014</span>],</span><br><span class="line">                <span class="attr">"centroid"</span>: [<span class="number">112.304436</span>, <span class="number">37.618179</span>],</span><br><span class="line">                <span class="attr">"childrenNum"</span>: <span class="number">11</span>,</span><br><span class="line">                <span class="attr">"level"</span>: <span class="string">"province"</span>,</span><br><span class="line">                <span class="attr">"parent"</span>: &#123; <span class="attr">"adcode"</span>: <span class="number">100000</span> &#125;,</span><br><span class="line">                <span class="attr">"subFeatureIndex"</span>: <span class="number">3</span>,</span><br><span class="line">                <span class="attr">"acroutes"</span>: [<span class="number">100000</span>]</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">"geometry"</span>: &#123;</span><br><span class="line">                <span class="attr">"type"</span>: <span class="string">"MultiPolygon"</span>,</span><br><span class="line">                <span class="attr">"coordinates"</span>: [</span><br><span class="line">                    [</span><br><span class="line">                        [</span><br><span class="line">                            [<span class="number">110.379257</span>, <span class="number">34.600612</span>],</span><br><span class="line">                            [<span class="number">110.424837</span>, <span class="number">34.588295</span>],</span><br><span class="line">                            [<span class="number">110.488279</span>, <span class="number">34.610956</span>],</span><br><span class="line">                            [<span class="number">110.533242</span>, <span class="number">34.583368</span>],</span><br><span class="line">                            [<span class="number">110.610851</span>, <span class="number">34.607508</span>],</span><br><span class="line">                            [<span class="number">110.710017</span>, <span class="number">34.605045</span>],</span><br><span class="line">                            [<span class="number">110.749437</span>, <span class="number">34.65232</span>],</span><br><span class="line">                            [<span class="number">110.791937</span>, <span class="number">34.649858</span>],</span><br><span class="line">                            [<span class="number">110.824582</span>, <span class="number">34.615881</span>],</span><br><span class="line">                            [<span class="number">110.883712</span>, <span class="number">34.64395</span>],</span><br><span class="line">                            [<span class="number">110.903422</span>, <span class="number">34.669056</span>],</span><br><span class="line">                            [<span class="number">110.920052</span>, <span class="number">34.730068</span>],</span><br><span class="line">                            ...</span><br><span class="line">                        ]</span><br><span class="line">                    ]</span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">				&#123;</span><br><span class="line">          ...</span><br><span class="line">        &#125;</span><br><span class="line">        ...</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>整体是一个 <code>&quot;type&quot;: &quot;FeatureCollection&quot;</code> ，然后有一个 <code>features</code> 数组保存所有省份，每一个都是 <code>&quot;type&quot;: &quot;Feature&quot;</code> ，代表单个省份。包含 <code>properties</code> 属性和 <code>geometry</code> 属性。<code>geometry</code> 属性就是所有的坐标信息。</p>
<p>根据坐标信息，计算最大值和最小值的差值，按比例映射到 <code>canvas</code> 上的坐标，然后就可以画出来了，细节的话可以参考 <a href="https://www.bilibili.com/video/BV13V411J7kg/" target="_blank" rel="noopener">b 站</a> 的这个视频。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220510102224426.png" alt="image-20220510102224426" style="width:30%;"></p>
<h1 id="echarts-画地图"><a href="#echarts-画地图" class="headerlink" title="echarts 画地图"></a>echarts 画地图</h1><p>安装 <code>vue</code> 和 <code>echarts</code> ，先来个简单的正方形。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"type"</span>: <span class="string">"FeatureCollection"</span>,</span><br><span class="line">    <span class="attr">"features"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"Feature"</span>,</span><br><span class="line">            <span class="attr">"properties"</span>: &#123;</span><br><span class="line">                <span class="attr">"name"</span>: <span class="string">"正方形"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">"geometry"</span>: &#123;</span><br><span class="line">                <span class="attr">"type"</span>: <span class="string">"MultiPolygon"</span>,</span><br><span class="line">                <span class="attr">"coordinates"</span>: [</span><br><span class="line">                    [</span><br><span class="line">                        [</span><br><span class="line">                            [<span class="number">100.0</span>, <span class="number">0.0</span>],</span><br><span class="line">                            [<span class="number">101.0</span>, <span class="number">0.0</span>],</span><br><span class="line">                            [<span class="number">101.0</span>, <span class="number">1.0</span>],</span><br><span class="line">                            [<span class="number">100.0</span>, <span class="number">1.0</span>],</span><br><span class="line">                            [<span class="number">100.0</span>, <span class="number">0.0</span>]</span><br><span class="line">                        ]</span><br><span class="line">                    ]</span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后用 <code>echarts</code> 做引入我们的 <code>json</code> 文件、通过 <code>echarts.registerMap</code> 注册 <code>json</code> 文件、设置 <code>opitons</code> 的<code>series</code> 属性。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div id=<span class="string">"main"</span> style=<span class="string">"width: 600px; height: 600px"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">import * as echarts from "echarts";</span></span><br><span class="line"><span class="regexp">import test from '../</span>data/test<span class="string">'</span></span><br><span class="line"><span class="string">export default &#123;</span></span><br><span class="line"><span class="string">    name: "HelloWorld",</span></span><br><span class="line"><span class="string">    props: &#123;</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">    mounted() &#123;</span></span><br><span class="line"><span class="string">        var myChart = echarts.init(document.getElementById("main"));</span></span><br><span class="line"><span class="string">        echarts.registerMap('</span>mapName<span class="string">', test); // 注册地图</span></span><br><span class="line"><span class="string">        let option = &#123;</span></span><br><span class="line"><span class="string">            series: [</span></span><br><span class="line"><span class="string">                &#123;</span></span><br><span class="line"><span class="string">                    type: "map",</span></span><br><span class="line"><span class="string">                    map: '</span>mapName<span class="string">', // 引入地图数据</span></span><br><span class="line"><span class="string">                &#125;,</span></span><br><span class="line"><span class="string">            ],</span></span><br><span class="line"><span class="string">        &#125;;</span></span><br><span class="line"><span class="string">        myChart.setOption(option);</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">&#125;;</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;!-- Add "scoped" attribute to limit CSS to this component only --&gt;</span></span><br><span class="line"><span class="string">&lt;style scoped&gt;</span></span><br><span class="line"><span class="string">&lt;/style&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220511080857038.png" alt="image-20220511080857038"></p>
<p>然后我们只需要到阿里的 <a href="https://datav.aliyun.com/portal/school/atlas/area_selector" target="_blank" rel="noopener">数据可视化中心</a> 把中国地图的 <code>Geojson</code> 数据下载下来，替换上边的 <code>test.json</code> 即可。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220511081044461.png" alt="image-20220511081044461" style="width:50%;"></p>
<p>值得注意的是，如果我们设置注册的名字为 <code>china</code> ，<code>echarts</code> 会自动给我们加上南沙群岛的放大图：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> echarts <span class="keyword">from</span> <span class="string">"echarts"</span>;</span><br><span class="line"><span class="keyword">import</span> china <span class="keyword">from</span> <span class="string">'../data/china'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    name: <span class="string">"HelloWorld"</span>,</span><br><span class="line">    props: &#123;</span><br><span class="line">    &#125;,</span><br><span class="line">    mounted() &#123;</span><br><span class="line">        <span class="keyword">var</span> myChart = echarts.init(<span class="built_in">document</span>.getElementById(<span class="string">"main"</span>));</span><br><span class="line">        echarts.registerMap(<span class="string">'china'</span>, china);</span><br><span class="line">        <span class="keyword">let</span> option = &#123;</span><br><span class="line">            series: [</span><br><span class="line">                &#123;</span><br><span class="line">                    type: <span class="string">"map"</span>,</span><br><span class="line">                    map: <span class="string">'china'</span>, <span class="comment">// 引入地图数据</span></span><br><span class="line">                &#125;,</span><br><span class="line">            ],</span><br><span class="line">        &#125;;</span><br><span class="line">        myChart.setOption(option);</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220511082046489.png" alt="image-20220511082046489" style="zoom:50%;"></p>
<h1 id="可能会用到的-options-属性"><a href="#可能会用到的-options-属性" class="headerlink" title="可能会用到的 options 属性"></a>可能会用到的 options 属性</h1><p>地图画出来以后，接下来可以照着 <a href="https://echarts.apache.org/zh/option.html#geo" target="_blank" rel="noopener">echarts 官网</a> 变身为「<code>echarts</code> 配置工程师」了，记得注意一下自己当前的 <code>eharts</code> 版本。</p>
<h2 id="设置悬浮上的数据"><a href="#设置悬浮上的数据" class="headerlink" title="设置悬浮上的数据"></a>设置悬浮上的数据</h2><p>我们在 <code>series</code> 中引入 <code>data</code> ，加一点随机数据，其中 <code>name</code> 值是 <code>json</code> 数据中的 <code>properties</code> 对应的 <code>name</code> ，名字一定要一致。</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> option = &#123;</span><br><span class="line">  ...</span><br><span class="line">  series: [</span><br><span class="line">    &#123;</span><br><span class="line">      type: <span class="string">"map"</span>,</span><br><span class="line">      map: <span class="string">"china"</span>, <span class="comment">// 引入地图数据</span></span><br><span class="line">      name: <span class="string">"省份随机数据"</span>,</span><br><span class="line">      data: [</span><br><span class="line">        &#123;</span><br><span class="line">          name: <span class="string">"北京市"</span>,</span><br><span class="line">          value: <span class="number">21</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          name: <span class="string">"天津市"</span>,</span><br><span class="line">          value: <span class="number">12</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          name: <span class="string">"上海市"</span>,</span><br><span class="line">          value: <span class="number">99</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          name: <span class="string">"重庆市"</span>,</span><br><span class="line">          value: <span class="number">98</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          name: <span class="string">"河北省"</span>,</span><br><span class="line">          value: <span class="number">99</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          name: <span class="string">"河南省"</span>,</span><br><span class="line">          value: <span class="number">29</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          name: <span class="string">"云南省"</span>,</span><br><span class="line">          value: <span class="number">79</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          name: <span class="string">"辽宁省"</span>,</span><br><span class="line">          value: <span class="number">38</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          name: <span class="string">"黑龙江省"</span>,</span><br><span class="line">          value: <span class="number">4</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          name: <span class="string">"湖南省"</span>,</span><br><span class="line">          value: <span class="number">32</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          name: <span class="string">"安徽省"</span>,</span><br><span class="line">          value: <span class="number">84</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          name: <span class="string">"山东省"</span>,</span><br><span class="line">          value: <span class="number">72</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          name: <span class="string">"新疆维吾尔自治区"</span>,</span><br><span class="line">          value: <span class="number">99</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          name: <span class="string">"江苏省"</span>,</span><br><span class="line">          value: <span class="number">70</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          name: <span class="string">"浙江省"</span>,</span><br><span class="line">          value: <span class="number">85</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          name: <span class="string">"江西省"</span>,</span><br><span class="line">          value: <span class="number">11</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          name: <span class="string">"湖北省"</span>,</span><br><span class="line">          value: <span class="number">62</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          name: <span class="string">"广西壮族自治区"</span>,</span><br><span class="line">          value: <span class="number">13</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          name: <span class="string">"甘肃省"</span>,</span><br><span class="line">          value: <span class="number">74</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          name: <span class="string">"山西省"</span>,</span><br><span class="line">          value: <span class="number">78</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          name: <span class="string">"内蒙古自治区"</span>,</span><br><span class="line">          value: <span class="number">74</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          name: <span class="string">"陕西省"</span>,</span><br><span class="line">          value: <span class="number">40</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          name: <span class="string">"吉林省"</span>,</span><br><span class="line">          value: <span class="number">9</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          name: <span class="string">"福建省"</span>,</span><br><span class="line">          value: <span class="number">90</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          name: <span class="string">"贵州省"</span>,</span><br><span class="line">          value: <span class="number">57</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          name: <span class="string">"广东省"</span>,</span><br><span class="line">          value: <span class="number">6</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          name: <span class="string">"青海省"</span>,</span><br><span class="line">          value: <span class="number">52</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          name: <span class="string">"西藏自治区"</span>,</span><br><span class="line">          value: <span class="number">10</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          name: <span class="string">"四川省"</span>,</span><br><span class="line">          value: <span class="number">98</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          name: <span class="string">"宁夏回族自治区"</span>,</span><br><span class="line">          value: <span class="number">11</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          name: <span class="string">"海南省"</span>,</span><br><span class="line">          value: <span class="number">25</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          name: <span class="string">"台湾省"</span>,</span><br><span class="line">          value: <span class="number">86</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          name: <span class="string">"香港特别行政区"</span>,</span><br><span class="line">          value: <span class="number">8</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          name: <span class="string">"澳门特别行政区"</span>,</span><br><span class="line">          value: <span class="number">50</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>再补上 <code>tooltip</code> 选项。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> option = &#123;</span><br><span class="line">  ...</span><br><span class="line">  tooltip: &#123;</span><br><span class="line">    trigger: <span class="string">"item"</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220512084334737.png" alt="image-20220512084334737" style="zoom:50%;"></p>
<h2 id="视觉映射"><a href="#视觉映射" class="headerlink" title="视觉映射"></a>视觉映射</h2><p>我们可以通过 <code>visualMap</code> 选项，将数据分组。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> option = &#123;</span><br><span class="line">  ...</span><br><span class="line">  visualMap: &#123;</span><br><span class="line">    left: <span class="string">"right"</span>,</span><br><span class="line">    min: <span class="number">0</span>,</span><br><span class="line">    max: <span class="number">100</span>,</span><br><span class="line">    inRange: &#123;</span><br><span class="line">      color: [</span><br><span class="line">        <span class="string">"#313695"</span>,</span><br><span class="line">        <span class="string">"#4575b4"</span>,</span><br><span class="line">        <span class="string">"#74add1"</span>,</span><br><span class="line">        <span class="string">"#abd9e9"</span>,</span><br><span class="line">        <span class="string">"#e0f3f8"</span>,</span><br><span class="line">        <span class="string">"#ffffbf"</span>,</span><br><span class="line">        <span class="string">"#fee090"</span>,</span><br><span class="line">        <span class="string">"#fdae61"</span>,</span><br><span class="line">        <span class="string">"#f46d43"</span>,</span><br><span class="line">        <span class="string">"#d73027"</span>,</span><br><span class="line">        <span class="string">"#a50026"</span>,</span><br><span class="line">      ],</span><br><span class="line">    &#125;,</span><br><span class="line">    text: [<span class="string">"High"</span>, <span class="string">"Low"</span>],</span><br><span class="line">    calculable: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>设置后之后，我们可以滑动右下角的范围来选取不同的省份。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220512084634727.png" alt="image-20220512084634727" style="zoom:50%;"></p>
<p>除了滑块的映射，还支持分区间的，类似下边这种。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220512084908512.png" alt="image-20220512084908512"></p>
<h2 id="其他选项"><a href="#其他选项" class="headerlink" title="其他选项"></a>其他选项</h2><p>其他选项这里就不介绍了，可以参考 <a href="https://echarts.apache.org/examples/zh/index.html#chart-type-map" target="_blank" rel="noopener">官网</a> 和 <a href="https://www.makeapie.cn/echarts_1.html" target="_blank" rel="noopener">社区</a> 的样例，然后结合自己的需求进行配置即可。</p>
<p>贴几张社区上炫酷的地图：</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220512085159589.png" alt="image-20220512085159589"></p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220512085134411.png" alt="image-20220512085134411" style="zoom:50%;"></p>
<h1 id="省份切换"><a href="#省份切换" class="headerlink" title="省份切换"></a>省份切换</h1><p>下边再实现一下点击省份切换到对应的省份地图的功能。</p>
<p>知道了上边的东西，思路其实很简单了，我们只需要把所有省份的 <code>Geojson</code> 数据全部下载下来，然后监听 <code>echarts</code> 的点击事件去显示省份即可。</p>
<p>为了逻辑之间的解耦，我们可以再新建一个组件，专门展示省份的数据。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">  &lt;div id=<span class="string">"province"</span> style=<span class="string">"width: 600px; height: 600px"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">import</span> * <span class="keyword">as</span> echarts <span class="keyword">from</span> <span class="string">"echarts"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  name: <span class="string">"Province"</span>,</span><br><span class="line">  props: &#123;</span><br><span class="line">    fileName: <span class="built_in">String</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      option: &#123;</span><br><span class="line">        series: [</span><br><span class="line">          &#123;</span><br><span class="line">            name: <span class="string">"省份数据"</span>,</span><br><span class="line">            type: <span class="string">"map"</span>,</span><br><span class="line">            map: <span class="string">"province"</span>,</span><br><span class="line">            data: [],</span><br><span class="line">          &#125;,</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    <span class="keyword">this</span>.initData();</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    initData() &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> provinceJSON = <span class="built_in">require</span>(<span class="string">"../data/province/"</span> +</span><br><span class="line">                                     <span class="keyword">this</span>.fileName);</span><br><span class="line">        <span class="keyword">const</span> myChart = echarts.init(</span><br><span class="line">          <span class="built_in">document</span>.getElementById(<span class="string">"province"</span>)</span><br><span class="line">        );</span><br><span class="line">        echarts.registerMap(<span class="string">"province"</span>, provinceJSON);</span><br><span class="line">        myChart.setOption(<span class="keyword">this</span>.option);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        alert(<span class="string">`暂无<span class="subst">$&#123;<span class="keyword">this</span>.fileName&#125;</span>数据`</span>);</span><br><span class="line">        <span class="keyword">this</span>.$emit(<span class="string">"toMap"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;style scoped rel="stylesheet/</span>scss<span class="string">" lang="</span>scss<span class="string">"&gt;&lt;/style&gt;</span></span><br></pre></td></tr></table></figure>
<p>我们把省份数据都放到 <code>&quot;../data/province&quot;</code> 目录中，这里简单演示，只下载了两个省份的地图：</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220512091724599.png" alt="image-20220512091724599"></p>
<p>通过外部传进来文件的 <code>fileName</code> 注册地图。这里直接通过 <code>require(&quot;../data/province&quot; + this.fileName)</code> 来动态引入 <code>Geojson</code>，一定要加上 <code>&quot;../data/province&quot;</code> 前缀来限制文件的位置，关于 <code>webpack</code> 的动态引入的更多细节可以参考 <a href="https://windliang.wang/2022/05/03/Webpack%E6%89%93%E5%8C%85commonjs%E5%92%8Cesmodule%E5%8A%A8%E6%80%81%E5%BC%95%E5%85%A5%E6%A8%A1%E5%9D%97%E7%9A%84%E4%BA%A7%E7%89%A9%E5%AF%B9%E6%AF%94/">Webpack 打包 commonjs 和 esmodule 动态引入模块的产物对比</a>。</p>
<p>我们增加一个 <code>ProvinceMap</code> 组件来调度两个组件的显示隐藏。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;Province</span><br><span class="line">            v-<span class="keyword">if</span>=<span class="string">"showProvince"</span></span><br><span class="line">            :fileName=<span class="string">"fileName"</span></span><br><span class="line">            @toMap=<span class="string">"toMap"</span></span><br><span class="line">        &gt;<span class="xml"><span class="tag">&lt;/<span class="name">Province</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">        &lt;<span class="built_in">Map</span> v-<span class="keyword">else</span> @toProvince=<span class="string">"toProvince"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">Map</span>&gt;</span></span></span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> Province <span class="keyword">from</span> <span class="string">"./Province.vue"</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="built_in">Map</span> <span class="keyword">from</span> <span class="string">"./Map.vue"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    name: <span class="string">"HelloWorld"</span>,</span><br><span class="line">    components: &#123;</span><br><span class="line">        Province,</span><br><span class="line">        <span class="built_in">Map</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    data() &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            showProvince: <span class="literal">false</span>,</span><br><span class="line">            fileName: <span class="literal">null</span>,</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">       <span class="comment">// 显示省份数据</span></span><br><span class="line">        toProvince(&#123; fileName &#125; = &#123;&#125;) &#123;</span><br><span class="line">            <span class="keyword">this</span>.fileName = fileName;</span><br><span class="line">            <span class="keyword">this</span>.showProvince = <span class="literal">true</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">      <span class="comment">// 显示全国地图</span></span><br><span class="line">        toMap() &#123;</span><br><span class="line">            <span class="keyword">this</span>.showProvince = <span class="literal">false</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;!-- Add "scoped" attribute to limit CSS to this component only --&gt;</span></span><br><span class="line"><span class="regexp">&lt;style scoped&gt;&lt;/</span>style&gt;</span><br></pre></td></tr></table></figure>
<p>在 <code>Map</code> 组件中监听省份的 <code>click</code> ，传递给 <code>ProvinceMap</code> 组件。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">initData() &#123;</span><br><span class="line">  <span class="keyword">var</span> myChart = echarts.init(<span class="built_in">document</span>.getElementById(<span class="string">"main"</span>));</span><br><span class="line">  echarts.registerMap(<span class="string">"china"</span>, china);</span><br><span class="line">  <span class="keyword">const</span> option =  ....;</span><br><span class="line">  myChart.setOption(option);</span><br><span class="line">  myChart.on(<span class="string">"click"</span>, (params) =&gt;</span><br><span class="line">             <span class="keyword">this</span>.$emit(<span class="string">"toProvince"</span>, &#123; <span class="attr">fileName</span>: params.name &#125;)</span><br><span class="line">            );</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p>在 <code>Province</code> 组件中监听 <code>click</code>，传递给 <code>ProvinceMap</code> 组件。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">initData() &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> provinceJSON = <span class="built_in">require</span>(<span class="string">"../data/province/"</span> +</span><br><span class="line">                                 <span class="keyword">this</span>.fileName);</span><br><span class="line">    <span class="keyword">const</span> myChart = echarts.init(</span><br><span class="line">      <span class="built_in">document</span>.getElementById(<span class="string">"province"</span>)</span><br><span class="line">    );</span><br><span class="line">    echarts.registerMap(<span class="string">"province"</span>, provinceJSON);</span><br><span class="line">    myChart.setOption(<span class="keyword">this</span>.option);</span><br><span class="line">    myChart.on(<span class="string">"click"</span>, () =&gt; <span class="keyword">this</span>.$emit(<span class="string">"toMap"</span>));</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    alert(<span class="string">`暂无<span class="subst">$&#123;<span class="keyword">this</span>.fileName&#125;</span>数据`</span>);</span><br><span class="line">    <span class="keyword">this</span>.$emit(<span class="string">"toMap"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p>最后看一下实现的效果：</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comKapture%202022-05-12%20at%2010.06.29.gif" alt="Kapture 2022-05-12 at 10.06.29"></p>
<h1 id="总"><a href="#总" class="headerlink" title="总"></a>总</h1><p>通过 <code>GeoJSON</code> 画 <code>echarts</code> ，知道大致的原理，然后其他配置项参考 <a href="https://echarts.apache.org/examples/zh/index.html#chart-type-map" target="_blank" rel="noopener">官网</a> 和 <a href="https://www.makeapie.cn/echarts_7.html" target="_blank" rel="noopener">社区</a> 的例子比对上 <a href="https://echarts.apache.org/zh/option.html#geo" target="_blank" rel="noopener">配置项</a> 慢慢配置即可，文章的整体代码放到了 <a href="https://github.com/wind-liang/echarts-map-vue" target="_blank" rel="noopener">github</a>，需要的同学可以参考。</p>
<p><code>ECharts</code> 最初由百度团队开源，并于 <code>2018</code> 年初捐赠给<code>Apache</code> 基金会，<code>2021</code> 年 <code>1</code> 月 <code>26</code> 日晚，<code>Apache</code> 基金会官方宣布 <code>ECharts</code> 项目正式毕业，成为 <code>Apache</code> 顶级项目。</p>
<p>平时开发 <code>Echarts</code> ，我们就可以从「切图仔」变成「<code>echarts</code> 配置工程师了」，手动狗头。</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>echarts</tag>
      </tags>
  </entry>
  <entry>
    <title>css层叠上下文和z-index的使用和思考</title>
    <url>/2023/06/13/css%E5%B1%82%E5%8F%A0%E4%B8%8A%E4%B8%8B%E6%96%87%E5%92%8Cz-index%E7%9A%84%E4%BD%BF%E7%94%A8%E5%92%8C%E6%80%9D%E8%80%83/</url>
    <content><![CDATA[<p>过去一段时间经常遇到线上的页面元素互相遮盖的问题，索性就总结一下吧。</p>
<p>正常情况下，页面元素是从左到右和从上到下渲染（x、y 维度），但因为 margin 可以写负值，还有一些定位相关的 css 属性(absolute、relative、fixed、stick)，这就会导致元素之间可能重叠，重叠后就需要判断元素堆叠顺序，这就涉及到层叠上下文（Stacking context）了，相当于增加了 z 轴的维度。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/1*uGPV3qEF7yBq4PD0zua19A.png" alt="z-index"></p>
<h1 id="无新增层叠上下文的情况"><a href="#无新增层叠上下文的情况" class="headerlink" title="无新增层叠上下文的情况"></a>无新增层叠上下文的情况</h1><p>我们先抛开层叠上下文的概念，看一下没有 z-index 或者其他特殊 css 属性正常情况下元素的堆叠规则。</p>
<p>按照元素出现的顺序依次堆叠下边的元素：</p>
<ol>
<li>非定位的 block 元素，一般就是背景</li>
<li>float 元素</li>
<li>非定位的 inline 元素，一般就是文字内容</li>
<li>定位元素，即 position 设置了 relative 或者 absolute</li>
</ol>
<p>一句话总结就是同类型的后出现的覆盖先出现的，定位元素覆盖非定位元素。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">      .relative &#123;</span></span><br><span class="line"><span class="undefined">        height: 50px;</span></span><br><span class="line"><span class="undefined">        position: relative;</span></span><br><span class="line"><span class="undefined">        top: 10px;</span></span><br><span class="line"><span class="undefined">        background: rgba(0, 0, 255);</span></span><br><span class="line"><span class="undefined">        box-shadow: 0 -1px 10px rgba(0, 0, 0, 0.6);</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">      .static1 &#123;</span></span><br><span class="line"><span class="undefined">        background: rgba(255, 0, 0, 0.5);</span></span><br><span class="line"><span class="undefined">        height: 90px;</span></span><br><span class="line"><span class="undefined">        box-shadow: 0 -1px 10px rgba(0, 0, 0, 0.6);</span></span><br><span class="line"><span class="undefined">        overflow: hidden;</span></span><br><span class="line"><span class="undefined">        width: 60vw;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">      .static2 &#123;</span></span><br><span class="line"><span class="undefined">        color: red;</span></span><br><span class="line"><span class="undefined">        background: rgba(0, 255, 0);</span></span><br><span class="line"><span class="undefined">        height: 90px;</span></span><br><span class="line"><span class="undefined">        margin-top: -20px;</span></span><br><span class="line"><span class="undefined">        box-shadow: 0 -1px 10px rgba(0, 0, 0, 0.6);</span></span><br><span class="line"><span class="undefined">        overflow: hidden;</span></span><br><span class="line"><span class="undefined">        width: 80vw;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">      .float &#123;</span></span><br><span class="line"><span class="undefined">        background: rgba(255, 255, 0);</span></span><br><span class="line"><span class="undefined">        height: 100px;</span></span><br><span class="line"><span class="undefined">        margin-top: -20px;</span></span><br><span class="line"><span class="undefined">        box-shadow: 0 -1px 10px rgba(0, 0, 0, 0.6);</span></span><br><span class="line"><span class="undefined">        float: left;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"relative"</span>&gt;</span>我是 relative 元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"static1"</span>&gt;</span></span><br><span class="line">      我是 static1 元素<span class="tag">&lt;<span class="name">br</span> /&gt;</span>我是 static1 元素<span class="tag">&lt;<span class="name">br</span> /&gt;</span>我是 static1 元素<span class="tag">&lt;<span class="name">br</span> /&gt;</span>我是</span><br><span class="line">      static1 元素<span class="tag">&lt;<span class="name">br</span> /&gt;</span>我是 static1 元素<span class="tag">&lt;<span class="name">br</span> /&gt;</span>我是 static1 元素<span class="tag">&lt;<span class="name">br</span> /&gt;</span>我是</span><br><span class="line">      static1 元素<span class="tag">&lt;<span class="name">br</span> /&gt;</span>我是 static1 元素</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"static2"</span>&gt;</span></span><br><span class="line">      我是 static2 元素,margin-top 是负值<span class="tag">&lt;<span class="name">br</span> /&gt;</span>我是 static2 元素,margin-top</span><br><span class="line">      是负值<span class="tag">&lt;<span class="name">br</span> /&gt;</span>我是 static2 元素,margin-top 是负值<span class="tag">&lt;<span class="name">br</span> /&gt;</span>我是 static2</span><br><span class="line">      元素,margin-top 是负值<span class="tag">&lt;<span class="name">br</span> /&gt;</span>我是 static2 元素,margin-top 是负值<span class="tag">&lt;<span class="name">br</span> /&gt;</span>我是</span><br><span class="line">      static2 元素,margin-top 是负值</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"float"</span>&gt;</span>我是float 元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20230622121535164.png" alt="image-20230622121535164"></p>
<p>static 的背景看成 block 元素，文字看成 inline 元素。先堆叠 block 元素，再堆叠 float 元素，再堆叠 inline 元素，最后堆叠定位元素。</p>
<p>static2 的背景遮盖了 static1 的背景，但没有遮盖住 static1 的文字。</p>
<p>float 元素遮盖了 static2 的背景。</p>
<p>static2 的文字遮挡了 static1 的文字，因为 float 元素在 inline 元素之前进行了堆叠，所以 static2 的文字也遮盖了 float 的文字。</p>
<p>relative 元素最后堆叠，直接遮盖了 static1 的背景和文字。</p>
<h1 id="含有新增的层叠上下文-Stacking-context"><a href="#含有新增的层叠上下文-Stacking-context" class="headerlink" title="含有新增的层叠上下文 Stacking context"></a>含有新增的层叠上下文 Stacking context</h1><p>考虑一下有新增的层叠上下文的情况。</p>
<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>层叠上下文可以理解成一张画布，可以在上边独立地一层一层的刷染料。不同的层叠上下文就是不同的画布，他们之间互相独立。而且层叠上下文中也可以在再形成新的层叠上下文。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/stacking-context-diagram.png" alt="Diagram showing stacked rectangles conveying the three-dimensional, nested nature of stacking contexts"></p>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_positioned_layout/Understanding_z-index/Stacking_context" target="_blank" rel="noopener">如何生成新的层叠上下文</a>：</p>
<ul>
<li>Root element of the document (<code>&lt;html&gt;</code>).</li>
<li>Element with a <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/position" target="_blank" rel="noopener"><code>position</code></a> value <code>absolute</code> or <code>relative</code> and <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/z-index" target="_blank" rel="noopener"><code>z-index</code></a> value other than <code>auto</code>.</li>
<li>Element with a <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/position" target="_blank" rel="noopener"><code>position</code></a> value <code>fixed</code> or <code>sticky</code> (sticky for all mobile browsers, but not older desktop browsers).</li>
<li>Element with a <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/container-type" target="_blank" rel="noopener"><code>container-type</code></a> value <code>size</code> or <code>inline-size</code> set, intended for <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_container_queries" target="_blank" rel="noopener">container queries</a>.</li>
<li>Element that is a child of a <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_flexible_box_layout/Basic_concepts_of_flexbox" target="_blank" rel="noopener">flex</a> container, with <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/z-index" target="_blank" rel="noopener"><code>z-index</code></a> value other than <code>auto</code>.</li>
<li>Element that is a child of a <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/grid" target="_blank" rel="noopener"><code>grid</code></a> container, with <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/z-index" target="_blank" rel="noopener"><code>z-index</code></a> value other than <code>auto</code>.</li>
<li>Element with an <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/opacity" target="_blank" rel="noopener"><code>opacity</code></a> value less than <code>1</code> (See <a href="https://www.w3.org/TR/css-color-3/#transparency" target="_blank" rel="noopener">the specification for opacity</a>).</li>
<li>Element with a <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/mix-blend-mode" target="_blank" rel="noopener"><code>mix-blend-mode</code></a> value other than <code>normal</code>.</li>
<li>Element with any of the following properties with value other than <code>none</code> ：<ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/transform" target="_blank" rel="noopener"><code>transform</code></a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/filter" target="_blank" rel="noopener"><code>filter</code></a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/backdrop-filter" target="_blank" rel="noopener"><code>backdrop-filter</code></a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/perspective" target="_blank" rel="noopener"><code>perspective</code></a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/clip-path" target="_blank" rel="noopener"><code>clip-path</code></a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/mask" target="_blank" rel="noopener"><code>mask</code></a> / <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/mask-image" target="_blank" rel="noopener"><code>mask-image</code></a> / <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/mask-border" target="_blank" rel="noopener"><code>mask-border</code></a></li>
</ul>
</li>
<li>Element with an <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/isolation" target="_blank" rel="noopener"><code>isolation</code></a> value <code>isolate</code>.</li>
<li>Element with a <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/will-change" target="_blank" rel="noopener"><code>will-change</code></a> value specifying any property that would create a stacking context on non-initial value (see <a href="https://dev.opera.com/articles/css-will-change-property/" target="_blank" rel="noopener">this post</a>).</li>
<li>Element with a <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/contain" target="_blank" rel="noopener"><code>contain</code></a> value of <code>layout</code>, or <code>paint</code>, or a composite value that includes either of them (i.e. <code>contain: strict</code>, <code>contain: content</code>).</li>
</ul>
<p>总结下常用的：</p>
<p>html 元素。</p>
<p>position 为 absolute 或者 relative，并且 z-index 不是 auto。</p>
<p>position 为 fixed，<strong>无需设置 z-index 的值</strong>。</p>
<p>flex 的子项，并且 z-index 不是 auto。</p>
<p>opacity 设置为小于 1。</p>
<p>上边的这些情况都会生成一个层叠上下文，在自己的层叠上下文内进行一层一层的渲染。</p>
<h2 id="堆叠原则"><a href="#堆叠原则" class="headerlink" title="堆叠原则"></a>堆叠原则</h2><p>同一个层叠上下文内元素的堆叠就是之前讨论的无新增层叠上下文的情况（之前的情况其实就是只有一个层叠上下文，即 html 元素自己生成了一个层叠上下文）。</p>
<p>同一层叠上下文中，层叠上下文之间堆叠顺序如下：</p>
<ol>
<li>通过 z-index 加上某些条件生成的层叠上下文，并且 z-index 为负值</li>
<li>没有生成层叠上下文的元素，即之前讨论的无新增层叠上下文的情况<ol>
<li>非定位的 block 元素，一般就是背景</li>
<li>float 元素</li>
<li>非定位的 inline 元素，一般就是文字内容</li>
<li>定位元素，即 position 设置了 relative 或者 absolute，但没设置 z-index</li>
</ol>
</li>
<li>通过 z-index 加上某些条件生成的层叠上下文，并且 z-index 为 0 或者其他条件生成的层叠上下文</li>
<li>通过 z-index 加上某些条件生成的层叠上下文，并且 z-index 为正值，值越大越在上边。</li>
</ol>
<p>一个层叠上下文中可以一直嵌套的生成新的层叠上下文，如果要比较不同的层叠上下文下元素的层级关系，<strong>首先需要找到当前元素所在的层叠上下文</strong>（它所在的层叠上下文又在另一个层叠上下文之中，一直向上找，直到找到从它们共同层叠上下（比如 html 元素）中生成的那个层叠上下文），接着按照堆叠规则比较它们所在的层叠上下文关系即可。</p>
<p>看一个<a href="https://philipwalton.com/articles/what-no-one-told-you-about-z-index/" target="_blank" rel="noopener">经典的例子</a>：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">      .red,</span></span><br><span class="line"><span class="undefined">      .green,</span></span><br><span class="line"><span class="undefined">      .blue &#123;</span></span><br><span class="line"><span class="undefined">        position: absolute;</span></span><br><span class="line"><span class="undefined">        width: 100px;</span></span><br><span class="line"><span class="undefined">        color: white;</span></span><br><span class="line"><span class="undefined">        line-height: 100px;</span></span><br><span class="line"><span class="undefined">        text-align: center;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">      .red &#123;</span></span><br><span class="line"><span class="undefined">        z-index: 1;</span></span><br><span class="line"><span class="undefined">        top: 20px;</span></span><br><span class="line"><span class="undefined">        left: 20px;</span></span><br><span class="line"><span class="undefined">        background: red;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">      .green &#123;</span></span><br><span class="line"><span class="undefined">        top: 60px;</span></span><br><span class="line"><span class="undefined">        left: 60px;</span></span><br><span class="line"><span class="undefined">        background: green;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">      .blue &#123;</span></span><br><span class="line"><span class="undefined">        top: 100px;</span></span><br><span class="line"><span class="undefined">        left: 100px;</span></span><br><span class="line"><span class="undefined">        background: blue;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"red"</span>&gt;</span>Red<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"green"</span>&gt;</span>Green<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"blue"</span>&gt;</span>Blue<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>首先观察除了 html 元素有没有新的层叠上下文。</p>
<p>有一个新生成的层叠上下文：Red 因为设置了 z-index = 1，并且是 absolute 定位，所以生成了层叠上下文，Red 会高于其他元素。</p>
<p>green 和 blue 都是非定位元素，按照出现顺序，blue 覆盖 green。</p>
<p>所以从底层到上边的顺序就是绿色、蓝色、红色。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20230622130720208.png" alt="image-20230622130720208"></p>
<p>下边思考一下如果修改代码，并且在下边的限制条件下，让红色到最底层：</p>
<ul>
<li>不修改任何标签元素的名字，只增加修改 css</li>
<li>不改变任何元素的 z-index</li>
<li>不改变任何元素的 position 属性</li>
</ul>
<p>如果直接知道答案了，那层叠关系应该是学透了。</p>
<p>答案就是给 div 加一个透明度：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0.99</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20230622131314901.png" alt="image-20230622131314901"></p>
<p>我们重新分析一下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">      <span class="selector-class">.red</span>,</span></span><br><span class="line"><span class="css">      <span class="selector-class">.green</span>,</span></span><br><span class="line"><span class="css">      <span class="selector-class">.blue</span> &#123;</span></span><br><span class="line"><span class="undefined">        position: absolute;</span></span><br><span class="line"><span class="undefined">        width: 100px;</span></span><br><span class="line"><span class="undefined">        color: white;</span></span><br><span class="line"><span class="undefined">        line-height: 100px;</span></span><br><span class="line"><span class="undefined">        text-align: center;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">      <span class="selector-class">.red</span> &#123;</span></span><br><span class="line"><span class="undefined">        z-index: 1;</span></span><br><span class="line"><span class="undefined">        top: 20px;</span></span><br><span class="line"><span class="undefined">        left: 20px;</span></span><br><span class="line"><span class="undefined">        background: red;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">      <span class="selector-class">.green</span> &#123;</span></span><br><span class="line"><span class="undefined">        top: 60px;</span></span><br><span class="line"><span class="undefined">        left: 60px;</span></span><br><span class="line"><span class="undefined">        background: green;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">      <span class="selector-class">.blue</span> &#123;</span></span><br><span class="line"><span class="undefined">        top: 100px;</span></span><br><span class="line"><span class="undefined">        left: 100px;</span></span><br><span class="line"><span class="undefined">        background: blue;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">      div &#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">opacity</span>: 0<span class="selector-class">.99</span>;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"red"</span>&gt;</span>Red<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"green"</span>&gt;</span>Green<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"blue"</span>&gt;</span>Blue<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>现在相当于有五个层叠上下文：</p>
<p>html(初始的一个层叠上下文)</p>
<ul>
<li>div(通过 opacity 生成)<ul>
<li>red(通过 absolute + z-index 生成)</li>
</ul>
</li>
<li>div(通过 opacity 生成)</li>
<li>div(通过 opacity 生成)</li>
</ul>
<p>比较 Red、Green、Blue 的层叠顺序，就是比较三者所在的层叠上下文，即各自所在的 div，三个 div 都是通过 opacity 生成的层叠上下文，所以它们层叠顺序就是出现的顺序，从底部到顶层就是 Red、Green、Blue。</p>
<p>即使 Green 和 Blue 本身没有生成层叠上下文，但因为它们所在的父元素的层叠上下文比较高，所以就把 Red 覆盖了。</p>
<p>再举个例子，因为比较的是所在的层叠上下文的顺序，因此平常开发中会遇到设置 z-index = 999（同时是定位元素了），也无法到最上层。原因就是它所在的层叠上下文比较低，类似于下边的情况。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20230622140148429.png" alt="image-20230622140148429" style="zoom:50%;"></p>
<p>还有一个神奇的现象：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">      <span class="selector-class">.my-element</span> &#123;</span></span><br><span class="line"><span class="undefined">        background: rgb(232 240 254 / 0.5);</span></span><br><span class="line"><span class="undefined">        border: 1px solid lightblue;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        width: 250px;</span></span><br><span class="line"><span class="undefined">        height: 250px;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">      <span class="selector-class">.my-element</span> <span class="selector-class">.child</span> &#123;</span></span><br><span class="line"><span class="undefined">        position: relative;</span></span><br><span class="line"><span class="undefined">        z-index: -1;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        background: pink;</span></span><br><span class="line"><span class="undefined">        border: 1px solid hotpink;</span></span><br><span class="line"><span class="undefined">        padding: 1rem;</span></span><br><span class="line"><span class="undefined">        width: 275px;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"my-element"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child"</span>&gt;</span>I am behind my parent<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>回忆下之前说的堆叠顺序：</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20230622155424571.png" alt="image-20230622155424571"></p>
<p>因为父元素和子元素都在同一个层叠上下文下，所以会先堆叠 z-index 为负值的元素，所以就形成了子元素穿越到父元素下边的情况。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20230622140741157.png" alt="image-20230622140741157"></p>
<p>如果我们让父元素也生成一个层叠上下文，上边的情况就不会发生了：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.my-element</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgb</span>(232 240 254 / 0.5);</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid lightblue;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">width</span>: <span class="number">250px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">250px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20230622141026125.png" alt="image-20230622141026125"></p>
<p>当父元素加了层叠上下文之后，父元素和子元素就不在同一层叠上下文中了。</p>
<p>父元素在根元素上。</p>
<p>子元素在父元素上。</p>
<h1 id="堆叠顺序判断"><a href="#堆叠顺序判断" class="headerlink" title="堆叠顺序判断"></a>堆叠顺序判断</h1><p>总结一下：</p>
<p>判断元素之间的堆叠顺序，首先判断是否在同一层叠上下文中。</p>
<p>如果在同一堆叠上下文，就按照下边的顺序：</p>
<ol>
<li>非定位的 block 元素，一般就是背景</li>
<li>float 元素</li>
<li>非定位的 inline 元素，一般就是文字内容</li>
<li>定位元素，即 position 设置了 relative 或者 absolute</li>
</ol>
<p>如果不在同一堆叠上下文，就找到元素所在的层叠上下文，并且要一直往上找层叠上下文，直到找到从它们共同层叠上下生成的那个层叠上下文：</p>
<p>按照下边的规则判断层叠上下文的顺序，层叠上下文的顺序就是要比较元素的堆叠顺序了：</p>
<ol>
<li>通过 z-index 加上某些条件生成的层叠上下文，并且 z-index 为负值</li>
<li>没有生成层叠上下文的元素，即之前讨论的无新增层叠上下文的情况<ol>
<li>非定位的 block 元素，一般就是背景</li>
<li>float 元素</li>
<li>非定位的 inline 元素，一般就是文字内容</li>
<li>定位元素，即 position 设置了 relative 或者 absolute，但没设置 z-index</li>
</ol>
</li>
<li>通过 z-index 加上某些条件生成的层叠上下文，并且 z-index 为 0 或者其他条件生成的层叠上下文</li>
<li>通过 z-index 加上某些条件生成的层叠上下文，并且 z-index 为正值，值越大越在上边。</li>
</ol>
<h1 id="实践经验"><a href="#实践经验" class="headerlink" title="实践经验"></a>实践经验</h1><p><strong>能不设置 z-index 就不要去设置</strong>，设置请三思。</p>
<h2 id="定位元素天生高于普通元素"><a href="#定位元素天生高于普通元素" class="headerlink" title="定位元素天生高于普通元素"></a>定位元素天生高于普通元素</h2><p>设置了 relative 或者 absolute 的元素会高于其他元素，因此这种情况下完全可以不设置 z-index，如果设置了 z-index 就会生成新的层叠上下文，可能会造成堆叠的混乱。</p>
<p>另外因为设置了 fixed 即使不设置 z-index 也会生成一个层叠上下文，因此 fixed 元素会高于其他所有的普通元素（定位元素和非定位元素）。但如果页面中有定位元素设置了正的 z-index，就不得不给 fixed 元素加一个更大 z-index 了。</p>
<h2 id="子元素层级受到父层叠上下文的影响"><a href="#子元素层级受到父层叠上下文的影响" class="headerlink" title="子元素层级受到父层叠上下文的影响"></a>子元素层级受到父层叠上下文的影响</h2><p>当设置了一个 z-index 产生了层叠上下文后，需要考虑当前元素会不会成为别的元素的父元素，如果在多人合作中经常互相改代码或者引用组件，如果某个地方产生了层叠上下文，那子元素的层级就会受到该父元素的影响从而导致达不到想要的层级。</p>
<p>比如将一个弹窗组件放到了一个父元素中，父元素有层叠上下文，这样就会导致弹窗组件达不到自己想要的高度。</p>
<h1 id="z-index-管理思考"><a href="#z-index-管理思考" class="headerlink" title="z-index 管理思考"></a>z-index 管理思考</h1><p>团队中一个项目过大之后，层级问题真的是防不胜防，也许可以做下边的事情来降低问题的发生：</p>
<h2 id="宣导"><a href="#宣导" class="headerlink" title="宣导"></a>宣导</h2><p>因为层级和 z-index 的问题可能没详细去了解过，边开发边调试最后达到效果就好。所以最好可以先宣导一下，把层级的问题团队内完全对齐，降低问题的发生。</p>
<h2 id="开发前"><a href="#开发前" class="headerlink" title="开发前"></a>开发前</h2><p>设计一套体系来管理 z-index。</p>
<p>常规的做法就是将所有的 z-index 定义为变量统一管理，并且规定范围，普通元素 1 - 100，弹窗 101 - 999 类似这样。</p>
<p>当有页面需要 z-index 时就去注册，命名的时候可以按页面、按组件范围进行区分，这样未来想知道某个页面有哪些 z-index 可以一目了然。</p>
<h2 id="开发中"><a href="#开发中" class="headerlink" title="开发中"></a>开发中</h2><p>规则有了，但不遵守没啥用。</p>
<p>需要在 commit 以及打包流水线中进行强制卡控，如果发现 z-index 使用了数字就禁止提交 commit，如果强制用 -n 提交了，就在流水线中禁止打包。</p>
<h2 id="老项目"><a href="#老项目" class="headerlink" title="老项目"></a>老项目</h2><p>对于老项目去推动上边的流程真的太难了，把所有的 z-index 去重新定义变量，对于大项目来说修改、回归工作量会很大很大，因此基本无望。</p>
<p>可以做点工具来尽量避免出现层级的问题：</p>
<p>比如页面的层叠上下文进行静态扫描，可以把层叠上下文的关系展示出来，这样如果需要新加层叠上下文，可以直观的知道会不会影响到别人。</p>
<p>再进一步，如果有全套的 Mock 数据，可以模拟出来所有层叠上下文都渲染时候，真实页面长什么样子，会更加直观。</p>
<h2 id="ps"><a href="#ps" class="headerlink" title="ps"></a>ps</h2><p>以上思考都是理想情况下可以做的事情，现实状况可能会遇到小团队没必要推，大团队推不动的情况，哈哈。</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>babel源码详解-v1.7.8</title>
    <url>/2021/09/26/babel-v1-7-8%E5%81%9A%E4%BA%86%E4%BB%80%E4%B9%88/</url>
    <content><![CDATA[<p>继续打开 <code>github</code> 看一下最初的版本的 <code>babel</code> 是怎么实现的，了解它的基本原理。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/babel1.jpg" style="width:80%;"></p>
<p><code>git clone git@github.com:babel/babel.git</code> 并且 <code>git checkout v1.7.7</code> ，<code>npm i</code> 安装一下相应的 <code>node</code> 包。其实还可以找到更早的 <code>tag</code> ，但由于之前的一些依赖包现在已经下载不下来了，程序跑不起来不好调试所以就没用了。</p>
<p>看一下 <code>package.json</code>。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"6to5"</span>,</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">"Turn ES6 code into vanilla ES5 with source maps and no runtime"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"1.7.7"</span>,</span><br><span class="line">  <span class="attr">"author"</span>: <span class="string">"Sebastian McKenzie &lt;sebmck@gmail.com&gt;"</span>,</span><br><span class="line">  <span class="attr">"homepage"</span>: <span class="string">"https://github.com/sebmck/6to5"</span>,</span><br><span class="line">  <span class="attr">"repository"</span>: &#123;</span><br><span class="line">    <span class="attr">"type"</span>: <span class="string">"git"</span>,</span><br><span class="line">    <span class="attr">"url"</span>: <span class="string">"https://github.com/sebmck/6to5.git"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"bugs"</span>: &#123;</span><br><span class="line">    <span class="attr">"url"</span>: <span class="string">"https://github.com/sebmck/6to5/issues"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"preferGlobal"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"main"</span>: <span class="string">"lib/6to5/node.js"</span>,</span><br><span class="line">  <span class="attr">"bin"</span>: &#123;</span><br><span class="line">    <span class="attr">"6to5"</span>: <span class="string">"./bin/6to5"</span>,</span><br><span class="line">    <span class="attr">"6to5-node"</span>: <span class="string">"./bin/6to5-node"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"keywords"</span>: [</span><br><span class="line">    <span class="string">"es6-transpiler"</span>,</span><br><span class="line">    <span class="string">"scope"</span>,</span><br><span class="line">    <span class="string">"harmony"</span>,</span><br><span class="line">    <span class="string">"blockscope"</span>,</span><br><span class="line">    <span class="string">"block-scope"</span>,</span><br><span class="line">    <span class="string">"let"</span>,</span><br><span class="line">    <span class="string">"const"</span>,</span><br><span class="line">    <span class="string">"var"</span>,</span><br><span class="line">    <span class="string">"es6"</span>,</span><br><span class="line">    <span class="string">"transpile"</span>,</span><br><span class="line">    <span class="string">"transpiler"</span>,</span><br><span class="line">    <span class="string">"traceur"</span>,</span><br><span class="line">    <span class="string">"6to5"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"bench"</span>: <span class="string">"make bench"</span>,</span><br><span class="line">    <span class="attr">"test"</span>: <span class="string">"make test"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"dependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"ast-types"</span>: <span class="string">"0.5.0"</span>,</span><br><span class="line">    <span class="attr">"commander"</span>: <span class="string">"2.3.0"</span>,</span><br><span class="line">    <span class="attr">"fs-readdir-recursive"</span>: <span class="string">"0.0.2"</span>,</span><br><span class="line">    <span class="attr">"lodash"</span>: <span class="string">"2.4.1"</span>,</span><br><span class="line">    <span class="attr">"mkdirp"</span>: <span class="string">"0.5.0"</span>,</span><br><span class="line">    <span class="attr">"es6-shim"</span>: <span class="string">"0.18.0"</span>,</span><br><span class="line">    <span class="attr">"es6-symbol"</span>: <span class="string">"0.1.1"</span>,</span><br><span class="line">    <span class="attr">"regexpu"</span>: <span class="string">"0.2.2"</span>,</span><br><span class="line">    <span class="attr">"recast"</span>: <span class="string">"0.8.0"</span>,</span><br><span class="line">    <span class="attr">"source-map"</span>: <span class="string">"0.1.40"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"devDependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"es6-transpiler"</span>: <span class="string">"0.7.17"</span>,</span><br><span class="line">    <span class="attr">"istanbul"</span>: <span class="string">"0.3.2"</span>,</span><br><span class="line">    <span class="attr">"matcha"</span>: <span class="string">"0.5.0"</span>,</span><br><span class="line">    <span class="attr">"mocha"</span>: <span class="string">"1.21.4"</span>,</span><br><span class="line">    <span class="attr">"traceur"</span>: <span class="string">"0.0.66"</span>,</span><br><span class="line">    <span class="attr">"esnext"</span>: <span class="string">"0.11.1"</span>,</span><br><span class="line">    <span class="attr">"es6now"</span>: <span class="string">"0.8.11"</span>,</span><br><span class="line">    <span class="attr">"jstransform"</span>: <span class="string">"6.3.2"</span>,</span><br><span class="line">    <span class="attr">"uglify-js"</span>: <span class="string">"2.4.15"</span>,</span><br><span class="line">    <span class="attr">"browserify"</span>: <span class="string">"6.0.3"</span>,</span><br><span class="line">    <span class="attr">"proclaim"</span>: <span class="string">"2.0.0"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当时的名字还叫 <code>6to5</code> ，依赖的包很多，就不能像 <a href="https://mp.weixin.qq.com/s/zaIx2CWf_z_Hwwiuw6qZVw" target="_blank" rel="noopener">eslint-v0.0.2做了什么</a> 那样一个一个包讲了，这里只记录一下主流程依赖的一些包。</p>
<h1 id="运行调试"><a href="#运行调试" class="headerlink" title="运行调试"></a>运行调试</h1><p>我们可以写一个简单的 <code>input.js</code> 然后试一下。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// input.js</span></span><br><span class="line"><span class="keyword">const</span> data = <span class="string">"test"</span>;</span><br></pre></td></tr></table></figure>
<p>执行一下 <code>./bin/6to5 -h</code> 看一下帮助。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Usage: 6to5 [options] &lt;files ...&gt;</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line"></span><br><span class="line">  -h, --<span class="built_in">help</span>                   output usage information</span><br><span class="line">  -t, --<span class="built_in">source</span>-maps-inline     Append sourceMappingURL comment to bottom of code</span><br><span class="line">  -s, --<span class="built_in">source</span>-maps            Save <span class="built_in">source</span> map alongside the compiled code when using --out-file and --out-dir flags</span><br><span class="line">  -w, --whitelist [whitelist]  Whitelist</span><br><span class="line">  -b, --blacklist [blacklist]  Blacklist</span><br><span class="line">  -o, --out-file [out]         Compile all input files into a single file</span><br><span class="line">  -d, --out-dir [out]          Compile an input directory of modules into an output directory</span><br><span class="line">  -V, --version                output the version number</span><br></pre></td></tr></table></figure>
<p><code>-o</code> 是指定输出的文件，测试一下，<code>./bin/6to5 -o output.js input.js</code> 。然后就得到了 <code>output.js</code>。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//output.js</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> data = <span class="string">"a"</span>;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>
<p>帮我们把 <code>const</code> 换成了 <code>var</code>，同时通过自执行函数包了一层作用域。</p>
<p>在 <code>Vscode</code> 新建一个 <code>launch.json</code> ，选择 <code>Node.js</code> 。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/babel4.jpg" style="width:80%;"></p>
<p>把默认生成的 <code>program</code> 字段去掉，加上 <code>args</code> 。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">// Use IntelliSense to learn about possible attributes.</span></span><br><span class="line">  <span class="comment">// Hover to view descriptions of existing attributes.</span></span><br><span class="line">  <span class="comment">// For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387</span></span><br><span class="line">  <span class="string">"version"</span>: <span class="string">"0.2.0"</span>,</span><br><span class="line">  <span class="string">"configurations"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"type"</span>: <span class="string">"pwa-node"</span>,</span><br><span class="line">      <span class="string">"request"</span>: <span class="string">"launch"</span>,</span><br><span class="line">      <span class="string">"name"</span>: <span class="string">"debug Program"</span>,</span><br><span class="line">      <span class="string">"skipFiles"</span>: [<span class="string">"&lt;node_internals&gt;/**"</span>],</span><br><span class="line">      <span class="string">"runtimeExecutable"</span>: <span class="string">"node"</span>,</span><br><span class="line">      <span class="string">"args"</span>: [<span class="string">"./bin/6to5"</span>, <span class="string">"-o"</span>, <span class="string">"output.js"</span>, <span class="string">"input.js"</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>添加相应的断点，然后 <code>F5</code> 就可以愉快的调试了。</p>
<p>命令行框架用的是 <code>commander</code> ，<a href="https://github.com/tj/commander.js/blob/master/Readme_zh-CN.md" target="_blank" rel="noopener">github</a> 有超详细的使用方法，这里就不再说了，下边介绍 <code>babel</code> 相关的主要原理。</p>
<h1 id="主要原理"><a href="#主要原理" class="headerlink" title="主要原理"></a>主要原理</h1><p>通过不断的运行调试，渐渐了解了主流程，但直到看到尤大推荐的这个 <code>mini</code> 编译器才对整个框架有了更深的了解。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/babel3.jpg" style="width:80%;"></p>
<p>强烈推荐先过去 <a href="https://github.com/jamiebuilds/the-super-tiny-compiler" target="_blank" rel="noopener">看一下</a>，对 <code>babel</code> 可以有一个更直接的了解。</p>
<p><code>babel</code> 本质上还是对 <code>AST</code> 的操控，可以认为是一个编译器了，只不过是 <code>js</code> 到 <code>js</code> 的转换。</p>
<p>一个编译器主要是三个步骤，解析（词法分析、语法分析）-&gt; 转换 -&gt; 生成目标代码。</p>
<p>第一步「解析」就是去生成一个 <code>AST</code>，主要分两步。</p>
<ul>
<li><p>词法分析，分词</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">对于 <span class="keyword">const</span> data = <span class="string">"test"</span>; 经过分词就是下边的结果</span><br><span class="line">[</span><br><span class="line">  &#123; <span class="attr">type</span>: <span class="string">'Keyword'</span>, <span class="attr">value</span>: <span class="string">'const'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">type</span>: <span class="string">'Identifier'</span>, <span class="attr">value</span>: <span class="string">'data'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">type</span>: <span class="string">'Punctuator'</span>, <span class="attr">value</span>: <span class="string">'='</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">type</span>: <span class="string">'String'</span>, <span class="attr">value</span>: <span class="string">'"test"'</span> &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
</li>
<li><p>语法分析，生成抽象语法树<code>(AST)</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">通过上边分词，然后就可以生成一个 AST 树</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"type"</span>: <span class="string">"Program"</span>,</span><br><span class="line">  <span class="string">"body"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"type"</span>: <span class="string">"VariableDeclaration"</span>,</span><br><span class="line">      <span class="string">"declarations"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">"type"</span>: <span class="string">"VariableDeclarator"</span>,</span><br><span class="line">          <span class="string">"id"</span>: &#123;</span><br><span class="line">            <span class="string">"type"</span>: <span class="string">"Identifier"</span>,</span><br><span class="line">            <span class="string">"name"</span>: <span class="string">"data"</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="string">"init"</span>: &#123;</span><br><span class="line">            <span class="string">"type"</span>: <span class="string">"Literal"</span>,</span><br><span class="line">            <span class="string">"value"</span>: <span class="string">"test"</span>,</span><br><span class="line">            <span class="string">"raw"</span>: <span class="string">"\"test\""</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      <span class="string">"kind"</span>: <span class="string">"const"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>第二步「转换」就是基于上边的 <code>AST</code> 再进行增删改，或者基于它生成一个新的 <code>AST</code>。</p>
<p>第三步「生成目标代码」就是基于新的 <code>AST</code> 来构建新的代码即可。</p>
<p>对于 <code>Babel</code> 的话，第一步是直接使用了 <code>recast</code> 包的 <code>parse</code> 方法，传入源码可以直接帮我们返回一个 <code>AST</code> 树。</p>
<p>第三步也可以直接使用 <code>recast</code> 包的 <code>print</code> 方法，传入 <code>AST</code> 树返回源码。</p>
<p>所以 <code>babel</code> 的核心就在于第二步，通过遍历旧的 <code>AST</code> 树来生成一个新的 <code>AST</code> 树。</p>
<h1 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h1><p>核心方法就是 <code>lib/6to5/traverse/index.js</code> 中的 <code>traverse</code> 方法了，比较典型的深度优先遍历，遍历过程中根据传入的 <code>callbacks</code> 来更改 <code>node</code> 节点。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> traverse = <span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params">parent, callbacks, blacklistTypes</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!parent) <span class="keyword">return</span>;</span><br><span class="line">	</span><br><span class="line">  <span class="comment">// 当前节点是数组，分别遍历进入递归</span></span><br><span class="line">  <span class="keyword">if</span> (_.isArray(parent)) &#123;</span><br><span class="line">    _.each(parent, <span class="function"><span class="keyword">function</span> (<span class="params">node</span>) </span>&#123;</span><br><span class="line">      traverse(node, callbacks, blacklistTypes);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 拿到当前节点的 key 值，后边还会提到</span></span><br><span class="line">  <span class="keyword">var</span> keys = VISITOR_KEYS[parent.type] || [];</span><br><span class="line">  blacklistTypes = blacklistTypes || [];</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 为了统一，如果传进来的 callbacks 是函数，将其转换为对象，后边还会提到</span></span><br><span class="line">  <span class="keyword">if</span> (_.isFunction(callbacks)) &#123;</span><br><span class="line">    callbacks = &#123; <span class="attr">enter</span>: callbacks &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 遍历当前节点的每一个 key</span></span><br><span class="line">  _.each(keys, <span class="function"><span class="keyword">function</span> (<span class="params">key</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> nodes = parent[key];</span><br><span class="line">    <span class="keyword">if</span> (!nodes) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果当前节点是数组就分别处理</span></span><br><span class="line">    <span class="keyword">if</span> (_.isArray(nodes)) &#123;</span><br><span class="line">      _.each(nodes, <span class="function"><span class="keyword">function</span> (<span class="params">node, i</span>) </span>&#123;</span><br><span class="line">        handle(nodes, i);</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// remove deleted nodes</span></span><br><span class="line">      parent[key] = _.flatten(parent[key]).filter(<span class="function"><span class="keyword">function</span> (<span class="params">node</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> node !== traverse.Delete;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      handle(parent, key);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (parent[key] === traverse.Delete) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"trying to delete property "</span> + key + <span class="string">" from "</span> +</span><br><span class="line">                        parent.type + <span class="string">" but can't because it's required"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p> <code>VISITOR_KEYS</code> 其实就是枚举了所有的要处理的 <code>node</code> 节点的 <code>key</code> 值。</p>
<p>比如上边举的 <code>const data = &quot;test&quot;;</code> 的例子，它对应的 <code>node</code> 节点就是：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"type"</span>: <span class="string">"VariableDeclaration"</span>,</span><br><span class="line">    <span class="string">"declarations"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">"type"</span>: <span class="string">"VariableDeclarator"</span>,</span><br><span class="line">        <span class="string">"id"</span>: &#123;</span><br><span class="line">          <span class="string">"type"</span>: <span class="string">"Identifier"</span>,</span><br><span class="line">          <span class="string">"name"</span>: <span class="string">"data"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"init"</span>: &#123;</span><br><span class="line">          <span class="string">"type"</span>: <span class="string">"Literal"</span>,</span><br><span class="line">          <span class="string">"value"</span>: <span class="string">"test"</span>,</span><br><span class="line">          <span class="string">"raw"</span>: <span class="string">"\"test\""</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"kind"</span>: <span class="string">"const"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们所要遍历的就是「包含  <code>type</code> 的对象」，比如上边的 </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"type"</span>: <span class="string">"VariableDeclarator"</span>,</span><br><span class="line">  <span class="string">"id"</span>: &#123;</span><br><span class="line">      <span class="string">"type"</span>: <span class="string">"Identifier"</span>,</span><br><span class="line">      <span class="string">"name"</span>: <span class="string">"data"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"init"</span>: &#123;</span><br><span class="line">       <span class="string">"type"</span>: <span class="string">"Literal"</span>,</span><br><span class="line">       <span class="string">"value"</span>: <span class="string">"test"</span>,</span><br><span class="line">       <span class="string">"raw"</span>: <span class="string">"\"test\""</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>所以对于 <code>VariableDeclaration</code> 节点，它可以枚举的 <code>key</code> 就是 <code>[&#39;declarations&#39;]</code>，它包含了 <code>VariableDeclarator</code> 节点。</p>
<p>同理，对于 <code>VariableDeclarator</code> 节点，它可以枚举的 <code>key</code> 就是 <code>[&#39;id&#39;, &#39;init&#39;]</code>。</p>
<p><code>VISITOR_KEYS</code>  就是一个大对象，<code>key</code> 就是 <code>node</code> 节点的 <code>type</code>，<code>value</code> 就是可以通过枚举得到 <code>node</code> 节点的所有 <code>key</code> 。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"ArrayExpression"</span>:               [<span class="string">"elements"</span>],</span><br><span class="line">  <span class="string">"ArrayPattern"</span>:                  [<span class="string">"elements"</span>],</span><br><span class="line">  <span class="string">"ArrowFunctionExpression"</span>:       [<span class="string">"params"</span>, <span class="string">"defaults"</span>, <span class="string">"rest"</span>, <span class="string">"body"</span>],</span><br><span class="line">  <span class="string">"AssignmentExpression"</span>:          [<span class="string">"left"</span>, <span class="string">"right"</span>],</span><br><span class="line">  <span class="string">"AwaitExpression"</span>:               [<span class="string">"argument"</span>],</span><br><span class="line">  <span class="string">"BinaryExpression"</span>:              [<span class="string">"left"</span>, <span class="string">"right"</span>],</span><br><span class="line">  <span class="string">"BlockStatement"</span>:                [<span class="string">"body"</span>],</span><br><span class="line">  <span class="string">"BreakStatement"</span>:                [<span class="string">"label"</span>],</span><br><span class="line">  <span class="string">"CallExpression"</span>:                [<span class="string">"callee"</span>, <span class="string">"arguments"</span>],</span><br><span class="line">  <span class="string">"CatchClause"</span>:                   [<span class="string">"param"</span>, <span class="string">"body"</span>],</span><br><span class="line">  <span class="string">"ClassBody"</span>:                     [<span class="string">"body"</span>],</span><br><span class="line">  <span class="string">"ClassDeclaration"</span>:              [<span class="string">"id"</span>, <span class="string">"body"</span>, <span class="string">"superClass"</span>],</span><br><span class="line">  <span class="string">"ClassExpression"</span>:               [<span class="string">"id"</span>, <span class="string">"body"</span>, <span class="string">"superClass"</span>],</span><br><span class="line">  <span class="string">"ClassProperty"</span>:                 [<span class="string">"key"</span>, <span class="string">"value"</span>],</span><br><span class="line">  <span class="string">"ComprehensionBlock"</span>:            [<span class="string">"left"</span>, <span class="string">"right"</span>, <span class="string">"body"</span>],</span><br><span class="line">  <span class="string">"ComprehensionExpression"</span>:       [<span class="string">"filter"</span>, <span class="string">"blocks"</span>, <span class="string">"body"</span>],</span><br><span class="line">  <span class="string">"ConditionalExpression"</span>:         [<span class="string">"test"</span>, <span class="string">"consequent"</span>, <span class="string">"alternate"</span>],</span><br><span class="line">  <span class="string">"ContinueStatement"</span>:             [<span class="string">"label"</span>],</span><br><span class="line">  <span class="string">"DebuggerStatement"</span>:             [],</span><br><span class="line">  <span class="string">"DoWhileStatement"</span>:              [<span class="string">"body"</span>, <span class="string">"test"</span>],</span><br><span class="line">  <span class="string">"EmptyStatement"</span>:                [],</span><br><span class="line">  ...</span><br><span class="line">  <span class="string">"VariableDeclaration"</span>:           [<span class="string">"declarations"</span>],</span><br><span class="line">  <span class="string">"VariableDeclarator"</span>:            [<span class="string">"id"</span>, <span class="string">"init"</span>],</span><br><span class="line">  <span class="string">"VoidTypeAnnotation"</span>:            [],</span><br><span class="line">  <span class="string">"WhileStatement"</span>:                [<span class="string">"test"</span>, <span class="string">"body"</span>],</span><br><span class="line">  <span class="string">"WithStatement"</span>:                 [<span class="string">"object"</span>, <span class="string">"body"</span>],</span><br><span class="line">  <span class="string">"YieldExpression"</span>:               [<span class="string">"argument"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>遍历过程中对于每个 <code>node</code> 节点都会执行 <code>handle</code> 函数，<code>callback</code> 是传入的回调函数，包含 <code>enter</code> 方法和 <code>exit</code> 方法。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  enter: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;,</span><br><span class="line">  exit: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>用 <code>enter</code> 返回的节点替换当前节点，所有子节点遍历完成后再调用 <code>exit</code> 方法。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> handle = <span class="function"><span class="keyword">function</span> (<span class="params">obj, key</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> node = obj[key];</span><br><span class="line">  <span class="keyword">if</span> (!node) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// type is blacklisted</span></span><br><span class="line">  <span class="keyword">if</span> (blacklistTypes.indexOf(node.type) &gt;= <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// enter</span></span><br><span class="line">  <span class="keyword">var</span> result = callbacks.enter(node, parent, obj, key);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// stop iteration</span></span><br><span class="line">  <span class="keyword">if</span> (result === <span class="literal">false</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// replace node</span></span><br><span class="line">  <span class="keyword">if</span> (result != <span class="literal">null</span>) node = obj[key] = result;</span><br><span class="line"></span><br><span class="line">  traverse(node, callbacks, blacklistTypes);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// exit</span></span><br><span class="line">  <span class="keyword">if</span> (callbacks.exit) callbacks.exit(node, parent, obj, key);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h1 id="回调函数和模版"><a href="#回调函数和模版" class="headerlink" title="回调函数和模版"></a>回调函数和模版</h1><p><code>babel</code> 定义了不同 <code>transform</code> 来作为回调函数，返回处理后的 <code>node</code> 节点。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">transformers</span><br><span class="line">├── array-comprehension.js</span><br><span class="line">├── arrow-functions.js</span><br><span class="line">├── block-binding.js</span><br><span class="line">├── classes.js</span><br><span class="line">├── computed-property-names.js</span><br><span class="line">├── constants.js</span><br><span class="line">├── <span class="keyword">default</span>-parameters.js</span><br><span class="line">├── destructuring.js</span><br><span class="line">├── <span class="keyword">for</span>-<span class="keyword">of</span>.js</span><br><span class="line">├── generators.js</span><br><span class="line">├── modules.js</span><br><span class="line">├── property-method-assignment.js</span><br><span class="line">├── property-name-shorthand.js</span><br><span class="line">├── rest-parameters.js</span><br><span class="line">├── spread.js</span><br><span class="line">├── template-literals.js</span><br><span class="line">└── unicode-regex.js</span><br></pre></td></tr></table></figure>
<p>可以看一下 <code>block-binding</code> 的实现，主要作用就是在定义 <code>var</code> 变量的地方包一层自执行函数，也就是文章最开头写的测试例子。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//output.js</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> data = <span class="string">"a"</span>;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>
<p><code>block-binding.js</code> 中的核心方法是 <code>buildNode</code> 。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> buildNode = <span class="function"><span class="keyword">function</span> (<span class="params">node</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> nodes = [];</span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 包装所需要的 node 节点</span></span><br><span class="line">  <span class="keyword">var</span> block = b.blockStatement([]);</span><br><span class="line">  block.body = node;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> func = b.functionExpression(<span class="literal">null</span>, [], block, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> templateName = <span class="string">"function-call"</span>;</span><br><span class="line">  <span class="keyword">if</span> (traverse.hasType(node, <span class="string">"ThisExpression"</span>)) templateName += <span class="string">"-this"</span>;</span><br><span class="line">  <span class="keyword">if</span> (traverse.hasType(node, <span class="string">"ReturnStatement"</span>, [<span class="string">"FunctionDeclaration"</span>, <span class="string">"FunctionExpression"</span>])) templateName += <span class="string">"-return"</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 将模版中的节点替换为上边生成的节点</span></span><br><span class="line">  nodes.push(util.template(templateName, &#123;</span><br><span class="line">    FUNCTION: func</span><br><span class="line">  &#125;, <span class="literal">true</span>));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    node: nodes,</span><br><span class="line">    body: block</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>其中 <code>b</code> 是 <code>var b = require(&quot;ast-types&quot;).builders;</code> ，可以得到各种类型的 <code>ast</code> 节点。<code>util.template</code> 方法可以通过预先写的一些模版，将模版的某一块用传入的节点替换。</p>
<p>模版的话都写在了 <code>templates</code> 文件夹下。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">templates</span><br><span class="line">├── <span class="built_in">arguments</span>-slice-assign-arg.js</span><br><span class="line">├── <span class="built_in">arguments</span>-slice-assign.js</span><br><span class="line">├── <span class="built_in">arguments</span>-slice.js</span><br><span class="line">├── array-comprehension-container.js</span><br><span class="line">├── array-comprehension-filter.js</span><br><span class="line">├── array-comprehension-<span class="keyword">for</span>-each.js</span><br><span class="line">├── array-comprehension-map.js</span><br><span class="line">├── array-concat.js</span><br><span class="line">├── array-push.js</span><br><span class="line">├── assign.js</span><br><span class="line">├── <span class="class"><span class="keyword">class</span>-<span class="title">inherits</span>-<span class="title">properties</span>.<span class="title">js</span></span></span><br><span class="line"><span class="class">├── <span class="title">class</span>-<span class="title">inherits</span>-<span class="title">prototype</span>.<span class="title">js</span></span></span><br><span class="line"><span class="class">├── <span class="title">class</span>-<span class="title">method</span>.<span class="title">js</span></span></span><br><span class="line"><span class="class">├── <span class="title">class</span>-<span class="title">statement</span>-<span class="title">container</span>.<span class="title">js</span></span></span><br><span class="line"><span class="class">├── <span class="title">class</span>-<span class="title">static</span>-<span class="title">method</span>.<span class="title">js</span></span></span><br><span class="line"><span class="class">├── <span class="title">class</span>-<span class="title">super</span>-<span class="title">constructor</span>-<span class="title">call</span>.<span class="title">js</span></span></span><br><span class="line"><span class="class">├── <span class="title">class</span>.<span class="title">js</span></span></span><br><span class="line"><span class="class">├── <span class="title">exports</span>-<span class="title">alias</span>-<span class="title">var</span>.<span class="title">js</span></span></span><br><span class="line"><span class="class">├── <span class="title">exports</span>-<span class="title">assign</span>.<span class="title">js</span></span></span><br><span class="line"><span class="class">├── <span class="title">exports</span>-<span class="title">default</span>-<span class="title">require</span>-<span class="title">key</span>.<span class="title">js</span></span></span><br><span class="line"><span class="class">├── <span class="title">exports</span>-<span class="title">default</span>-<span class="title">require</span>.<span class="title">js</span></span></span><br><span class="line"><span class="class">├── <span class="title">exports</span>-<span class="title">default</span>.<span class="title">js</span></span></span><br><span class="line"><span class="class">├── <span class="title">exports</span>-<span class="title">require</span>-<span class="title">assign</span>-<span class="title">key</span>.<span class="title">js</span></span></span><br><span class="line"><span class="class">├── <span class="title">exports</span>-<span class="title">require</span>-<span class="title">assign</span>.<span class="title">js</span></span></span><br><span class="line"><span class="class">├── <span class="title">exports</span>-<span class="title">wildcard</span>.<span class="title">js</span></span></span><br><span class="line"><span class="class">├── <span class="title">for</span>-<span class="title">of</span>.<span class="title">js</span></span></span><br><span class="line"><span class="class">├── <span class="title">function</span>-<span class="title">bind</span>-<span class="title">this</span>.<span class="title">js</span></span></span><br><span class="line"><span class="class">├── <span class="title">function</span>-<span class="title">call</span>-<span class="title">return</span>.<span class="title">js</span></span></span><br><span class="line"><span class="class">├── <span class="title">function</span>-<span class="title">call</span>-<span class="title">this</span>-<span class="title">return</span>.<span class="title">js</span></span></span><br><span class="line"><span class="class">├── <span class="title">function</span>-<span class="title">call</span>-<span class="title">this</span>.<span class="title">js</span></span></span><br><span class="line"><span class="class">├── <span class="title">function</span>-<span class="title">call</span>.<span class="title">js</span></span></span><br><span class="line"><span class="class">├── <span class="title">function</span>-<span class="title">return</span>-<span class="title">obj</span>-<span class="title">this</span>.<span class="title">js</span></span></span><br><span class="line"><span class="class">├── <span class="title">function</span>-<span class="title">return</span>-<span class="title">obj</span>.<span class="title">js</span></span></span><br><span class="line"><span class="class">├── <span class="title">if</span>-<span class="title">undefined</span>-<span class="title">set</span>-<span class="title">to</span>.<span class="title">js</span></span></span><br><span class="line"><span class="class">├── <span class="title">if</span>.<span class="title">js</span></span></span><br><span class="line"><span class="class">├── <span class="title">obj</span>-<span class="title">key</span>-<span class="title">set</span>.<span class="title">js</span></span></span><br><span class="line"><span class="class">├── <span class="title">object</span>-<span class="title">define</span>-<span class="title">properties</span>-<span class="title">closure</span>.<span class="title">js</span></span></span><br><span class="line"><span class="class">├── <span class="title">object</span>-<span class="title">define</span>-<span class="title">properties</span>.<span class="title">js</span></span></span><br><span class="line"><span class="class">├── <span class="title">prototype</span>-<span class="title">identifier</span>.<span class="title">js</span></span></span><br><span class="line"><span class="class">├── <span class="title">require</span>-<span class="title">assign</span>-<span class="title">key</span>.<span class="title">js</span></span></span><br><span class="line"><span class="class">├── <span class="title">require</span>-<span class="title">assign</span>.<span class="title">js</span></span></span><br><span class="line"><span class="class">├── <span class="title">require</span>-<span class="title">key</span>.<span class="title">js</span></span></span><br><span class="line"><span class="class">├── <span class="title">require</span>.<span class="title">js</span></span></span><br><span class="line"><span class="class">├── <span class="title">variable</span>-<span class="title">assign</span>.<span class="title">js</span></span></span><br><span class="line"><span class="class">└── <span class="title">variable</span>-<span class="title">declare</span>.<span class="title">js</span></span></span><br></pre></td></tr></table></figure>
<p>看一下上边用到的 <code>function-call</code> 模版，<code>function-call.js</code> 文件里仅有一行，一个函数调用。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">FUNCTION();</span><br></pre></td></tr></table></figure>
<p><code>babel</code> 预先会把上边 <code>template</code> 文件夹里的所有文件全部转成 <code>ast</code> 的语法树。</p>
<p>遍历 <code>templates</code> 下的所有文件。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// lib/6to5/util.js</span></span><br><span class="line">_.each(fs.readdirSync(templatesLoc), <span class="function"><span class="keyword">function</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> key = path.basename(name, path.extname(name));</span><br><span class="line">  <span class="keyword">var</span> loc = templatesLoc + <span class="string">"/"</span> + name;</span><br><span class="line">  <span class="keyword">var</span> code = fs.readFileSync(loc, <span class="string">"utf8"</span>);</span><br><span class="line"></span><br><span class="line">  exports.templates[key] = exports.removeProperties(</span><br><span class="line">    exports.parse(loc, code).program</span><br><span class="line">  );</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>而上边使用的 <code>exports.parse</code> 就是调用了 <code>recast</code> 库的 <code>parse</code> 来返回 <code>ast</code> 树。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">exports.parse = <span class="function"><span class="keyword">function</span> (<span class="params">filename, code, callback</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> ast = recast.parse(code, &#123;</span><br><span class="line">      sourceFileName: path.basename(filename),</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (callback) &#123;</span><br><span class="line">      <span class="keyword">return</span> callback(ast);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> ast;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>再回到上边 <code>block-binding.js</code> 中 <code>util.template</code> 方法来。</p>
<blockquote>
<p>其中 <code>b</code> 是 <code>var b = require(&quot;ast-types&quot;).builders;</code> ，可以得到各种类型的 <code>ast</code> 节点。<code>util.template</code> 方法可以通过预先写的一些模版，将模版的某一块用传入的节点替换。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// nodes 传入我们需要替换的模版中的节点</span></span><br><span class="line">exports.template = <span class="function"><span class="keyword">function</span> (<span class="params">name, nodes, keepExpression</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 得到之前生成的模版 AST 树</span></span><br><span class="line">  <span class="keyword">var</span> template = exports.templates[name];</span><br><span class="line">  <span class="keyword">if</span> (!template) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">ReferenceError</span>(<span class="string">"unknown template "</span> + name);</span><br><span class="line"></span><br><span class="line">  template = _.cloneDeep(template);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!_.isEmpty(nodes)) &#123;</span><br><span class="line">    <span class="comment">// 遍历模版 AST 树</span></span><br><span class="line">    traverse(template, <span class="function"><span class="keyword">function</span> (<span class="params">node</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 如果当前节点是我们需要替换的就进行替换</span></span><br><span class="line">      <span class="keyword">if</span> (node.type === <span class="string">"Identifier"</span> &amp;&amp; _.has(nodes, node.name)) &#123;</span><br><span class="line">        <span class="keyword">var</span> newNode = nodes[node.name];</span><br><span class="line">        <span class="keyword">if</span> (_.isString(newNode)) &#123;</span><br><span class="line">          node.name = newNode;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> newNode;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> node = template.body[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!keepExpression &amp;&amp; node.type === <span class="string">"ExpressionStatement"</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> node.expression;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><code>babel</code> 编译器主要是三个步骤，解析（词法分析、语法分析）-&gt; 转换 -&gt; 生成目标代码，主要逻辑是第二步转换。</p>
<p>转换主要就是通过提前写好各种类型的 <code>transform</code> ，利用 <code>traverse</code> 方法遍历 <code>AST</code> 的所有 <code>node</code> 节点，遍历过程操作旧 <code>node</code> 节点来生成新的 <code>node</code> 节点（可以通过 <code>recast</code> 库辅助），再替换之前写好的模版的某一部分从而生成一个新的 <code>AST</code>。</p>
<p>我感觉最复杂最细节的地方就是一个个的 <code>transform</code> 的编写了，需要对 <code>AST</code> 了解得非常清楚。</p>
<p>感觉文字不太好表述，大家可以按照最开始介绍的方法打断点然后结合上边的文字应该会更容易理解。</p>
<p>前端工程化其他系列文章大家感兴趣也可以看一下：</p>
<p><a href="https://mp.weixin.qq.com/s/rWK_4CwFoBZyXZe_1I2TrQ" target="_blank" rel="noopener">前端工程化发展历史</a></p>
<p><a href="https://mp.weixin.qq.com/s/_xAT8D9O-O6Jz1cQ3sUhnA" target="_blank" rel="noopener">2021年从零开发前端项目指南</a></p>
<p><a href="https://mp.weixin.qq.com/s/zaIx2CWf_z_Hwwiuw6qZVw" target="_blank" rel="noopener">eslint 源码详解-v0.0.2</a></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>babel</tag>
        <tag>ast</tag>
      </tags>
  </entry>
  <entry>
    <title>eslint-v0.0.2做了什么</title>
    <url>/2021/09/02/eslint-v0-0-2%E5%81%9A%E4%BA%86%E4%BB%80%E4%B9%88/</url>
    <content><![CDATA[<p>准备了解一下 <code>eslint</code> 的原理，就先看一下最早一版 <code>eslint</code> 的实现吧。<code>github</code> 打了 <code>tag</code> 的最早的版本就是 <code>0.0.2</code> 了，提交记录是八年前了。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/eslint1.jpg" style="width:50%;"></p>
<p><code>git clone git@github.com:eslint/eslint.git</code> 并且 <code>git checkout v0.0.2</code> ，先看一下 <code>package.json</code> 。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"jscheck"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"0.0.2"</span>,</span><br><span class="line">  <span class="attr">"author"</span>: <span class="string">"Nicholas C. Zakas &lt;nicholas+npm@nczconsulting.com&gt;"</span>,</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">"An AST-based pattern checker for JavaScript."</span>,</span><br><span class="line">  <span class="attr">"main"</span>: <span class="string">"./lib/jscheck.js"</span>,</span><br><span class="line">  <span class="attr">"bin"</span>: &#123;</span><br><span class="line">    <span class="attr">"jscheck"</span>: <span class="string">"./bin/jscheck.js"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"ctest"</span>: <span class="string">"istanbul cover --print both vows -- --spec ./tests/*/*/*.js"</span>,</span><br><span class="line">    <span class="attr">"test"</span>: <span class="string">"vows -- --spec ./tests/*/*/*.js"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"repository"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="attr">"dependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"optimist"</span>: <span class="string">"*"</span>,</span><br><span class="line">    <span class="attr">"astw"</span>: <span class="string">"*"</span>,</span><br><span class="line">    <span class="attr">"esprima"</span>: <span class="string">"*"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"devDependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"vows"</span>: <span class="string">"~0.7.0"</span>,</span><br><span class="line">    <span class="attr">"istanbul"</span>: <span class="string">"~0.1.10"</span>,</span><br><span class="line">    <span class="attr">"sinon"</span>: <span class="string">"*"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"keywords"</span>: [</span><br><span class="line">    <span class="string">"ast"</span>,</span><br><span class="line">    <span class="string">"lint"</span>,</span><br><span class="line">    <span class="string">"javascript"</span>,</span><br><span class="line">    <span class="string">"ecmascript"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"preferGlobal"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"license"</span>: <span class="string">"BSD"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>主要涉及到 <code>optimist</code> 、<code>astw</code>、<code>esprima</code> ，我们来依次了解一下。</p>
<h1 id="optimist"><a href="#optimist" class="headerlink" title="optimist"></a>optimist</h1><p>主要作用就是帮我们解析命令行参数，我们来试验一下。</p>
<p>在根目录新建一个 <code>cli.js</code> ，并且赋予执行权限，执行 <code>chmod +x ./cli.js</code> ，输入下边的内容：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env node</span></span><br><span class="line"><span class="keyword">var</span> optimist = <span class="built_in">require</span>(<span class="string">"optimist"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'argv 收到的参数'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(process.argv);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'optimist 解析后的参数'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(optimist.parse(process.argv.slice(<span class="number">2</span>)));</span><br></pre></td></tr></table></figure>
<p><code>#!/usr/bin/env node</code> 指明使用 <code>node</code> 执行当前脚本，就可以直接使用 <code>./cli.js</code> 执行命令，而不需要使用 <code>node ./cli.js</code> 执行。</p>
<p><code>process</code> 是 <code>node</code> 为我们提供的一个全局变量，可以拿到命令行参数 <code>argv</code>。</p>
<p>然后执行 <code>./cli.js -w --hello 23 --no-ugly  --name=test ./fils.js ./file2.js</code>，控制台会输出如下：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">argv 收到的参数</span><br><span class="line">[</span><br><span class="line">  '/Users/wangliang/.nvm/versions/node/v14<span class="number">.17</span><span class="number">.3</span>/bin/node',</span><br><span class="line">  '/Users/wangliang/windliang/eslint/cli.js',</span><br><span class="line">  '-w',</span><br><span class="line">  '--hello',</span><br><span class="line">  '<span class="number">23</span>',</span><br><span class="line">  '--no-ugly',</span><br><span class="line">  '--name=test',</span><br><span class="line">  './fils.js',</span><br><span class="line">  './file2.js'</span><br><span class="line">]</span><br><span class="line">optimist 解析后的参数</span><br><span class="line">&#123;</span><br><span class="line">  _: [ './fils.js', './file2.js' ],</span><br><span class="line">  w: true,</span><br><span class="line">  hello: 23,</span><br><span class="line">  ugly: false,</span><br><span class="line">  name: 'test',</span><br><span class="line">  '$0': '../../.nvm/versions/node/v14.17.3/bin/node ./cli.js'</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看到 <code>argv[0]</code> 是 <code>node</code> 的路径，<code>argv[1]</code> 是要执行脚本的路径，从 <code>argv[2]</code> 开始是我们要的参数，所以代码里我们执行了 <code>argv.slice(2)</code>。</p>
<p>通过 <code>optimist</code> 解析，我们就可以得到相应的 <code>key</code> 、<code>value</code> 键值对了。</p>
<h1 id="esprima"><a href="#esprima" class="headerlink" title="esprima"></a>esprima</h1><p>可以做词法分析或者生成 <code>AST</code> 的语法树，直接看示例。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env node</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> esprima = <span class="built_in">require</span>(<span class="string">"esprima"</span>);</span><br><span class="line"><span class="keyword">var</span> program = <span class="string">`const answer = 42;</span></span><br><span class="line"><span class="string">if(answer == 5)&#123;console.log(answer)&#125;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`词法分析`</span>);</span><br><span class="line"><span class="built_in">console</span>.log(esprima.tokenize(program));</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`AST 语法树`</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(esprima.parseScript(program), <span class="literal">null</span>, <span class="number">2</span>));</span><br></pre></td></tr></table></figure>
<p>看一下输出：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">词法分析</span><br><span class="line">[</span><br><span class="line">  &#123; <span class="attr">type</span>: <span class="string">'Keyword'</span>, <span class="attr">value</span>: <span class="string">'const'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">type</span>: <span class="string">'Identifier'</span>, <span class="attr">value</span>: <span class="string">'answer'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">type</span>: <span class="string">'Punctuator'</span>, <span class="attr">value</span>: <span class="string">'='</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">type</span>: <span class="string">'Numeric'</span>, <span class="attr">value</span>: <span class="string">'42'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">type</span>: <span class="string">'Punctuator'</span>, <span class="attr">value</span>: <span class="string">';'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">type</span>: <span class="string">'Keyword'</span>, <span class="attr">value</span>: <span class="string">'if'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">type</span>: <span class="string">'Punctuator'</span>, <span class="attr">value</span>: <span class="string">'('</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">type</span>: <span class="string">'Identifier'</span>, <span class="attr">value</span>: <span class="string">'answer'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">type</span>: <span class="string">'Punctuator'</span>, <span class="attr">value</span>: <span class="string">'=='</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">type</span>: <span class="string">'Numeric'</span>, <span class="attr">value</span>: <span class="string">'5'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">type</span>: <span class="string">'Punctuator'</span>, <span class="attr">value</span>: <span class="string">')'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">type</span>: <span class="string">'Punctuator'</span>, <span class="attr">value</span>: <span class="string">'&#123;'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">type</span>: <span class="string">'Identifier'</span>, <span class="attr">value</span>: <span class="string">'console'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">type</span>: <span class="string">'Punctuator'</span>, <span class="attr">value</span>: <span class="string">'.'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">type</span>: <span class="string">'Identifier'</span>, <span class="attr">value</span>: <span class="string">'log'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">type</span>: <span class="string">'Punctuator'</span>, <span class="attr">value</span>: <span class="string">'('</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">type</span>: <span class="string">'Identifier'</span>, <span class="attr">value</span>: <span class="string">'answer'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">type</span>: <span class="string">'Punctuator'</span>, <span class="attr">value</span>: <span class="string">')'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">type</span>: <span class="string">'Punctuator'</span>, <span class="attr">value</span>: <span class="string">'&#125;'</span> &#125;</span><br><span class="line">]</span><br><span class="line">AST 语法树</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"type"</span>: <span class="string">"Program"</span>,</span><br><span class="line">  <span class="string">"body"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"type"</span>: <span class="string">"VariableDeclaration"</span>,</span><br><span class="line">      <span class="string">"declarations"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">"type"</span>: <span class="string">"VariableDeclarator"</span>,</span><br><span class="line">          <span class="string">"id"</span>: &#123;</span><br><span class="line">            <span class="string">"type"</span>: <span class="string">"Identifier"</span>,</span><br><span class="line">            <span class="string">"name"</span>: <span class="string">"answer"</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="string">"init"</span>: &#123;</span><br><span class="line">            <span class="string">"type"</span>: <span class="string">"Literal"</span>,</span><br><span class="line">            <span class="string">"value"</span>: <span class="number">42</span>,</span><br><span class="line">            <span class="string">"raw"</span>: <span class="string">"42"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      <span class="string">"kind"</span>: <span class="string">"const"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"type"</span>: <span class="string">"IfStatement"</span>,</span><br><span class="line">      <span class="string">"test"</span>: &#123;</span><br><span class="line">        <span class="string">"type"</span>: <span class="string">"BinaryExpression"</span>,</span><br><span class="line">        <span class="string">"operator"</span>: <span class="string">"=="</span>,</span><br><span class="line">        <span class="string">"left"</span>: &#123;</span><br><span class="line">          <span class="string">"type"</span>: <span class="string">"Identifier"</span>,</span><br><span class="line">          <span class="string">"name"</span>: <span class="string">"answer"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"right"</span>: &#123;</span><br><span class="line">          <span class="string">"type"</span>: <span class="string">"Literal"</span>,</span><br><span class="line">          <span class="string">"value"</span>: <span class="number">5</span>,</span><br><span class="line">          <span class="string">"raw"</span>: <span class="string">"5"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">"consequent"</span>: &#123;</span><br><span class="line">        <span class="string">"type"</span>: <span class="string">"BlockStatement"</span>,</span><br><span class="line">        <span class="string">"body"</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="string">"type"</span>: <span class="string">"ExpressionStatement"</span>,</span><br><span class="line">            <span class="string">"expression"</span>: &#123;</span><br><span class="line">              <span class="string">"type"</span>: <span class="string">"CallExpression"</span>,</span><br><span class="line">              <span class="string">"callee"</span>: &#123;</span><br><span class="line">                <span class="string">"type"</span>: <span class="string">"MemberExpression"</span>,</span><br><span class="line">                <span class="string">"computed"</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="string">"object"</span>: &#123;</span><br><span class="line">                  <span class="string">"type"</span>: <span class="string">"Identifier"</span>,</span><br><span class="line">                  <span class="string">"name"</span>: <span class="string">"console"</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="string">"property"</span>: &#123;</span><br><span class="line">                  <span class="string">"type"</span>: <span class="string">"Identifier"</span>,</span><br><span class="line">                  <span class="string">"name"</span>: <span class="string">"log"</span></span><br><span class="line">                &#125;</span><br><span class="line">              &#125;,</span><br><span class="line">              <span class="string">"arguments"</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                  <span class="string">"type"</span>: <span class="string">"Identifier"</span>,</span><br><span class="line">                  <span class="string">"name"</span>: <span class="string">"answer"</span></span><br><span class="line">                &#125;</span><br><span class="line">              ]</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">"alternate"</span>: <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"sourceType"</span>: <span class="string">"script"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>此外，解析 <code>Ast</code> 语法树的时候为我们提供了 <code>range</code> 参数和 <code>loc</code> 参数，<code>esprima.parseScript(program, { loc: true, range: true })</code>，输出节点的时候可以帮我们输出源代码的位置，类似于下边的样子。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">"type"</span>: <span class="string">"VariableDeclarator"</span>,</span><br><span class="line">  <span class="string">"id"</span>: &#123;</span><br><span class="line">    <span class="string">"type"</span>: <span class="string">"Identifier"</span>,</span><br><span class="line">      <span class="string">"name"</span>: <span class="string">"answer"</span>,</span><br><span class="line">        <span class="string">"range"</span>: [</span><br><span class="line">          <span class="number">6</span>,</span><br><span class="line">          <span class="number">12</span></span><br><span class="line">        ],</span><br><span class="line">          <span class="string">"loc"</span>: &#123;</span><br><span class="line">            <span class="string">"start"</span>: &#123;</span><br><span class="line">              <span class="string">"line"</span>: <span class="number">1</span>,</span><br><span class="line">                <span class="string">"column"</span>: <span class="number">6</span></span><br><span class="line">            &#125;,</span><br><span class="line">              <span class="string">"end"</span>: &#123;</span><br><span class="line">                <span class="string">"line"</span>: <span class="number">1</span>,</span><br><span class="line">                  <span class="string">"column"</span>: <span class="number">12</span></span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>
<h1 id="astw"><a href="#astw" class="headerlink" title="astw"></a>astw</h1><p><code>ast walk</code>，输入源代码或者 <code>AST</code> 对象，然后调用 <code>walk</code> 方法传入回调，会帮我们依次遍历 <code>ast</code> 的节点，同样看个例子就明白了。</p>
<p>为了更好的看出输出的结果，我们引入 <code>escodegen</code> 库，可以将遍历的 <code>ast</code> 节点还原为源代码。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env node</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> astw = <span class="built_in">require</span>(<span class="string">"astw"</span>);</span><br><span class="line"><span class="keyword">var</span> esprima = <span class="built_in">require</span>(<span class="string">"esprima"</span>);</span><br><span class="line"><span class="keyword">var</span> program = <span class="string">`const answer = 42;</span></span><br><span class="line"><span class="string">if(answer == 5)&#123;console.log(answer)&#125;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(esprima.parseScript(program), <span class="literal">null</span>, <span class="number">2</span>));</span><br><span class="line"><span class="keyword">var</span> walk = astw(program);</span><br><span class="line"><span class="keyword">var</span> deparse = <span class="built_in">require</span>(<span class="string">"escodegen"</span>).generate;</span><br><span class="line"><span class="keyword">let</span> count = <span class="number">1</span>;</span><br><span class="line">walk(<span class="function"><span class="keyword">function</span> (<span class="params">node</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> src = deparse(node);</span><br><span class="line">  <span class="built_in">console</span>.log(count++, node.type + <span class="string">" :: "</span> + <span class="built_in">JSON</span>.stringify(src));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>看一下结果：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"type"</span>: <span class="string">"Program"</span>,</span><br><span class="line">  <span class="string">"body"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"type"</span>: <span class="string">"VariableDeclaration"</span>,</span><br><span class="line">      <span class="string">"declarations"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">"type"</span>: <span class="string">"VariableDeclarator"</span>,</span><br><span class="line">          <span class="string">"id"</span>: &#123;</span><br><span class="line">            <span class="string">"type"</span>: <span class="string">"Identifier"</span>,</span><br><span class="line">            <span class="string">"name"</span>: <span class="string">"answer"</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="string">"init"</span>: &#123;</span><br><span class="line">            <span class="string">"type"</span>: <span class="string">"Literal"</span>,</span><br><span class="line">            <span class="string">"value"</span>: <span class="number">42</span>,</span><br><span class="line">            <span class="string">"raw"</span>: <span class="string">"42"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      <span class="string">"kind"</span>: <span class="string">"const"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"type"</span>: <span class="string">"IfStatement"</span>,</span><br><span class="line">      <span class="string">"test"</span>: &#123;</span><br><span class="line">        <span class="string">"type"</span>: <span class="string">"BinaryExpression"</span>,</span><br><span class="line">        <span class="string">"operator"</span>: <span class="string">"=="</span>,</span><br><span class="line">        <span class="string">"left"</span>: &#123;</span><br><span class="line">          <span class="string">"type"</span>: <span class="string">"Identifier"</span>,</span><br><span class="line">          <span class="string">"name"</span>: <span class="string">"answer"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"right"</span>: &#123;</span><br><span class="line">          <span class="string">"type"</span>: <span class="string">"Literal"</span>,</span><br><span class="line">          <span class="string">"value"</span>: <span class="number">5</span>,</span><br><span class="line">          <span class="string">"raw"</span>: <span class="string">"5"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">"consequent"</span>: &#123;</span><br><span class="line">        <span class="string">"type"</span>: <span class="string">"BlockStatement"</span>,</span><br><span class="line">        <span class="string">"body"</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="string">"type"</span>: <span class="string">"ExpressionStatement"</span>,</span><br><span class="line">            <span class="string">"expression"</span>: &#123;</span><br><span class="line">              <span class="string">"type"</span>: <span class="string">"CallExpression"</span>,</span><br><span class="line">              <span class="string">"callee"</span>: &#123;</span><br><span class="line">                <span class="string">"type"</span>: <span class="string">"MemberExpression"</span>,</span><br><span class="line">                <span class="string">"computed"</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="string">"object"</span>: &#123;</span><br><span class="line">                  <span class="string">"type"</span>: <span class="string">"Identifier"</span>,</span><br><span class="line">                  <span class="string">"name"</span>: <span class="string">"console"</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="string">"property"</span>: &#123;</span><br><span class="line">                  <span class="string">"type"</span>: <span class="string">"Identifier"</span>,</span><br><span class="line">                  <span class="string">"name"</span>: <span class="string">"log"</span></span><br><span class="line">                &#125;</span><br><span class="line">              &#125;,</span><br><span class="line">              <span class="string">"arguments"</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                  <span class="string">"type"</span>: <span class="string">"Identifier"</span>,</span><br><span class="line">                  <span class="string">"name"</span>: <span class="string">"answer"</span></span><br><span class="line">                &#125;</span><br><span class="line">              ]</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">"alternate"</span>: <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"sourceType"</span>: <span class="string">"script"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="number">1</span> Identifier :: <span class="string">"answer"</span></span><br><span class="line"><span class="number">2</span> Literal :: <span class="string">"42"</span></span><br><span class="line"><span class="number">3</span> VariableDeclarator :: <span class="string">"answer = 42"</span></span><br><span class="line"><span class="number">4</span> VariableDeclaration :: <span class="string">"const answer = 42;"</span></span><br><span class="line"><span class="number">5</span> Identifier :: <span class="string">"answer"</span></span><br><span class="line"><span class="number">6</span> Literal :: <span class="string">"5"</span></span><br><span class="line"><span class="number">7</span> BinaryExpression :: <span class="string">"answer == 5"</span></span><br><span class="line"><span class="number">8</span> Identifier :: <span class="string">"console"</span></span><br><span class="line"><span class="number">9</span> Identifier :: <span class="string">"log"</span></span><br><span class="line"><span class="number">10</span> MemberExpression :: <span class="string">"console.log"</span></span><br><span class="line"><span class="number">11</span> Identifier :: <span class="string">"answer"</span></span><br><span class="line"><span class="number">12</span> CallExpression :: <span class="string">"console.log(answer)"</span></span><br><span class="line"><span class="number">13</span> ExpressionStatement :: <span class="string">"console.log(answer);"</span></span><br><span class="line"><span class="number">14</span> BlockStatement :: <span class="string">"&#123;\n    console.log(answer);\n&#125;"</span></span><br><span class="line"><span class="number">15</span> IfStatement :: <span class="string">"if (answer == 5) &#123;\n    console.log(answer);\n&#125;"</span></span><br><span class="line"><span class="number">16</span> Program :: <span class="string">"const answer = 42;\nif (answer == 5) &#123;\n    console.log(answer);\n&#125;"</span></span><br></pre></td></tr></table></figure>
<p>可以看到 <code>walk</code> 方法会帮助我们从内到外的遍历 <code>AST</code> 的节点，通过回调将当前节点返回。</p>
<h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>知道了 <code>AST</code> 树，我们其实就可以实现最简单的 <code>Eslint</code> 检查了，比如最常见的是否使用了 <code>===</code>。</p>
<p>举个例子，对于 <code>answer == 42;</code> 我们在 <code>walk</code> 过程中会得到这样一个节点。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Node &#123;</span><br><span class="line">  type: <span class="string">'BinaryExpression'</span>,</span><br><span class="line">  start: <span class="number">22</span>,</span><br><span class="line">  end: <span class="number">33</span>,</span><br><span class="line">  left: Node &#123;</span><br><span class="line">    type: <span class="string">'Identifier'</span>,</span><br><span class="line">    start: <span class="number">22</span>,</span><br><span class="line">    end: <span class="number">28</span>,</span><br><span class="line">    name: <span class="string">'answer'</span>,</span><br><span class="line">    parent: [Circular *<span class="number">1</span>]</span><br><span class="line">  &#125;,</span><br><span class="line">  operator: <span class="string">'=='</span>,</span><br><span class="line">  right: Node &#123;</span><br><span class="line">    type: <span class="string">'Literal'</span>,</span><br><span class="line">    start: <span class="number">32</span>,</span><br><span class="line">    end: <span class="number">33</span>,</span><br><span class="line">    value: <span class="number">5</span>,</span><br><span class="line">    raw: <span class="string">'5'</span>,</span><br><span class="line">    parent: [Circular *<span class="number">1</span>]</span><br><span class="line">  &#125;,</span><br><span class="line">  parent: Node &#123;</span><br><span class="line">    type: <span class="string">'IfStatement'</span>,</span><br><span class="line">    start: <span class="number">19</span>,</span><br><span class="line">    end: <span class="number">55</span>,</span><br><span class="line">    test: [Circular *<span class="number">1</span>],</span><br><span class="line">    consequent: Node &#123; <span class="attr">type</span>: <span class="string">'BlockStatement'</span>, <span class="attr">start</span>: <span class="number">34</span>, <span class="attr">end</span>: <span class="number">55</span>, <span class="attr">body</span>: [<span class="built_in">Array</span>] &#125;,</span><br><span class="line">    alternate: <span class="literal">null</span>,</span><br><span class="line">    parent: Node &#123;</span><br><span class="line">      type: <span class="string">'Program'</span>,</span><br><span class="line">      start: <span class="number">0</span>,</span><br><span class="line">      end: <span class="number">56</span>,</span><br><span class="line">      body: [<span class="built_in">Array</span>],</span><br><span class="line">      sourceType: <span class="string">'script'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>根据这个 <code>ast</code> 的节点，首先判断 <code>type</code> 是不是  <code>BinaryExpression</code>，然后再判断 <code>operator</code> 是否是 <code>==</code> 和 <code>!=</code> 就可以了。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(node.type === <span class="string">'BinaryExpression'</span>)&#123;</span><br><span class="line">  <span class="keyword">if</span> (operator === <span class="string">"=="</span>) &#123;</span><br><span class="line">  	输出(node, <span class="string">"Unexpected use of ==, use === instead."</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (operator === <span class="string">"!="</span>) &#123;</span><br><span class="line">    输出(node, <span class="string">"Unexpected use of !=, use !== instead."</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>对于单一的规则很好实现，但把多个规则整合起来，并且便于用户扩展就是个学问了，这里学习一下 <code>eslint</code> 是怎么整合的。</p>
<h1 id="EventEmitter-库"><a href="#EventEmitter-库" class="headerlink" title="EventEmitter 库"></a>EventEmitter 库</h1><p>一个 <code>Ast</code> 节点对应一个要处理的规则，每遍历一个节点，就去处理相应的规则。这里使用了<em>订阅/发布</em>的设计模式，<code>node.js</code> 提供了 <code>events.EventEmitter</code> 库供我们使用。</p>
<p>我们只需要遍历所有规则列表，然后调用 <code>on</code> 方法，订阅相关事件，事件名就是 <code>node.type</code>，比如上边介绍的 <code>BinaryExpression</code>。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> EventEmitter = <span class="built_in">require</span>(<span class="string">"events"</span>).EventEmitter;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">var</span> api = <span class="built_in">Object</span>.create(<span class="keyword">new</span> EventEmitter()),</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.keys(config.rules).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> ruleCreator = rules.get(key),</span><br><span class="line">      rule;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (ruleCreator) &#123;</span><br><span class="line">    rule = ruleCreator(<span class="keyword">new</span> RuleContext(key, api));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// add all the node types as listeners</span></span><br><span class="line">    <span class="built_in">Object</span>.keys(rule).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">nodeType</span>) </span>&#123;</span><br><span class="line">      api.on(nodeType, rule[nodeType]);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"Definition for rule '"</span> + key + <span class="string">"' was not found."</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>然后在调用 <code>astw</code> 库的 <code>walk</code> 方法的时候 <code>emit</code> 一下 <code>node.type</code> 事件名即可。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> ast = esprima.parse(text, &#123; <span class="attr">loc</span>: <span class="literal">true</span>, <span class="attr">range</span>: <span class="literal">true</span> &#125;),</span><br><span class="line">    walk = astw(ast);</span><br><span class="line"></span><br><span class="line">walk(<span class="function"><span class="keyword">function</span>(<span class="params">node</span>) </span>&#123;</span><br><span class="line">  api.emit(node.type, node);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h1 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h1><p>先看一下代码目录：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">eslint</span><br><span class="line">├── LICENSE</span><br><span class="line">├── README.md</span><br><span class="line">├── bin</span><br><span class="line">│   └── jscheck.js <span class="comment">//入口文件，调用 cli.js 的 execute</span></span><br><span class="line">├── config</span><br><span class="line">│   └── jscheck.json <span class="comment">//eslint 配置文件，定义检测哪些规则</span></span><br><span class="line">├── lib</span><br><span class="line">│   ├── cli.js <span class="comment">// 主函数</span></span><br><span class="line">│   ├── jscheck.js <span class="comment">// 提供 verify 方法</span></span><br><span class="line">│   ├── reporters</span><br><span class="line">│   │   └── compact.js <span class="comment">// 格式化输出的内容</span></span><br><span class="line">│   ├── rule-context.js <span class="comment">// 将 jsCheack 对象的方法提过给 rule 调用</span></span><br><span class="line">│   ├── rules <span class="comment">// 预制的规则</span></span><br><span class="line">│   │   ├── camelcase.js</span><br><span class="line">│   │   ├── curly.js</span><br><span class="line">│   │   ├── eqeqeq.js</span><br><span class="line">│   │   ├── no-bitwise.js</span><br><span class="line">│   │   ├── no-<span class="built_in">console</span>.js</span><br><span class="line">│   │   ├── no-<span class="keyword">debugger</span>.js</span><br><span class="line">│   │   ├── no-empty.js</span><br><span class="line">│   │   ├── no-<span class="built_in">eval</span>.js</span><br><span class="line">│   │   └── no-<span class="keyword">with</span>.js</span><br><span class="line">│   └── rules.js <span class="comment">// 读取 rule 规则</span></span><br><span class="line">├── package-lock.json</span><br><span class="line">├── package.json</span><br><span class="line">└── tests</span><br><span class="line">    └── lib</span><br><span class="line">        └── rules</span><br><span class="line">            ├── camelcase.js</span><br><span class="line">            ├── no-bitwise.js</span><br><span class="line">            ├── no-<span class="keyword">debugger</span>.js</span><br><span class="line">            ├── no-<span class="built_in">eval</span>.js</span><br><span class="line">            └── no-<span class="keyword">with</span>.js</span><br></pre></td></tr></table></figure>
<p>看一下 <code>lib/cli.js</code> 的主逻辑：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">execute: <span class="function"><span class="keyword">function</span> (<span class="params">argv, callback</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> options = optimist.parse(argv),</span><br><span class="line">      files = options._,</span><br><span class="line">      config;</span><br><span class="line">  <span class="keyword">if</span> (options.h || options.help) &#123;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    config = readConfig(options);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> Figure out correct option vs. config for this</span></span><br><span class="line">    <span class="comment">// load rules</span></span><br><span class="line">    <span class="keyword">if</span> (options.rules) &#123; <span class="comment">// 用户传入自定义的 rules</span></span><br><span class="line">      rules.load(options.rules);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (files.length) &#123;</span><br><span class="line">      processFiles(files, config);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"No files!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p>其中 <code>readConfig</code> 就是读取了配置文件，为用户提供了 <code>c/config</code> 参数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">readConfig</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> configLocation = path.resolve(</span><br><span class="line">    __dirname,</span><br><span class="line">    options.c || options.config || DEFAULT_CONFIG</span><br><span class="line">  );</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">require</span>(configLocation);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>默认的 <code>DEFAULT_CONFIG</code> 路径是 <code>../config/jscheck.json</code> ，内容如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"rules"</span>: &#123;</span><br><span class="line">        <span class="string">"no-bitwise"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="string">"no-eval"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="string">"no-with"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="string">"no-empty"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="string">"no-debugger"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="string">"no-console"</span>: <span class="number">1</span>,</span><br><span class="line"></span><br><span class="line">        <span class="string">"camelcase"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="string">"eqeqeq"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="string">"curly"</span>: <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>processFiles(files, config)</code>  主要就是两层循环，循环要检查的文件和上边的配置。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">processFiles</span>(<span class="params">files, config</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> fullFileList = [];</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 如果是目录的话，继续递归去添加</span></span><br><span class="line">  files.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">file</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (isDirectory(file)) &#123;</span><br><span class="line">      fullFileList = fullFileList.concat(getFiles(file));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      fullFileList.push(file);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 遍历文件</span></span><br><span class="line">  fullFileList.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">file</span>) </span>&#123;</span><br><span class="line">    processFile(file, config);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>看一下 <code>processFile</code> 函数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">processFile</span>(<span class="params">filename, config</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 读取文件</span></span><br><span class="line">  <span class="keyword">var</span> text = fs.readFileSync(path.resolve(filename), <span class="string">"utf8"</span>),</span><br><span class="line">      <span class="comment">// 检查文件</span></span><br><span class="line">    messages = jscheck.verify(text, config);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(reporter(jscheck, messages, filename, config));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>verify</code> 就是核心逻辑了，调用了 <code>on</code> 事件和 <code>emit</code> 事件。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">api.verify = <span class="function"><span class="keyword">function</span> (<span class="params">text, config</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// reset</span></span><br><span class="line">    <span class="keyword">this</span>.removeAllListeners();</span><br><span class="line">    messages = [];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// enable appropriate rules</span></span><br><span class="line">    <span class="built_in">Object</span>.keys(config.rules).forEach(<span class="function"><span class="keyword">function</span> (<span class="params">key</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> ruleCreator = rules.get(key),</span><br><span class="line">        rule;</span><br><span class="line">      <span class="keyword">if</span> (ruleCreator) &#123;</span><br><span class="line">        <span class="comment">// 将 js api 的 context 传给 rule</span></span><br><span class="line">        rule = ruleCreator(<span class="keyword">new</span> RuleContext(key, api));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// add all the node types as listeners</span></span><br><span class="line">        <span class="comment">// rule 规则</span></span><br><span class="line">        <span class="built_in">Object</span>.keys(rule).forEach(<span class="function"><span class="keyword">function</span> (<span class="params">nodeType</span>) </span>&#123;</span><br><span class="line">          api.on(nodeType, rule[nodeType]);</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"Definition for rule '"</span> + key + <span class="string">"' was not found."</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// save config so rules can access as necessary</span></span><br><span class="line">    currentConfig = config;</span><br><span class="line">    currentText = text;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Each node has a type property. Whenever a particular type of node is found,</span></span><br><span class="line"><span class="comment">     * an event is fired. This allows any listeners to automatically be informed</span></span><br><span class="line"><span class="comment">     * that this type of node has been found and react accordingly.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">var</span> ast = esprima.parse(text, &#123; <span class="attr">loc</span>: <span class="literal">true</span>, <span class="attr">range</span>: <span class="literal">true</span> &#125;),</span><br><span class="line">      walk = astw(ast);</span><br><span class="line"></span><br><span class="line">    walk(<span class="function"><span class="keyword">function</span> (<span class="params">node</span>) </span>&#123;</span><br><span class="line">      api.emit(node.type, node);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> messages;</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure>
<p>其中 <code>ruleCreator</code> 就是某个规则对应的内容比如下边的 <code>curly.js</code> 文件。</p>
<p>其中，上边的 <code>new RuleContext(key, api)</code> 就是生成了下边的 <code>context</code>，提过了 <code>report</code> 等其他方法。</p>
<p>这样用户自定义 <code>rule</code> 的时候，通过 <code>context</code> 就可以调用 <code>eslint</code> 暴露出来的方法。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params">context</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    IfStatement: <span class="function"><span class="keyword">function</span> (<span class="params">node</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (node.consequent.type !== <span class="string">"BlockStatement"</span>) &#123;</span><br><span class="line">        context.report(node, <span class="string">"Expected &#123; after 'if' condition."</span>);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (node.alternate &amp;&amp; node.alternate.type !== <span class="string">"BlockStatement"</span>) &#123;</span><br><span class="line">        context.report(node, <span class="string">"Expected &#123; after 'else'."</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    WhileStatement: <span class="function"><span class="keyword">function</span> (<span class="params">node</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (node.body.type !== <span class="string">"BlockStatement"</span>) &#123;</span><br><span class="line">        context.report(node, <span class="string">"Expected &#123; after 'while' condition."</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    ForStatement: <span class="function"><span class="keyword">function</span> (<span class="params">node</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (node.body.type !== <span class="string">"BlockStatement"</span>) &#123;</span><br><span class="line">        context.report(node, <span class="string">"Expected &#123; after 'for' condition."</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h1 id="总"><a href="#总" class="headerlink" title="总"></a>总</h1><p>上边就是 <code>eslint v0.0.2</code> 的全部代码了，更细节的内容可以在本地 <code>git clone git@github.com:eslint/eslint.git</code> 并且 <code>git checkout v0.0.2</code>  看。</p>
<p>核心原理就是通过 <code>AST</code> 语法树来进行相应的检查，然后通过 <code>EventEmitter</code> 进行组织调用，使用 <code>RuleContext</code> 将一些方法暴露出来供 <code>rule</code> 使用。</p>
<p>未来会继续总结前端相关的文章，感谢关注支持：</p>
<p><a href="https://mp.weixin.qq.com/s/rWK_4CwFoBZyXZe_1I2TrQ" target="_blank" rel="noopener">前端工程化发展历史</a></p>
<p><a href="https://mp.weixin.qq.com/s/_xAT8D9O-O6Jz1cQ3sUhnA" target="_blank" rel="noopener">2021年从零开发前端项目指南</a></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>eslint</tag>
        <tag>ast</tag>
      </tags>
  </entry>
  <entry>
    <title>flex 布局详解</title>
    <url>/2021/11/28/flex%E5%B8%83%E5%B1%80%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<p>平时开发各种布局基本上可以 <code>flex</code> 一把梭，不用再纠结 <code>float</code> 这个神奇属性了。但一直又没有专门去记忆一下 <code>flex</code> 的属性，开发的时候还是顺手百度下属性的含义，略显不够专业[旺柴]。索性抽时间把每个属性就都总结下吧，查漏补缺。</p>
<h1 id="总览"><a href="#总览" class="headerlink" title="总览"></a>总览</h1><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comflex.jpeg" alt="flex"></p>
<p>下边按照上图的顺序来详细说明下每个属性的作用，并且参考 <a href="https://www.w3schools.com/css/css3_flexbox_container.asp" target="_blank" rel="noopener">W3C</a> 提到的代码结构：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line"><span class="comment">// 父元素</span></span><br><span class="line">.flex-container &#123;</span><br><span class="line">  display: flex;</span><br><span class="line">  flex-direction: row;</span><br><span class="line">  background-color: DodgerBlue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子元素</span></span><br><span class="line">.flex-container &gt; div &#123;</span><br><span class="line">  background-color: #f1f1f1;</span><br><span class="line">  width: <span class="number">100</span>px;</span><br><span class="line">  margin: <span class="number">10</span>px;</span><br><span class="line">  text-align: center;</span><br><span class="line">  line-height: <span class="number">75</span>px;</span><br><span class="line">  font-size: <span class="number">30</span>px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/style&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"flex-container"</span>&gt;</span><br><span class="line">  &lt;div&gt;<span class="number">1</span>&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  &lt;div&gt;2&lt;/</span>div&gt;</span><br><span class="line">  &lt;div&gt;<span class="number">3</span>&lt;<span class="regexp">/div&gt;  </span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>html&gt;</span><br></pre></td></tr></table></figure>
<p>代码总体结构都是上边的样子，下边介绍的时候就省略了。</p>
<h1 id="各属性"><a href="#各属性" class="headerlink" title="各属性"></a>各属性</h1><h2 id="flex"><a href="#flex" class="headerlink" title="flex"></a>flex</h2><blockquote>
<p>display: flex;</p>
</blockquote>
<p>父元素变为 <code>flex</code> 布局，并且为 <code>block</code> 块级元素。</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.flex-container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">background-color</span>: DodgerBlue;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.flex-container</span> &gt; <span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#f1f1f1</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;div class="flex-container"&gt;</span><br><span class="line">  &lt;div&gt;1&lt;/div&gt;</span><br><span class="line">  &lt;div&gt;2&lt;/div&gt;</span><br><span class="line">  &lt;div&gt;3&lt;/div&gt;  </span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div class="flex-container"&gt;</span><br><span class="line">  &lt;div&gt;4&lt;/div&gt;</span><br><span class="line">  &lt;div&gt;5&lt;/div&gt;</span><br><span class="line">  &lt;div&gt;6&lt;/div&gt;  </span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/flex11287.jpg" alt=""></p>
<blockquote>
<p>display: inline-flex;</p>
</blockquote>
<p>父元素变为 <code>flex</code> 布局，并且是行内元素。</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.flex-container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-flex;</span><br><span class="line">  <span class="attribute">background-color</span>: DodgerBlue;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.flex-container</span> &gt; <span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#f1f1f1</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;div class="flex-container"&gt;</span><br><span class="line">  &lt;div&gt;1&lt;/div&gt;</span><br><span class="line">  &lt;div&gt;2&lt;/div&gt;</span><br><span class="line">  &lt;div&gt;3&lt;/div&gt;  </span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div class="flex-container"&gt;</span><br><span class="line">  &lt;div&gt;4&lt;/div&gt;</span><br><span class="line">  &lt;div&gt;5&lt;/div&gt;</span><br><span class="line">  &lt;div&gt;6&lt;/div&gt;  </span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<p>两个元素会在同一行展示。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/flex11288.jpg" alt=""></p>
<h2 id="flex-direction"><a href="#flex-direction" class="headerlink" title="flex-direction"></a>flex-direction</h2><blockquote>
<p>display: flex/inline-flex -&gt; 父元素 -&gt; flex-flow: -&gt; flex-direction: -&gt; row</p>
</blockquote>
<p><code>row</code> 为默认值</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.flex-container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-direction</span>: row;</span><br><span class="line">  <span class="attribute">background-color</span>: DodgerBlue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在水平方向从左到右排列，同时决定了主轴为水平方向。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/flex11281.jpg" alt=""></p>
<blockquote>
<p>display: flex/inline-flex -&gt; 父元素 -&gt; flex-flow: -&gt; flex-direction: -&gt; row-reverse</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.flex-container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-direction</span>: row-reverse;</span><br><span class="line">  <span class="attribute">background-color</span>: DodgerBlue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在水平方向从右到左排列，同时决定了主轴为水平方向。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/flex11282.jpg" alt=""></p>
<blockquote>
<p>display: flex/inline-flex -&gt; 父元素 -&gt; flex-flow: -&gt; flex-direction: -&gt; column</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.flex-container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-direction</span>: column;</span><br><span class="line">  <span class="attribute">background-color</span>: DodgerBlue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在垂直方向从上到下排列，同时决定了主轴为垂直方向。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/flex11283.jpg" alt=""></p>
<blockquote>
<p>display: flex/inline-flex -&gt; 父元素 -&gt; flex-flow: -&gt; flex-direction: -&gt; column-reverse</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.flex-container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-direction</span>: column-reverse;</span><br><span class="line">  <span class="attribute">background-color</span>: DodgerBlue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在垂直方向从下到上排列，同时决定了主轴为垂直方向。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/flex11284.jpg" alt=""></p>
<p><em>下边为了简明，各属性都是默认主轴为水平方向进行举例</em></p>
<h2 id="flex-wrap"><a href="#flex-wrap" class="headerlink" title="flex-wrap"></a>flex-wrap</h2><blockquote>
<p>display: flex/inline-flex -&gt; 父元素 -&gt; flex-flow: -&gt;flex-wrap: -&gt; wrap</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.flex-container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-wrap</span>: wrap;</span><br><span class="line">  <span class="attribute">background-color</span>: DodgerBlue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当空间不够的时候自动换行。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/flex11285.jpg" alt=""></p>
<blockquote>
<p>display: flex/inline-flex -&gt; 父元素 -&gt; flex-flow: -&gt; flex-direction: -&gt; nowrap</p>
</blockquote>
<p><code>nowrap</code> 为默认值。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.flex-container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-wrap</span>: nowrap;</span><br><span class="line">  <span class="attribute">background-color</span>: DodgerBlue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当空间不够不进行换行，默认会进行压缩。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/flex11286.jpg" alt=""></p>
<blockquote>
<p>display: flex/inline-flex -&gt; 父元素 -&gt; flex-flow: -&gt; flex-direction: -&gt; wrap-reverse</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.flex-container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-wrap</span>: wrap-reverse;</span><br><span class="line">  <span class="attribute">background-color</span>: DodgerBlue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在水平方向从左到右排列，同时使<strong>交叉轴</strong>的排列方向反向。</p>
<p>默认交叉轴是垂直方向，并且是从上到下。所以加了 <code>wrap-reverse</code> 就是从下到上了。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/flex11289.jpg" alt=""></p>
<h2 id="flex-flow"><a href="#flex-flow" class="headerlink" title="flex-flow"></a>flex-flow</h2><blockquote>
<p>display: flex/inline-flex -&gt; 父元素 -&gt; flex-flow:</p>
</blockquote>
<p>上边介绍的 <code>flex-direction</code> 和 <code>flex-wrap</code> 可以合写为 <code>flex-flow</code> ，它们共同决定了主轴和交叉轴的排列方向，从左到右（从右到左）和从上到下（从下到上）的组合。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.flex-container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-flow</span>: row-reverse wrap-reverse;</span><br><span class="line">  <span class="attribute">background-color</span>: DodgerBlue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>主轴为水平方向，<code>row-reverse</code> 从右到左，<code>wrap-reverse</code> 交叉轴从下到上。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/flex112811.jpg" alt=""></p>
<h2 id="justify-content"><a href="#justify-content" class="headerlink" title="justify-content"></a>justify-content</h2><blockquote>
<p>display: flex/inline-flex -&gt; 父元素 -&gt; 单行元素的对齐方式 -&gt; （主轴-默认水平方向）justify-content: -&gt; center</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.flex-container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">background-color</span>: DodgerBlue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>子元素居中</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20211129094950145.png" alt="image-20211129094950145"></p>
<blockquote>
<p>display: flex/inline-flex -&gt; 父元素 -&gt; 单行元素的对齐方式 -&gt; （主轴-默认水平方向）justify-content: -&gt; flex-start</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.flex-container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: flex-start;</span><br><span class="line">  <span class="attribute">background-color</span>: DodgerBlue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>子元素靠左对齐，并且 <code>flex-start</code> 为默认值。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20211130080749495.png" alt="image-20211130080749495"></p>
<blockquote>
<p>display: flex/inline-flex -&gt; 父元素 -&gt; 单行元素的对齐方式 -&gt; （主轴-默认水平方向）justify-content: -&gt; flex-end</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.flex-container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: flex-end;</span><br><span class="line">  <span class="attribute">background-color</span>: DodgerBlue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>子元素靠右对齐。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20211130081000845.png" alt="image-20211130081000845"></p>
<blockquote>
<p>display: flex/inline-flex -&gt; 父元素 -&gt; 单行元素的对齐方式 -&gt; （主轴-默认水平方向）justify-content: -&gt; space-around</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.flex-container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: space-around;</span><br><span class="line">  <span class="attribute">background-color</span>: DodgerBlue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>子元素均匀分布，元素之间的空白是两边的两倍。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20211130081237620.png" alt="image-20211130081237620"></p>
<blockquote>
<p>display: flex/inline-flex -&gt; 父元素 -&gt; 单行元素的对齐方式 -&gt; （主轴-默认水平方向）justify-content: -&gt; space-between</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.flex-container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: space-between;</span><br><span class="line">  <span class="attribute">background-color</span>: DodgerBlue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>子元素均匀分布，两边不留白。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20211130081549052.png" alt="image-20211130081549052"></p>
<blockquote>
<p>display: flex/inline-flex -&gt; 父元素 -&gt; 单行元素的对齐方式 -&gt; （主轴-默认水平方向）justify-content: -&gt; space-evenly</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.flex-container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: space-evenly;</span><br><span class="line">  <span class="attribute">background-color</span>: DodgerBlue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>子元素真均匀分布，空白全部相同。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20211130081932235.png" alt="image-20211130081932235"></p>
<h2 id="align-items"><a href="#align-items" class="headerlink" title="align-items"></a>align-items</h2><blockquote>
<p>display: flex/inline-flex -&gt; 父元素 -&gt; 单行元素的对齐方式 -&gt; （交叉轴-默认垂直方向）align-items: -&gt; center</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.flex-container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">background-color</span>: DodgerBlue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>子元素垂直方向居中。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20211130082846108.png" alt="image-20211130082846108"></p>
<blockquote>
<p>display: flex/inline-flex -&gt; 父元素 -&gt; 单行元素的对齐方式 -&gt; （交叉轴-默认垂直方向）align-items: -&gt; flex-start</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.flex-container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">align-items</span>: flex-start;</span><br><span class="line">  <span class="attribute">background-color</span>: DodgerBlue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>子元素垂直方向顶部。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20211130083006758.png" alt="image-20211130083006758"></p>
<blockquote>
<p>display: flex/inline-flex -&gt; 父元素 -&gt; 单行元素的对齐方式 -&gt; （交叉轴-默认垂直方向）align-items: -&gt; flex-end</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.flex-container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">align-items</span>: flex-end;</span><br><span class="line">  <span class="attribute">background-color</span>: DodgerBlue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>子元素垂直方向底部。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20211130083115323.png" alt="image-20211130083115323"></p>
<blockquote>
<p>display: flex/inline-flex -&gt; 父元素 -&gt; 单行元素的对齐方式 -&gt; （交叉轴-默认垂直方向）align-items: -&gt; stretch</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.flex-container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">align-items</span>: stretch;</span><br><span class="line">  <span class="attribute">background-color</span>: DodgerBlue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>子元素垂直方向拉伸，<code>stretch</code> 为默认值。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20211130083228595.png" alt="image-20211130083228595"></p>
<blockquote>
<p>display: flex/inline-flex -&gt; 父元素 -&gt; 单行元素的对齐方式 -&gt; （交叉轴-默认垂直方向）align-items: -&gt; baseline</p>
</blockquote>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.flex-container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">align-items</span>: baseline;</span><br><span class="line">  <span class="attribute">background-color</span>: DodgerBlue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;div class="flex-container"&gt;</span><br><span class="line">  &lt;div&gt;&lt;h1&gt;1&lt;/h1&gt;&lt;/div&gt;</span><br><span class="line">  &lt;div&gt;&lt;h6&gt;2&lt;/h6&gt;&lt;/div&gt;</span><br><span class="line">  &lt;div&gt;&lt;h3&gt;3&lt;/h3&gt;&lt;/div&gt;  </span><br><span class="line">  &lt;div&gt;&lt;small&gt;4&lt;/small&gt;&lt;/div&gt;  </span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<p>当字体大小不一致的时候，根据字体的 <code>baseline</code> 对齐。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20211130083432539.png" alt="image-20211130083432539"></p>
<h2 id="align-content"><a href="#align-content" class="headerlink" title="align-content"></a>align-content</h2><blockquote>
<p>display: flex/inline-flex -&gt; 父元素 -&gt; 多行元素的对齐方式 -&gt; （交叉轴-垂直方向）align-content: -&gt; space-between</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.flex-container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">600px</span>;</span><br><span class="line">  <span class="attribute">flex-wrap</span>: wrap;</span><br><span class="line">  <span class="attribute">align-content</span>: space-between;</span><br><span class="line">  <span class="attribute">background-color</span>: DodgerBlue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>垂直方向，均匀分布，顶部底部没有空白。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20211130084315882.png" alt="image-20211130084315882"></p>
<blockquote>
<p>display: flex/inline-flex -&gt; 父元素 -&gt; 多行元素的对齐方式 -&gt; （交叉轴-垂直方向）align-content: -&gt; space-around</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.flex-container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">600px</span>;</span><br><span class="line">  <span class="attribute">flex-wrap</span>: wrap;</span><br><span class="line">  <span class="attribute">align-content</span>: space-around;</span><br><span class="line">  <span class="attribute">background-color</span>: DodgerBlue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>垂直方向，均匀分布，顶部底部有空白，是元素之前空白的一半。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20211130084802439.png" alt="image-20211130084802439"></p>
<blockquote>
<p>display: flex/inline-flex -&gt; 父元素 -&gt; 多行元素的对齐方式 -&gt; （交叉轴-垂直方向）align-content: -&gt; space-evenly</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.flex-container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">600px</span>;</span><br><span class="line">  <span class="attribute">flex-wrap</span>: wrap;</span><br><span class="line">  <span class="attribute">align-content</span>: space-evenly;</span><br><span class="line">  <span class="attribute">background-color</span>: DodgerBlue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>垂直方向，真均匀分布，空白全部相同。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20211130085611844.png" alt="image-20211130085611844"></p>
<blockquote>
<p>display: flex/inline-flex -&gt; 父元素 -&gt; 多行元素的对齐方式 -&gt; （交叉轴-垂直方向）align-content: -&gt; stretch</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.flex-container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">600px</span>;</span><br><span class="line">  <span class="attribute">flex-wrap</span>: wrap;</span><br><span class="line">  <span class="attribute">align-content</span>: stretch;</span><br><span class="line">  <span class="attribute">background-color</span>: DodgerBlue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>垂直拉伸占据空间剩余的空间，<code>stretch</code> 为默认值。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20211130084946459.png" alt="image-20211130084946459"></p>
<blockquote>
<p>display: flex/inline-flex -&gt; 父元素 -&gt; 多行元素的对齐方式 -&gt; （交叉轴-垂直方向）align-content: -&gt; flex-start</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.flex-container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">600px</span>;</span><br><span class="line">  <span class="attribute">flex-wrap</span>: wrap;</span><br><span class="line">  <span class="attribute">align-content</span>: flex-start;</span><br><span class="line">  <span class="attribute">background-color</span>: DodgerBlue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>垂直方向，顶部对齐。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20211130085211401.png" alt="image-20211130085211401"></p>
<blockquote>
<p>display: flex/inline-flex -&gt; 父元素 -&gt; 多行元素的对齐方式 -&gt; （交叉轴-垂直方向）align-content: -&gt; flex-end</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.flex-container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">600px</span>;</span><br><span class="line">  <span class="attribute">flex-wrap</span>: wrap;</span><br><span class="line">  <span class="attribute">align-content</span>: flex-end;</span><br><span class="line">  <span class="attribute">background-color</span>: DodgerBlue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>垂直方向，底部对齐。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20211130085257855.png" alt="image-20211130085257855"></p>
<h2 id="order"><a href="#order" class="headerlink" title="order"></a>order</h2><blockquote>
<p>display: flex/inline-flex -&gt; 子元素 -&gt; order</p>
</blockquote>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.flex-container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#f1f1f1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;div class="flex-container"&gt;</span><br><span class="line">  &lt;div style="order: 3"&gt;1&lt;/div&gt;</span><br><span class="line">  &lt;div style="order: 2"&gt;2&lt;/div&gt;</span><br><span class="line">  &lt;div style="order: 4"&gt;3&lt;/div&gt; </span><br><span class="line">  &lt;div style="order: 1"&gt;4&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<p>根据 <code>order</code> 排列。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20211130093043919.png" alt="image-20211130093043919"></p>
<h2 id="flex-grow"><a href="#flex-grow" class="headerlink" title="flex-grow"></a>flex-grow</h2><blockquote>
<p>display: flex/inline-flex -&gt; 子元素 -&gt;  flex -&gt; flex-grow</p>
</blockquote>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.flex-container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#f1f1f1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;div class="flex-container"&gt;</span><br><span class="line">  &lt;div style="flex-grow: 1"&gt;1&lt;/div&gt;</span><br><span class="line">  &lt;div style="flex-grow: 1"&gt;2&lt;/div&gt;</span><br><span class="line">  &lt;div style="flex-grow: 8"&gt;3&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<p>当有剩余空间时，是否进行拉伸，默认值 <code>0</code> ，不拉伸。</p>
<p>有多个元素设置 <code>flex-grow</code> 的时候，值代表他们要增加的长度各自占额外空间的比例。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20211130093159628.png" alt="image-20211130093159628"></p>
<h2 id="flex-shrink"><a href="#flex-shrink" class="headerlink" title="flex-shrink"></a>flex-shrink</h2><blockquote>
<p>display: flex/inline-flex -&gt; 子元素 -&gt; flex -&gt; flex-shrink</p>
</blockquote>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.flex-container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#f1f1f1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.flex-container</span>&gt;<span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: DodgerBlue;</span><br><span class="line">  <span class="attribute">color</span>: white;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">75px</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br><span class="line">&lt;div class="flex-container"&gt;</span><br><span class="line">  &lt;div&gt;1&lt;/div&gt;</span><br><span class="line">  &lt;div&gt;2&lt;/div&gt;</span><br><span class="line">  &lt;div style="flex-shrink: 0"&gt;3&lt;/div&gt;</span><br><span class="line">  &lt;div&gt;4&lt;/div&gt;</span><br><span class="line">  &lt;div&gt;5&lt;/div&gt;</span><br><span class="line">  &lt;div&gt;6&lt;/div&gt;</span><br><span class="line">  &lt;div&gt;7&lt;/div&gt;</span><br><span class="line">  &lt;div&gt;8&lt;/div&gt;</span><br><span class="line">  &lt;div&gt;9&lt;/div&gt;</span><br><span class="line">  &lt;div&gt;10&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<p>当空间不足时，是否进行压缩，默认值是 <code>1</code>，进行压缩，<code>0</code> 代表不压缩。</p>
<p>有多个元素设置 <code>flex-shrink</code> 的时候，值代表他们各自占要减少空间的比例。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20211130094702390.png" alt="image-20211130094702390"></p>
<h2 id="flex-basis"><a href="#flex-basis" class="headerlink" title="flex-basis"></a>flex-basis</h2><blockquote>
<p> display: flex/inline-flex -&gt; 子元素 -&gt; flex-&gt; flex-basis</p>
</blockquote>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.flex-container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#f1f1f1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.flex-container</span>&gt;<span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: DodgerBlue;</span><br><span class="line">  <span class="attribute">color</span>: white;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">75px</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br><span class="line">&lt;div class="flex-container"&gt;</span><br><span class="line">  &lt;div&gt;1&lt;/div&gt;</span><br><span class="line">  &lt;div&gt;2&lt;/div&gt;</span><br><span class="line">  &lt;div style="flex-basis:200px"&gt;3&lt;/div&gt;</span><br><span class="line">  &lt;div&gt;4&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<p>主轴方向初始的宽度。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20211130095156537.png" alt="image-20211130095156537"></p>
<h2 id="flex-1"><a href="#flex-1" class="headerlink" title="flex"></a>flex</h2><blockquote>
<p>display: flex/inline-flex -&gt; 子元素 -&gt; flex</p>
</blockquote>
<p><code>flex-grow</code>、 <code>flex-shrink</code> 、 <code>flex-basis</code> 三个属性的合并写法。</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.flex-container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#f1f1f1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;div class="flex-container"&gt;</span><br><span class="line">  &lt;div&gt;1&lt;/div&gt;</span><br><span class="line">  &lt;div&gt;2&lt;/div&gt;</span><br><span class="line">  &lt;div style="flex: 0 0 200px"&gt;3&lt;/div&gt;</span><br><span class="line">  &lt;div&gt;4&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20211201072712816.png" alt="image-20211201072712816"></p>
<h2 id="align-self"><a href="#align-self" class="headerlink" title="align-self"></a>align-self</h2><p>和 <code>align-items</code> 的属性相同，优先级更高，覆盖父元素的属性。</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.flex-container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#f1f1f1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;div class="flex-container"&gt;</span><br><span class="line">  &lt;div&gt;1&lt;/div&gt;</span><br><span class="line">  &lt;div&gt;2&lt;/div&gt;</span><br><span class="line">  &lt;div style="align-self: center"&gt;3&lt;/div&gt;</span><br><span class="line">  &lt;div&gt;4&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<p>默认是 <code>stretch</code>，<code>3</code> 元素将会居中。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20211201073714384.png" alt="image-20211201073714384"></p>
<h1 id="举几个🌰"><a href="#举几个🌰" class="headerlink" title="举几个🌰"></a>举几个🌰</h1><p>卡片类的<img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20211201093202026.png" alt="image-20211201093202026"></p>
<p>图文垂直居中的</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20211201095347875.png" alt="image-20211201095347875"></p>
<p>靠左靠右的，这种除了用 <code>space-between</code> ，也可以给右边的元素设置 <code>margin-left: auto;</code>。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20211201095812357.png" alt="image-20211201095812357"></p>
<p>等等还有很多，基本上 <code>flex</code> 都可以搞定。</p>
<h1 id="总"><a href="#总" class="headerlink" title="总"></a>总</h1><p>上边就是 <code>flex</code> 的常用属性（不是全部）了，掌握以后就可以更加愉快的做「切图仔」了！</p>
<p>这些属性主要就是两类，一类决定排列的方向（从上到下、从下到上、从左到右、从右到左），一类决定对齐的方式（居中、居上、居下等）。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comflex.jpeg" alt="flex"></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>css</tag>
        <tag>flex</tag>
      </tags>
  </entry>
  <entry>
    <title>leetCode_5_Longest_Palindromic_Substring</title>
    <url>/2018/08/05/leetCode-5-Longest-Palindromic-Substring/</url>
    <content><![CDATA[<h2 id="题目描述（中等难度）"><a href="#题目描述（中等难度）" class="headerlink" title="题目描述（中等难度）"></a>题目描述（中等难度）</h2><p><img src="http://windliang.oss-cn-beijing.aliyuncs.com/5_palindromic.jpg" alt=""></p>
<p>给定一个字符串，输出最长的回文子串。回文串指的是正的读和反的读是一样的字符串，例如 “aba”，”ccbbcc”。</p>
<h2 id="解法一-暴力破解"><a href="#解法一-暴力破解" class="headerlink" title="解法一 暴力破解"></a>解法一 暴力破解</h2><p>暴力求解，列举所有的子串，判断是否为回文串，保存最长的回文串。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPalindromic</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> len = s.length();</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len / <span class="number">2</span>; i++) &#123;</span><br><span class="line">			<span class="keyword">if</span> (s.charAt(i) != s.charAt(len - i - <span class="number">1</span>)) &#123;</span><br><span class="line">				<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 暴力解法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">longestPalindrome</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">    String ans = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> len = s.length();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt;= len; j++) &#123;</span><br><span class="line">            String test = s.substring(i, j);</span><br><span class="line">            <span class="keyword">if</span> (isPalindromic(test) &amp;&amp; test.length() &gt; max) &#123;</span><br><span class="line">                ans = s.substring(i, j);</span><br><span class="line">                max = Math.max(max, ans.length());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>时间复杂度：两层 for 循环 O（n²），for 循环里边判断是否为回文，O（n），所以时间复杂度为 O（n³）。</p>
<p>空间复杂度：O（1），常数个变量。</p>
<h2 id="解法二-最长公共子串"><a href="#解法二-最长公共子串" class="headerlink" title="解法二 最长公共子串"></a>解法二 最长公共子串</h2><p>根据回文串的定义，正着和反着读一样，那我们是不是把原来的字符串倒置了，然后找最长的公共子串就可以了。例如，S = “ caba”，S’ = “ abac”，最长公共子串是 “aba”，所以原字符串的最长回文串就是 “aba”。</p>
<p>关于求最长公共子串（不是公共子序列），有很多方法，这里用动态规划的方法，可以先阅读下边的链接。</p>
<p><a href="https://blog.csdn.net/u010397369/article/details/38979077" target="_blank" rel="noopener">https://blog.csdn.net/u010397369/article/details/38979077</a></p>
<p><a href="https://www.kancloud.cn/digest/pieces-algorithm/163624" target="_blank" rel="noopener">https://www.kancloud.cn/digest/pieces-algorithm/163624</a></p>
<p>整体思想就是，申请一个二维的数组初始化为 0，然后判断对应的字符是否相等，相等的话</p>
<p>arr [ i ][  j ] = arr [ i - 1 ][ j - 1] + 1 。 </p>
<p>当 i = 0 或者 j = 0 的时候单独分析，字符相等的话 arr [ i ][  j ] 就赋为 1 。</p>
<p>arr [ i ][ j ] 保存的就是公共子串的长度。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">longestPalindrome</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (s.equals(<span class="string">""</span>))</span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">    String origin = s;</span><br><span class="line">    String reverse = <span class="keyword">new</span> StringBuffer(s).reverse().toString(); <span class="comment">//字符串倒置</span></span><br><span class="line">    <span class="keyword">int</span> length = s.length();</span><br><span class="line">    <span class="keyword">int</span>[][] arr = <span class="keyword">new</span> <span class="keyword">int</span>[length][length];</span><br><span class="line">    <span class="keyword">int</span> maxLen = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> maxEnd = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; length; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (origin.charAt(i) == reverse.charAt(j)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i == <span class="number">0</span> || j == <span class="number">0</span>) &#123;</span><br><span class="line">                    arr[i][j] = <span class="number">1</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    arr[i][j] = arr[i - <span class="number">1</span>][j - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (arr[i][j] &gt; maxLen) &#123; </span><br><span class="line">                maxLen = arr[i][j];</span><br><span class="line">                maxEnd = i; <span class="comment">//以 i 位置结尾的字符</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> s.substring(maxEnd - maxLen + <span class="number">1</span>, maxEnd + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>再看一个例子，S = “abc435cba”，S’ = “abc534cba” ，最长公共子串是 “abc” 和 “cba” ，但很明显这两个字符串都不是回文串。</p>
<p>所以我们求出最长公共子串后，并不一定是回文串，我们还需要判断该字符串倒置前的下标和当前的字符串下标是不是匹配。</p>
<p>比如 S = “ caba “，S’ = “ abac “ ，S’ 中 aba 的下标是 0 1 2 ，倒置前是 3 2 1，和 S 中 aba 的下标符合，所以 aba 就是我们需要找的。当然我们不需要每个字符都判断，我们只需要判断末尾字符就可以。</p>
<p><img src="http://windliang.oss-cn-beijing.aliyuncs.com/5_1.jpg" alt=""></p>
<p>首先 i ，j  始终指向子串的末尾字符。所以 j 指向的红色的 a 倒置前的下标是 beforeRev = length - 1 - j = 4 - 1 - 2 = 1，对应的是字符串首位的下标，我们还需要加上字符串的长度才是末尾字符的下标，也就是 beforeRev + arr[ i ] [ j ] - 1 = 1 + 3 - 1 = 3，因为 arr[ i ] [ j ] 保存的就是当前子串的长度，也就是图中的数字 3 。此时再和它与 i 比较，如果相等，则说明它是我们要找的回文串。</p>
<p>之前的 S = “abc435cba”，S’ = “abc534cba” ，可以看一下图示，为什么不符合。</p>
<p><img src="http://windliang.oss-cn-beijing.aliyuncs.com/5_2.jpg" alt=""></p>
<p>当前 j 指向的 c ，倒置前的下标是 beforeRev = length - 1 - j = 9 - 1 - 2 = 6，对应的末尾下标是 beforeRev + arr[ i ] [ j ] - 1 = 6 + 3 - 1 = 8 ，而此时 i = 2 ，所以当前的子串不是回文串。</p>
<p>代码的话，在上边的基础上，保存 maxLen 前判断一下下标匹不匹配就可以了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">longestPalindrome</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (s.equals(<span class="string">""</span>))</span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">    String origin = s;</span><br><span class="line">    String reverse = <span class="keyword">new</span> StringBuffer(s).reverse().toString();</span><br><span class="line">    <span class="keyword">int</span> length = s.length();</span><br><span class="line">    <span class="keyword">int</span>[][] arr = <span class="keyword">new</span> <span class="keyword">int</span>[length][length];</span><br><span class="line">    <span class="keyword">int</span> maxLen = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> maxEnd = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; length; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (origin.charAt(i) == reverse.charAt(j)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i == <span class="number">0</span> || j == <span class="number">0</span>) &#123;</span><br><span class="line">                    arr[i][j] = <span class="number">1</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    arr[i][j] = arr[i - <span class="number">1</span>][j - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">/**********修改的地方*******************/</span></span><br><span class="line">            <span class="keyword">if</span> (arr[i][j] &gt; maxLen) &#123;</span><br><span class="line">                <span class="keyword">int</span> beforeRev = length - <span class="number">1</span> - j;</span><br><span class="line">                <span class="keyword">if</span> (beforeRev + arr[i][j] - <span class="number">1</span> == i) &#123; <span class="comment">//判断下标是否对应</span></span><br><span class="line">                    maxLen = arr[i][j];</span><br><span class="line">                    maxEnd = i;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">/*************************************/</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> s.substring(maxEnd - maxLen + <span class="number">1</span>, maxEnd + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>时间复杂度：两层循环，O（n²）。</p>
<p>空间复杂度：一个二维数组，O（n²）。</p>
<p>空间复杂度其实可以再优化一下。</p>
<p><img src="http://windliang.oss-cn-beijing.aliyuncs.com/5_2.jpg" alt=""></p>
<p>我们分析一下循环，i = 0 ，j = 0，1，2 … 8 更新一列，然后 i = 1 ，再更新一列，而更新的时候我们其实只需要上一列的信息，更新第 3 列的时候，第 1 列的信息是没有用的。所以我们只需要一个一维数组就可以了。但是更新 arr [ i ] 的时候我们需要 arr [ i - 1 ] 的信息，假设 a [ 3 ] = a [ 2 ] + 1，更新 a [ 4 ] 的时候， 我们需要 a [ 3 ] 的信息，但是 a [ 3 ] 在之前已经被更新了，所以 j 不能从 0 到 8 ，应该倒过来，a [ 8 ] = a [ 7 ] + 1，a [ 7 ] = a [ 6 ] + 1 , 这样更新 a [ 8 ] 的时候用 a [ 7 ] ，用完后才去更新 a [ 7 ]，保证了不会出错。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">longestPalindrome</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (s.equals(<span class="string">""</span>))</span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">    String origin = s;</span><br><span class="line">    String reverse = <span class="keyword">new</span> StringBuffer(s).reverse().toString();</span><br><span class="line">    <span class="keyword">int</span> length = s.length();</span><br><span class="line">    <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[length];</span><br><span class="line">    <span class="keyword">int</span> maxLen = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> maxEnd = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++)</span><br><span class="line">        <span class="comment">/**************修改的地方***************************/</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = length - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">        <span class="comment">/**************************************************/</span></span><br><span class="line">            <span class="keyword">if</span> (origin.charAt(i) == reverse.charAt(j)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i == <span class="number">0</span> || j == <span class="number">0</span>) &#123;</span><br><span class="line">                    arr[j] = <span class="number">1</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    arr[j] = arr[j - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="comment">/**************修改的地方***************************/</span></span><br><span class="line">            <span class="comment">//之前二维数组，每次用的是不同的列，所以不用置 0 。</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                arr[j] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">/**************************************************/</span></span><br><span class="line">            <span class="keyword">if</span> (arr[j] &gt; maxLen) &#123;</span><br><span class="line">                <span class="keyword">int</span> beforeRev = length - <span class="number">1</span> - j;</span><br><span class="line">                <span class="keyword">if</span> (beforeRev + arr[j] - <span class="number">1</span> == i) &#123;</span><br><span class="line">                    maxLen = arr[j];</span><br><span class="line">                    maxEnd = i;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> s.substring(maxEnd - maxLen + <span class="number">1</span>, maxEnd + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>时间复杂度：O（n²）。</p>
<p>空间复杂度：降为 O（n）。</p>
<h2 id="解法三-暴力破解优化"><a href="#解法三-暴力破解优化" class="headerlink" title="解法三 暴力破解优化"></a>解法三 暴力破解优化</h2><p>解法一的暴力解法时间复杂度太高，在 leetCode 上并不能 AC 。我们可以考虑，去掉一些暴力解法中重复的判断。我们可以基于下边的发现，进行改进。</p>
<p>首先定义 P（i，j）。</p>
<p>$$P(i,j)=\begin{cases}true&amp; \text{s[i,j]是回文串} \\false&amp; \text{s[i,j]不是回文串}\end{cases}$$</p>
<p>接下来</p>
<p>$$P(i,j)=(P(i+1,j-1)\&amp;\&amp;S[i]==S[j])$$</p>
<p>所以如果我们想知道 P（i，j）的情况，不需要调用判断回文串的函数了，只需要知道 P（i + 1，j - 1）的情况就可以了，这样时间复杂度就少了 O（n）。因此我们可以用动态规划的方法，空间换时间，把已经求出的 P（i，j）存储起来。</p>
<p><img src="http://windliang.oss-cn-beijing.aliyuncs.com/5_3.jpg" alt=""></p>
<p>如果 $S[i+1,j-1]$ 是回文串，那么只要 S [ i ] == S [ j ] ，就可以确定 S [ i , j ] 也是回文串了。</p>
<p>求 长度为 1 和长度为 2 的 P ( i , j ) 时不能用上边的公式，因为我们代入公式后会遇到 $P[i][j]$ 中 i &gt; j 的情况，比如求 $P[1][2]$ 的话，我们需要知道 $P[1+1][2-1]=P[2][1]$ ，而 $P[2][1]$ 代表着 $S[2，1]$ 是不是回文串，显然是不对的，所以我们需要单独判断。</p>
<p>所以我们先初始化长度是 1 的回文串的 P [ i , j ]，这样利用上边提出的公式 $P(i,j)=(P(i+1,j-1)\&amp;\&amp;S[i]==S[j])$，然后两边向外各扩充一个字符，长度为 3 的，为 5 的，所有奇数长度的就都求出来了。</p>
<p>同理，初始化长度是 2 的回文串 P [ i , i + 1 ]，利用公式，长度为 4 的，6 的所有偶数长度的就都求出来了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">longestPalindrome</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> length = s.length();</span><br><span class="line">    <span class="keyword">boolean</span>[][] P = <span class="keyword">new</span> <span class="keyword">boolean</span>[length][length];</span><br><span class="line">    <span class="keyword">int</span> maxLen = <span class="number">0</span>;</span><br><span class="line">    String maxPal = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> len = <span class="number">1</span>; len &lt;= length; len++) <span class="comment">//遍历所有的长度</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> start = <span class="number">0</span>; start &lt; length; start++) &#123;</span><br><span class="line">            <span class="keyword">int</span> end = start + len - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (end &gt;= length) <span class="comment">//下标已经越界，结束本次循环</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            P[start][end] = (len == <span class="number">1</span> || len == <span class="number">2</span> || P[start + <span class="number">1</span>][end - <span class="number">1</span>]) &amp;&amp; s.charAt(start) == s.charAt(end); <span class="comment">//长度为 1 和 2 的单独判断下</span></span><br><span class="line">            <span class="keyword">if</span> (P[start][end] &amp;&amp; len &gt; maxLen) &#123;</span><br><span class="line">                maxPal = s.substring(start, end + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> maxPal;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>时间复杂度：两层循环，O（n²）。</p>
<p>空间复杂度：用二维数组 P 保存每个子串的情况，O（n²）。</p>
<p>我们分析下每次循环用到的 P（i，j），看一看能不能向解法二一样优化一下空间复杂度。</p>
<p><img src="http://windliang.oss-cn-beijing.aliyuncs.com/5_4.jpg" alt=""></p>
<p>当我们求长度为 6 和 5 的子串的情况时，其实只用到了 4 ， 3 长度的情况，而长度为 1 和 2 的子串情况其实已经不需要了。但是由于我们并不是用 P 数组的下标进行的循环，暂时没有想到优化的方法。</p>
<p>之后看到了另一种动态规划的思路</p>
<p><a href="https://leetcode.com/problems/longest-palindromic-substring/discuss/2921/Share-my-Java-solution-using-dynamic-programming" target="_blank" rel="noopener">https://leetcode.com/problems/longest-palindromic-substring/discuss/2921/Share-my-Java-solution-using-dynamic-programming</a> 。</p>
<p>公式还是这个不变</p>
<p>首先定义 P（i，j）。</p>
<p>$$P(i,j)=\begin{cases}true&amp; \text{s[i,j]是回文串}\\false&amp; \text{s[i,j]不是回文串}\end{cases}$$</p>
<p>接下来</p>
<p>$$P(i,j)=(P(i+1,j-1)\&amp;\&amp;S[i]==S[j])$$</p>
<p>递推公式中我们可以看到，我们首先知道了 i +1 才会知道 i ，所以我们只需要倒着遍历就行了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">longestPalindrome</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = s.length();</span><br><span class="line">    String res = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">boolean</span>[][] dp = <span class="keyword">new</span> <span class="keyword">boolean</span>[n][n];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; n; j++) &#123;</span><br><span class="line">            dp[i][j] = s.charAt(i) == s.charAt(j) &amp;&amp; (j - i &lt; <span class="number">2</span> || dp[i + <span class="number">1</span>][j - <span class="number">1</span>]); <span class="comment">//j - i 代表长度减去 1        </span></span><br><span class="line">            <span class="keyword">if</span> (dp[i][j] &amp;&amp;  j - i + <span class="number">1</span> &gt; res.length()) &#123;</span><br><span class="line">                res = s.substring(i, j + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>时间复杂度和空间复杂和之前都没有变化，我们来看看可不可以优化空间复杂度。</p>
<p><img src="http://windliang.oss-cn-beijing.aliyuncs.com/5_5.jpg" alt=""></p>
<p>当求第 i 行的时候我们只需要第 i + 1 行的信息，并且 j 的话需要 j - 1 的信息，所以和之前一样 j 也需要倒叙。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">longestPalindrome7</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> n = s.length();</span><br><span class="line">		String res = <span class="string">""</span>;</span><br><span class="line">		<span class="keyword">boolean</span>[] P = <span class="keyword">new</span> <span class="keyword">boolean</span>[n];</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = n - <span class="number">1</span>; j &gt;= i; j--) &#123;</span><br><span class="line">				P[j] = s.charAt(i) == s.charAt(j) &amp;&amp; (j - i &lt; <span class="number">3</span> || P[j - <span class="number">1</span>]);</span><br><span class="line">				<span class="keyword">if</span> (P[j] &amp;&amp; j - i + <span class="number">1</span> &gt; res.length()) &#123;</span><br><span class="line">					res = s.substring(i, j + <span class="number">1</span>);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> res;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<p>时间复杂度：不变，O（n²）。</p>
<p>空间复杂度：降为 O（n ) 。</p>
<h2 id="解法四-扩展中心"><a href="#解法四-扩展中心" class="headerlink" title="解法四 扩展中心"></a>解法四 扩展中心</h2><p>我们知道回文串一定是对称的，所以我们可以每次循环选择一个中心，进行左右扩展，判断左右字符是否相等即可。</p>
<p><img src="http://windliang.oss-cn-beijing.aliyuncs.com/5_6.jpg" alt=""></p>
<p>由于存在奇数的字符串和偶数的字符串，所以我们需要从一个字符开始扩展，或者从两个字符之间开始扩展，所以总共有 n + n - 1 个中心。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">longestPalindrome</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (s == <span class="keyword">null</span> || s.length() &lt; <span class="number">1</span>) <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">int</span> start = <span class="number">0</span>, end = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> len1 = expandAroundCenter(s, i, i);</span><br><span class="line">        <span class="keyword">int</span> len2 = expandAroundCenter(s, i, i + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> len = Math.max(len1, len2);</span><br><span class="line">        <span class="keyword">if</span> (len &gt; end - start) &#123;</span><br><span class="line">            start = i - (len - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">            end = i + len / <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s.substring(start, end + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">expandAroundCenter</span><span class="params">(String s, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> L = left, R = right;</span><br><span class="line">    <span class="keyword">while</span> (L &gt;= <span class="number">0</span> &amp;&amp; R &lt; s.length() &amp;&amp; s.charAt(L) == s.charAt(R)) &#123;</span><br><span class="line">        L--;</span><br><span class="line">        R++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> R - L - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>时间复杂度：O（n²）。</p>
<p>空间复杂度：O（1）。</p>
<h2 id="解法五-Manacher’s-Algorithm-马拉车算法。"><a href="#解法五-Manacher’s-Algorithm-马拉车算法。" class="headerlink" title="解法五 Manacher’s Algorithm 马拉车算法。"></a>解法五 Manacher’s Algorithm 马拉车算法。</h2><blockquote>
<p>马拉车算法 Manacher‘s Algorithm 是用来查找一个字符串的最长回文子串的线性方法，由一个叫Manacher的人在1975年发明的，这个方法的最大贡献是在于将时间复杂度提升到了线性。</p>
</blockquote>
<p>主要参考了下边链接进行讲解。</p>
<p><a href="https://segmentfault.com/a/1190000008484167" target="_blank" rel="noopener">https://segmentfault.com/a/1190000008484167</a></p>
<p><a href="https://blog.crimx.com/2017/07/06/manachers-algorithm/" target="_blank" rel="noopener">https://blog.crimx.com/2017/07/06/manachers-algorithm/</a></p>
<p><a href="http://ju.outofmemory.cn/entry/130005" target="_blank" rel="noopener">http://ju.outofmemory.cn/entry/130005</a></p>
<p><a href="https://articles.leetcode.com/longest-palindromic-substring-part-ii/" target="_blank" rel="noopener">https://articles.leetcode.com/longest-palindromic-substring-part-ii/</a></p>
<p>首先我们解决下奇数和偶数的问题，在每个字符间插入”#”，并且为了使得扩展的过程中，到边界后自动结束，在两端分别插入 “^” 和 “$”，两个不可能在字符串中出现的字符，这样向解法四那样中心扩展的时候，判断两端字符是否相等的时候，如果到了边界就一定会不相等，从而出了循环。经过处理，字符串的长度永远都是奇数了。</p>
<p><img src="http://windliang.oss-cn-beijing.aliyuncs.com/5_7.jpg" alt=""></p>
<p>首先我们用一个数组 P 保存从中心扩展的个数，巧合的它也是去掉 “#” 的字符串的总长度，可以看下边的图。</p>
<p><img src="http://windliang.oss-cn-beijing.aliyuncs.com/5_8.jpg" alt=""></p>
<p>用 P 的下标 i 减去 P[i]，再除以 2 ，就是原字符串的开头下标了。</p>
<p>例如我们找到 P[i] 的最大值为 5 ，也就是回文串的最大长度是 5 ，对应的下标是 6 ，所以原字符串的开头下标是 （6 - 5 ）/ 2 = 0 。所以我们只需要返回原字符串的第 0 到 第 （5 - 1）位就可以了。</p>
<p>接下来是算法的关键了，它充分利用了回文串的对称性。</p>
<p>我们用 C 表示回文串的中心，用 R 表示回文串的右边半径。所以 R = C + P[i] 。C 和 R 所对应的回文串是当前循环中 R 最靠右的回文串。</p>
<p>用 i_mirror 表示当前扩展的第 i 个字符关于 C 对应的下标。</p>
<p><img src="http://windliang.oss-cn-beijing.aliyuncs.com/5_9.jpg" alt=""></p>
<p>我们现在要求 P [ i ] 如果是解法四，那就向两边扩展就行了。但是我们其实可以利用回文串 C 的对称性。i 关于 C 的对称点是 i_mirror ，P [ mirror ] = 3，所以 P [ i ] 也等于 3 。</p>
<p>有三种情况将会造成直接赋值为 P [ mirror ] 是不正确的。</p>
<h3 id="超出了-R"><a href="#超出了-R" class="headerlink" title="超出了 R"></a>超出了 R</h3><p><img src="http://windliang.oss-cn-beijing.aliyuncs.com/5_10.jpg" alt=""></p>
<p>当我们要求 P[i] 的时候，P [ mirror ] = 7，而此时 P [ i ] 并不等于 7 ，为什么呢，因为我们从 i 开始往后数 7 个，等于 22 ，已经超过了最右的 R ，此时不能利用对称性了，但我们一定可以扩展到 R 的，所以 P [i] 至少等于 R - i = 20 - 15 = 5，会不会更大呢，我们只需要比较 T[R+1] 和 T[R+1]关于 i 的对称点就行了，像解法四一样一个个扩展。</p>
<h3 id="P-mirror-遇到了左边界"><a href="#P-mirror-遇到了左边界" class="headerlink" title="P [ mirror ] 遇到了左边界"></a>P [ mirror ] 遇到了左边界</h3><p><img src="http://windliang.oss-cn-beijing.aliyuncs.com/5_12.jpg" alt=""></p>
<p>此时 P [ i ] 赋值成 1 是不正确的，出现这种情况的原因是  P [ i_mirror ] 在扩展的时候首先是 “#” == “#” ，之后遇到了 “^”和另一个字符比较，也就是到了边界，才终止循环的。而 P [ i ] 并没有遇到边界，所以我们可以接着扩展，就像之前一样。</p>
<h3 id="i-等于了-R"><a href="#i-等于了-R" class="headerlink" title="i 等于了 R"></a>i 等于了 R</h3><p>此时我们先把 P [ i ] 赋值为 0 ，然后一步一步扩展就行了。</p>
<p>就这样一步一步的求出每个 P [ i ]，当求出的 P [ i ] 的右边界大于当前的 R 时，我们就需要更新 C 和 R 为当前的回文串了。因为我们必须保证 i 在 R 里面，所以一旦有更右边的 R 就要更新 R。</p>
<p><img src="http://windliang.oss-cn-beijing.aliyuncs.com/5_12.jpg" alt=""></p>
<p>此时的 P [ i ] 求出来将会是 3 ，P [ i ] 对应的右边界将是 10 + 3 = 13，所以大于当前的 R ，我们需要把 C 更新成 i  的值，也就是 10 ，R 更新成 13。继续下边的循环。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">preProcess</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = s.length();</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"^$"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    String ret = <span class="string">"^"</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        ret += <span class="string">"#"</span> + s.charAt(i);</span><br><span class="line">    ret += <span class="string">"#$"</span>;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 马拉车算法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">longestPalindrome2</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">    String T = preProcess(s);</span><br><span class="line">    <span class="keyword">int</span> n = T.length();</span><br><span class="line">    <span class="keyword">int</span>[] P = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">    <span class="keyword">int</span> C = <span class="number">0</span>, R = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> i_mirror = <span class="number">2</span> * C - i;</span><br><span class="line">        <span class="keyword">if</span> (R &gt; i) &#123;</span><br><span class="line">            P[i] = Math.min(R - i, P[i_mirror]);<span class="comment">// 防止超出 R</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            P[i] = <span class="number">0</span>;<span class="comment">// 等于 R 的情况</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 碰到之前讲的三种情况时候，需要继续扩展</span></span><br><span class="line">        <span class="keyword">while</span> (T.charAt(i + <span class="number">1</span> + P[i]) == T.charAt(i - <span class="number">1</span> - P[i])) &#123;</span><br><span class="line">            P[i]++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判断是否需要更新 R</span></span><br><span class="line">        <span class="keyword">if</span> (i + P[i] &gt; R) &#123;</span><br><span class="line">            C = i;</span><br><span class="line">            R = i + P[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 找出 P 的最大值</span></span><br><span class="line">    <span class="keyword">int</span> maxLen = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> centerIndex = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (P[i] &gt; maxLen) &#123;</span><br><span class="line">            maxLen = P[i];</span><br><span class="line">            centerIndex = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> start = (centerIndex - maxLen) / <span class="number">2</span>; <span class="comment">//最开始讲的</span></span><br><span class="line">    <span class="keyword">return</span> s.substring(start, start + maxLen);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>时间复杂度：for 循环里边套了一层 while 循环，难道不是 O ( n² )，不！其实是 O（n）。我们想象一下整个过程，首先外层有一个 for 循环，所以每个字符会遍历一次，而当我们扩展的时候，每次都是从 R + 1 开始扩展，之后又会更新 R 。所以一些字符会遍历两次，但此时这些字符变到 R 的左边，所以不会遍历第三次了，因为我们每次从 R 的右边开始扩展。综上，每个字符其实最多遍历 2 次，所以依旧是线性的，当然如果字符串成为 len ，这里的 n 其实是 2 * len + 3 。所以时间复杂度是 O（n）。</p>
<p>空间复杂度：O（n）。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>时间复杂度从三次方降到了一次，美妙！这里两次用到了动态规划去求解，初步认识了动态规划，就是将之前求的值保存起来，方便后边的计算，使得一些多余的计算消失了。并且在动态规划中，通过观察数组的利用情况，从而降低了空间复杂度。而 Manacher 算法对回文串对称性的充分利用，不得不让人叹服，自己加油啦！</p>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>二叉索引树（树状数组）的原理</title>
    <url>/2020/08/30/%E4%BA%8C%E5%8F%89%E7%B4%A2%E5%BC%95%E6%A0%91%EF%BC%88%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84%EF%BC%89%E7%9A%84%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>了解到二叉索引树这个数据结构，是在 <code>leetcode</code> 的 <a href="https://leetcode.wang/leetcode-307-Range-Sum-Query-Mutable.html" target="_blank" rel="noopener">307 题</a>，题目是要求实现一个数据结构，可以返回数组任意区间的和以及更新数组的某个值。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">307</span>、Range Sum Query - Mutable</span><br><span class="line"></span><br><span class="line">Given an integer array nums, <span class="function">find the sum of the elements between indices i and <span class="title">j</span> <span class="params">(i ≤ j)</span>, inclusive.</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">The <span class="title">update</span><span class="params">(i, val)</span> function modifies nums by updating the element at index i to val.</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">Example:</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    Given nums </span>= [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>]</span><br><span class="line">    </span><br><span class="line">    sumRange(<span class="number">0</span>, <span class="number">2</span>) -&gt; <span class="number">9</span></span><br><span class="line">    update(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">    sumRange(<span class="number">0</span>, <span class="number">2</span>) -&gt; <span class="number">8</span></span><br><span class="line"></span><br><span class="line">Constraints:</span><br><span class="line"></span><br><span class="line">- The array is only modifiable by the update function.</span><br><span class="line">- You may assume the number of calls to update and sumRange function is distributed evenly.</span><br><span class="line">- <span class="number">0</span> &lt;= i &lt;= j &lt;= nums.length - <span class="number">1</span></span><br></pre></td></tr></table></figure>
<h1 id="常规解法"><a href="#常规解法" class="headerlink" title="常规解法"></a>常规解法</h1><p>先介绍下常规的解法，树状数组有用到他们之中的一些思想或者过程。</p>
<h2 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h2><p>最暴力的解法，<code>sumRange</code>  直接 <code>for</code> 循环算，<code>update</code> 直接更新数组中的值。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; nums</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> NumArray = <span class="function"><span class="keyword">function</span> (<span class="params">nums</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.nums = [...nums];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; i</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; val</span></span><br><span class="line"><span class="comment"> * @return &#123;void&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">NumArray.prototype.update = <span class="function"><span class="keyword">function</span> (<span class="params">i, val</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.nums[i] = val;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; i</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; j</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">NumArray.prototype.sumRange = <span class="function"><span class="keyword">function</span> (<span class="params">i, j</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> k = i; k &lt;= j; k++) &#123;</span><br><span class="line">    sum += <span class="keyword">this</span>.nums[k];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> sum;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your NumArray object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * var obj = new NumArray(nums)</span></span><br><span class="line"><span class="comment"> * obj.update(i,val)</span></span><br><span class="line"><span class="comment"> * var param_2 = obj.sumRange(i,j)</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>
<p>时间复杂度： <code>update</code> 是 <code>O(1)</code>，<code>sumRange</code> 是 <code>O(n)</code>。</p>
<h2 id="解法二"><a href="#解法二" class="headerlink" title="解法二"></a>解法二</h2><p><a href="https://leetcode.wang/leetcode-303-Range-Sum-Query-Immutable.html" target="_blank" rel="noopener">303 题</a> 做过 <code>sumRange</code> 的优化，我们用一个数组保存累计的和，<code>numsAccumulate[i]</code> 存储 <code>0</code> 到 <code>i - 1</code> 累计的和。</p>
<p>如果我们想求 <code>i</code> 累积到 <code>j</code> 的和，只需要用 <code>numsAccumulate[j + 1]</code> 减去 <code>numsAccumulate[i]</code>。</p>
<p>结合下边的图应该很好理解，我们要求的是橙色部分，相当于 <code>B</code> 的部分减去 <code>A</code> 的部分。</p>
<p><img src="https://windliang.oss-cn-beijing.aliyuncs.com/303_2.jpg" alt="img"></p>
<p>所以我们可以提前把一些前缀和存起来，然后查询区间和的时候在可以通过差实现。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; nums</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> NumArray = <span class="function"><span class="keyword">function</span> (<span class="params">nums</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.nums = [...nums];</span><br><span class="line">  <span class="keyword">this</span>.numsAccumulate = [<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">    sum += nums[i];</span><br><span class="line">    <span class="keyword">this</span>.numsAccumulate.push(sum);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; i</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; val</span></span><br><span class="line"><span class="comment"> * @return &#123;void&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">NumArray.prototype.update = <span class="function"><span class="keyword">function</span> (<span class="params">i, val</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> sub = val - <span class="keyword">this</span>.nums[i];</span><br><span class="line">  <span class="keyword">this</span>.nums[i] = val;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> k = i + <span class="number">1</span>; k &lt; <span class="keyword">this</span>.numsAccumulate.length; k++) &#123;</span><br><span class="line">    <span class="keyword">this</span>.numsAccumulate[k] += sub;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; i</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; j</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">NumArray.prototype.sumRange = <span class="function"><span class="keyword">function</span> (<span class="params">i, j</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.numsAccumulate[j + <span class="number">1</span>] - <span class="keyword">this</span>.numsAccumulate[i];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your NumArray object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * var obj = new NumArray(nums)</span></span><br><span class="line"><span class="comment"> * obj.update(i,val)</span></span><br><span class="line"><span class="comment"> * var param_2 = obj.sumRange(i,j)</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>
<p>时间复杂度： <code>update</code> 是 <code>O(n)</code>，<code>sumRange</code> 是 <code>O(1)</code>。</p>
<p>虽然 <code>sumRange</code> 的时间复杂度优化了，但是 <code>update</code> 又变成了 <code>O(n)</code>。因为更新一个值的时候，这个值后边的累计和都需要更新。</p>
<h2 id="解法三"><a href="#解法三" class="headerlink" title="解法三"></a>解法三</h2><p>解法一和解法二时间复杂度两个方法始终一个是 <code>O(1)</code>，一个是 <code>O(n)</code>。这里再分享 <a href="https://leetcode.com/problems/range-sum-query-mutable/solution/" target="_blank" rel="noopener">官方题解</a> 提供的一个解法，可以优化查询区间的时间复杂度。</p>
<p>我们可以将原数据分成若干个组，然后提前计算这些组的和，举个例子。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">组号:    <span class="number">0</span>         <span class="number">1</span>            <span class="number">2</span>              <span class="number">3</span></span><br><span class="line">数组: [<span class="number">2</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span>] [<span class="number">9</span> <span class="number">9</span> <span class="number">3</span> <span class="number">8</span>] [<span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>   <span class="number">4</span>]  [<span class="number">4</span>    <span class="number">2</span>  <span class="number">3</span>   <span class="number">4</span>]</span><br><span class="line">下标:  <span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span>   <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span>   <span class="number">8</span>  <span class="number">9</span>  <span class="number">10</span>  <span class="number">11</span>   <span class="number">12</span>  <span class="number">13</span>  <span class="number">14</span>  <span class="number">15</span></span><br><span class="line">和:      <span class="number">17</span>        <span class="number">29</span>          <span class="number">10</span>              <span class="number">13</span></span><br></pre></td></tr></table></figure>
<p>如果我们要计算 <code>sumRange(1,13)</code>，之前我们需要循环累加下标 <code>1</code> 到 <code>13</code> 的数字的和。</p>
<p>现在我们只需要循环累加 <code>1</code> 到 <code>3</code> 的和，加上循环累加 <code>12</code> 到 <code>13</code> 的和，再累加中间组提前算好的和，也就是第 <code>1</code> 组和第 <code>2</code> 组的和 <code>29</code> 和 <code>10</code> ，就是最终的结果了。</p>
<p>至于更新的话，我们也不需要像解法二那样更新那么多。我们只需要更新当前元素所在的组即可。</p>
<p>下一个问题，每组的大小定多少呢？</p>
<p>如果定的小了，那么组数就会特别多。</p>
<p>如果定的大了，那么组内元素就会特别多。</p>
<p>组数和组内元素个数都会影响到 <code>sumRange</code> 的时间复杂度。</p>
<p>这里，我们在组数和组内元素个数之间取个平衡，假设数组大小是 <code>n</code>，那么组内元素个数取 $\sqrt{n}$ ，这样的话组数也是  $\sqrt{n}$ ，这样就可以保证我们查询的时间复杂度是  $O(\sqrt{n})$ 了。因为最坏的情况，无非是查询范围跨越整个数组，中间我们需要累加 $\sqrt{n} - 2$ 个组，第 <code>0</code> 组最多累加 $\sqrt{n}$  次，最后一组也最多累加 $\sqrt{n}$  次，整体上就是   $O(\sqrt{n})$ 了。</p>
<p>结合代码理解一下。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; nums</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> NumArray = <span class="function"><span class="keyword">function</span> (<span class="params">nums</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.nums = [...nums];</span><br><span class="line">  <span class="keyword">this</span>.groupSize = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.sqrt(<span class="keyword">this</span>.nums.length));</span><br><span class="line">  <span class="keyword">this</span>.group = [];</span><br><span class="line">  <span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">    sum += nums[i];</span><br><span class="line">    <span class="keyword">if</span> ((i + <span class="number">1</span>) % <span class="keyword">this</span>.groupSize === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.group.push(sum);</span><br><span class="line">      sum = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//有可能数组大小不能整除组的大小, 最后会遗漏下几个元素</span></span><br><span class="line">  <span class="keyword">if</span> (i % <span class="keyword">this</span>.groupSize !== <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.group.push(sum);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; i</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; val</span></span><br><span class="line"><span class="comment"> * @return &#123;void&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">NumArray.prototype.update = <span class="function"><span class="keyword">function</span> (<span class="params">i, val</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> sub = val - <span class="keyword">this</span>.nums[i];</span><br><span class="line">  <span class="keyword">let</span> groudId = <span class="built_in">Math</span>.floor(i / <span class="keyword">this</span>.groupSize);</span><br><span class="line">  <span class="keyword">this</span>.group[groudId] += sub;</span><br><span class="line">  <span class="keyword">this</span>.nums[i] = val;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; i</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; j</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">NumArray.prototype.sumRange = <span class="function"><span class="keyword">function</span> (<span class="params">i, j</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> groupI = <span class="built_in">Math</span>.floor(i / <span class="keyword">this</span>.groupSize);</span><br><span class="line">  <span class="keyword">let</span> groupJ = <span class="built_in">Math</span>.floor(j / <span class="keyword">this</span>.groupSize);</span><br><span class="line">  <span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line">  <span class="comment">//在同一组内, 直接累加</span></span><br><span class="line">  <span class="keyword">if</span> (groupI === groupJ) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> k = i; k &lt;= j; k++) &#123;</span><br><span class="line">      sum += <span class="keyword">this</span>.nums[k];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//左边组的元素累加</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> k = i; k &lt; (groupI + <span class="number">1</span>) * <span class="keyword">this</span>.groupSize; k++) &#123;</span><br><span class="line">      sum += <span class="keyword">this</span>.nums[k];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//累加中间所有的组</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> g = groupI + <span class="number">1</span>; g &lt; groupJ; g++) &#123;</span><br><span class="line">      sum += <span class="keyword">this</span>.group[g];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//右边组的元素累加</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> k = groupJ * <span class="keyword">this</span>.groupSize; k &lt;= j; k++) &#123;</span><br><span class="line">      sum += <span class="keyword">this</span>.nums[k];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> sum;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your NumArray object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * var obj = new NumArray(nums)</span></span><br><span class="line"><span class="comment"> * obj.update(i,val)</span></span><br><span class="line"><span class="comment"> * var param_2 = obj.sumRange(i,j)</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>
<p>时间复杂度： <code>update</code> 是 <code>O(1)</code>，<code>sumRange</code> 是  $O(\sqrt{n})$  。</p>
<h1 id="树状数组"><a href="#树状数组" class="headerlink" title="树状数组"></a>树状数组</h1><p>有了上边的背景，我们再回到树状数组。</p>
<p>这个解法写法很简单，但理解的话可能稍微难一些，很多文章都直接讲该怎么用，没有介绍最初的动机，于是去看了提出这个解法的 <a href="http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.14.8917&amp;rep=rep1&amp;type=pdf" target="_blank" rel="noopener">原始论文</a>，看看能不能理解。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/tree1.jpg" alt=""></p>
<p>这个解法叫 <code>Fenwick tree</code> 或者<code>binary indexed tree</code>，翻译过来的话叫做树状数组或者二叉索引树，但我觉得 <code>binary</code> 翻译成二进制更好，叫做二进制索引树更贴切些，二叉树容易引起误解。</p>
<p>回想一下解法三，我们预先求出了若干个区间和，然后查询的区间可以根据之前预先求出来的区间来求出。这里的话同样的思想，先预先求一些区间和，然后把要求的区间分解成若干个之前求好的区间和即可。相比于解法三，这里的分解会更加巧妙一些。</p>
<p>我们知道计算机中的数都是由二进制来表示的，任何一个数都可以分解成 <code>2</code> 的幂次的和，进制转换不熟的话可以参考 <a href="https://zhuanlan.zhihu.com/p/114542440" target="_blank" rel="noopener">再谈进制转换</a>。</p>
<p>举个例子 $11 = 2^0 + 2^1 + 2^3 = 1 + 2 + 8$，$9=2^0+2^3=1+8$ 等等。</p>
<p>接下来就是神奇的地方了，每一个数都可以拆成这样的 <code>x = a + b + c + ...</code> 的形式。</p>
<p>我们把等式左侧的数 <code>x</code> 看做是区间 <code>[1, x]</code>，等式右边看做从 <code>x</code> 开始每个区间的<strong>长度</strong>，也就变成了下边的样子。</p>
<p><code>[1, x] = [x, x - a + 1] + [x - a, x - a - b + 1] + [x - a - b, x - a - b - c + 1] + ...</code>。</p>
<p>看起来有些复杂，举个具体的例子就简单多了。</p>
<p>以  $11 = 2^0 + 2^1 + 2^3 = 1 + 2 + 8$ 为例，可以转换为下边的等式。</p>
<p><code>[1, 11] = [11, 11] + [10, 9] + [8, 1]</code>。</p>
<p><code>[11, 11]</code>、<code>[10, 9]</code>、<code>[8, 1]</code> 长度分别是 <code>1</code>、<code>2</code>、<code>8</code>。</p>
<p>我们成功把一个大区间，分成了若干个小区间，这就是树状数组最核心的地方了，只要理解了上边讲的，下边就很简单了。</p>
<p>首先，因为数组的下标是从 <code>0</code>  开始的，上边的区间范围是从 <code>1</code> 开始的，所以我们在原数组开头补一个 <code>0</code> ，这样区间就是从 <code>1</code> 开始了。</p>
<p>因此我们可以通过分解快速的求出 <code>[1, x]</code> 任意前缀区间的和，知道了前缀区间的和，就回到了解法二，通过做差可以算出任意区间的和了。</p>
<p>最后，我们需要解决子区间该怎么求？</p>
<p><code>[1, 11] = [11, 11] + [10, 9] + [8, 1]</code> 我们用 <code>V</code> 表示子区间，用 <code>F</code> 表示某个区间。</p>
<p><code>F[1,11] = V[11] + V[10] + V[8]</code></p>
<p>其中，<code>V[11] = F[11,11], V[10] = F[10,9], V[8]=F[8...1]</code>，为什么是这样？</p>
<p>回到二进制，<code>F[0001,1011] = V[1011] + V[1010] + V[1000]</code></p>
<p><code>1010 = 1011 - 0001</code>，<code>0001</code> 就是十进制的 <code>1</code>，所以 <code>V[1011]</code> 存 <code>1</code> 个数，所以 <code>V[11] = F[11,11]</code>。</p>
<p><code>1000 = 1010 - 0010</code>，<code>0010</code> 就是十进制的 <code>2</code>，所以 <code>V[1010]</code> 存 <code>2</code> 个数，所以 <code>V[10] = F[10,9]</code>。</p>
<p><code>0000 = 1000 - 1000</code>，<code>1000</code> 就是十进制的 <code>8</code>，所以 <code>V[1000]</code> 存 <code>8</code> 个数，所以 <code>V[8] = F[8...1]</code>。</p>
<p> <code>V[1011]</code> 存 <code>1</code> 个数， <code>V[1010]</code> 存 <code>2</code> 个数，看的是二进制最右边的一个 <code>1</code> 到末尾的大小。<code>1010</code> 就是 <code>10</code>，<code>1000</code> 就是 <code>1000</code> 。</p>
<p>怎么得到一个数最右边的 <code>1</code> 到末尾的大小，是二进制操作的一个技巧，会用到一些补码的知识，可以参考 <a href="https://zhuanlan.zhihu.com/p/67227136" target="_blank" rel="noopener">趣谈计算机补码</a>。</p>
<p>将原数取反，然后再加 <code>1</code> 得到的新数和原数按位相与就得到了最右边的 <code>1</code> 到末尾的数。</p>
<p>举个例子，对于 <code>101000</code> ，先取反得到 <code>010111</code>，再加 <code>1</code> 变成 <code>011000</code>，再和原数相与，<code>101000 &amp; 011000</code>，刚好就得到了 <code>1000</code>。其中，取反再加一，根据补码的知识，可以通过取相反数得到。</p>
<p>所以对于 <code>i</code> 的话，<code>i &amp; -i</code> 就得到了最右边的 <code>1</code> 到末尾的数，也就是 <code>V[i]</code> 这个区间存多少个数。</p>
<p>如果 <code>len = i &amp; -i</code> ，那么 <code>V[i] = F[i,i-1,i-2, ... i-len+1]</code>。</p>
<p>参考下边的代码，<code>BIT</code> 就是我们上边要求的 <code>V</code> 数组。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; nums</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> NumArray = <span class="function"><span class="keyword">function</span> (<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.nums = [<span class="number">0</span>, ...nums]; <span class="comment">//补一个 0</span></span><br><span class="line">    <span class="keyword">this</span>.BIT = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="keyword">this</span>.nums.length);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; <span class="keyword">this</span>.BIT.length; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> index = i - ( i &amp; -i ) + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">this</span>.BIT[i] = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//累加 index 到 i 的和</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.BIT[i] += <span class="keyword">this</span>.nums[index];</span><br><span class="line">            index += <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (index &gt; i) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>有了 <code>BIT</code> 这个数组，一切就都好说了。如果我们想求 <code>F[1, 11]</code> 也就是前 <code>11</code> 个数的和。</p>
<p><code>F[1,11] = BIT[11] + BIT[10] + BIT[8]</code>，看下二进制 <code>BIT[0001,1011] = BIT[1011] + BIT[1010] + BIT[1000]</code> 。</p>
<p><code>1011 -&gt; 1010 -&gt; 1000</code>，对于  <code>BIT</code> 每次的下标就是依次把当前数最右边的 <code>1</code> 变成 <code>0</code> 。</p>
<p>这里有两种做法，一种是我们求出当前数最右边的 <code>1</code> 到末尾的数，然后用原数减一下。</p>
<p>举个例子， <code>1010</code> 最右边的 <code>1</code> 到末尾的数是 <code>10</code> ，然后用 <code>1010 - 10</code> 就得到 <code>1000</code> 了。</p>
<p>另外一种做法，就是 <code>n &amp; (n - 1)</code>，比如 <code>1010 &amp; (1010 - 1)</code>，刚好就是 <code>1000</code> 了。</p>
<p>知道了这个，我们可以实现一个函数，用来求区间 <code>[1, n]</code> 的和。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">NumArray.prototype.range = <span class="function"><span class="keyword">function</span> (<span class="params">index</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> (index &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    sum += <span class="keyword">this</span>.BIT[index];</span><br><span class="line">    index -= index &amp; -index;</span><br><span class="line">    <span class="comment">//index = index &amp; (index - 1); //这样也可以</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> sum;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>有了 <code>range</code> 函数，题目中的 <code>sumRange</code> 也就很好实现了。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">NumArray.prototype.sumRange = <span class="function"><span class="keyword">function</span> (<span class="params">i, j</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//range 求的区间范围下标是从 1 开始的,所以这里的 j 需要加 1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.range(j + <span class="number">1</span>) - <span class="keyword">this</span>.range(i);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>接下来是更新函数怎么写。</p>
<p>更新函数的话，最关键的就是找出，当我们更新数组第 <code>i</code> 个值，会影响到我们的哪些子区间，也就是代码中的 <code>BIT</code> 数组需要更新哪些。</p>
<p>我们来回忆下之前做了什么事情。</p>
<p><img src="https://windliang.oss-cn-beijing.aliyuncs.com/306_2.jpg" alt=""></p>
<p>这是论文中的一张图，含义就是我们之前分析的，<code>BIT[8]</code> 存的是 <code>F[1...8]</code> ，对应图中的就是从第 <code>8</code> 个位置到第 <code>1</code> 个位置的矩形。<code>BIT[6]</code> 存的是 <code>F[6,5]</code>， 对应图中的就是从第 <code>6</code> 个位置一直到第 <code>5</code> 个位置的矩形。</p>
<p>然后我们水平从某个数画一条线，比如从 <code>3</code> 那里画一条线。</p>
<p><img src="https://windliang.oss-cn-beijing.aliyuncs.com/306_3.jpg" alt=""></p>
<p>穿过了 <code>3</code> 对应的矩形，<code>4</code> 对应的矩形，<code>8</code> 对应的矩形。因此如果改变第 <code>3</code> 个数，<code>BIT[3]</code>，<code>BIT[4]</code> 以及 <code>BIT[8]</code> 就需要更新。通过这种方式我们把每个数会影响到哪个区间画出来，找一下规律。</p>
<p><img src="https://windliang.oss-cn-beijing.aliyuncs.com/306_4.jpg" alt=""></p>
<p>当改变了第 <code>5</code> 个元素的时候，会依次影响到 <code>BIT[5]</code>，<code>BIT[6]</code>，<code>BIT[8]</code>，<code>BIT[16]</code>。</p>
<p><code>00101 -&gt; 00110 -&gt; 01000 -&gt; 10000</code>。</p>
<p><code>00101 + 1 = 00110</code>。</p>
<p><code>00110 + 10 = 01000</code></p>
<p><code>01000 + 1000 = 10000</code></p>
<p>可以看到每次都是加上当前数最右边的 <code>1</code> 到末尾的数，即 <code>next = current + (current &amp; -current)</code>。</p>
<p>所以更新的代码也就出来了。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; i</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; val</span></span><br><span class="line"><span class="comment"> * @return &#123;void&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">NumArray.prototype.update = <span class="function"><span class="keyword">function</span> (<span class="params">i, val</span>) </span>&#123;</span><br><span class="line">  i += <span class="number">1</span>;<span class="comment">//对应的下标要进行加 1</span></span><br><span class="line">  <span class="keyword">const</span> sub = val - <span class="keyword">this</span>.nums[i];</span><br><span class="line">  <span class="keyword">this</span>.nums[i] = val;</span><br><span class="line">  <span class="keyword">while</span> (i &lt; <span class="keyword">this</span>.nums.length) &#123;</span><br><span class="line">    <span class="keyword">this</span>.BIT[i] += sub;</span><br><span class="line">    i += i &amp; -i;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>综上，这道题就解决了，我们把代码合在一起。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; nums</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> NumArray = <span class="function"><span class="keyword">function</span> (<span class="params">nums</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.nums = [<span class="number">0</span>, ...nums];</span><br><span class="line">  <span class="keyword">this</span>.BIT = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="keyword">this</span>.nums.length);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; <span class="keyword">this</span>.BIT.length; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> index = i - ( i &amp; -i ) + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">this</span>.BIT[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.BIT[i] += <span class="keyword">this</span>.nums[index];</span><br><span class="line">      index += <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">if</span> (index &gt; i) &#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; i</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; val</span></span><br><span class="line"><span class="comment"> * @return &#123;void&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">NumArray.prototype.update = <span class="function"><span class="keyword">function</span> (<span class="params">i, val</span>) </span>&#123;</span><br><span class="line">  i += <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">const</span> sub = val - <span class="keyword">this</span>.nums[i];</span><br><span class="line">  <span class="keyword">this</span>.nums[i] = val;</span><br><span class="line">  <span class="keyword">while</span> (i &lt; <span class="keyword">this</span>.nums.length) &#123;</span><br><span class="line">    <span class="keyword">this</span>.BIT[i] += sub;</span><br><span class="line">    i += i &amp; -i;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; i</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; j</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">NumArray.prototype.sumRange = <span class="function"><span class="keyword">function</span> (<span class="params">i, j</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.range(j + <span class="number">1</span>) - <span class="keyword">this</span>.range(i);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">NumArray.prototype.range = <span class="function"><span class="keyword">function</span> (<span class="params">index</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> (index &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    sum += <span class="keyword">this</span>.BIT[index];</span><br><span class="line">    <span class="comment">// index -= index &amp; -index;</span></span><br><span class="line">    index = index &amp; (index - <span class="number">1</span>); <span class="comment">//这样也可以</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> sum;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your NumArray object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * var obj = new NumArray(nums)</span></span><br><span class="line"><span class="comment"> * obj.update(i,val)</span></span><br><span class="line"><span class="comment"> * var param_2 = obj.sumRange(i,j)</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>
<p>时间复杂度的话，初始化、更新、查询其实都和二进制的位数有关，以查询为例。每次将二进制的最后一位变成 <code>0</code>，最坏的情况就是初始值是全 <code>1</code>，即 <code>1111</code> 这种，执行次数就是 <code>4</code> 次，也就是二进制的位数。</p>
<p>如果是 <code>n</code> ，那么位数大约就是 <code>log(n)</code>，可以结合 <a href="https://zhuanlan.zhihu.com/p/114542440" target="_blank" rel="noopener">再谈进制转换</a> 理解。把一个数展开为 <code>2</code> 的幂次和，位数其实就是最高位的幂次加 <code>1</code>。比如 $11 = 2^0 + 2^1 + 2^3$ ，最高幂次是 <code>3</code> ，所以 <code>11</code> 的二进制<code>(1011)</code> 位数就是 <code>4</code>。如果要求的数是 <code>n</code>，最高的次幂是 <code>x</code> ，$2^x + … = n$，近似一下 $2^x=n$，<code>x = log(n)</code>，位数就是 <code>log(n) + 1</code>。</p>
<p>所以 <code>update</code> 和 <code>sumRange</code> 的时间复杂度就是 <code>O(log(n))</code>。</p>
<p>对于初始化函数，因为要执行 <code>n</code> 次，所以就是 <code>O(nlog(n))</code>。当然我们也可以利用解法二，把前缀和都求出来，然后更新数组 <code>BIT</code> 的每个值，这样就是 <code>O(n)</code> 了。但不是很有必要，因为如果查询和更新的次数很多，远大于 <code>n</code> 次，那么初始化这里的时间复杂度也就无关紧要了。</p>
<h1 id="总"><a href="#总" class="headerlink" title="总"></a>总</h1><p>讲了很多，其实树状数组最根本的就是开头所提到的二进制幂次的分解，$11 = 2^0 + 2^1 + 2^3 = 1 + 2 + 8$，然后把右边的分解出来的数看做子区间的长度。</p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
        <tag>二叉索引树</tag>
        <tag>树状数组</tag>
      </tags>
  </entry>
  <entry>
    <title>前端工程化发展历史(译)</title>
    <url>/2021/01/31/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96%E5%8F%91%E5%B1%95%E5%8E%86%E5%8F%B2-%E8%AF%91/</url>
    <content><![CDATA[<p>毕业前对前端工程化一直没有什么切身的体会，现在工作也有半年多了，体会也越来越深，<code>npm</code>，<code>yarn</code>，<code>Webpack</code> ，<code>gulp</code>，<code>Babel</code>，<code>ESlint</code>，<code>TypeScript</code> 最近准备一一去深入了解一下，看到一篇不错的关于前端工程化的发展过程，就翻译了一下，<a href="https://hackernoon.com/how-it-feels-to-learn-javascript-in-2016-d3a717dd577f" target="_blank" rel="noopener">How it feels to learn JavaScript in 2016</a>，虽然说是 <code>2016</code> 年的文章，但现在看来依旧不过时，也侧面说明了前端也渐渐趋于稳定了。</p>
<p>以下是全文：</p>
<hr>
<blockquote>
<p>hi，我准备写一个网页项目，但是说实话我已经很多年没有碰过代码了，听说现在行业变化很大。你是我们这里最与时俱进的网页开发者(<code>web dev</code>)了吧。</p>
</blockquote>
<p>对的，但更准确的说我是前端工程师(<code>Front End engineer</code>)。可视化、音乐播放器、足球游戏，凡是你能想到的都属于前端开发。我刚刚从<code>JS</code> 大会(<code>JsConf</code>)和 React 大会(<code>ReactConf</code>)回来，因此我知道创造 <code>Web apps</code> 最新的技术。</p>
<blockquote>
<p>太棒了！我现在需要写一个展示用户活动的页面，我需要通过 <code>RESTful</code> 接口获取数据，然后展示到可筛选的表格中。我是不是可以用 <code>jQuery</code> 去获取数据和展示？</p>
</blockquote>
<p>天哪，不不不，已经没有人再用 <code>jQuery</code> 了。你应该去学习 <code>React</code>，现在已经 <code>2016</code> 年了！</p>
<blockquote>
<p>啊，好吧，<code>React</code> 是什么呢？</p>
</blockquote>
<p>它是由 <code>Facebook</code> 几个大神创造的一个非常 <code>cool</code> 的框架，它能帮助你轻松的控制视图，更好的管理项目，提升性能。</p>
<blockquote>
<p>听起来不错，那我能使用 <code>React</code> 去展示来自服务端的数据吗？</p>
</blockquote>
<p>可以的，但你首先得在你的页面中引入 <code>React</code> 和 <code>React Dom</code> 这两个库。</p>
<blockquote>
<p>啥？为啥是两个库？</p>
</blockquote>
<p><code>React</code> 是它的核心库，而 <code>React Dom</code> 是用来操控 <code>Dom</code> 的，通常你需要用 <code>JSX</code> 去描述 <code>DOM</code>。</p>
<blockquote>
<p><code>JSX</code>？<code>JSX</code> 又是啥？</p>
</blockquote>
<p><code>JSX</code> 是一种 <code>JavaScript</code> 的语法扩展，看起来更像 <code>XML</code>。它是描述 <code>DOM</code> 的一种新的方式，比  <code>HTML</code> 会更好。</p>
<blockquote>
<p><code>HTML</code> 表示很无辜。</p>
</blockquote>
<p>孩子，已经 <code>2016</code> 年了，没有人直接去写 <code>HTML</code> 了。</p>
<blockquote>
<p>好吧，如果我添加了这两个库，是不是就能使用 <code>React</code> 了？</p>
</blockquote>
<p><code>emmm</code>，还不太行。你还需要添加 <code>Babel</code> 这个库。</p>
<blockquote>
<p>又一个库？<code>Babel</code> 是啥</p>
</blockquote>
<p><code>Babel</code> 是一个可以帮助你把任意版本的 <code>JavaScript</code> 代码转换成你要的版本。但如果你坚持只使用 <code>ES5</code> 的语法，<code>Babel</code> 也可以不引入。但现实点吧，现在是 <code>2016</code> 年了，你应该向大家一样，使用 <code>ES2016+</code> 的语法了。</p>
<blockquote>
<p><code>ES5</code>？<code>ES2016+</code>？我晕了，它们是些什么。</p>
</blockquote>
<p><code>ES5</code> 代表 <code>ECMAScript 5</code>，它是使用人数最多的一个版本，几乎所有浏览器都支持 <code>ES5</code> 的语法。</p>
<blockquote>
<p><code>ECMAScript</code>？</p>
</blockquote>
<p>它是在 <code>1999</code> 年提出的一个语言规范，<code>JavaScript</code> 属于其中的一种实现。 <code>JavaScript</code> 是 <code>1995</code> 年提出的，之前还叫过 <code>Livescript</code>，仅仅运行在网景的浏览器中。之前这些非常混乱，现在由于有 <code>ECMAScript</code> 的 <code>7</code> 个版本，一切都变得很清晰了，</p>
<blockquote>
<p>7 个版本？那 <code>ES5</code> 和 <code>ES2016+</code> 属于？</p>
</blockquote>
<p>分别是第 <code>5</code> 个和第 <code>7</code> 个版本。</p>
<blockquote>
<p>等等，第 <code>6</code> 个版本哪去了？</p>
</blockquote>
<p>你的意思是 <code>ES6</code>？由于每个版本相当于之前版本的超集，所以如果使用 <code>ES2016+</code>，之前版本 <code>ES6</code>、<code>ES5</code> 所有的特性你就都可以使用了。</p>
<blockquote>
<p>好吧，那我可以用 <code>ES6</code> 来编程吗？</p>
</blockquote>
<p>当然可以，但你不能使用一些最新的特性，比如 <code>async</code> 和 <code>await</code>。你只能通过 <code>ES6</code> 的生成器和协程来执行「同步」的形式异步请求，感兴趣的话可以看一下 <code>co</code> 框架。</p>
<blockquote>
<p>完全听不懂你在说什么了，这些名词我都没有听说过。让我理一理，我只想从服务器加载一段数据，过去我是从 <code>CDN</code> 中拿到 <code>jQuery</code> ，然后通过 <code>AJAX</code> 请求数据就可以了，现在怎么变得那么复杂了？</p>
</blockquote>
<p>大哥，已经 <code>2016</code> 年了，没有人再使用 <code>jQuery</code> 了，它只会让你写出意大利面条式的代码。</p>
<blockquote>
<p>好吧，所以我需要引入 <code>React</code> 、 <code>React Dom</code> 和 <code>Babel</code> 这三个库来拉取数据和展示 <code>HTML</code> 表格吗？</p>
</blockquote>
<p>是的，但你还需要用一个模块管理器把这三个库打包成一个文件。</p>
<blockquote>
<p>哦哦，那模块管理器又是啥？</p>
</blockquote>
<p>它的定义取决于语境，不过在 <code>Web</code> 中，只要支持 <code>AMD</code> 和 <code>CommonJS</code> 模块的话就可以称为模块管理器了。</p>
<blockquote>
<p>等等， <code>AMD</code> 和 <code>CommonJS</code> 是？</p>
</blockquote>
<p>按照定义来说，他们是描述不同的 <code>javaScript</code> 的库和类模块如何相互作用的不同规范，也就是常说的模块化。你听过 <code>exports</code> 和 <code>require</code> 吗？你可以通过 <code>AMD</code> 或者 <code>CommonJS</code> 编写不同的 <code>js</code> 模块，然后可以使用 <code>Browserify</code> 把这些文件打包起来。</p>
<blockquote>
<p>听起来很有道理，但是 <code>Browserify</code> 是什么？</p>
</blockquote>
<p>它是一个可以将我们工程依赖的、由 <code>CommonJS</code> 编写的 <code>js</code> 模块打包起来，使其可以运行在浏览器中的工具。之所以有这个工具，是因为我们所依赖的那些模块往往被发布在 <code>npm registry</code>  中。</p>
<blockquote>
<p><code>npm registry</code>？</p>
</blockquote>
<p>它是一个存放着世界各地的人们编写的代码模块的仓库。</p>
<blockquote>
<p>就像是 <code>CDN</code>？</p>
</blockquote>
<p>不太一样。它更像一个中心仓库，人们可以在上边发布和下载模块。你可以把模块下载下来在本地使用，也可以把它们上传至 <code>CDN</code> 上然后使用。</p>
<blockquote>
<p>明白了，就像是 <code>Bower</code>！</p>
</blockquote>
<p>是的，但现在是 <code>2016</code> 年了，没有人再使用 <code>Bower</code> 了。</p>
<blockquote>
<p>哦哦，明白了，那我用 <code>npm</code> 下载所需要的库文件就行了。</p>
</blockquote>
<p>是的，如果你想使用 <code>React</code>，你只需要下载 <code>React</code> 模块，然后 <code>import</code> 到你的代码中就可以了。你几乎可以使用 <code>npm</code> 下载现在所有流行的 <code>javaScprit</code> 库。</p>
<blockquote>
<p><code>Angular</code> 也在里边吧？</p>
</blockquote>
<p>是的，不过 <code>Augular</code> 是 <code>2015</code> 年的事情了。虽然 <code>Augular</code> 现在也还在用，但 <code>2016</code> 年有了 <code>VueJS</code> 或者 <code>RxJS</code> 这些新的库，你要学一学吗？</p>
<blockquote>
<p>算了算了，还是用 <code>React</code> 吧，毕竟我们已经谈了这么多了。所以我如果想使用 <code>React</code> ，只需要从 <code>npm</code> 下载相应的库，然后用 <code>Browserify</code> 打包就可以了吧？</p>
</blockquote>
<p>是的。</p>
<blockquote>
<p>但这看起来很复杂，需要下载那么多库，然后再它们打包起来。</p>
</blockquote>
<p>对，所以你需要使用一个任务管理器来自动化的运行 <code>Browserify</code>，例如 <code>Grunt</code>、<code>Gulp</code>  或者 <code>Broccoli</code> ，甚至可以使用 <code>Mimosa</code>。</p>
<blockquote>
<p><code>Grunt</code>？<code>Gulp</code> ？  <code>Broccoli</code> ？ <code>Mimosa</code>？我要疯了，这怎么一下这么多东西。</p>
</blockquote>
<p>它们都是任务管理器，但现在看起来一点都不 <code>cool</code> 了。我们在 <code>2015</code> 年的时候使用它们，之后还用过 <code>Makefiles</code> ，但是现在我们通过 <code>Webpack</code> 把所有功能都集成在一起了。</p>
<blockquote>
<p><code>Makefiles</code>？这些一般用在 <code>C/C++</code> 工程中吧？</p>
</blockquote>
<p>是的，但是你懂的，在 <code>Web</code> 领域，我们总是喜欢先把事情搞复杂，然后再回归起点。这些年我们总是这样，你等着吧，再过一两年我们肯定就能在 <code>web</code> 上写汇编代码了。</p>
<blockquote>
<p>唉，你刚刚讲的 <code>Webpack</code> 是什么呀？</p>
</blockquote>
<p>它是另一种浏览器的模块管理器，同时也是一种任务执行器(<code>task runner</code>)。他更像是 <code>Browserify</code> 的升级版。</p>
<blockquote>
<p>好吧，它是比 <code>Browserify</code> 更好吗？</p>
</blockquote>
<p>也许吧，它可以帮你更好的管理模块之间的依赖。<code>Webpack</code> 允许你使用不同的模块管理器，除了 <code>CommonJS</code> 类型的模块，最新的 <code>ES6</code> 的模块也是支持的。</p>
<blockquote>
<p>我完全被 <code>CommonJS/ES6</code> 这些东西搞晕了。</p>
</blockquote>
<p>大家都是这样，但通过 <code>SystemJS</code> 的话你就不用关心它们了。</p>
<blockquote>
<p>苍天啊，又一个 <code>js</code> 名词，所以 <code>SystemJS</code> 是啥？</p>
</blockquote>
<p>和 <code>Browserify</code> 以及 <code>Webpack 1.x</code> 不同，<code>SystemJS</code> 可以动态加载模块，允许你将不同模块打包成不同文件，而不是打包到一个大文件中。</p>
<blockquote>
<p>等等，我认为我们就是应该把所有库打包到一个大文件中，然后加载啊。</p>
</blockquote>
<p>是的，但由于 <code>HTTP/2</code> 的时代要来临了，它会支持请求多路复用。</p>
<blockquote>
<p>等等，所以我们不能只是把 <code>React</code> 依赖的库放到本地？？</p>
</blockquote>
<p>也不是。我的意思是我们可以把依赖的库作为外部的脚本从 <code>CDN</code> 中加载，但 <code>Babel</code> 库仍然需要加到本地的。</p>
<blockquote>
<p>唉，这听起来是不是不太好。</p>
</blockquote>
<p>对的，你需要引入整个 <code>babel-core</code>，对于线上环境来说效率很差。你需要做很多的前置动作才能让项目准备好，压缩资源、混淆代码、内联 <code>css</code> 、延迟加载 <code>js</code>，还有…</p>
<blockquote>
<p>明白了，明白了。所以如果不用 <code>CDN</code> 去加载库的话，你会怎么做？</p>
</blockquote>
<p>我会使用 <code>Webpack</code> + <code>SystemJS</code> + <code>Babel</code> 的组合从 <code>TypeScript</code> 转化。</p>
<blockquote>
<p><code>TypeScript</code>？我一直以为是用 <code>javaScript</code> 写代码。</p>
</blockquote>
<p><code>TypeScript</code> 就是 <code>javaScript</code>，更准确的说是 <code>javaScript</code> 的超集，或者说更具体点，是 <code>ES6</code> 版本的 <code>javaScript</code> 的超集。</p>
<blockquote>
<p> <code>ES2016+</code> 不已经是 <code>ES6</code> 的超集了，为什么我们还需要使用这个叫 <code>TypeScript</code> 的东西？</p>
</blockquote>
<p>因为它允许我们写 <code>javaScript</code> 的时候定义类型，从而减少运行时的错误。现在已经是 <code>2016</code> 年了，是时候在 <code>javaScript</code> 代码中添加类型了。</p>
<blockquote>
<p>哈哈，就像它的名字一样，<code>TypeScript</code>。</p>
</blockquote>
<p>虽然  <code>TypeScript</code> 是 <code>javaScript</code> 的超集，但它还需要编译成 <code>javaScript</code> 才能在浏览器运行。而另一种工具 <code>Flow</code> 就仅仅做类型检查，无需编译。</p>
<blockquote>
<p>等等，<code>Flow</code> 是啥？</p>
</blockquote>
<p>它是 <code>Facebook</code> 的几个人开发的一个静态类型检查器，他们使用 <code>OCaml</code> 语言去写的，因为函数式编程看起来很酷。</p>
<blockquote>
<p><code>OCaml</code>？函数式编程？</p>
</blockquote>
<p>这是如今那些 <code>cool kids</code> 使用的，函数式编程、高阶函数、柯里化、纯函数。</p>
<blockquote>
<p>哎，我一个也没听过。</p>
</blockquote>
<p>没有人一开始就会的。你只需要知道函数式编程比面向对象更好，并且这是 <code>2016</code> 该采取的方式就可以了。</p>
<blockquote>
<p>不对吧，我在大学学的是面向对象，这个会更好些吧？</p>
</blockquote>
<p>就像 <code>java</code> 被 <code>Oracle</code> 收购前一样好，哈哈，我意思是面向对象过去很辉煌，当然现在依旧很多人在使用。但是现在很多人都意识到修改对象状态是一个太危险的事情了，所以大家都转向了不可变对象和函数式编程。<code>Haskell</code> 语言已经这么做很多年了，但不要和我提 <code>Elm</code> 那些人。幸运的是，原生 <code>javaScript</code>  也可以通过 <code>Ramda</code> 这样的库进行函数式编程。</p>
<blockquote>
<p>你不要再罗列名词了，<code>Ramnda</code> 是什么呀？</p>
</blockquote>
<p>不，是 <code>Ramda</code>，和 <code>Lambda</code> 表达式类似，它是 <code>David Chambers</code> 创建的库。</p>
<blockquote>
<p><code>David</code>？是谁啊？</p>
</blockquote>
<p><code>David Chambers</code> ，一个大神，喜欢玩 <code>mean Coup game</code>，是 <code>Ramda</code> 的贡献者之一。如果你想更深入的了解函数式编程，你还需要知道 <code>Erik Meijer</code>。</p>
<blockquote>
<p><code>Erik Meijer</code> 是？</p>
</blockquote>
<p>另一个函数式编程的大神，他有很多演讲抨击过敏捷编程。当然感兴趣的话你还可以去了解 <code>Tj, Jash Kenas, Sindre Sorhus, Paul Irish, Addy Osmani--</code></p>
<blockquote>
<p>等等，对不起打断一下。目前这些对于我来说应该用不到，我只想拉取数据然后展示出来。让我们回到 <code>React</code>，我怎么用 <code>React</code> 从服务器获得数据？</p>
</blockquote>
<p><code>emmm</code>，你不是用 <code>React</code> 获取数据，你只是用它展示数据。</p>
<blockquote>
<p>阿西吧，那你通常用什么 <code>fetch the data</code> ？</p>
</blockquote>
<p>你可以用 <code>Fetch</code> 去从服务器 <code>fetch the data</code>。</p>
<blockquote>
<p>啥？用 <code>Fetch</code> 去从服务器 <code>fetch the data</code>？起这个名字的人真够简单粗暴。</p>
</blockquote>
<p><code>Fetch</code> 和 <code>XMLHttpRequests</code> 一样是浏览器的原生实现，是为了从服务器获取数据。</p>
<blockquote>
<p>那就是 <code>AJAX</code> 吧？</p>
</blockquote>
<p><code>AJAX</code> 只是基于 <code>XMLHttpRequests</code> 的封装，而 <code>Fetch</code> 可以让你使用 <code>Promise</code> 风格去异步请求数据，从而避免回调地狱。</p>
<blockquote>
<p>回调地狱？</p>
</blockquote>
<p>就是由于网络请求是异步的，你需要在回调函数里边去获取数据，如果此时又需要网络请求，那就需要在回调函数里再调用网络请求，然后再加回调函数，如果再请求网络…会变得越来越乱。</p>
<blockquote>
<p>嗯嗯，我知道这个，所以 <code>promise</code> 可以解决这个问题吗？</p>
</blockquote>
<p>是的，通过 <code>promise</code> 你可以更轻松的管理异步请求，写出易于理解的代码，同时调用多个网络请求。</p>
<blockquote>
<p>也就是用 <code>Fetch</code> 去写？</p>
</blockquote>
<p>是的，但是你得保证你用户的浏览器是最新的，否则你需要 <code>Fetch</code> 的 <code>polyfill</code>（兼容不能用 <code>Fetch</code> 的浏览器），或者使用 <code>Request</code>，<code>Bluebird</code> 或者 <code>Axios</code>。</p>
<blockquote>
<p>苍天啊，我到底需要知道多少库，怎么还有啊。</p>
</blockquote>
<p>这就是 <code>javaScript</code>，有成千上万个库去做同样的事情，当然我们可以从中选出一个最好用的。</p>
<blockquote>
<p>那你刚才说的那些库是干什么的呀？</p>
</blockquote>
<p>它们是基于 <code>XMLHttpRequests</code> 实现的 <code>promise</code> 风格的请求库。</p>
<blockquote>
<p><code>jQuery</code> 的 <code>AJAX</code> 方法不是也开始返回 <code>promise</code> 了吗？</p>
</blockquote>
<p>忘记 <code>jQuery</code> 吧，去用 <code>Fetch</code> + <code>polyfill</code>，或者  <code>Request</code>，<code>Bluebird</code>， <code>Axios</code>。我们可以通过它们在 <code>async</code> 函数中 <code>await</code> 异步请求，就像顺序编程一样。</p>
<blockquote>
<p>这是你第三次提到 <code>await</code> 了，但我完全不知道它是干啥的。</p>
</blockquote>
<p><code>await</code> 允许你阻塞异步请求，让你更好的控制异步请求，然后处理数据，大大增强了代码的可读性。这非常方便，但你记得要加 <code>stage-3 preset</code> 的 <code>Babel</code>，或者通过 <code>transform-async-to-generator</code> 插件使用 <code>syntax-async-functions</code>。</p>
<blockquote>
<p>这也太麻烦了。</p>
</blockquote>
<p>不不不，真正麻烦的地方在于首先要编译 <code>Typescript</code> 代码，然后再用 <code>Babel</code> 转化才能让 <code>await</code> 被浏览器认识。</p>
<blockquote>
<p>啥，<code>Typescript</code> 不支持 <code>await</code> 吗？</p>
</blockquote>
<p><code>1.7</code> 是不支持的，它只会被编译成 <code>ES6</code>，预计下一个版本才会支持。所以你只能先把<code>Typescript</code> 编译成 <code>ES6</code>，然后再通过 <code>Babel</code> 把它转换成 <code>ES5</code>，以便兼容更多的浏览器。</p>
<blockquote>
<p>我不知道我还能说什么。</p>
</blockquote>
<p>其实挺简单的。就是用 <code>Typescript</code> 写代码，所有模块都用 <code>Fetch</code> 去请求，加上 <code>Babel</code> 的 <code>stage-3 preset</code> ，然后使用 <code>SystemJS</code> 去加载它们。为了让 <code>Fetch</code> 兼容更多浏览器，记得加 <code>polyfill</code>，或者使用  <code>Request</code>，<code>Bluebird</code> 或者 <code>Axios</code>，并且使用 <code>await</code> 去等待所有的 <code>promise</code>。</p>
<blockquote>
<p>我们对简单的定义可能不太一样，，，所以现在我拿到了数据，我就可以用 <code>React</code> 展示数据了吧？</p>
</blockquote>
<p>你的应用要控制所有 <code>state</code> 的变化吗？</p>
<blockquote>
<p>我觉得不用，我只是需要展示数据。</p>
</blockquote>
<p>那太好了，不然我还得向你解释 <code>Flux</code> ，以及它的一些实现，比如 <code>Flummox, Alt, Fluxible</code>。但说实话， <code>Redux</code> 会更好用些。</p>
<blockquote>
<p>我不想再知道新的名字了，我只是想展示数据。</p>
</blockquote>
<p>哦哦，如果只是展示数据，你其实不需要 <code>React</code>，用一个模版引擎就好了。</p>
<blockquote>
<p>你在逗我吗？你觉得这很有趣吗，唉，感情淡了。</p>
</blockquote>
<p>我只是想告诉你你能用什么。</p>
<blockquote>
<p>那请你不要说了。</p>
</blockquote>
<p>其实如果用模版引擎的话，我还是推荐你继续使用 <code>Typescript + SystemJS + Babel</code> 的组合。</p>
<blockquote>
<p>那你有推荐的模版吗？</p>
</blockquote>
<p>有很多，你之前有用过什么吗？</p>
<blockquote>
<p>不太记得名字了，隔的时间太久了。</p>
</blockquote>
<p><code>jTemplates? jQote? PURE?</code></p>
<blockquote>
<p>没有用过，还有吗？</p>
</blockquote>
<p><code>Transparency? JSRender? MarkupJS? KnockoutJS?</code> 这一个支持双向绑定。</p>
<blockquote>
<p>还有吗？</p>
</blockquote>
<p><code>PlatesJS? jQuery-tmpl? Handlebars?</code>这些还有些人在用。</p>
<blockquote>
<p>有和最后一个比较像的吗？</p>
</blockquote>
<p><code>PlatesJS? jQuery-tmpl? Handlebars?</code> 甚至 <code>lodash</code> 都有一个模版引擎，但这已经是 <code>2014</code> 年的事情了。</p>
<blockquote>
<p>那有没有更新一些的？</p>
</blockquote>
<p><code>Jade? DustJS?</code></p>
<blockquote>
<p>没听说过。</p>
</blockquote>
<p><code>DotJS? EJS?</code></p>
<blockquote>
<p>没听说过。</p>
</blockquote>
<p><code>Nunjucks? ECT?</code></p>
<blockquote>
<p>没听说过。</p>
</blockquote>
<p>对的，应该没有人喜欢 <code>Coffeescript</code> 的语法了。那 <code>Jade</code>?</p>
<blockquote>
<p>你不是说过 <code>Jade</code> 了吗？</p>
</blockquote>
<p>我的意思是 <code>Pug</code>，也是 <code>Jade</code>。现在 <code>Jade</code> 叫 <code>Pug</code> 了。</p>
<blockquote>
<p>额，我想不起来我用过啥了，你现在用什么模版引擎？</p>
</blockquote>
<p>也许会用 <code>ES6</code> 支持的原生模版字符串。</p>
<blockquote>
<p>那我捋捋。只有 <code>ES6</code> 支持？</p>
</blockquote>
<p>对的。</p>
<blockquote>
<p>那我需要用 <code>Babel</code> 来兼容更多的浏览器。</p>
</blockquote>
<p>对的。</p>
<blockquote>
<p>我需要从 <code>npm</code> 加载它的核心库？</p>
</blockquote>
<p>对的。</p>
<blockquote>
<p>我还需要 <code>Browerify</code> 或者 <code>Webpack</code> 或者 <code>SystemJS</code> 来管理这些模块？</p>
</blockquote>
<p>对的。</p>
<blockquote>
<p>除非直接用 <code>Webpack</code> ，不然的话我还需要一个任务管理器。</p>
</blockquote>
<p>对的。</p>
<blockquote>
<p>由于我要用函数式编程以及强类型的语言，我还需要 <code>Typescript</code> 或者 <code>Flow</code>。</p>
</blockquote>
<p>对的。</p>
<blockquote>
<p>如果要用 <code>await</code> ，<code>Babel</code> 需要进行相应的配置。</p>
</blockquote>
<p>对的。</p>
<blockquote>
<p>这样我就能使用 <code>Fetch</code> ，<code>Promise</code> 这些神奇的东西了。</p>
</blockquote>
<p>对，记得不要忘记给 <code>Fetch</code> 加上 <code>polyfill</code>，有些浏览器目前还不支持这个特性。</p>
<blockquote>
<p>好吧，我疯了，今天到这里吧。我不要再碰 <code>Web</code> 了，不要再和我提 <code>javsScript</code> 了。</p>
</blockquote>
<p>问题不大，也许未来我们就会使用 <code>Elm</code> 或者 <code>WebAssembly</code> 了。</p>
<blockquote>
<p>我还是去写我的后端吧。我觉得我追不上这么多的变化，各种版本号，还有各种编译器和转换器。<code>javaScript</code> 社区真是太疯狂了，它觉得每个人能跟上这么快的变化吗。</p>
</blockquote>
<p>哈哈，你应该去了解一下 <code>Python</code> 社区。</p>
<blockquote>
<p>为什么？</p>
</blockquote>
<p>听过 <code>Python 3</code> 吗？（ <code>python 3</code> 没有向前兼容 <code>pyhon 2</code>，差异巨大）</p>
<hr>
<p>总结一下，前端之所以发生这么大的变化，我觉得一个很关键的点就是 <code>Node.js</code> 的出现。它使得 <code>js</code> 可以脱离浏览器去运行，还提供了读写文件的能力。从而可以在本地进行编译、转换 <code>js</code> 文件，将打包完成的文件运行在浏览器中。</p>
<p>我们可以不去考虑浏览器支持的语法，各种模块化、<code>ES</code> 的新特性，放心大胆的用就可以了，大不了最后再转换就可以了。</p>
<p>此外 <code>node.js</code> 也使得 <code>javaScript</code> 可以写一些服务器端的应用，自己只用它写过一些 <code>Web</code> 接口，其他的了解不多。</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>webpack</tag>
        <tag>工程化</tag>
        <tag>npm</tag>
        <tag>node.js</tag>
      </tags>
  </entry>
  <entry>
    <title>小程序原理系列一之wxss</title>
    <url>/2023/11/21/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%8E%9F%E7%90%86%E7%B3%BB%E5%88%97%E4%B9%8Bwxss/</url>
    <content><![CDATA[<p>平常小程序写的多一些，简单总结一下原理。但因为小程序也没开源，只能参考相关文档以及开发者工具慢慢理解了。</p>
<p>理解小程序原理的突破口就是开发者工具了，开发者工具是基于 <code>NW.js</code>，一个基于 <code>Chromium</code> 和 <code>node.js</code> 的应用运行时。同时暴漏了 <code>debug</code>  的入口。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20231121074438703.png" alt=""></p>
<p>点开后就是一个新的 <code>devTools</code> 的窗口，这里我们可以找到预览界面的 <code>dom</code>。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20231121074627001.png" alt=""></p>
<p>小程序界面是一个独立的 <code>webview</code>，也就是常说的视图层，可以在命令行执行 <code>document.getElementsByTagName(&#39;webview&#39;)</code> ，可以看到很多 <code>webview</code>。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20231121075414589.png" alt=""></p>
<p>我这边第 <code>0</code> 个就是 <code>pages/index/index</code> 的视图层，再通过 <code>document.getElementsByTagName(&#39;webview&#39;)[0].showDevTools(true)</code> 命令单独打开这个 <code>webview</code> 。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20231121075550310.png" alt=""></p>
<p>熟悉的感觉回来了，其实就是普通的 <code>html/css</code> ，小程序的原理的突破口也就在这里了。</p>
<p>这篇文章简单看一下页面的样式是怎么来的，也就是 <code>wxss</code> 做了什么事情。</p>
<p>源码中 <code>data1</code> 的样式：</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20231121080905989.png" alt=""></p>
<p>开发中工具中对应的样式：</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20231121080942683.png" alt=""></p>
<p><code>rpx</code> 的单位转成了 <code>px</code> ，同时保留网页不认识的属性名，大概就是为了方便的看到当前类本身的属性和一些文件信息。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20231121081115204.png" alt=""></p>
<p>这个样式是定义在 <code>&lt;style&gt;</code> 中，</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20231121081221907.png" alt=""></p>
<p>让我们展开 <code>&lt;head&gt;</code> 找一下：</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20231121081518529.png" alt=""></p>
<p><code>data1</code> 确实在 <code>&lt;style&gt;</code> 中，继续搜索，可以看到这里 <code>&lt;style&gt;</code> 中的内容是通过在 <code>&lt;script&gt;</code> 执行 <code>eval</code> 插入进来的。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20231126095416265.png" alt=""></p>
<p>把这一段代码丢给 <code>chatGPT</code> 整理一下：</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20231122081918824.png" alt=""></p>
<p>来一段一段看一下：</p>
<h1 id="设备信息"><a href="#设备信息" class="headerlink" title="设备信息"></a>设备信息</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> BASE_DEVICE_WIDTH = <span class="number">750</span>;</span><br><span class="line"><span class="keyword">var</span> isIOS = navigator.userAgent.match(<span class="string">"iPhone"</span>);</span><br><span class="line"><span class="keyword">var</span> deviceWidth = <span class="built_in">window</span>.screen.width || <span class="number">375</span>;</span><br><span class="line"><span class="keyword">var</span> deviceDPR = <span class="built_in">window</span>.devicePixelRatio || <span class="number">2</span>;</span><br><span class="line"><span class="keyword">var</span> checkDeviceWidth = <span class="built_in">window</span>.__checkDeviceWidth__ || <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> newDeviceWidth = <span class="built_in">window</span>.screen.width || <span class="number">375</span>;</span><br><span class="line">    <span class="keyword">var</span> newDeviceDPR = <span class="built_in">window</span>.devicePixelRatio || <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">var</span> newDeviceHeight = <span class="built_in">window</span>.screen.height || <span class="number">375</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">window</span>.screen.orientation &amp;&amp; <span class="regexp">/^landscape/</span>.test(<span class="built_in">window</span>.screen.orientation.type || <span class="string">''</span>)) &#123;</span><br><span class="line">        newDeviceWidth = newDeviceHeight;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (newDeviceWidth !== deviceWidth || newDeviceDPR !== deviceDPR) &#123;</span><br><span class="line">        deviceWidth = newDeviceWidth;</span><br><span class="line">        deviceDPR = newDeviceDPR;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">checkDeviceWidth();</span><br></pre></td></tr></table></figure>
<p>主要更新了几个变量，<code>deviceWidth</code>、<code>deviceDPR</code> ，像素相关的知识很久很久以前写过一篇文章 <a href="https://zhuanlan.zhihu.com/p/55819582" target="_blank" rel="noopener">分辨率是什么？</a>。</p>
<p>这里再补充一下，这里的 <code>deviceWidth</code> 是设备独立像素(逻辑像素)，是操作系统为了方便开发者而提供的一种抽象。看一下开发者工具预设的设备：</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20231122082636996.png" alt=""></p>
<p>如上图，以 <code>iphone6</code> 为例，宽度是 <code>375</code> ，事实上 <code>iphone6</code> 宽度的物理像素是 <code>750</code>。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20231122082903038.png" alt=""></p>
<p>所以就有了 <code>Dpr</code> 的含义， <code>iphone6</code> 的 <code>dpr</code> 是 <code>2</code>， <code>1px</code> 相当于渲染在两个物理像素上。</p>
<h1 id="rpx-转换"><a href="#rpx-转换" class="headerlink" title="rpx 转换"></a>rpx 转换</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> eps = <span class="number">1e-4</span>;</span><br><span class="line"><span class="keyword">var</span> transformRPX = <span class="built_in">window</span>.__transformRpx__ || <span class="function"><span class="keyword">function</span>(<span class="params">number, newDeviceWidth</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (number === <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    number = number / BASE_DEVICE_WIDTH * (newDeviceWidth || deviceWidth);</span><br><span class="line">    number = <span class="built_in">Math</span>.floor(number + eps);</span><br><span class="line">    <span class="keyword">if</span> (number === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (deviceDPR === <span class="number">1</span> || !isIOS) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0.5</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> number;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>核心就是这一行 <code>number = number / BASE_DEVICE_WIDTH * (newDeviceWidth || deviceWidth);</code> ，其中 <code>BASE_DEVICE_WIDTH</code> 是 <code>750</code> ，也就是微信把屏幕宽度先强行规定为了 <code>750</code> ，先用用户设定的 <code>rpx</code> 值除以 <code>750</code> 算出一个比例，最后乘上设备的逻辑像素。</p>
<p>如果设备是 <code>iphone6</code> ，那么这里设备的逻辑像素就是 <code>350</code>，所以如果是 <code>2rpx</code> ，<code>2/750*375=1</code> 最后算出来就是 <code>1px</code> ，实际上在 <code>iphone6</code> 渲染的是两个物理像素，也就是常常遇到的 <code>1px</code> 过粗的问题，解决方案可以参考这篇 <a href="https://zhuanlan.zhihu.com/p/535456539" target="_blank" rel="noopener">前端移动端1px问题及解决方案</a>。</p>
<p>接下来一行 <code>number = Math.floor(number + eps);</code> 是为了解决浮点数精度问题，比如除下来等于 <code>3.9999999998</code> ，实际上应该等于 <code>4</code> ，只是浮点数的问题导致没有算出来 <code>4</code> ，加个 <code>eps</code> ，然后向下 <code>floor</code> 去整，就可以正常得到 <code>4</code> 了，关于浮点数可以看 <a href="https://zhuanlan.zhihu.com/p/75581822" target="_blank" rel="noopener">一直迷糊的浮点数</a>。</p>
<p>接着往下看：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (number === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (deviceDPR === <span class="number">1</span> || !isIOS) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0.5</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在 <code>transformRPX</code> 函数整个代码里第一行 <code>if (number === 0) return 0;</code> ，<code>number</code> 等于 <code>0</code> 已经提前结束了，所以这里 <code>number</code> 得到 <code>0</code> 就是因为除的时候得到了一个小数。</p>
<p>如果 <code>deviceDPR === 1</code>，说明逻辑像素和物理像素是一比一的，不可能展示半个像素，直接 <code>return 1</code> 。</p>
<p>如果不是 <code>iOS</code> 也直接返回 <code>1</code> ，这是因为安卓手机厂商众多，即使 <code>deviceDPR</code> 大于 <code>1</code> ，也不一定支持像素传小数，传小数可能导致变 <code>0</code> 或者变 <code>1</code> ，为了最大可能的保证兼容性，就直接返回 <code>1</code>。</p>
<p>对于苹果手机，据说是从 <code>iOS 8</code> 开始支持 <code>0.5px</code> 的，但没找到当时的官方说明：</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20231125092544214.png" alt=""></p>
<p>因此上边的代码中，对于 <code>deviceDPR</code> 大于 <code>1</code> ，并且是苹果手机的就直接返回 <code>0.5</code> 了。</p>
<h1 id="生成-css"><a href="#生成-css" class="headerlink" title="生成 css"></a>生成 css</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">setCssToHead(</span><br><span class="line">[</span><br><span class="line">    <span class="string">"."</span>,</span><br><span class="line">    [<span class="number">1</span>],</span><br><span class="line">    <span class="string">"container &#123; display: flex; align-items: center; justify-content: center; ;wxcs_originclass: .container;;wxcs_fileinfo: ./pages/index/index.wxss 1 1; &#125;\n"</span>,</span><br><span class="line">    <span class="string">"."</span>,</span><br><span class="line">    [<span class="number">1</span>],</span><br><span class="line">    <span class="string">"data1&#123; color: red; font-size: "</span>,</span><br><span class="line">    [<span class="number">0</span>, <span class="number">50</span>],</span><br><span class="line">    <span class="string">"; ;wxcs_style_font-size : 50rpx; ;wxcs_originclass: .data1;;wxcs_fileinfo: ./pages/index/index.wxss 6 1; &#125;\n"</span>,</span><br><span class="line">    <span class="string">"."</span>,</span><br><span class="line">    [<span class="number">1</span>],</span><br><span class="line">    <span class="string">"data2&#123; color: blue; font-size: "</span>,</span><br><span class="line">    [<span class="number">0</span>, <span class="number">100</span>],</span><br><span class="line">    <span class="string">"; ;wxcs_style_font-size : 100rpx; ;wxcs_originclass: .data2;;wxcs_fileinfo: ./pages/index/index.wxss 11 1; &#125;\n"</span>,</span><br><span class="line">    <span class="string">"."</span>,</span><br><span class="line">    [<span class="number">1</span>],</span><br><span class="line">    <span class="string">"data3&#123; color: blue; font-size: "</span>,</span><br><span class="line">    [<span class="number">0</span>, <span class="number">100</span>],</span><br><span class="line">    <span class="string">"; ;wxcs_style_font-size : 100rpx; ;wxcs_originclass: .data3;;wxcs_fileinfo: ./pages/index/index.wxss 17 1; &#125;\n"</span>,</span><br><span class="line">],</span><br><span class="line"><span class="literal">undefined</span>,</span><br><span class="line">&#123; <span class="attr">path</span>: <span class="string">"./pages/index/index.wxss"</span> &#125;</span><br><span class="line">)();</span><br></pre></td></tr></table></figure>
<p>通过调用 <code>setCssToHead</code> 把上边传的数组拼接为最终的 <code>css</code> 。</p>
<p>核心逻辑就是循环上边的数组，如果数组元素是字符串直接相加就好，如果是数组 <code>[1]</code>、<code>[0, 50]</code> 这样，需要特殊处理下：</p>
<p>核心逻辑是 <code>makeup</code> 函数：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeup</span>(<span class="params">file, opt</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> _n = <span class="keyword">typeof</span>(file) === <span class="string">'string'</span>;</span><br><span class="line">      <span class="keyword">if</span> (_n &amp;&amp; Ca.hasOwnProperty(file)) <span class="keyword">return</span> <span class="string">''</span>;</span><br><span class="line">      <span class="keyword">if</span> (_n) Ca[file] = <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">var</span> ex = _n ? _C[file] : file;</span><br><span class="line">      <span class="keyword">var</span> res = <span class="string">''</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i = ex.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">          <span class="keyword">var</span> content = ex[i];</span><br><span class="line">          <span class="keyword">if</span> (<span class="keyword">typeof</span>(content) === <span class="string">'object'</span>) &#123;</span><br><span class="line">              <span class="keyword">var</span> op = content[<span class="number">0</span>];</span><br><span class="line">              <span class="keyword">if</span> (op === <span class="number">0</span>) res = transformRPX(content[<span class="number">1</span>], opt.deviceWidth) + <span class="string">'px'</span> + res;</span><br><span class="line">              <span class="keyword">else</span> <span class="keyword">if</span> (op === <span class="number">1</span>) res = opt.suffix + res;</span><br><span class="line">              <span class="keyword">else</span> <span class="keyword">if</span> (op === <span class="number">2</span>) res = makeup(content[<span class="number">1</span>], opt) + res;</span><br><span class="line">          &#125; <span class="keyword">else</span> res = content + res;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> res;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>如果遇到 <code>content</code> 是 <code>[1]</code>，也就是  <code>op</code> 等于 <code>1</code> ，添加一个前缀 <code>res = opt.suffix + res;</code> 。</p>
<p>如果遇到 <code>content</code> 是 <code>[0, 50]</code>，也就是  <code>op</code> 等于 <code>0</code> ，这里的 <code>50</code> 其实就是用户写的 <code>50rpx</code> 的 <code>50</code> ，因此需要调用 <code>transformRPX</code> 将 <code>50</code> 转为 <code>px</code> 再相加 <code>res = transformRPX(content[1], opt.deviceWidth) + &#39;px&#39; + res;</code> 。</p>
<p>通过 <code>makeup</code> 函数，生成 <code>css</code>  字符串后，剩下的工作就是生成一个 <code>style</code> 标签插入到 <code>head</code> 中了。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">css = makeup(file, opt);</span><br><span class="line"><span class="keyword">if</span> (!style) &#123;</span><br><span class="line">    <span class="keyword">var</span> head = <span class="built_in">document</span>.head || <span class="built_in">document</span>.getElementsByTagName(<span class="string">'head'</span>)[<span class="number">0</span>];</span><br><span class="line">    style = <span class="built_in">document</span>.createElement(<span class="string">'style'</span>);</span><br><span class="line">    style.type = <span class="string">'text/css'</span>;</span><br><span class="line">    style.setAttribute(<span class="string">"wxss:path"</span>, info.path);</span><br><span class="line">    head.appendChild(style);</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (style.styleSheet) &#123;</span><br><span class="line">    style.styleSheet.cssText = css;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (style.childNodes.length === <span class="number">0</span>)</span><br><span class="line">        style.appendChild(<span class="built_in">document</span>.createTextNode(css));</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        style.childNodes[<span class="number">0</span>].nodeValue = css;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="注入的全部代码"><a href="#注入的全部代码" class="headerlink" title="注入的全部代码"></a>注入的全部代码</h1><p>这里贴一下注入的全部代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> BASE_DEVICE_WIDTH = <span class="number">750</span>;</span><br><span class="line"><span class="keyword">var</span> isIOS = navigator.userAgent.match(<span class="string">"iPhone"</span>);</span><br><span class="line"><span class="keyword">var</span> deviceWidth = <span class="built_in">window</span>.screen.width || <span class="number">375</span>;</span><br><span class="line"><span class="keyword">var</span> deviceDPR = <span class="built_in">window</span>.devicePixelRatio || <span class="number">2</span>;</span><br><span class="line"><span class="keyword">var</span> checkDeviceWidth = <span class="built_in">window</span>.__checkDeviceWidth__ || <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> newDeviceWidth = <span class="built_in">window</span>.screen.width || <span class="number">375</span>;</span><br><span class="line">    <span class="keyword">var</span> newDeviceDPR = <span class="built_in">window</span>.devicePixelRatio || <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">var</span> newDeviceHeight = <span class="built_in">window</span>.screen.height || <span class="number">375</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">window</span>.screen.orientation &amp;&amp; <span class="regexp">/^landscape/</span>.test(<span class="built_in">window</span>.screen.orientation.type || <span class="string">''</span>)) &#123;</span><br><span class="line">        newDeviceWidth = newDeviceHeight;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (newDeviceWidth !== deviceWidth || newDeviceDPR !== deviceDPR) &#123;</span><br><span class="line">        deviceWidth = newDeviceWidth;</span><br><span class="line">        deviceDPR = newDeviceDPR;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">checkDeviceWidth();</span><br><span class="line"><span class="keyword">var</span> eps = <span class="number">1e-4</span>;</span><br><span class="line"><span class="keyword">var</span> transformRPX = <span class="built_in">window</span>.__transformRpx__ || <span class="function"><span class="keyword">function</span>(<span class="params">number, newDeviceWidth</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (number === <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    number = number / BASE_DEVICE_WIDTH * (newDeviceWidth || deviceWidth);</span><br><span class="line">    number = <span class="built_in">Math</span>.floor(number + eps);</span><br><span class="line">    <span class="keyword">if</span> (number === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (deviceDPR === <span class="number">1</span> || !isIOS) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0.5</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> number;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">window</span>.__rpxRecalculatingFuncs__ = <span class="built_in">window</span>.__rpxRecalculatingFuncs__ || [];</span><br><span class="line"><span class="keyword">var</span> __COMMON_STYLESHEETS__ = __COMMON_STYLESHEETS__ || &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> setCssToHead = <span class="function"><span class="keyword">function</span>(<span class="params">file, _xcInvalid, info</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> Ca = &#123;&#125;;</span><br><span class="line">    <span class="keyword">var</span> css_id;</span><br><span class="line">    <span class="keyword">var</span> info = info || &#123;&#125;;</span><br><span class="line">    <span class="keyword">var</span> _C = __COMMON_STYLESHEETS__;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">makeup</span>(<span class="params">file, opt</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> _n = <span class="keyword">typeof</span>(file) === <span class="string">'string'</span>;</span><br><span class="line">        <span class="keyword">if</span> (_n &amp;&amp; Ca.hasOwnProperty(file)) <span class="keyword">return</span> <span class="string">''</span>;</span><br><span class="line">        <span class="keyword">if</span> (_n) Ca[file] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">var</span> ex = _n ? _C[file] : file;</span><br><span class="line">        <span class="keyword">var</span> res = <span class="string">''</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = ex.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">var</span> content = ex[i];</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">typeof</span>(content) === <span class="string">'object'</span>) &#123;</span><br><span class="line">                <span class="keyword">var</span> op = content[<span class="number">0</span>];</span><br><span class="line">                <span class="keyword">if</span> (op === <span class="number">0</span>) res = transformRPX(content[<span class="number">1</span>], opt.deviceWidth) + <span class="string">'px'</span> + res;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (op === <span class="number">1</span>) res = opt.suffix + res;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (op === <span class="number">2</span>) res = makeup(content[<span class="number">1</span>], opt) + res;</span><br><span class="line">            &#125; <span class="keyword">else</span> res = content + res;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> styleSheetManager = <span class="built_in">window</span>.__styleSheetManager2__;</span><br><span class="line">    <span class="keyword">var</span> rewritor = <span class="function"><span class="keyword">function</span>(<span class="params">suffix, opt, style</span>) </span>&#123;</span><br><span class="line">        opt = opt || &#123;&#125;;</span><br><span class="line">        suffix = suffix || <span class="string">''</span>;</span><br><span class="line">        opt.suffix = suffix;</span><br><span class="line">        <span class="keyword">if</span> (opt.allowIllegalSelector !== <span class="literal">undefined</span> &amp;&amp; _xcInvalid !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (opt.allowIllegalSelector) <span class="built_in">console</span>.warn(<span class="string">"For developer:"</span> + _xcInvalid);</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.error(_xcInvalid);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Ca = &#123;&#125;;</span><br><span class="line">        css = makeup(file, opt);</span><br><span class="line">        <span class="keyword">if</span> (styleSheetManager) &#123;</span><br><span class="line">            <span class="keyword">var</span> key = (info.path || <span class="built_in">Math</span>.random()) + <span class="string">':'</span> + suffix;</span><br><span class="line">            <span class="keyword">if</span> (!style) &#123;</span><br><span class="line">                styleSheetManager.addItem(key, info.path);</span><br><span class="line">                <span class="built_in">window</span>.__rpxRecalculatingFuncs__.push(<span class="function"><span class="keyword">function</span>(<span class="params">size</span>) </span>&#123;</span><br><span class="line">                    opt.deviceWidth = size.width;</span><br><span class="line">                    rewritor(suffix, opt, <span class="literal">true</span>);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">            styleSheetManager.setCss(key, css);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!style) &#123;</span><br><span class="line">            <span class="keyword">var</span> head = <span class="built_in">document</span>.head || <span class="built_in">document</span>.getElementsByTagName(<span class="string">'head'</span>)[<span class="number">0</span>];</span><br><span class="line">            style = <span class="built_in">document</span>.createElement(<span class="string">'style'</span>);</span><br><span class="line">            style.type = <span class="string">'text/css'</span>;</span><br><span class="line">            style.setAttribute(<span class="string">"wxss:path"</span>, info.path);</span><br><span class="line">            head.appendChild(style);</span><br><span class="line">            <span class="built_in">window</span>.__rpxRecalculatingFuncs__.push(<span class="function"><span class="keyword">function</span>(<span class="params">size</span>) </span>&#123;</span><br><span class="line">                opt.deviceWidth = size.width;</span><br><span class="line">                rewritor(suffix, opt, style);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (style.styleSheet) &#123;</span><br><span class="line">            style.styleSheet.cssText = css;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (style.childNodes.length === <span class="number">0</span>)</span><br><span class="line">                style.appendChild(<span class="built_in">document</span>.createTextNode(css));</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                style.childNodes[<span class="number">0</span>].nodeValue = css;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> rewritor;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setCssToHead([])();</span><br><span class="line">setCssToHead(</span><br><span class="line">    [</span><br><span class="line">      <span class="string">"."</span>,</span><br><span class="line">      [<span class="number">1</span>],</span><br><span class="line">      <span class="string">"container &#123; height: 100%; display: flex; flex-direction: column; align-items: center; justify-content: space-between; padding: "</span>,</span><br><span class="line">      [<span class="number">0</span>, <span class="number">200</span>],</span><br><span class="line">      <span class="string">" 0; ;wxcs_style_padding : 200rpx 0; box-sizing: border-box; ;wxcs_originclass: .container;;wxcs_fileinfo: ./app.wxss 2 1; &#125;\n"</span>,</span><br><span class="line">    ],</span><br><span class="line">    <span class="literal">undefined</span>,</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">"./app.wxss"</span> &#125;</span><br><span class="line">  )();</span><br><span class="line">setCssToHead(</span><br><span class="line">[</span><br><span class="line">    <span class="string">"."</span>,</span><br><span class="line">    [<span class="number">1</span>],</span><br><span class="line">    <span class="string">"container &#123; display: flex; align-items: center; justify-content: center; ;wxcs_originclass: .container;;wxcs_fileinfo: ./pages/index/index.wxss 1 1; &#125;\n"</span>,</span><br><span class="line">    <span class="string">"."</span>,</span><br><span class="line">    [<span class="number">1</span>],</span><br><span class="line">    <span class="string">"data1&#123; color: red; font-size: "</span>,</span><br><span class="line">    [<span class="number">0</span>, <span class="number">50</span>],</span><br><span class="line">    <span class="string">"; ;wxcs_style_font-size : 50rpx; ;wxcs_originclass: .data1;;wxcs_fileinfo: ./pages/index/index.wxss 6 1; &#125;\n"</span>,</span><br><span class="line">    <span class="string">"."</span>,</span><br><span class="line">    [<span class="number">1</span>],</span><br><span class="line">    <span class="string">"data2&#123; color: blue; font-size: "</span>,</span><br><span class="line">    [<span class="number">0</span>, <span class="number">100</span>],</span><br><span class="line">    <span class="string">"; ;wxcs_style_font-size : 100rpx; ;wxcs_originclass: .data2;;wxcs_fileinfo: ./pages/index/index.wxss 11 1; &#125;\n"</span>,</span><br><span class="line">    <span class="string">"."</span>,</span><br><span class="line">    [<span class="number">1</span>],</span><br><span class="line">    <span class="string">"data3&#123; color: blue; font-size: "</span>,</span><br><span class="line">    [<span class="number">0</span>, <span class="number">100</span>],</span><br><span class="line">    <span class="string">"; ;wxcs_style_font-size : 100rpx; ;wxcs_originclass: .data3;;wxcs_fileinfo: ./pages/index/index.wxss 17 1; &#125;\n"</span>,</span><br><span class="line">],</span><br><span class="line"><span class="literal">undefined</span>,</span><br><span class="line">&#123; <span class="attr">path</span>: <span class="string">"./pages/index/index.wxss"</span> &#125;</span><br><span class="line">)();</span><br></pre></td></tr></table></figure>
<h1 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h1><p>剩下一个问题，我们写的代码是：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.data1</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">50</span>rpx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.data2</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>: blue;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">100</span>rpx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.data3</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>: blue;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">100</span>rpx;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>但上边分析的 <code>&lt;script&gt;</code> 生成 <code>css</code> 的数组是哪里来的：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">    <span class="string">"."</span>,</span><br><span class="line">    [<span class="number">1</span>],</span><br><span class="line">    <span class="string">"container &#123; display: flex; align-items: center; justify-content: center; ;wxcs_originclass: .container;;wxcs_fileinfo: ./pages/index/index.wxss 1 1; &#125;\n"</span>,</span><br><span class="line">    <span class="string">"."</span>,</span><br><span class="line">    [<span class="number">1</span>],</span><br><span class="line">    <span class="string">"data1&#123; color: red; font-size: "</span>,</span><br><span class="line">    [<span class="number">0</span>, <span class="number">50</span>],</span><br><span class="line">    <span class="string">"; ;wxcs_style_font-size : 50rpx; ;wxcs_originclass: .data1;;wxcs_fileinfo: ./pages/index/index.wxss 6 1; &#125;\n"</span>,</span><br><span class="line">    <span class="string">"."</span>,</span><br><span class="line">    [<span class="number">1</span>],</span><br><span class="line">    <span class="string">"data2&#123; color: blue; font-size: "</span>,</span><br><span class="line">    [<span class="number">0</span>, <span class="number">100</span>],</span><br><span class="line">    <span class="string">"; ;wxcs_style_font-size : 100rpx; ;wxcs_originclass: .data2;;wxcs_fileinfo: ./pages/index/index.wxss 11 1; &#125;\n"</span>,</span><br><span class="line">    <span class="string">"."</span>,</span><br><span class="line">    [<span class="number">1</span>],</span><br><span class="line">    <span class="string">"data3&#123; color: blue; font-size: "</span>,</span><br><span class="line">    [<span class="number">0</span>, <span class="number">100</span>],</span><br><span class="line">    <span class="string">"; ;wxcs_style_font-size : 100rpx; ;wxcs_originclass: .data3;;wxcs_fileinfo: ./pages/index/index.wxss 17 1; &#125;\n"</span>,</span><br><span class="line">],</span><br></pre></td></tr></table></figure>
<p>是微信帮我们把 <code>wxss</code> 进行了编译，编译工具可以在微信开发者工具目录搜索 <code>wcsc</code> ，<code>Library</code> 是个隐藏目录。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20231125123847684.png" alt=""></p>
<p>我们把这个 <code>wcsc</code> 文件拷贝到 <code>index.wxss</code> 的所在目录，然后将我们的 <code>wxss</code> 手动编译一下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">./wcsc -js ./index.wxss &gt;&gt; wxss.js</span><br></pre></td></tr></table></figure>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20231125124432358.png" alt="image-20231125124432358"></p>
<p>此时会发现生成的 <code>wxss.js</code> 就是我们上边分析的全部代码了：</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20231125124528090.png" alt=""></p>
<h1 id="总"><a href="#总" class="headerlink" title="总"></a>总</h1><p>因此对于代码 <code>wxss</code> 到显示到页面中就是三步了，第一步是编译为 <code>js</code>，第二步将 <code>js</code> 通过 <code>eval</code> 注入到页面，第三步就是 <code>js</code> 执行过程中把 <code>rpx</code> 转为 <code>px</code>，并且把 <code>css</code> 注入到 <code>style</code>  标签中。</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>微信小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>记前端大会 FEDay 的一天</title>
    <url>/2023/11/19/%E8%AE%B0%E5%89%8D%E7%AB%AF%E5%A4%A7%E4%BC%9AFEDay/</url>
    <content><![CDATA[<p>周六去杭州参加了第六届 FEDay，买的晚宴票，晚上还和大佬们吃了饭，看着网上活跃的 id 变成了吃饭的同桌，还真有一些不真切的感觉。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20231119172323465.png" alt="image-20231119172323465" style="zoom: 33%;"></p>
<p>趁着对周六分享还有些记忆，就简单写一写周六的分享和感触吧，<strong>中间会混着我的一些观点</strong>，主要是听到分享后想到的，大家也不要误解。</p>
<h1 id="阮贝琪（Jecelyn-Yeen）：网页调试的最新进展（Modern-Web-Debugging）"><a href="#阮贝琪（Jecelyn-Yeen）：网页调试的最新进展（Modern-Web-Debugging）" class="headerlink" title="阮贝琪（Jecelyn Yeen）：网页调试的最新进展（Modern Web Debugging）"></a>阮贝琪（Jecelyn Yeen）：网页调试的最新进展（Modern Web Debugging）</h1><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20231119172721731.png" alt="image-20231119172721731" style="zoom:33%;"></p>
<p>一位谷歌的大佬，分享的非常幽默，主要介绍了 Chrome 的 devTools，调试相关的东西。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20231119174738753.png" alt="image-20231119174738753"></p>
<p>更新了一个认识： Source Maps 规格竟然停留在了 <a href="https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit?pli=1#heading=h.1ce2c87bpj24" target="_blank" rel="noopener">2011</a>，但过去十年前端发生了太多的变化，导致 SourceMap 目前很 flexible， 目前 Chrome 也在与 TC39 合作，强化规范并改善调试体验。</p>
<p>介绍了很多调试 Tips，印象比较深的两个：</p>
<p>前段时间知道了 Chrome 可以覆盖相应内容，意味着 Mock 再也不需要第三方插件了。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20231119180001931.png" alt="image-20231119180001931"></p>
<p>会上还展示了 Override headers，通过编辑 headers 也可以直接解决跨域问题，这是之前没有想到的。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20231119180135764.png" alt="image-20231119180135764"></p>
<p>另外还有个之前遇到的头疼的问题，如果想调试搜索框选中下拉元素的样式。</p>
<p>当切到 Element，搜索框下边的内容就会消失掉</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20231119180330182.png" alt="image-20231119180330182"></p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20231119180338334.png" alt="image-20231119180338334"></p>
<p>此时找到 MoreTools，Rendering</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20231119180403639.png" alt="image-20231119180403639"></p>
<p>开启 Emulate a focused page，此时下拉就出来了。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20231119180446239.png" alt="image-20231119180446239"></p>
<p>Jecelyn Yeen 也自嘲这么好的功能为什么大家都不知道，未来也会把这个功能放到外层。</p>
<p>最后，所有的功能其实都是有人在默默开发，遇到问题没有人反馈其实不会自己偷偷修复，Jecelyn Yeen  也提倡大家有问题可以及时报告。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20231119180824327.png" alt="image-20231119180824327"></p>
<h1 id="周爱民：从JS到TS无缝迁移的实践报告"><a href="#周爱民：从JS到TS无缝迁移的实践报告" class="headerlink" title="周爱民：从JS到TS无缝迁移的实践报告"></a>周爱民：从JS到TS无缝迁移的实践报告</h1><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20231119184127214.png" alt="image-20231119184127214" style="zoom:33%;"></p>
<p>分享了无缝迁移 Mocha 到 TS 的全过程，以及期间遇到的常见的问题。</p>
<p>突然发现是一个学 TS 不错的方法，github 找一个还没有 ts 的开源项目，然后去转 TS 来练习。</p>
<p>关于用不用 TS 一直争议不断，前段时间我也有写过一篇 <a href="https://zhuanlan.zhihu.com/p/649557019" target="_blank" rel="noopener">关于 TS 的思考</a>。</p>
<p>周爱民老师也分享了自己的看法：持续迭代的复杂项目，值得去转 TS。</p>
<p>换言之，如果一个简单项目，直接 js 就好了，用 TS 徒增复杂度。但对于复杂项目是不是也要转 TS 这里我觉得还是有争议的，对于框架类、工具类接入 TS 是毫无疑问的，比如 Vue3 就全面拥抱了 TS。</p>
<p>但对于复杂的业务项目，由于参与人数众多，很多结构也很依赖于后端，随着慢慢迭代，更多的 any 或者类型和实际用的数据渐渐不一致，就变成破窗效应，迭代需求时候就没有人再愿意维护旧类型了。</p>
<h1 id="蒋豪群：一种-Vue-2-3-共存开发的思路"><a href="#蒋豪群：一种-Vue-2-3-共存开发的思路" class="headerlink" title="蒋豪群：一种 Vue 2/3 共存开发的思路"></a>蒋豪群：一种 Vue 2/3 共存开发的思路</h1><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20231119194238059.png" alt="image-20231119194238059" style="zoom:33%;"></p>
<p>Vue2 将在年底彻底停止维护，分享了之前 Vue2 修复的安全漏洞，继续使用 Vue2 一个最大的问题就是安全问题。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20231120090032301.png" alt="image-20231120090032301"></p>
<p>但在国内这个问题不会引起重视的[旺柴]，毕竟 XP 还有很多市场，我们团队内的项目甚至还是 Vue 2.5 的版本，对于业务团队，完全没有足够的理由去说升级这个事，风险远远大于收益。</p>
<p>之前升级项目的 ElementUI 的版本也是灰度了很久才完成，Vue 去升级想都不敢想，只能是新开的项目来使用 Vue3 了。</p>
<p>后边具体的分享了 Vue2/3 同时维护的方案，一种是一套源代码编译成 Vue2/3 两套代码，另一种是直接写两套代码，都一定程度上会多增加一些工作量，目前看来还是没有一种完美的方案来让 Vue2/3 共存。</p>
<h1 id="张磊：响应式-WebComponents"><a href="#张磊：响应式-WebComponents" class="headerlink" title="张磊：响应式 WebComponents"></a>张磊：响应式 WebComponents</h1><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20231119194430058.png" alt="image-20231119194430058" style="zoom: 33%;"></p>
<p>磊哥分享很硬核，直接上一页又一页的代码，人也自带搞笑属性，哈哈。主要介绍了 Omi 的一些思路，Web components + 信号驱动的响应式编程，响应式编程还就是 Vue 那套，感兴趣的同学也可以看我之前总结的  <a href="https://vue.windliang.wang/" target="_blank" rel="noopener">vue.windliang.wang/</a>。</p>
<p>分享了对于 Web Components 遇到的一些问题，还有许久没有操作的 dom，介绍了一个有用的 API TreeWalker，解决 Shadow Dom 样式被隔离的问题，全面拥抱 TailWind css，解决取名问题，同时避免各个 class 相互影响，实现组件内聚到 HTML 标签上。</p>
<p>我突然产生了一种感觉，随着 Web component 的完善，更多的框架出现，未来会不会又回到原生标签的开发中，哈哈。</p>
<p>最重要的就是 ALL IN AI，生成式 AI 势不可挡，下午也有更多的分享嘉宾带来了 AI 方面的思考。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20231119195532826.png" alt="image-20231119195532826"></p>
<h1 id="渚薰：作为一名前端，如何赶上AR时代的脚步"><a href="#渚薰：作为一名前端，如何赶上AR时代的脚步" class="headerlink" title="渚薰：作为一名前端，如何赶上AR时代的脚步"></a>渚薰：作为一名前端，如何赶上AR时代的脚步</h1><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20231119195650859.png" alt="image-20231119195650859" style="zoom:33%;"></p>
<p>主要分享了 AR / XR 方面的知识，自己之前也没接触过这方面知识，同时分享了未来的畅享。分享了给他儿子写的一个奥特曼 AR 应用，你相信光吗，看着心潮澎湃，哈哈。</p>
<p>另外提到目前网页都是二维或者三维的渲染，期待未来实现二维和三维的混合渲染，同时三维也尽可能的接近目前 html/css 的开发模式，目前已经有个框架在往这方面发展，还可以直接在 VSCode 上调试，但框架名我忘记了。</p>
<p>此外，AR/XR 的未来，完全看苹果的表现了，虽然已经发展了很多年，那依然还是没能像手机一样普及。如果苹果的 Vision Pro 继续发展，电影中的场景也会很快实现，明年也许是真正的 AR 元年。</p>
<p>对于前端来说，未来又多了一批职业。</p>
<h1 id="李杰（一丝）：resvg-js-高性能的-SVG-跨端渲染引擎"><a href="#李杰（一丝）：resvg-js-高性能的-SVG-跨端渲染引擎" class="headerlink" title="李杰（一丝）：resvg-js 高性能的 SVG 跨端渲染引擎"></a>李杰（一丝）：resvg-js 高性能的 SVG 跨端渲染引擎</h1><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20231119204648441.png" alt="image-20231119204648441" style="zoom:33%;"></p>
<p>演讲的时候没有感受到，吃饭的时候发现一丝姐姐好活泼，哈哈。主要介绍了 SVG 的渲染引擎，底层是基于 Rust ，上次进行封装，提供操作 SVG 的方法，浏览器通过 WebAssebmy 进行调用。</p>
<p>也都是自己知识外的知识，但只记得一点就行了，如果要高性能的渲染 SVG，去看 resvg-js 就好了，哈哈。</p>
<h1 id="吴亮（月影）：AI-大模型时代前端新思路"><a href="#吴亮（月影）：AI-大模型时代前端新思路" class="headerlink" title="吴亮（月影）：AI 大模型时代前端新思路"></a>吴亮（月影）：AI 大模型时代前端新思路</h1><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20231120092616443.png" alt="image-20231120092616443" style="zoom:33%;"></p>
<p>介绍了创业项目 AirCode，现场演示了目前的一些功能。</p>
<p>生成式 AI 未来可能会引发新的交互形式，maybe 智能组件，比如一个时间选择组件，直接通过自然语言进行交互，「勾选中秋节假期」，而不是自己先去查中秋是啥时候，当然是指一个简单的设想，未来也说不准会怎么样，比如现在国外团队最近发布的 Ai Pin，直接挂到胸前，通过语音沟通，还能投影到手掌。</p>
<p><img src="https://image.woshipm.com/2023/11/10/e9df295e-7f85-11ee-836d-00163e0b5ff3.jpg" alt="img" style="zoom:50%;"></p>
<p>另一个点是，ai 有一个问题是不确定性。可能无法很好的遵从我们的指令，如果这个问题可以解决了，未来会有更大的想象力，甚至成为一门新的编程语言，而这门编程语言完全是我们的自然语言了。</p>
<h1 id="张敏：WebNN-Web-端侧推理的未来"><a href="#张敏：WebNN-Web-端侧推理的未来" class="headerlink" title="张敏：WebNN, Web 端侧推理的未来"></a>张敏：WebNN, Web 端侧推理的未来</h1><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20231119201814989.png" alt="image-20231119201814989" style="zoom:33%;"></p>
<p>好吧，涉及硬件的东西，完全没有看懂：</p>
<blockquote>
<p>AI PC 以及 AI Mobile 的新兴时代已经到来，越来越多的设备集成了强大的神经处理单元 NPU，以实现高效的人工智能加速，这对需要端侧推理的应用至关重要。除了通过 CPU 和 GPU 进行推理之外，Web Neural Network API (WebNN) 提供了 Web 应用访问此类专有 AI 加速器 NPU 的途径，以获得卓越性能及更低功耗。</p>
<p>本演讲将会给大家分享 WebNN API 的 W3C 标准进度，对 CNN, Transformer 以及更广泛的生成式 AI (Generative AI) 模型的支持情况和计划，以及在 Chrome, Edge 等浏览器的实现进展。作为 JavaScript ML 框架的后端，WebNN 将会在几乎不更改前端代码的前提下，为 Web 开发者及他们的产品带来相较于 Wasm, WebGL 更为优异的性能体验。</p>
</blockquote>
<p>大概就是提供专门的硬件 NPU，同时上层提供专门的 API 加速 AI 计算，为上层的应用服务，比如后边分享的 Transformer。</p>
<h1 id="贺师俊（Hax）：如何更丝滑地在应用中调用-GPT"><a href="#贺师俊（Hax）：如何更丝滑地在应用中调用-GPT" class="headerlink" title="贺师俊（Hax）：如何更丝滑地在应用中调用 GPT"></a>贺师俊（Hax）：如何更丝滑地在应用中调用 GPT</h1><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20231119201953880.png" alt="image-20231119201953880" style="zoom:33%;"></p>
<p>大佬很和蔼，吃饭的时候甚至就在旁边。分享的很实用，因为 Hax 在做 AI 相关的应用，底层是基于 GPT 的，很细节的分享了如何调用 GPT 和踩的一些坑。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20231119202425785.png" alt="image-20231119202425785"></p>
<p>这一次的生成式 AI 真的越来越像人，具备了人的特点。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20231119202606595.png" alt="image-20231119202606595"></p>
<p>之前听孟岩的播客也提到这个，GPT 是基于概率来逐次生成完整的对话，我们人其实也完全是这样，如果要说一大段话，基于周围的环境，前边说的，一点一点的完成整个对话，和 GPT 真的太像了。</p>
<p>另外，只要热爱编程，就忘掉 35 岁吧，贺老已经 45 了。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20231119202337901.png" alt="image-20231119202337901"></p>
<h1 id="Joshua-Lochner：-State-of-the-art-Machine-Learning-for-the-Web（远程分享）"><a href="#Joshua-Lochner：-State-of-the-art-Machine-Learning-for-the-Web（远程分享）" class="headerlink" title="Joshua Lochner： State-of-the-art Machine Learning for the Web（远程分享）"></a>Joshua Lochner： State-of-the-art Machine Learning for the Web（远程分享）</h1><blockquote>
<p>在本次演讲中，你将了解 Hugging Face 如何通过 Transformers.js 将最先进的机器学习带到 Web 中，同时我们将讨论 WebML 技术的优势，以及如何将其用于加速您的 Web 应用程序。最后，为了展示 Transformers.js 的潜力，我们将探索一些使用该库构建的引人注目的应用。</p>
</blockquote>
<p>在 chatGPT 出现之前，这一定是非常惊艳的，可以在浏览器本地直接实现语音识别、翻译、图像识别等， Hugging Face  提供了众多训练好的专有模型，前端直接通过一行代码引入就可以直接使用，底层还是之前很火的深度学习模型。之前我也通过 <a href="https://zhuanlan.zhihu.com/p/71647786" target="_blank" rel="noopener">Tensorflow.js</a> 来直接在浏览器实现图像识别.</p>
<p>但当大模型兴起后，之前的深度学习就略显尴尬了，毕竟在各个方面大模型都可以吊打各个深度学习的专有模型了。但在浏览器直接跑模型好处也是有的，那就是隐私，由于是完全本地调用 AI 模型，无需通过网络，隐私完全不会暴露，同时速度也很快。</p>
<p>未来发展方向就是将大模型也能内置到浏览器，但还需要继续发展。</p>
<h1 id="陈天壹（七桑）：抖音商家端-Rust-业务实践"><a href="#陈天壹（七桑）：抖音商家端-Rust-业务实践" class="headerlink" title="陈天壹（七桑）：抖音商家端 Rust 业务实践"></a>陈天壹（七桑）：抖音商家端 Rust 业务实践</h1><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20231119203908997.png" style="zoom:33%;"></p>
<blockquote>
<p>随着抖音电商业务高速增长，商家端在有高复用要求的背景下，选用了 Electron + Web 构建跨平台、快交付的高效率方案，但也面对着不小的性能及稳定性压力。我们通过 Rust 在抖音商家端落地，为高性能挑战的业务(如IM)提供了底层能力支持，抬高原有架构性能天花板，并保持跨平台应对未来变化。</p>
<p>本次分享我们将揭示抖音商家端Rust 实战的精华内容，你将了解到:<br>- Electron架构面临什么样的性能和稳定性挑战? 选型上与其他方案有什么样的考虑？<br>- 为什么选择Rust语言? 如何设计 Rust SDK 架构实现跨平台<br>- Rust 怎么在 Electron 内跑起来？与web如何交互？<br>- 提升IM的稳定性，抬高性能天花板，我们拿到了什么样的收益？</p>
</blockquote>
<p>Rust 一直如火如荼，但一直没有近距离的接触过。七桑用代码演示了使用的过程，同时介绍了在抖音电商的落地。未来相关基建一定会用 Rust 来重新了，但不知道自己啥时候会遇到这样的需求。</p>
<h1 id="黄玄（Hux）：我的大前端世界观"><a href="#黄玄（Hux）：我的大前端世界观" class="headerlink" title="黄玄（Hux）：我的大前端世界观"></a>黄玄（Hux）：我的大前端世界观</h1><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20231119204430533.png" alt="image-20231119204430533" style="zoom:33%;"></p>
<p>会议开头直接抛出了问题，后端是什么，前端又是什么？</p>
<p>确实很难定义清楚，狭义的讲，跑在服务器的就是后端，html/css/js 就是前端。</p>
<p>但随着前端的发展，Node.js、WebAssembly、Rust、React、Vue、RN、小程序的出现，前端的领域范围越来越大，一切都是前端，还有前端不能做的吗[旺柴] </p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/v2-a62f4ac750b6a977fd9f4c53f1c21542_r.jpg" alt=""></p>
<p>Hux 也形象的用 O(n) -&gt; O(1) 来比喻边际效应，从 Flash 到 H5 到移动端，当技术让边际成本足够低，相应的职业也就会消失。有老的技术的消失，但随之又会有新技术的出现，技术肯定是为人所服务的，只要有技术，我们就会在。</p>
<p>这也是我之前的想法，但 Hux 讲的更深入，更高大上一些，之前我写的详见 <a href="https://zhuanlan.zhihu.com/p/640990591" target="_blank" rel="noopener">工作三年后的胡思乱想</a>。</p>
<p>我们确实站在了 AI 变革的时间点，但不用担心被 AI 取代，历史的经验已经充分告诉我们，一个的消失一定会有新的出现，保持学习即可。</p>
<h1 id="尤雨溪：前端与框架（线上录屏）"><a href="#尤雨溪：前端与框架（线上录屏）" class="headerlink" title="尤雨溪：前端与框架（线上录屏）"></a>尤雨溪：前端与框架（线上录屏）</h1><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20231120085703675.png" alt="image-20231120085703675"></p>
<p>可惜这次还是没有见到尤大，到尤大时间已经比较紧了，视频也开始 1.25、1.5 倍速，因为是在电影院，后面一场电影马上要来人了。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20231120091828930.png" alt="image-20231120091828930"></p>
<p>尤大的分享确实很干，主要是关于 Vue2 到 Vue3 中犯的一些错误，业务迁移困难、相关基建迁移困难，但好在 Vue3 现在也蓬勃发展了，并且吸取了教训用在后续 Vite 迭代中。</p>
<p>讲了目前 Vite 开发采用 esbuild 很快，但线上打包采用更加灵活的 rollup，两者可能会带来差异，后续会开发 rolldown，吸取 esbuild 和 rollup 两者的优点，但估计是个漫长的过程了。</p>
<h1 id="总"><a href="#总" class="headerlink" title="总"></a>总</h1><p>一天分享的内容很多很多，不停的超时，哈哈。上边就是自己印象深刻的一些点，后续 FEDay 的组织者也许会在 <a href="https://fequan.com/2023/" target="_blank" rel="noopener">「前端圈」 </a>把 ppt 都分享出来，大家感兴趣也可以去找找。</p>
<p>一天下来，最重要的大概就是 AI 了，之前一直说风口，Web1.0 时代、移动互联网时代，新的 ai 时代开启了，但我们可以做些什么呢？好吧，果然还是普通人，只能静静的等待 ai 时代的明星公司一个接着一个诞生了。</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
  </entry>
  <entry>
    <title>JavaScript中this指向详细分析(译)</title>
    <url>/2021/11/07/JavaScript%E4%B8%ADthis%E6%8C%87%E5%90%91%E8%AF%A6%E7%BB%86%E5%88%86%E6%9E%90-%E8%AF%91/</url>
    <content><![CDATA[<p>前端开发中，每天和我们见面最多的也许就是 <code>this</code> 关键字了，一直想总结一篇 <code>this</code> 的文章，然后看到了 <a href="https://dmitripavlutin.com/gentle-explanation-of-this-in-javascript/" target="_blank" rel="noopener">Gentle Explanation of “this” in JavaScript</a> ，总结的太好了，这里就翻译一下吧。</p>
<hr>
<h1 id="神秘的this"><a href="#神秘的this" class="headerlink" title="神秘的this"></a>神秘的this</h1><p><code>this</code> 关键词已经折磨我很久很久了。</p>
<p>对于 <code>Java</code>、<code>PHP</code> 这类<em>标准语言</em>，<code>this</code> 表示当前类的实例化对象，它不能够在类的方法外使用，简单直接，因此并不会让人产生困惑。</p>
<p>但在 <code>JavaScript</code> 中情况就比较复杂了：<strong><code>this</code> 指向当前函数调用的执行上下文(<code>context</code>)</strong>，有四种函数调用类型：</p>
<ul>
<li>函数直接调用(<code>function invocation</code>：<code>alert(&#39;Hello World!&#39;)</code></li>
<li>方法调用(<code>method invocation</code>：<code>console.log(&#39;Hello World!&#39;)</code></li>
<li>构造函数调用(<code>constructor invocation</code>：<code>new RegExp(&#39;\\d&#39;)</code></li>
<li>间接调用(<code>indirect invocation</code>：<code>alert.call(undefined, &#39;Hello World!&#39;)</code></li>
</ul>
<p>每种调用方式都产生了各自不同的上下文，因此 <code>this</code> 有时候可能并不是我们所期待的。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/this11071.jpg" alt="img" style="width:50%;"></p>
<p>此外，严格模式（<code>strict mode</code>）也会影响到 <code>this</code> 的指向。</p>
<blockquote>
<p>弄清 <code>this</code> 指向的关键就是对上边函数调用类型有一个清楚的判断</p>
</blockquote>
<p>下边会详细介绍每一种调用类型的区别，以及它们是怎么影响 <code>this</code> 指向的，同时会举例说明一些容易判断出错的陷阱。</p>
<h1 id="1-函数直接调用-function-invocation"><a href="#1-函数直接调用-function-invocation" class="headerlink" title="1. 函数直接调用(function invocation)"></a>1. 函数直接调用(function invocation)</h1><p><em>定义：一个可以解析成函数对象的表达式，紧跟着左括号，然后是逗号分割的参数，最后是右括号。例如 <code>parseInt(&#39;18&#39;)</code>。</em></p>
<p>下边看一个简单的函数直接调用的例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'Hello '</span> + name + <span class="string">'!'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Function invocation</span></span><br><span class="line"><span class="keyword">const</span> message = hello(<span class="string">'World'</span>);</span><br></pre></td></tr></table></figure>
<p><code>hello(&#39;World&#39;)</code> 就是一个函数直接调用：<code>hello</code>可以解析成一个函数对象，紧跟着是用括号括起来的 <code>World</code> 参数。</p>
<p>函数直接调用和通过对象属性 <code>obj.myFunc()</code> 是不同的，它叫做方法调用 <code>method invocation</code>（后边介绍的第 <code>2</code> 种类型）。比如 <code>[1,5].join(&#39;,&#39;)</code> 这种不是一个函数直接调用，而是方法调用。<strong>这两种是最容易混淆的，需要特别注意</strong>。</p>
<p>此外，一个 <code>IIFE(immediately-invoked function expression)</code> 也属于函数直接调用。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// IIFE</span></span><br><span class="line"><span class="keyword">const</span> message = (<span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'Hello '</span> + name + <span class="string">'!'</span>;</span><br><span class="line">&#125;)(<span class="string">'World'</span>);</span><br></pre></td></tr></table></figure>
<p>第一对括号内的 <code>(function(name) {...})</code> 是一个可以解析成函数对象的表达式，接下来的一对括号中 <code>(&#39;World&#39;)</code> 括的就是参数列表。</p>
<h2 id="1-1-函数直接调用中的-this-指向"><a href="#1-1-函数直接调用中的-this-指向" class="headerlink" title="1.1 函数直接调用中的 this 指向"></a>1.1 函数直接调用中的 <code>this</code> 指向</h2><p>首先需要知道全局对象是什么，不同执行环境中全局对象不同。在浏览器中全局对象是 <code>window</code>，<code>Node.js</code> 中的全局对象是 <code>global</code>。下边主要以浏览器的执行环境来分析。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/this11072.jpg" alt="img" style="width:50%;"></p>
<p>在「函数直接调用」中，执行上下文就是全局对象，也就是 <code>this</code> 的指向。</p>
<p>让我们看下边的例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span> === <span class="built_in">window</span>); <span class="comment">// =&gt; true</span></span><br><span class="line">  <span class="keyword">this</span>.myNumber = <span class="number">20</span>; <span class="comment">// add 'myNumber' property to global object</span></span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// sum() is invoked as a function</span></span><br><span class="line"><span class="comment">// this in sum() is a global object (window)</span></span><br><span class="line">sum(<span class="number">15</span>, <span class="number">16</span>);     <span class="comment">// =&gt; 31</span></span><br><span class="line"><span class="built_in">window</span>.myNumber; <span class="comment">// =&gt; 20</span></span><br></pre></td></tr></table></figure>
<p>当调用 <code>sum(15, 16)</code> 的时候，<code>JavaScript</code> 会自动将 <code>this</code> 指向全局对象（浏览器中的 <code>window</code>）。</p>
<p>当 <code>this</code> 在函数外的顶级作用域中使用的时候，同样也是指向全局对象的：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span> === <span class="built_in">window</span>); <span class="comment">// =&gt; true</span></span><br><span class="line"><span class="keyword">this</span>.myString = <span class="string">'Hello World!'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.myString); <span class="comment">// =&gt; 'Hello World!'</span></span><br></pre></td></tr></table></figure>
<p>在 <code>html</code> 中的 <code>script</code> 中也是一样的。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- In an html file --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"> <span class="built_in">console</span>.log(<span class="keyword">this</span> === <span class="built_in">window</span>); <span class="comment">// =&gt; true</span></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="1-2-函数直接调用中的-this-指向（严格模式）"><a href="#1-2-函数直接调用中的-this-指向（严格模式）" class="headerlink" title="1.2  函数直接调用中的 this 指向（严格模式）"></a>1.2  函数直接调用中的 <code>this</code> 指向（严格模式）</h2><blockquote>
<p>严格模式下，函数直接调用中的 <code>this</code> 是 <code>undefined</code>。</p>
</blockquote>
<p>严格模式在<a href="http://www.ecma-international.org/ecma-262/5.1/#sec-10.1.1" target="_blank" rel="noopener">ECMAScript 5.1</a> 出现，对 <code>js</code> 一些语法进行了限制，可以提供一个更加安全、健壮的错误检查机制。</p>
<p>在函数体顶部加入 <code>&#39;user strict&#39;</code> 即可使用严格模式。</p>
<p>严格模式会影响当前上下文环境（<code>context</code>)，在函数直接调用场景中，<code>this</code> 会变为 <code>undefind</code>，而不是上边介绍的全局对象。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/this11073.jpg" alt="img" style="width:50%;"></p>
<p>下边举一个使用严格模式的例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">multiply</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line"><span class="meta">  'use strict'</span>; <span class="comment">// enable the strict mode</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span> === <span class="literal">undefined</span>); <span class="comment">// =&gt; true</span></span><br><span class="line">  <span class="keyword">return</span> a * b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// multiply() function invocation with strict mode enabled</span></span><br><span class="line"><span class="comment">// this in multiply() is undefined</span></span><br><span class="line">multiply(<span class="number">2</span>, <span class="number">5</span>); <span class="comment">// =&gt; 10</span></span><br></pre></td></tr></table></figure>
<p> 当使用严格模式调用 <code>multiply(2, 5)</code> 的时候，<code>this</code> 就是 <code>undefined</code>。</p>
<p>严格模式不仅对当前作用域有效，它内部的作用域（当前作用域内定义的函数内）也会是严格模式。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">execute</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="meta">  'use strict'</span>;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">concat</span>(<span class="params">str1, str2</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// the strict mode is enabled too</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span> === <span class="literal">undefined</span>); <span class="comment">// =&gt; true</span></span><br><span class="line">    <span class="keyword">return</span> str1 + str2;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span> === <span class="literal">undefined</span>); <span class="comment">// =&gt; true</span></span><br><span class="line">  <span class="comment">// concat() is invoked as a function in strict mode</span></span><br><span class="line">  <span class="comment">// this in concat() is undefined</span></span><br><span class="line">  concat(<span class="string">'Hello'</span>, <span class="string">' World!'</span>); <span class="comment">// =&gt; "Hello World!"</span></span><br><span class="line">&#125;</span><br><span class="line">execute();</span><br></pre></td></tr></table></figure>
<p>上边的代码中，<code>use strict</code> 是写在 <code>execute</code> 函数体的头部，函数内部的 <code>this</code> 会是 <code>undefined</code>。同时，因为 <code>concat</code> 是定义在 <code>execute</code> 内部，它也会继承严格模式。因此 <code>concat(&#39;Hello&#39;, &#39; World!&#39;)</code> 的调用，其内部的 <code>this</code> 也会指向 <code>undefined</code>。</p>
<p>一个单独 <code>js</code> 文件可能包含多个作用域，因此不同的作用域可能分别处于非严格模式和严格模式。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">nonStrictSum</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// non-strict mode</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span> === <span class="built_in">window</span>); <span class="comment">// =&gt; true</span></span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">strictSum</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line"><span class="meta">  'use strict'</span>;</span><br><span class="line">  <span class="comment">// strict mode is enabled</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span> === <span class="literal">undefined</span>); <span class="comment">// =&gt; true</span></span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// nonStrictSum() is invoked as a function in non-strict mode</span></span><br><span class="line"><span class="comment">// this in nonStrictSum() is the window object</span></span><br><span class="line">nonStrictSum(<span class="number">5</span>, <span class="number">6</span>); <span class="comment">// =&gt; 11</span></span><br><span class="line"><span class="comment">// strictSum() is invoked as a function in strict mode</span></span><br><span class="line"><span class="comment">// this in strictSum() is undefined</span></span><br><span class="line">strictSum(<span class="number">8</span>, <span class="number">12</span>); <span class="comment">// =&gt; 20</span></span><br></pre></td></tr></table></figure>
<h2 id="1-3-陷阱：内部函数的-this-指向"><a href="#1-3-陷阱：内部函数的-this-指向" class="headerlink" title="1.3 陷阱：内部函数的 this 指向"></a>1.3 陷阱：内部函数的 <code>this</code> 指向</h2><p>⚠️一个很普遍的陷阱：对于函数直接调用，可能会认为如果是函数内部定义的函数，它的 <code>this</code> 会指向外部函数的上下文。</p>
<p>👍要始终记得，内部函数的 <code>this</code> 指向（除了箭头函数）只和它的调用类型相关（也就是本文介绍的几种类型），而不是它所在函数的上下文。</p>
<p>为了使 <code>this</code> 变成我们所期待的值，我们可以通过间接调用来实现（比如 <code>.call()</code> 或者 <code>.apply()</code>，下边第 <code>4</code> 节会介绍），或者创造一个绑定函数（使用 <code>.bind()</code>，下边第 <code>5</code> 节会介绍）。</p>
<p>看一下下边两数相加的例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = &#123;</span><br><span class="line">  numberA: <span class="number">5</span>,</span><br><span class="line">  numberB: <span class="number">10</span>,</span><br><span class="line">  sum: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span> === numbers); <span class="comment">// =&gt; true</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">calculate</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">// this is window or undefined in strict mode</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span> === numbers); <span class="comment">// =&gt; false</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.numberA + <span class="keyword">this</span>.numberB;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> calculate();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">numbers.sum(); <span class="comment">// =&gt; NaN or throws TypeError in strict mode</span></span><br></pre></td></tr></table></figure>
<p>⚠️ <code>numbers.sum()</code> 属于对象的一个方法调用，下一小节会讲。从代码分析，这里 <code>calculate()</code> 的结果其实就是  <code>numbers.sum()</code> 的结果 。因为 <code>calculate</code> 函数定义在 <code>sum</code> 中，<code>sum</code> 是 <code>numbers</code> 对象的属性，因此当调用 <code>numbers.sum()</code>， 我们会觉得 <code>calculate</code> 中的 <code>this</code> 也指向 <code>numbers</code> 对象。</p>
<p>重点来了，由于 <code>calculate()</code> 属于我们这一小节中讲的「函数直接调用」的类型，而不是下一小节的「方法调用」。所以 <code>calculate</code> 中的 <code>this</code> 指向全局对象 <code>window</code>，或者严格模式下的 <code>undefined</code>。即使在 <code>numbers.sum()</code> 中的 <code>this</code> 指向当前对象 <code>numbers</code>，但是它并不会影响 <code>calculate</code> 中的 <code>this</code>。</p>
<p>因此 <code>numbers.sum()</code> 的调用结果是 <code>NaN</code> （或者在严格模式下抛出一个错误 <code>TypeError: Cannot read property &#39;numberA&#39; of undefined</code>)。而不是我们所期待的 <code>5 + 10 = 15</code>    。</p>
<p>👍 为了解决这个问题，<code>calculate()</code> 函数必须拥有和 <code>numbers.sum()</code> 相同的 <code>this</code> 指向，这样在 <code>calculate</code> 中才能访问到 <code>this.numberA</code> 和 <code>this.numberB</code>。</p>
<p>一种解决方法就是使用 <code>call</code> 方法来手动改变 <code>calculate()</code> 中的 <code>this</code> 指向。（第 <code>4</code> 节的时候会介绍「间接调用」这种类型）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = &#123;</span><br><span class="line">  numberA: <span class="number">5</span>,</span><br><span class="line">  numberB: <span class="number">10</span>,</span><br><span class="line">  sum: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span> === numbers); <span class="comment">// =&gt; true</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">calculate</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span> === numbers); <span class="comment">// =&gt; true</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.numberA + <span class="keyword">this</span>.numberB;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// use .call() method to modify the context</span></span><br><span class="line">    <span class="keyword">return</span> calculate.call(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">numbers.sum(); <span class="comment">// =&gt; 15</span></span><br></pre></td></tr></table></figure>
<p><code>calculate.call(this)</code> 会正常执行 <code>calculate()</code>函数，同时会将它的执行上下文变为所传入的第一个参数。</p>
<p>现在 <code>this.numberA + this.numberB</code> 就相当于 <code>number.numberA + numbers.numberB</code> 了，所以结果就是 <code>5 + 10 = 15</code> 了。</p>
<p>另外一种解决方法看起来会更好，那就是通过箭头函数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = &#123;</span><br><span class="line">  numberA: <span class="number">5</span>,</span><br><span class="line">  numberB: <span class="number">10</span>,</span><br><span class="line">  sum: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span> === numbers); <span class="comment">// =&gt; true</span></span><br><span class="line">    <span class="keyword">const</span> calculate = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span> === numbers); <span class="comment">// =&gt; true</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.numberA + <span class="keyword">this</span>.numberB;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> calculate();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">numbers.sum(); <span class="comment">// =&gt; 15</span></span><br></pre></td></tr></table></figure>
<p>箭头函数中的 <code>this</code> 会指向它所定义的地方，这里就是 <code>numbers.sum</code> 中的 <code>this</code>，会在第 <code>6</code> 讲中继续讲箭头函数。</p>
<h1 id="2-方法调用"><a href="#2-方法调用" class="headerlink" title="2 方法调用"></a>2 方法调用</h1><p>对象中的某个属性如果是函数，我们称其为方法。例如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> myObject = &#123;</span><br><span class="line">  <span class="comment">// helloMethod is a method</span></span><br><span class="line">  helloMethod: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Hello World!'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> message = myObject.helloMethod();</span><br></pre></td></tr></table></figure>
<p><code>helloMethod</code> 是 <code>myObject</code> 的一个方法。使用属性访问器 <code>myObject.helloMethod</code> 可以调用这个方法。</p>
<p><em>方法调用定义：通过属性访问器得到一个函数对象，紧跟着左括号，然后是逗号分割的参数，最后是右括号。例如上边的例子 <code>myObject.helloMethod()</code>。</em></p>
<p>更多其他的例子：<code>[1, 2].join(&#39;,&#39;)</code> or <code>/\s/.test(&#39;beautiful world&#39;)</code>。</p>
<p>再强调一遍，区分上一节介绍的「函数直接调用」类型和这一节介绍的「方法调用」非常重要。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> words = [<span class="string">'Hello'</span>, <span class="string">'World'</span>];</span><br><span class="line">words.join(<span class="string">', '</span>);   <span class="comment">// method invocation</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  myMethod() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Date</span>().toString();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">obj.myMethod();     <span class="comment">// method invocation</span></span><br><span class="line"><span class="keyword">const</span> func = obj.myMethod;</span><br><span class="line">func();             <span class="comment">// function invocation</span></span><br><span class="line"><span class="built_in">parseFloat</span>(<span class="string">'16.6'</span>); <span class="comment">// function invocation</span></span><br><span class="line"><span class="built_in">isNaN</span>(<span class="number">0</span>);           <span class="comment">// function invocation</span></span><br></pre></td></tr></table></figure>
<h2 id="2-1-方法调用中的-this-指向"><a href="#2-1-方法调用中的-this-指向" class="headerlink" title="2.1 方法调用中的 this 指向"></a>2.1 方法调用中的 <code>this</code> 指向</h2><blockquote>
<p>在方法调用中，<code>this</code> 指向拥有这个方法的对象。</p>
</blockquote>
<p>当我们调用对象中的一个方法时，<code>this</code> 指向拥有这个方法的对象。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/this11074.jpg" alt="img" style="width:50%;"></p>
<p>我们来看一个增加数字的例子。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> calc = &#123;</span><br><span class="line">  num: <span class="number">0</span>,</span><br><span class="line">  increment() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span> === calc); <span class="comment">// =&gt; true</span></span><br><span class="line">    <span class="keyword">this</span>.num += <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.num;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// method invocation. this is calc</span></span><br><span class="line">calc.increment(); <span class="comment">// =&gt; 1</span></span><br><span class="line">calc.increment(); <span class="comment">// =&gt; 2</span></span><br></pre></td></tr></table></figure>
<p>通过方法调用的方式 <code>calc.increment()</code>，使得 <code>increment</code> 内部的 <code>this</code> 指向了 <code>cals</code> 对象，因此 <code>this.num</code> 会成功增加 <code>num</code> 属性的值。</p>
<p>让我们再看一个例子。对象通过原型继承一个方法，当方法通过属性访问器调用的时候，所继承的这个方法中的 <code>this</code> 也是指向对象本身：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> myDog = <span class="built_in">Object</span>.create(&#123;</span><br><span class="line">  sayName() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span> === myDog); <span class="comment">// =&gt; true</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line">myDog.name = <span class="string">'Milo'</span>;</span><br><span class="line"><span class="comment">// method invocation. this is myDog</span></span><br><span class="line">myDog.sayName(); <span class="comment">// =&gt; 'Milo'</span></span><br></pre></td></tr></table></figure>
<p>上边代码中，<code>Object.create()</code> 返回一个新对象 <code>myDog</code>，并且将它的原型对象指向第一个参数。<code>myDog</code> 对象会继承 <code>SayName</code> 方法。</p>
<p>在 <code>ECMAScript 2015</code> 中的 <code>class</code> 关键词里，方法调用中的上下文，也就是 <code>this</code> 同样指向它本身。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Planet</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(name) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">  getName() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span> === earth); <span class="comment">// =&gt; true</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> earth = <span class="keyword">new</span> Planet(<span class="string">'Earth'</span>);</span><br><span class="line"><span class="comment">// method invocation. the context is earth</span></span><br><span class="line">earth.getName(); <span class="comment">// =&gt; 'Earth'</span></span><br></pre></td></tr></table></figure>
<h2 id="2-2-陷阱：将对象中的方法抽离"><a href="#2-2-陷阱：将对象中的方法抽离" class="headerlink" title="2.2 陷阱：将对象中的方法抽离"></a>2.2 陷阱：将对象中的方法抽离</h2><p>⚠️ 我们可以将对象中的方法提取出来做为一个独立的变量 <code>const alone = myObj.myMethod</code>。当调用函数的时候 <code>alone()</code>，由于它是从原来对象拆出来的，所以可能会认为函数中的 <code>this</code> 会指向 <code>myObject</code>。</p>
<p>👍 然而，如果一个方法没有经过对象的属性访问器调用，那它就属于第一节介绍的「函数直接调用」类型，这里的 <code>this</code> 会指向全局对象 <code>window</code> 或者严格模式下的 <code>undefined</code>。</p>
<p>我们可以通过 <code>bind</code> 方法来修正这种情况，<code>const alone = myObj.myMethod.bind(myObj)</code>。</p>
<p>再看一个例子，我们通过构造函数 <code>Pet</code> 得到一个实例化对象 <code>myCat</code>。然后通过 <code>setTimeout()</code> 在一秒后打印对象内部的信息。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Pet</span>(<span class="params">type, legs</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.type = type;</span><br><span class="line">  <span class="keyword">this</span>.legs = legs;</span><br><span class="line">  <span class="keyword">this</span>.logInfo = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span> === myCat); <span class="comment">// =&gt; false</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`The <span class="subst">$&#123;<span class="keyword">this</span>.type&#125;</span> has <span class="subst">$&#123;<span class="keyword">this</span>.legs&#125;</span> legs`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> myCat = <span class="keyword">new</span> Pet(<span class="string">'Cat'</span>, <span class="number">4</span>);</span><br><span class="line"><span class="comment">// logs "The undefined has undefined legs"</span></span><br><span class="line"><span class="comment">// or throws a TypeError in strict mode</span></span><br><span class="line">setTimeout(myCat.logInfo, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure>
<p>⚠️ 你也许会认为 <code>setTimeout(myCat.logInfo, 1000)</code> 将会调用 <code>myCat.logInfo()</code>，然后打印 <code>myCat</code> 的 <code>type</code> 和 <code>legs</code>。</p>
<p>但事与愿违，方法是从对象中抽离然后做为了一个参数，<code>setTimout(myCat.logInfo)</code> 等价于下边的代码。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">setTimeout(myCat.logInfo);</span><br><span class="line"><span class="comment">// is equivalent to:</span></span><br><span class="line"><span class="keyword">const</span> extractedLogInfo = myCat.logInfo;</span><br><span class="line">setTimeout(extractedLogInfo);</span><br></pre></td></tr></table></figure>
<p>当调用提取的 <code>logInfo</code> 的时候其实属于「函数直接调用」类型，所以 <code>this</code> 会指向全局对象 <code>window</code> 或者严格模式下的<code>undefined</code> ，而不会是 <code>myCat</code> 对象。因此 <code>logInfo</code> 函数并不能正确的打印相关的信息。</p>
<p>👍 同样的，这种情况下我们可以使用 <code>bind</code> 来修复。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Pet</span>(<span class="params">type, legs</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.type = type;</span><br><span class="line">  <span class="keyword">this</span>.legs = legs;</span><br><span class="line">  <span class="keyword">this</span>.logInfo = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span> === myCat); <span class="comment">// =&gt; true</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`The <span class="subst">$&#123;<span class="keyword">this</span>.type&#125;</span> has <span class="subst">$&#123;<span class="keyword">this</span>.legs&#125;</span> legs`</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> myCat = <span class="keyword">new</span> Pet(<span class="string">'Cat'</span>, <span class="number">4</span>);</span><br><span class="line"><span class="comment">// Create a bound function</span></span><br><span class="line"><span class="keyword">const</span> boundLogInfo = myCat.logInfo.bind(myCat);</span><br><span class="line"><span class="comment">// logs "The Cat has 4 legs"</span></span><br><span class="line">setTimeout(boundLogInfo, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure>
<p><code>myCat.logInfo.bind(myCat)</code> 会返回一个新的函数，会像 <code>logInfo</code> 那样执行，同时 <code>this</code> 会指向 <code>myCat</code>，即使我们是通过 「函数直接调用」。</p>
<p>当然，我们也可以使用箭头函数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Pet</span>(<span class="params">type, legs</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.type = type;</span><br><span class="line">  <span class="keyword">this</span>.legs = legs;</span><br><span class="line">  <span class="keyword">this</span>.logInfo = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span> === myCat); <span class="comment">// =&gt; true</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`The <span class="subst">$&#123;<span class="keyword">this</span>.type&#125;</span> has <span class="subst">$&#123;<span class="keyword">this</span>.legs&#125;</span> legs`</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> myCat = <span class="keyword">new</span> Pet(<span class="string">'Cat'</span>, <span class="number">4</span>);</span><br><span class="line"><span class="comment">// logs "The Cat has 4 legs"</span></span><br><span class="line">setTimeout(myCat.logInfo, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure>
<p>如果你使用了 <code>class</code>，为了防止上边的问题，我们可以将箭头函数做为一个类属性。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pet</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(type, legs) &#123;</span><br><span class="line">    <span class="keyword">this</span>.type = type;</span><br><span class="line">    <span class="keyword">this</span>.legs = legs;</span><br><span class="line">  &#125;</span><br><span class="line">  logInfo = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span> === myCat); <span class="comment">// =&gt; true</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`The <span class="subst">$&#123;<span class="keyword">this</span>.type&#125;</span> has <span class="subst">$&#123;<span class="keyword">this</span>.legs&#125;</span> legs`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> myCat = <span class="keyword">new</span> Pet(<span class="string">'Cat'</span>, <span class="number">4</span>);</span><br><span class="line"><span class="comment">// logs "The Cat has 4 legs"</span></span><br><span class="line">setTimeout(myCat.logInfo, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure>
<h1 id="3-构造函数调用"><a href="#3-构造函数调用" class="headerlink" title="3. 构造函数调用"></a>3. 构造函数调用</h1><p><em>定义：以 <code>new</code> 关键词开头，接着是一个可以解析成函数对象的表达式，紧跟着左括号，然后是逗号分割的参数，最后是右括号。例如 <code>new Pet(&#39;cat&#39;, 4)</code>、 <code>new RegExp(&#39;\\d&#39;)</code>。</em></p>
<p>让我们定义 <code>Country</code> 函数，然后通过构造函数的方式调用：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Country</span>(<span class="params">name, traveled</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name ? name : <span class="string">'United Kingdom'</span>;</span><br><span class="line">  <span class="keyword">this</span>.traveled = <span class="built_in">Boolean</span>(traveled); <span class="comment">// transform to a boolean</span></span><br><span class="line">&#125;</span><br><span class="line">Country.prototype.travel = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.traveled = <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// Constructor invocation</span></span><br><span class="line"><span class="keyword">const</span> france = <span class="keyword">new</span> Country(<span class="string">'France'</span>, <span class="literal">false</span>);</span><br><span class="line"><span class="comment">// Constructor invocation</span></span><br><span class="line"><span class="keyword">const</span> unitedKingdom = <span class="keyword">new</span> Country;</span><br><span class="line">france.travel(); <span class="comment">// Travel to France</span></span><br></pre></td></tr></table></figure>
<p><code>new Country(&#39;France&#39;, false)</code> 这种调用方式会创建一个新对象，它的 <code>name</code> 属性是 <code>France</code>。</p>
<p>如果构造函数不需要传递参数，我们可以省略到它的括号，<code>new Country</code>。</p>
<p>从 <code>ECMAScript 2015</code> 开始，<code>Js</code> 允许我们通过 <code>class</code> 关键词来定义构造函数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">City</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(name, traveled) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.traveled = <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  travel() &#123;</span><br><span class="line">    <span class="keyword">this</span>.traveled = <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Constructor invocation</span></span><br><span class="line"><span class="keyword">const</span> paris = <span class="keyword">new</span> City(<span class="string">'Paris'</span>, <span class="literal">false</span>);</span><br><span class="line">paris.travel();</span><br></pre></td></tr></table></figure>
<p><code>new City(&#39;Paris&#39;)</code> 就是「构造函数调用」类型。创建的对象通过类中一个特殊的方法 <code>constructor</code> 来初始化，其中 <code>this</code> 就指向当前创建的新对象。</p>
<p>如果属性访问器 <code>myObject.myFunction</code> 通过 <code>new</code> 调用，那么这种就属于「构造函数调用」，而不再是「方法调用」。</p>
<p>举个例子，<code>new myObject.myFunction()</code>：相当于先通过属性访问器抽离函数 <code>extractedFunction = myObject.myFunction</code>，然后通过构造函数的方法创建一个新对象 <code>new extractedFunction()</code>。</p>
<h2 id="3-1-构造函数调用中的-this-指向"><a href="#3-1-构造函数调用中的-this-指向" class="headerlink" title="3.1 构造函数调用中的 this 指向"></a>3.1 构造函数调用中的 <code>this</code> 指向</h2><blockquote>
<p>this 指向通过构造函数创建的新对象</p>
</blockquote>
<p>构造函数的上下文是新创建的对象。构造函数通过传来的参数进行初始化对象，设置初始值、绑定事件监听函数等等。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/this11075.jpg" alt="img" style="width:50%;"></p>
<p>看一下下边的例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// this is fooInstance</span></span><br><span class="line">  <span class="keyword">this</span>.property = <span class="string">'Default Value'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Constructor invocation</span></span><br><span class="line"><span class="keyword">const</span> fooInstance = <span class="keyword">new</span> Foo();</span><br><span class="line">fooInstance.property; <span class="comment">// =&gt; 'Default Value'</span></span><br></pre></td></tr></table></figure>
<p> <code>new Foo()</code> 通过构造函数的方式调用，其中的 <code>this</code> 就指向当前的对象 <code>fooInstance</code>，<code>this.property</code> 被初始化了一个值。</p>
<p>同样的情况在 <code>class</code>  中也是一样的，只不过初始化发生在 <code>constructor</code> 中。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bar</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="comment">// this is barInstance</span></span><br><span class="line">    <span class="keyword">this</span>.property = <span class="string">'Default Value'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Constructor invocation</span></span><br><span class="line"><span class="keyword">const</span> barInstance = <span class="keyword">new</span> Bar();</span><br><span class="line">barInstance.property; <span class="comment">// =&gt; 'Default Value'</span></span><br></pre></td></tr></table></figure>
<h2 id="3-2-陷阱：忘记使用-new"><a href="#3-2-陷阱：忘记使用-new" class="headerlink" title="3.2 陷阱：忘记使用 new"></a>3.2 陷阱：忘记使用 <code>new</code></h2><p>有些 <code>JavaScript</code> 的函数除了可以通过构造函数创建对象，也可以通过函数直接调用的方式，比如 <code>RegExp</code>。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> reg1 = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'\\w+'</span>);</span><br><span class="line"><span class="keyword">const</span> reg2 = <span class="built_in">RegExp</span>(<span class="string">'\\w+'</span>);</span><br><span class="line">reg1 <span class="keyword">instanceof</span> <span class="built_in">RegExp</span>; <span class="comment">// =&gt; true</span></span><br><span class="line">reg2 <span class="keyword">instanceof</span> <span class="built_in">RegExp</span>; <span class="comment">// =&gt; true</span></span><br><span class="line">reg1.source === reg2.source; <span class="comment">// =&gt; true</span></span><br></pre></td></tr></table></figure>
<p>执行 <code>new RegExp(&#39;\\w+&#39;)</code> 和 <code>RegExp(&#39;\\w+&#39;)</code> ，<code>Js</code> 创建了等价的正则表达式对象。</p>
<p>⚠️ 通过函数直接调用的方式去创建对象可能会有潜在风险，因为如果不使用 <code>new</code> 关键词 一些构造函数可能会忽略掉属性的初始化。</p>
<p>看一下下边的例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Vehicle</span>(<span class="params">type, wheelsCount</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.type = type;</span><br><span class="line">  <span class="keyword">this</span>.wheelsCount = wheelsCount;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Function invocation</span></span><br><span class="line"><span class="keyword">const</span> car = Vehicle(<span class="string">'Car'</span>, <span class="number">4</span>);</span><br><span class="line">car.type; <span class="comment">// =&gt; 'Car'</span></span><br><span class="line">car.wheelsCount <span class="comment">// =&gt; 4</span></span><br><span class="line">car === <span class="built_in">window</span> <span class="comment">// =&gt; true</span></span><br></pre></td></tr></table></figure>
<p><code>Vehicle</code> 在上下文对象中会初始化 <code>type</code> 和 <code>wheelsCount</code> 属性。当执行 <code>Vehicle(&#39;Car&#39;, 4)</code> 的时候将 <code>car</code> 对象返回，拥有正确的属性 <code>car.type</code> 和 <code>car.wheelCount</code> 。</p>
<p>上边看起来就是按照我们需要的样子进行的初始化，打印出来的值也都是正确的。</p>
<p>然而，<code>Vehicle(&#39;Car&#39;, 4)</code> 属于「函数直接调用类型」，因此它的 <code>this</code> 指向 <code>window</code>。所以，上边返回的 <code>car</code> 其实是 <code>window</code> 对象，将 <code>type</code> 和 <code>wheelCount</code> 属性都挂在了 <code>window</code> 上。</p>
<p>👍 为了确保在使用构造函数的时候加上了 <code>new</code> 关键词，我们可以做一些改进：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Vehicle</span>(<span class="params">type, wheelsCount</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!(<span class="keyword">this</span> <span class="keyword">instanceof</span> Vehicle)) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="built_in">Error</span>(<span class="string">'Error: Incorrect invocation'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">this</span>.type = type;</span><br><span class="line">  <span class="keyword">this</span>.wheelsCount = wheelsCount;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Constructor invocation</span></span><br><span class="line"><span class="keyword">const</span> car = <span class="keyword">new</span> Vehicle(<span class="string">'Car'</span>, <span class="number">4</span>);</span><br><span class="line">car.type               <span class="comment">// =&gt; 'Car'</span></span><br><span class="line">car.wheelsCount        <span class="comment">// =&gt; 4</span></span><br><span class="line">car <span class="keyword">instanceof</span> Vehicle <span class="comment">// =&gt; true</span></span><br><span class="line"><span class="comment">// Function invocation. Throws an error.</span></span><br><span class="line"><span class="keyword">const</span> brokenCar = Vehicle(<span class="string">'Broken Car'</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure>
<p>通过判断 <code>this instanceof Vehicle</code> ，我们就可以保证当前的执行上下文环境是当前创建的新对象，保证 <code>this</code> 指向正确。</p>
<h1 id="4-间接调用"><a href="#4-间接调用" class="headerlink" title="4. 间接调用"></a>4. 间接调用</h1><blockquote>
<p><code>this</code> 指向 <code>.call()</code> 或者 <code>.apply()</code> 所传的第一个参数</p>
</blockquote>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/this11076.jpg" alt="img" style="width:50%;"></p>
<p>下边看一个例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> rabbit = &#123; <span class="attr">name</span>: <span class="string">'White Rabbit'</span> &#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">concatName</span>(<span class="params">string</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span> === rabbit); <span class="comment">// =&gt; true</span></span><br><span class="line">  <span class="keyword">return</span> string + <span class="keyword">this</span>.name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Indirect invocations</span></span><br><span class="line">concatName.call(rabbit, <span class="string">'Hello '</span>);  <span class="comment">// =&gt; 'Hello White Rabbit'</span></span><br><span class="line">concatName.apply(rabbit, [<span class="string">'Bye '</span>]); <span class="comment">// =&gt; 'Bye White Rabbit'</span></span><br></pre></td></tr></table></figure>
<p>间接调用方式对于修正函数的上下文执行环境很有用，例如上边我们介绍过的很多例子，当通过「函数直接调用」方式时，<code>this</code> 会指向 <code>window</code> 或者严格模式下的 <code>undefined</code>。此时我们就可以通过 <code>.call()</code> 或者 <code>.apply()</code> 将 <code>this</code> 指向我们需要的对象。</p>
<p>另一个经典的例子就是 <code>ES5</code> 中调用父类的构造函数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Runner</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span> <span class="keyword">instanceof</span> Rabbit); <span class="comment">// =&gt; true</span></span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Rabbit</span>(<span class="params">name, countLegs</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span> <span class="keyword">instanceof</span> Rabbit); <span class="comment">// =&gt; true</span></span><br><span class="line">  <span class="comment">// Indirect invocation. Call parent constructor.</span></span><br><span class="line">  Runner.call(<span class="keyword">this</span>, name);</span><br><span class="line">  <span class="keyword">this</span>.countLegs = countLegs;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> myRabbit = <span class="keyword">new</span> Rabbit(<span class="string">'White Rabbit'</span>, <span class="number">4</span>);</span><br><span class="line">myRabbit; <span class="comment">// &#123; name: 'White Rabbit', countLegs: 4 &#125;</span></span><br></pre></td></tr></table></figure>
<p>在 <code>Rabbit</code> 中调用 <code>Runner.call(this, name)</code> 使得在父函数中的 <code>this</code> 是当前子类相应的对象。</p>
<h1 id="5-绑定函数"><a href="#5-绑定函数" class="headerlink" title="5. 绑定函数"></a>5. 绑定函数</h1><p><em>定义：执行上下文或者参数被绑定了具体值的函数。可以通过 <code>.bind()</code> 进行创建。原始函数和新的函数共享了相同的代码和作用域，但是执行的时候拥有不同的执行上下文和参数。</em></p>
<p><code>myFunc.bind(thisArg[, arg1, arg2, ...)</code> 的第一个参数 <code>thisArg</code> 作为执行上下文，后边的 <code>arg1, arg2, ...</code> 是要预置的参数值。</p>
<p>看一下下边的例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">multiply</span>(<span class="params">number</span>) </span>&#123;</span><br><span class="line"><span class="meta">  'use strict'</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span> * number;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// create a bound function with context</span></span><br><span class="line"><span class="keyword">const</span> double = multiply.bind(<span class="number">2</span>);</span><br><span class="line"><span class="comment">// invoke the bound function</span></span><br><span class="line">double(<span class="number">3</span>); <span class="comment">// =&gt; 6</span></span><br><span class="line">double(<span class="number">10</span>); <span class="comment">// =&gt; 20</span></span><br></pre></td></tr></table></figure>
<p><code>multiply.bind(2)</code> 返回了一个新函数 <code>double</code>，相当于 <code>2.multiply</code>。</p>
<p><code>.bind()</code> 和  <code>.apply()</code> 和 <code>.call()</code> 最大的不同就是，<code>.bind()</code> 是返回一个拥有预设的 <code>this</code> 和参数的新函数，后边还需要被调用才会执行。而 <code>.apply()</code> 和 <code>.call()</code>  是调用的时候就执行了。</p>
<h2 id="5-1-绑定函数中的-this-指向"><a href="#5-1-绑定函数中的-this-指向" class="headerlink" title="5.1 绑定函数中的 this 指向"></a>5.1 绑定函数中的 <code>this</code> 指向</h2><blockquote>
<p>当执行一个绑定函数的时候，<code>this</code> 指向创建绑定函数 <code>myFunc.bind(thisArg)</code> 时候传的第一个参数。</p>
</blockquote>
<p><code>.bind()</code> 函数的作用就是创建一个新的函数，我们需要将要绑定的上下文环境作为第一个参数传给它。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/this11077.jpg" alt="img" style="width:50%;"></p>
<p>让我们看一下例子。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = &#123;</span><br><span class="line">  array: [<span class="number">3</span>, <span class="number">5</span>, <span class="number">10</span>],</span><br><span class="line">  getNumbers() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.array;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// Create a bound function</span></span><br><span class="line"><span class="keyword">const</span> boundGetNumbers = numbers.getNumbers.bind(numbers);</span><br><span class="line">boundGetNumbers(); <span class="comment">// =&gt; [3, 5, 10]</span></span><br><span class="line"><span class="comment">// Extract method from object</span></span><br><span class="line"><span class="keyword">const</span> simpleGetNumbers = numbers.getNumbers;</span><br><span class="line">simpleGetNumbers(); <span class="comment">// =&gt; undefined or throws an error in strict mode</span></span><br></pre></td></tr></table></figure>
<p>通过 <code>bind</code> 绑定后返回的 <code>boundGetNumbers</code> 函数中 <code>this</code> 指向了传入的 <code>numbers</code>，因此当执行的时候返回的是传入的数组。</p>
<p>如果是简单的将 <code>numbers.getNumbers</code> 抽离出来作为一个新函数 <code>simpleGetNumbers</code> ，此时属于「函数直接调用类型」，因此 <code>this</code> 指向 <code>window</code> ，执行的时候就不是我们所期待的了。</p>
<h2 id="5-2-牢固的上下文绑定"><a href="#5-2-牢固的上下文绑定" class="headerlink" title="5.2 牢固的上下文绑定"></a>5.2 牢固的上下文绑定</h2><p><code>.bind()</code> 会创造一个永久的上下文绑定，其中的 <code>this</code> 指向不会再发生改变。我们无法再通过 <code>.call()</code>、<code>.apply()</code> 或者 <code>.bind()</code> 来改变 <code>this</code> 指向。</p>
<p>唯一能够改变的方式就是通过构造函数调用，但平常开发中不建议采用这种调用方式。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getThis</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="meta">  'use strict'</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> one = getThis.bind(<span class="number">1</span>);</span><br><span class="line">one();         <span class="comment">// =&gt; 1</span></span><br><span class="line">one.call(<span class="number">2</span>);   <span class="comment">// =&gt; 1</span></span><br><span class="line">one.apply(<span class="number">2</span>);  <span class="comment">// =&gt; 1</span></span><br><span class="line">one.bind(<span class="number">2</span>)(); <span class="comment">// =&gt; 1</span></span><br><span class="line"><span class="keyword">new</span> one();     <span class="comment">// =&gt; Object</span></span><br></pre></td></tr></table></figure>
<p>可以看一下上边的结果，只有 <code>new one()</code> 中的 <code>this</code> 指向来一个新对象，而其他方式中的 <code>this</code> 都是最初绑定的 <code>1</code>。</p>
<h1 id="6-箭头函数"><a href="#6-箭头函数" class="headerlink" title="6 箭头函数"></a>6 箭头函数</h1><p><em>定义：箭头函数是定义函数的一种简写形式，并且它绑定的上下文是词法作用域确定的（简单理解就是 <code>this</code>  指向它定义位置的上下文）。</em></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> hello = <span class="function">(<span class="params">name</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'Hello '</span> + name;</span><br><span class="line">&#125;;</span><br><span class="line">hello(<span class="string">'World'</span>); <span class="comment">// =&gt; 'Hello World'</span></span><br><span class="line"><span class="comment">// Keep only even numbers</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">6</span>].filter(<span class="function"><span class="params">item</span> =&gt;</span> item % <span class="number">2</span> === <span class="number">0</span>); <span class="comment">// =&gt; [2, 6]</span></span><br></pre></td></tr></table></figure>
<h2 id="6-1-箭头函数中的-this"><a href="#6-1-箭头函数中的-this" class="headerlink" title="6.1 箭头函数中的 this"></a>6.1 箭头函数中的 <code>this</code></h2><blockquote>
<p><code>this</code> 指向定义箭头函数位置的上下文。</p>
</blockquote>
<p>箭头函数不会创建自己的执行上下文，而是将 <code>this</code> 指向外部函数已经创建的执行上下文。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/this11078.jpg" alt="img" style="width:50%;"></p>
<p>看一下例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(x, y) &#123;</span><br><span class="line">    <span class="keyword">this</span>.x = x;</span><br><span class="line">    <span class="keyword">this</span>.y = y;</span><br><span class="line">  &#125;</span><br><span class="line">  log() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span> === myPoint); <span class="comment">// =&gt; true</span></span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span> === myPoint);      <span class="comment">// =&gt; true</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.x + <span class="string">':'</span> + <span class="keyword">this</span>.y); <span class="comment">// =&gt; '95:165'</span></span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> myPoint = <span class="keyword">new</span> Point(<span class="number">95</span>, <span class="number">165</span>);</span><br><span class="line">myPoint.log();</span><br></pre></td></tr></table></figure>
<p><code>setTimeout()</code> 调用箭头函数的时候，它的 <code>this</code> 会指向外部的执行上下文，也就是 <code>myPoint</code>。</p>
<p>如果箭头函数是定义在顶级作用域内（也就是函数外），<code>this</code> 将指向浏览器的全局对象 <code>window</code>，严格模式下也是一样的。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> getContext = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="keyword">this</span> === <span class="built_in">window</span>); <span class="comment">// =&gt; true</span></span><br><span class="line"> <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(getContext() === <span class="built_in">window</span>); <span class="comment">// =&gt; true</span></span><br></pre></td></tr></table></figure>
<p>箭头函数和 <code>bind</code> 函数一样，一旦确定了 <code>this</code> 指向就无法再改变了。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">  <span class="keyword">const</span> get = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span> === numbers); <span class="comment">// =&gt; true</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span> === numbers); <span class="comment">// =&gt; true</span></span><br><span class="line">  get(); <span class="comment">// =&gt; [1, 2]</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// Try to change arrow function context manually</span></span><br><span class="line">  get.call([<span class="number">0</span>]);  <span class="comment">// =&gt; [1, 2]</span></span><br><span class="line">  get.apply([<span class="number">0</span>]); <span class="comment">// =&gt; [1, 2]</span></span><br><span class="line">  </span><br><span class="line">  get.bind([<span class="number">0</span>])(); <span class="comment">// =&gt; [1, 2]</span></span><br><span class="line">&#125;).call(numbers);</span><br></pre></td></tr></table></figure>
<p>不论我们如何调用箭头函数，最终输出的依旧是最开始的绑定的 <code>[1, 2]</code>。</p>
<p>那构造函数可以改变 <code>this</code> 指向吗？不会的，调用箭头函数作为构造函数会抛出错误，<code>TypeError: get is not a constructor</code>。</p>
<h2 id="6-2-陷阱：用箭头函数作为一个对象方法"><a href="#6-2-陷阱：用箭头函数作为一个对象方法" class="headerlink" title="6.2 陷阱：用箭头函数作为一个对象方法"></a>6.2 陷阱：用箭头函数作为一个对象方法</h2><p>⚠️ 既然箭头函数这么简洁方便，你可能想将对象的一个方法来用箭头函数声明，<code>(param) =&gt; {...}</code> 来代替 <code>function(param) {..}</code>。</p>
<p>看一下下边的例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Period</span> (<span class="params">hours, minutes</span>) </span>&#123; </span><br><span class="line">  <span class="keyword">this</span>.hours = hours;</span><br><span class="line">  <span class="keyword">this</span>.minutes = minutes;</span><br><span class="line">&#125;</span><br><span class="line">Period.prototype.format = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span> === <span class="built_in">window</span>); <span class="comment">// =&gt; true</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.hours + <span class="string">' hours and '</span> + <span class="keyword">this</span>.minutes + <span class="string">' minutes'</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> walkPeriod = <span class="keyword">new</span> Period(<span class="number">2</span>, <span class="number">30</span>);</span><br><span class="line">walkPeriod.format(); <span class="comment">// =&gt; 'undefined hours and undefined minutes'</span></span><br></pre></td></tr></table></figure>
<p>因为 <code>format</code> 是一个箭头函数，所以它的 <code>this</code> 指向它定义地方的执行上下文，也就是这里的 <code>window</code>。</p>
<p>即使 <code>format</code> 是通过「方法调用」的形式 <code>walkPeriod.format()</code>，函数中的 <code>this</code> 依旧是指向最初定义时候的 <code>window</code> ，而不会改变成当前对象。</p>
<p>因此我们需要用 <code>function</code> 来定义函数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Period</span> (<span class="params">hours, minutes</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.hours = hours;</span><br><span class="line">  <span class="keyword">this</span>.minutes = minutes;</span><br><span class="line">&#125;</span><br><span class="line">Period.prototype.format = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span> === walkPeriod); <span class="comment">// =&gt; true</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.hours + <span class="string">' hours and '</span> + <span class="keyword">this</span>.minutes + <span class="string">' minutes'</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> walkPeriod = <span class="keyword">new</span> Period(<span class="number">2</span>, <span class="number">30</span>);</span><br><span class="line">walkPeriod.format(); <span class="comment">// =&gt; '2 hours and 30 minutes'</span></span><br></pre></td></tr></table></figure>
<p><code>walkPeriod.format()</code> 属于第 <code>2</code> 节介绍「方法调用」类型，所以 <code>this</code> 会指向调用它的对象 <code>walkPeriod</code>，最终也会打印正确的结果。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>通过上边的分析，我们发现影响 <code>this</code> 指向的其实是函数的调用类型，因此从现在起不要再问自己：</p>
<blockquote>
<p>这个 <code>this</code> 是怎么得到的？</p>
</blockquote>
<p>而是问自己：</p>
<blockquote>
<p>这个函数是属于哪种调用类型？</p>
<p>「函数直接调用」？「方法调用」？「构造函数调用」？「间接调用」？</p>
</blockquote>
<p>如果是绑定函数就问自己：</p>
<blockquote>
<p>这个函数 <code>bind</code> 的时候传的什么参数？</p>
</blockquote>
<p>如果是箭头函数就问自己：</p>
<blockquote>
<p>箭头函数是在哪里定义的，它外部的执行上下文是什么？</p>
</blockquote>
<p>通过上边的思路，可以使你不再对 <code>this</code> 感到头疼！</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>this</tag>
      </tags>
  </entry>
  <entry>
    <title>WebAssembly入门-未来可能发生的巨变</title>
    <url>/2020/11/18/WebAssembly%E5%85%A5%E9%97%A8-%E6%9C%AA%E6%9D%A5%E5%8F%AF%E8%83%BD%E5%8F%91%E7%94%9F%E7%9A%84%E5%B7%A8%E5%8F%98/</url>
    <content><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>先看下 <a href="https://webassembly.org/" target="_blank" rel="noopener">官网</a> 给的定义。</p>
<blockquote>
<p>WebAssembly (abbreviated <em>Wasm</em>) is a binary instruction format for a stack-based virtual machine. Wasm is designed as a portable compilation target for programming languages, enabling deployment on the web for client and server applications.</p>
</blockquote>
<p><code>WebAssembly</code> 是基于栈式虚拟机的二进制指令集，可以作为编程语言的编译目标，能够部署在 <code>web</code> 客户端和服务端的应用中。</p>
<p>第一次看到这个定义的时候是一头雾水，翻了一些资料渐渐有了点轮廓，下边分享下我目前的理解。</p>
<p>首先 <code>WebAssembly</code> 是由 <code>Web</code> 和 <code>Assembly</code> 两个词构成，其中 <code>Web</code> 表明它一定和前端有关。<code>Assembly</code> 的意思是汇编，汇编对应机器码，而机器码和 <code>CPU</code> 的指令集有关，接下来补一下相关的知识。</p>
<h1 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h1><p>其中指令集、操作系统相关的知识，之前总结过几篇文章，<a href="https://windliang.wang/2019/11/06/%E5%88%B0%E5%BA%95%E5%AD%A6%E5%93%AA%E4%B8%80%E9%97%A8%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/">到底学哪一门编程语言</a>、<a href="https://windliang.wang/2020/03/11/x86-x64-x86-64-amd64-arm%E6%8C%87%E4%BB%A4%E9%9B%86%E6%9E%B6%E6%9E%84%E4%B9%8B%E9%97%B4%E7%9A%84%E5%85%B3%E7%B3%BB/">x86,x64,x86-64,amd64,arm指令集架构之间的关系</a>、<a href="https://windliang.wang/2019/05/21/linux%E5%92%8CAndroid%E7%9A%84%E5%85%B3%E7%B3%BB/">linux和Android的关系</a>，可以先过去看一下，这里的话抽主要的部分回顾一下。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/webassembly1.jpg" alt=""></p>
<p>参考上图，计算机的主要架构如上。最底层是 <code>CPU</code> 的指令集，主要分为复杂指令集和简单指令集。</p>
<p>复杂指令集是 <code>x86</code>、<code>x64(也叫 x86-64, amd64)</code> 两种架构，专利在 <code>Intel</code> 和 <code>AMD</code> 两家公司手里， 该架构 <code>CPU</code> 主要是 <code>Intel</code> 和 <code>AMD</code> 两家公司，这种 <code>CPU</code> 常用在 <code>PC</code> 机上，包括 <code>Windows</code>，<code>macOS</code> 和 <code>Linux</code>。</p>
<p>简单指令集是 <code>arm</code> 一种架构，专利在 <code>ARM</code> 公司手里，该架构 <code>CPU</code> 主要有高通、三星、苹果、华为海思、联发科等公司。这种 <code>CPU</code> 常用在手机上，包括安卓和苹果。</p>
<p>指令集是什么呢？直接把阮一峰的老师的一个 <a href="http://www.ruanyifeng.com/blog/2018/01/assembly-language-primer.html" target="_blank" rel="noopener">例子</a> 粘过来，大家可以看一下。</p>
<p><code>c</code> 语言的源程序。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add_a_and_b</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> add_a_and_b(<span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>所对应的汇编就是下边的样子。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">_add_a_and_b:</span><br><span class="line">   push   %ebx</span><br><span class="line">   mov    %eax, [%esp+<span class="number">8</span>]</span><br><span class="line">   mov    %ebx, [%esp+<span class="number">12</span>]</span><br><span class="line">   add    %eax, %ebx</span><br><span class="line">   pop    %ebx</span><br><span class="line">   ret  </span><br><span class="line"></span><br><span class="line">_main:</span><br><span class="line">   push   <span class="number">3</span></span><br><span class="line">   push   <span class="number">2</span></span><br><span class="line">   call   _add_a_and_b</span><br><span class="line">   add    %esp, <span class="number">8</span></span><br><span class="line">   ret</span><br></pre></td></tr></table></figure>
<p>这里的 <code>push</code> 、<code>mov</code> 每一条指令就是指令集规定的内容，规定了操作码、操作数以及具体的功能。当然这里是用汇编表示的，主要是为了我们人类来读写，最终还会转成 <code>0,1</code> 序列。上边每个单词都会有一个数字相对应，比如 <code>add</code> 指令对应 <code>00000011</code> 。</p>
<p>通过规定的指令集（加法的指令，压栈指令等），编写相关程序，然后 <code>CPU</code> 就会一条一条的执行，最终实现相应的功能。</p>
<p>而 <code>WebAssembly</code> 就规定了一套指令集，更准确的来说是虚拟指令集，因为这套指令集是跑在虚拟机上的，而不是直接由硬件运行。</p>
<h1 id="历史"><a href="#历史" class="headerlink" title="历史"></a>历史</h1><p>上边我们知道了 <code>WebAssembly</code> 的 <code>Assembly</code> ，即汇编，也就是指令集。下边在回顾下 <code>Web</code>，即 <code>WebAssembly</code>诞生的原因。</p>
<p>这里就得谈到 <code>javaScript</code> 了，众所周知， <code>javaScript</code> 是一门动态类型的语言，编写程序时无需考虑变量类型，而且还可以运行时改变类型。对于我们开发者，确实很方便，但对于运行它的引擎就很有问题了。参考 <a href="https://time.geekbang.org/column/intro/100048001?code=IpXg2Hdg-kigonWwbirm%2FZC4p5C39fJxsiLckpyppIk%3D" target="_blank" rel="noopener">这里</a> 的一张图，看一下 <code>V8</code> 引擎从 <code>js</code> 源码到执行的一个过程。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/webassembly2.jpg" alt=""></p>
<p>由于 <code>js</code> 的动态类型，解释器在执行代码的时候会在类型判断上带来一定的性能消耗，降低执行速度。所以 <code>V8</code> 引擎采用了 <code>JIT</code>（即时编译技术） 技术，监控一些经常执行的代码，将其编译成 <code>CPU</code> 直接执行的机器码，提高执行速度。但由于 <code>js</code> 动态类型，在某些情况下还得反优化，回到字节码进行执行。</p>
<p>随着前端的不断发展，项目的大小和复杂度不断增大，对于某些场景，性能上可能已经无法满足，浏览器厂商们也一直在探索性能优化的方法。</p>
<h2 id="NaCl-PNaCl"><a href="#NaCl-PNaCl" class="headerlink" title="NaCl/PNaCl"></a>NaCl/PNaCl</h2><p> <code>2011</code> 年 <code>Google</code> 在 <code>Chrome</code> 中使用了 <code>NaCl</code> 技术，可以使得 <code>C</code> 语言编写的程序运行到浏览器中，下边是<a href="https://zh.wikipedia.org/wiki/Native_Client" target="_blank" rel="noopener">维基百科</a> 的定义。</p>
<blockquote>
<p><strong>Google Native Client</strong>（缩写为<strong>NaCl</strong>），是一个由<a href="https://zh.wikipedia.org/wiki/谷歌" target="_blank" rel="noopener">谷歌</a>所发起的<a href="https://zh.wikipedia.org/wiki/開放原始碼" target="_blank" rel="noopener">开放源代码</a>计划，采用<a href="https://zh.wikipedia.org/wiki/BSD许可证" target="_blank" rel="noopener">BSD许可证</a>。它采用<a href="https://zh.wikipedia.org/wiki/沙盒_(計算機安全" target="_blank" rel="noopener">沙盒</a>)技术，让<a href="https://zh.wikipedia.org/wiki/Intel_x86" target="_blank" rel="noopener">Intel x86</a>、<a href="https://zh.wikipedia.org/wiki/ARM" target="_blank" rel="noopener">ARM</a>或<a href="https://zh.wikipedia.org/wiki/MIPS" target="_blank" rel="noopener">MIPS</a>子集的<a href="https://zh.wikipedia.org/wiki/機器碼" target="_blank" rel="noopener">机器代码</a>直接在沙盒上运行。它能够从<a href="https://zh.wikipedia.org/wiki/瀏覽器" target="_blank" rel="noopener">浏览器</a>直接运行程序机器代码，独立于用户的操作系统之外，使<a href="https://zh.wikipedia.org/wiki/Web应用程序" target="_blank" rel="noopener">Web应用程序</a>可以用接近于机器代码运作的速度来运行，同时兼顾安全性。其功能类似于<a href="https://zh.wikipedia.org/wiki/微軟" target="_blank" rel="noopener">微软</a>的 <a href="https://zh.wikipedia.org/wiki/ActiveX" target="_blank" rel="noopener">ActiveX</a>，但是ActiveX只支持视窗系统。</p>
</blockquote>
<p>但一个完整的 <code>NaCl</code> 应用，在分发时需要提供支持多个架构平台（X86 / X64 / ARM 等）的模块文件，后来谷歌又推出了与底层架构无关的 <code>PNaCl</code> 技术。但由于其开发难度、兼容性等问题最终没有普及开来。在 <code>2017</code> 年 <code>Google</code> 宣布放弃 <code>PNaCl</code> 转向 <code>WebAssembly</code>。</p>
<h2 id="ASM-js"><a href="#ASM-js" class="headerlink" title="ASM.js"></a>ASM.js</h2><p><code>ASM.js</code> 是 <code>Mozilla</code> 在 <code>2013</code> 年推出的，是 <code>javaScript</code> 的一个严格子集，可以作为 <code>C/C++</code> 编译的目标语言，从而使得 <code>js</code> 引擎可以采用 <code>AOT(Ahead Of Time)</code> 的编译策略，也就是在运行前直接编译成机器码，因此运行速度会有一定的提升。</p>
<p><code>ASM.js</code> 通常不直接编写，而是作为一种通过编译器生成的中间语言，该编译器获取 <code>C++</code> 或其他语言的源代码，然后输出 <code>ASM.js</code>。</p>
<p>例如下边的 <code>C</code> 语言代码。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> i + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>经过编译器编译会生成下边的 <code>js</code> 代码。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">i</span>) </span>&#123;</span><br><span class="line">  i = i|<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> (i + <span class="number">1</span>)|<span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意这里的<code>|0</code> 在 <code>js</code> 中相当于和 <code>0</code> 进行了或操作，所以不影响原本的逻辑。在 <code>asm.js</code> 中起到了类型标记的作用，这样 <code>js</code> 引擎执行的时候就知道 <code>i</code> 是一个整型，返回值是一个整型。除了或操作这种，<code>ASM.js</code> 标准中还规定了很多类似的标记规则，用于告诉 <code>js</code> 引擎变量的类型，便于进行 <code>AOT</code> 优化。</p>
<p>这看起来和 <code>TypeScript</code> 很像，但其实不是一种东西。<code>TypeScript</code> 是 <code>js</code> 的一个超集，浏览器并不能直接执行 <code>ts</code>，还需要转换为 <code>js</code> 去执行。<code>ts</code> 主要是帮助我们开发人员去看的，增加了代码的可读性，也可以让编辑器提前发现一些错误。而 <code>asm.js</code> 是用于引擎的编译优化。</p>
<h2 id="WebAssembly"><a href="#WebAssembly" class="headerlink" title="WebAssembly"></a>WebAssembly</h2><p>接下来看一下 <code>WebAssembly</code> 的历史。</p>
<blockquote>
<p>2015 年 4 月，WebAssembly Community Group 成立；</p>
<p>2015 年 6 月，WebAssembly 第一次以 WCG 的官方名义向外界公布；</p>
<p>2016 年 8 月，WebAssembly 开始进入了漫长的 “Browser Preview” 阶段；</p>
<p>2017 年 2 月，WebAssembly 官方 LOGO 在 Github 上的众多讨论中被最终确定；同年同月，一个历史性的阶段，四大浏览器（FireFox、Chrome、Edge、WebKit）在 WebAssembly 的 MVP（最小可用版本）标准实现上达成共识，这意味着 WebAssembly 在其 MVP 标准上的 “Brower Preview” 阶段已经结束；</p>
<p>2017 年 8 月，W3C WebAssembly Working Group 成立，意味着 WebAssembly 正式成为 W3C 众多技术标准中的一员。</p>
</blockquote>
<p><code>WebAssembly</code> 于 <code>2019</code> 年 <code>12</code> 月 <code>5</code> 日成为万维网联盟（<code>W3C</code>）的推荐标准，与 <code>HTML</code>，<code>CSS</code> 和 <code>JavaScript</code> 一起成为 <code>Web</code> 的第四种语言。</p>
<p>可以看一下目前浏览器的支持程度，已经算比较高了。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/webassembly3.jpg" alt=""></p>
<h1 id="初体验"><a href="#初体验" class="headerlink" title="初体验"></a>初体验</h1><h2 id="内部结构"><a href="#内部结构" class="headerlink" title="内部结构"></a>内部结构</h2><p>目前已经有了将 <code>C/C++</code> 、<code>Rust</code>、<code>ts</code>、<code>C#</code>、<code>Go</code>、<code>Kotlin</code>、<code>Swift</code> 等语言转换为 <code>WebAssembly(wasm)</code> 的工具，下边我们体验一下 <code>C++</code> 转换的过程。</p>
<p>首先编写一个 <code>C++</code> 程序 <code>fibonacci.cc</code>，斐波纳契数字的递归写法。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;emscripten.h&gt;</span></span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span> &#123;</span><br><span class="line">  EMSCRIPTEN_KEEPALIVE</span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">fibonacci</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n &lt; <span class="number">2</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fibonacci(n - <span class="number">1</span>) + fibonacci(n - <span class="number">2</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>函数的定义置在 <code>extern “C” {}</code> 结构中，是为了防止函数名编译后被改变。<code>EMSCRIPTEN_KEEPALIVE</code> 是为了确保函数不会在编译器的编译过程中，被 <code>DCE（Dead Code 」limination）</code>过程处理掉。</p>
<p>然后需要安装 <code>Emscripten</code> 用来将 <code>C++</code> 程序编译为 <code>WebAssembly(wasm)</code> 的程序，安装后执行下边的命令。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">emcc fibonacci.cc -s WASM=1 -O3 --no-entry -o fibonacci.wasm</span><br></pre></td></tr></table></figure>
<p><code>-s WASM=1</code> 表明编译成 <code>Webassembly</code> 的程序，<code>-O3</code> 表明编译的优化程度，<code>–no-entry</code> 参数告诉编译器没有声明 <code>main</code> 函数，<code>-o</code> 指定生成的文件名。</p>
<p>让我们看一下生成的字节码文件 <code>fibonacci.wasm</code>。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">  Offset: 00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F 	</span><br><span class="line">00000000: 00 61 73 6D 01 00 00 00 01 11 04 60 00 01 7F 60    .asm.......`...`</span><br><span class="line">00000010: 01 7F 01 7F 60 00 00 60 01 7F 00 03 07 06 02 01    ....`..`........</span><br><span class="line">00000020: 00 03 01 00 04 05 01 70 01 02 02 05 06 01 01 80    .......p........</span><br><span class="line">00000030: 02 80 02 06 0F 02 7F 01 41 90 88 C0 02 0B 7F 00    ........A..@....</span><br><span class="line">00000040: 41 84 08 0B 07 88 01 09 06 6D 65 6D 6F 72 79 02    A........memory.</span><br><span class="line">00000050: 00 19 5F 5F 69 6E 64 69 72 65 63 74 5F 66 75 6E    ..__indirect_fun</span><br><span class="line">00000060: 63 74 69 6F 6E 5F 74 61 62 6C 65 01 00 09 66 69    ction_table...fi</span><br><span class="line">00000070: 62 6F 6E 61 63 63 69 00 01 0B 5F 69 6E 69 74 69    bonacci..._initi</span><br><span class="line">00000080: 61 6C 69 7A 65 00 00 10 5F 5F 65 72 72 6E 6F 5F    alize...__errno_</span><br><span class="line">00000090: 6C 6F 63 61 74 69 6F 6E 00 05 09 73 74 61 63 6B    location...stack</span><br><span class="line">000000a0: 53 61 76 65 00 02 0C 73 74 61 63 6B 52 65 73 74    Save...stackRest</span><br><span class="line">000000b0: 6F 72 65 00 03 0A 73 74 61 63 6B 41 6C 6C 6F 63    ore...stackAlloc</span><br><span class="line">000000c0: 00 04 0A 5F 5F 64 61 74 61 5F 65 6E 64 03 01 09    ...__data_end...</span><br><span class="line">000000d0: 07 01 00 41 01 0B 01 00 0A 66 06 03 00 01 0B 3D    ...A.....f.....=</span><br><span class="line">000000e0: 01 02 7F 41 01 21 01 20 00 41 02 4E 04 7F 41 00    ...A.!...A.N..A.</span><br><span class="line">000000f0: 21 01 03 40 20 00 41 7F 6A 10 01 20 01 6A 21 01    !..@..A.j....j!.</span><br><span class="line">00000100: 20 00 41 03 4A 21 02 20 00 41 7E 6A 21 00 20 02    ..A.J!...A~j!...</span><br><span class="line">00000110: 0D 00 0B 20 01 41 01 6A 05 41 01 0B 0B 04 00 23    .....A.j.A.....<span class="comment">#</span></span><br><span class="line">00000120: 00 0B 06 00 20 00 24 00 0B 10 00 23 00 20 00 6B    ......$....<span class="comment">#...k</span></span><br><span class="line">00000130: 41 70 71 22 00 24 00 20 00 0B 05 00 41 80 08 0B    Apq<span class="string">".$......A...</span></span><br></pre></td></tr></table></figure>
<p>让我们来解读下，最开始的前八个字节 <code>0x0 0x61 0x73 0x6d 0x1 0x0 0x0 0x0</code> 表明当前是一个 <code>wasm</code> 的模块。然后会分很多 <code>Section</code> ，<code>Function Section</code>， <code>Code Section</code> 等等，都有特定的数字对应，还有就是文章开头讲的指令操作符所对应的一些数字。</p>
<p>看着上边的字节码仿佛回到了上古时期直接用机器码编程的时代，当年出现了汇编语言。这里也会有类似汇编的东西，那就是 <code>WAT（WebAssembly Text Format)</code> 。</p>
<p>需要安装 <a href="https://github.com/WebAssembly/wabt#building-using-cmake-directly-linux-and-macos" target="_blank" rel="noopener">WABT</a> , 然后执行 <code>wasm2wat</code> 命令。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">../wabt/bin/wasm2wat fibonacci.wasm -o fibonacci.wat</span><br></pre></td></tr></table></figure>
<p>然后就生成了 <code>fibonacci.wat</code> 文件。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">module</span></span><br><span class="line">  (type (;<span class="number">0</span>;) (func (result i32)))</span><br><span class="line">  (type (;<span class="number">1</span>;) (func (param i32) (result i32)))</span><br><span class="line">  (type (;<span class="number">2</span>;) (func))</span><br><span class="line">  (type (;<span class="number">3</span>;) (func (param i32)))</span><br><span class="line">  (func (;<span class="number">0</span>;) (type <span class="number">2</span>)</span><br><span class="line">    nop)</span><br><span class="line">  (func (;<span class="number">1</span>;) (type <span class="number">1</span>) (param i32) (result i32)</span><br><span class="line">    (local i32 i32)</span><br><span class="line">    i32.<span class="keyword">const</span> <span class="number">1</span></span><br><span class="line">    local.set <span class="number">1</span></span><br><span class="line">    local.get <span class="number">0</span></span><br><span class="line">    i32.<span class="keyword">const</span> <span class="number">2</span></span><br><span class="line">    i32.ge_s</span><br><span class="line">    <span class="keyword">if</span> (result i32)  ;; label = @<span class="number">1</span></span><br><span class="line">      i32.<span class="keyword">const</span> <span class="number">0</span></span><br><span class="line">      local.set <span class="number">1</span></span><br><span class="line">      loop  ;; label = @<span class="number">2</span></span><br><span class="line">        local.get <span class="number">0</span></span><br><span class="line">        i32.<span class="keyword">const</span> -<span class="number">1</span></span><br><span class="line">        i32.add</span><br><span class="line">        call <span class="number">1</span></span><br><span class="line">        local.get <span class="number">1</span></span><br><span class="line">        i32.add</span><br><span class="line">        local.set <span class="number">1</span></span><br><span class="line">        local.get <span class="number">0</span></span><br><span class="line">        i32.<span class="keyword">const</span> <span class="number">3</span></span><br><span class="line">        i32.gt_s</span><br><span class="line">        local.set <span class="number">2</span></span><br><span class="line">        local.get <span class="number">0</span></span><br><span class="line">        i32.<span class="keyword">const</span> -<span class="number">2</span></span><br><span class="line">        i32.add</span><br><span class="line">        local.set <span class="number">0</span></span><br><span class="line">        local.get <span class="number">2</span></span><br><span class="line">        br_if <span class="number">0</span> (;@<span class="number">2</span>;)</span><br><span class="line">      end</span><br><span class="line">      local.get <span class="number">1</span></span><br><span class="line">      i32.<span class="keyword">const</span> <span class="number">1</span></span><br><span class="line">      i32.add</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      i32.<span class="keyword">const</span> <span class="number">1</span></span><br><span class="line">    end)</span><br><span class="line">  (func (;<span class="number">2</span>;) (type <span class="number">0</span>) (result i32)</span><br><span class="line">    global.get <span class="number">0</span>)</span><br><span class="line">  (func (;<span class="number">3</span>;) (type <span class="number">3</span>) (param i32)</span><br><span class="line">    local.get <span class="number">0</span></span><br><span class="line">    global.set <span class="number">0</span>)</span><br><span class="line">  (func (;<span class="number">4</span>;) (type <span class="number">1</span>) (param i32) (result i32)</span><br><span class="line">    global.get <span class="number">0</span></span><br><span class="line">    local.get <span class="number">0</span></span><br><span class="line">    i32.sub</span><br><span class="line">    i32.<span class="keyword">const</span> -<span class="number">16</span></span><br><span class="line">    i32.and</span><br><span class="line">    local.tee <span class="number">0</span></span><br><span class="line">    global.set <span class="number">0</span></span><br><span class="line">    local.get <span class="number">0</span>)</span><br><span class="line">  (func (;<span class="number">5</span>;) (type <span class="number">0</span>) (result i32)</span><br><span class="line">    i32.<span class="keyword">const</span> <span class="number">1024</span>)</span><br><span class="line">  (table (;<span class="number">0</span>;) <span class="number">2</span> <span class="number">2</span> funcref)</span><br><span class="line">  (memory (;<span class="number">0</span>;) <span class="number">256</span> <span class="number">256</span>)</span><br><span class="line">  (global (;<span class="number">0</span>;) (mut i32) (i32.<span class="keyword">const</span> <span class="number">5243920</span>))</span><br><span class="line">  (global (;<span class="number">1</span>;) i32 (i32.<span class="keyword">const</span> <span class="number">1028</span>))</span><br><span class="line">  (export <span class="string">"memory"</span> (memory <span class="number">0</span>))</span><br><span class="line">  (export <span class="string">"__indirect_function_table"</span> (table <span class="number">0</span>))</span><br><span class="line">  (export <span class="string">"fibonacci"</span> (func <span class="number">1</span>))</span><br><span class="line">  (export <span class="string">"_initialize"</span> (func <span class="number">0</span>))</span><br><span class="line">  (export <span class="string">"__errno_location"</span> (func <span class="number">5</span>))</span><br><span class="line">  (export <span class="string">"stackSave"</span> (func <span class="number">2</span>))</span><br><span class="line">  (export <span class="string">"stackRestore"</span> (func <span class="number">3</span>))</span><br><span class="line">  (export <span class="string">"stackAlloc"</span> (func <span class="number">4</span>))</span><br><span class="line">  (export <span class="string">"__data_end"</span> (global <span class="number">1</span>))</span><br><span class="line">  (elem (;<span class="number">0</span>;) (i32.<span class="keyword">const</span> <span class="number">1</span>) func <span class="number">0</span>))</span><br></pre></td></tr></table></figure>
<p>上边的格式属于 「S- 表达式」， <code>Lisp</code> 语言就是采用的这种表达式，每条语句都是先执行最里边括号的表达式然后依次展开。</p>
<h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p>上边主要介绍了 <code>.wasm</code> 具体长什么样子，下边看一下怎么用到浏览器中。</p>
<p>从 <code>.wasm</code> 源文件到实例化的对象主要有三个步骤，<code>加载 -&gt; 编译 -&gt; 实例化 -&gt; 调用</code>。</p>
<p>加载：读取 <code>.wasm</code> 字节码到本地中，一般是通过 <code>fetch</code> 从网络中取得。</p>
<p>编译：在 Worker 线程进行，编译成平台相关的代码。</p>
<p>实例化：将宿主环境的一些对象、方法导入到 <code>wasm</code> 模块中，比如导入操作 <code>dom</code> 的方法。</p>
<p>调用：通过上一步已经实例化的对象，来调用 <code>wasm</code> 模块中的方法。</p>
<p>主要有两种类型的 <code>API</code>，一种是 <code>js</code> 提供的 <code>api</code> ，另一种是 <code>Web</code> 提供的 <code>api</code> ，<code>Web</code> 提供的 <code>api</code> 支持流式编译实例化。</p>
<p><code>js</code> 的方法，<code>WebAssembly.instantiate(bufferSource, importObject)</code>，可以完成编译和实例化。</p>
<p><code>bufferSource</code> 是含有效 <code>Wasm</code> 模块二进制字节码的 <code>ArrayBuffer</code> 或 <code>TypedArray</code> 对象。</p>
<p><code>importObject</code> 是要导入到 <code>Wasm</code> 模块中的对象。</p>
<p>方法在调用后返回一个<code>Promise</code> 对象，<code>resolve</code> 后返回一个对象，该对象包含编译好的  <code>module</code> 和已经实例化的 <code>instance</code>，模块导出的方法可以通过 <code>instance</code> 对象进行调用。</p>
<p><code>web</code> 的方法，<code>WebAssembly.instantiateStreaming(source, importObject)</code>。</p>
<p>不同之处在于第一个参数，这里的 <code>source</code> 指的是尚未 <code>Resolve</code> 的 <code>Response</code> 对象（<code>window.fetch</code> 调用后会返回该对象），好处就是可以边读取 <code>.wasm</code> 字节流，边进行编译。</p>
<p>其他参数和返回值和 <code>js</code> 的 <code>api</code> 均一致。</p>
<h2 id="js-API-尝试"><a href="#js-API-尝试" class="headerlink" title="js API 尝试"></a>js API 尝试</h2><p>先简单的尝试一下，我们直接构造一个 <code>wasm</code> 模块的  <code>TypedArray</code> 对象，该模块包含了一个 <code>add</code> 方法，然后调用 <code>WebAssembly.instantiate</code> 进行编译和实例化。</p>
<p>对应的 <code>C++</code> 代码。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;emscripten.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span> &#123;</span><br><span class="line">  EMSCRIPTEN_KEEPALIVE</span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>对应的 <code>.wasm</code> 字节码。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">00</span> <span class="number">61</span> <span class="number">73</span> <span class="number">6</span>D <span class="number">01</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">01</span> <span class="number">17</span> <span class="number">05</span> <span class="number">60</span> <span class="number">00</span> <span class="number">01</span> <span class="number">7F</span> <span class="number">60</span></span><br><span class="line"><span class="number">00</span> <span class="number">00</span> <span class="number">60</span> <span class="number">01</span> <span class="number">7F</span> <span class="number">00</span> <span class="number">60</span> <span class="number">01</span> <span class="number">7F</span> <span class="number">01</span> <span class="number">7F</span> <span class="number">60</span> <span class="number">02</span> <span class="number">7F</span> <span class="number">7F</span> <span class="number">01</span></span><br><span class="line"><span class="number">7F</span> <span class="number">03</span> <span class="number">07</span> <span class="number">06</span> <span class="number">01</span> <span class="number">04</span> <span class="number">00</span> <span class="number">02</span> <span class="number">03</span> <span class="number">00</span> <span class="number">04</span> <span class="number">05</span> <span class="number">01</span> <span class="number">70</span> <span class="number">01</span> <span class="number">02</span></span><br><span class="line"><span class="number">02</span> <span class="number">05</span> <span class="number">06</span> <span class="number">01</span> <span class="number">01</span> <span class="number">80</span> <span class="number">02</span> <span class="number">80</span> <span class="number">02</span> <span class="number">06</span> <span class="number">0F</span> <span class="number">02</span> <span class="number">7F</span> <span class="number">01</span> <span class="number">41</span> <span class="number">90</span></span><br><span class="line"><span class="number">88</span> C0 <span class="number">02</span> <span class="number">0B</span> <span class="number">7F</span> <span class="number">00</span> <span class="number">41</span> <span class="number">84</span> <span class="number">08</span> <span class="number">0B</span> <span class="number">07</span> <span class="number">82</span> <span class="number">01</span> <span class="number">09</span> <span class="number">06</span> <span class="number">6</span>D</span><br><span class="line"><span class="number">65</span> <span class="number">6</span>D <span class="number">6F</span> <span class="number">72</span> <span class="number">79</span> <span class="number">02</span> <span class="number">00</span> <span class="number">19</span> <span class="number">5F</span> <span class="number">5F</span> <span class="number">69</span> <span class="number">6</span>E <span class="number">64</span> <span class="number">69</span> <span class="number">72</span> <span class="number">65</span></span><br><span class="line"><span class="number">63</span> <span class="number">74</span> <span class="number">5F</span> <span class="number">66</span> <span class="number">75</span> <span class="number">6</span>E <span class="number">63</span> <span class="number">74</span> <span class="number">69</span> <span class="number">6F</span> <span class="number">6</span>E <span class="number">5F</span> <span class="number">74</span> <span class="number">61</span> <span class="number">62</span> <span class="number">6</span>C</span><br><span class="line"><span class="number">65</span> <span class="number">01</span> <span class="number">00</span> <span class="number">03</span> <span class="number">61</span> <span class="number">64</span> <span class="number">64</span> <span class="number">00</span> <span class="number">01</span> <span class="number">0B</span> <span class="number">5F</span> <span class="number">69</span> <span class="number">6</span>E <span class="number">69</span> <span class="number">74</span> <span class="number">69</span></span><br><span class="line"><span class="number">61</span> <span class="number">6</span>C <span class="number">69</span> <span class="number">7</span>A <span class="number">65</span> <span class="number">00</span> <span class="number">00</span> <span class="number">10</span> <span class="number">5F</span> <span class="number">5F</span> <span class="number">65</span> <span class="number">72</span> <span class="number">72</span> <span class="number">6</span>E <span class="number">6F</span> <span class="number">5F</span></span><br><span class="line"><span class="number">6</span>C <span class="number">6F</span> <span class="number">63</span> <span class="number">61</span> <span class="number">74</span> <span class="number">69</span> <span class="number">6F</span> <span class="number">6</span>E <span class="number">00</span> <span class="number">05</span> <span class="number">09</span> <span class="number">73</span> <span class="number">74</span> <span class="number">61</span> <span class="number">63</span> <span class="number">6B</span></span><br><span class="line"><span class="number">53</span> <span class="number">61</span> <span class="number">76</span> <span class="number">65</span> <span class="number">00</span> <span class="number">02</span> <span class="number">0</span>C <span class="number">73</span> <span class="number">74</span> <span class="number">61</span> <span class="number">63</span> <span class="number">6B</span> <span class="number">52</span> <span class="number">65</span> <span class="number">73</span> <span class="number">74</span></span><br><span class="line"><span class="number">6F</span> <span class="number">72</span> <span class="number">65</span> <span class="number">00</span> <span class="number">03</span> <span class="number">0</span>A <span class="number">73</span> <span class="number">74</span> <span class="number">61</span> <span class="number">63</span> <span class="number">6B</span> <span class="number">41</span> <span class="number">6</span>C <span class="number">6</span>C <span class="number">6F</span> <span class="number">63</span></span><br><span class="line"><span class="number">00</span> <span class="number">04</span> <span class="number">0</span>A <span class="number">5F</span> <span class="number">5F</span> <span class="number">64</span> <span class="number">61</span> <span class="number">74</span> <span class="number">61</span> <span class="number">5F</span> <span class="number">65</span> <span class="number">6</span>E <span class="number">64</span> <span class="number">03</span> <span class="number">01</span> <span class="number">09</span></span><br><span class="line"><span class="number">07</span> <span class="number">01</span> <span class="number">00</span> <span class="number">41</span> <span class="number">01</span> <span class="number">0B</span> <span class="number">01</span> <span class="number">00</span> <span class="number">0</span>A <span class="number">30</span> <span class="number">06</span> <span class="number">03</span> <span class="number">00</span> <span class="number">01</span> <span class="number">0B</span> <span class="number">07</span></span><br><span class="line"><span class="number">00</span> <span class="number">20</span> <span class="number">00</span> <span class="number">20</span> <span class="number">01</span> <span class="number">6</span>A <span class="number">0B</span> <span class="number">04</span> <span class="number">00</span> <span class="number">23</span> <span class="number">00</span> <span class="number">0B</span> <span class="number">06</span> <span class="number">00</span> <span class="number">20</span> <span class="number">00</span></span><br><span class="line"><span class="number">24</span> <span class="number">00</span> <span class="number">0B</span> <span class="number">10</span> <span class="number">00</span> <span class="number">23</span> <span class="number">00</span> <span class="number">20</span> <span class="number">00</span> <span class="number">6B</span> <span class="number">41</span> <span class="number">70</span> <span class="number">71</span> <span class="number">22</span> <span class="number">00</span> <span class="number">24</span></span><br><span class="line"><span class="number">00</span> <span class="number">20</span> <span class="number">00</span> <span class="number">0B</span> <span class="number">05</span> <span class="number">00</span> <span class="number">41</span> <span class="number">80</span> <span class="number">08</span> <span class="number">0B</span></span><br></pre></td></tr></table></figure>
<p>然后直接在控制台输入下边的代码。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">WebAssembly.instantiate(<span class="keyword">new</span> <span class="built_in">Uint8Array</span>(<span class="string">`</span></span><br><span class="line"><span class="string">  00 61 73 6D 01 00 00 00 01 17 05 60 00 01 7F 60</span></span><br><span class="line"><span class="string">00 00 60 01 7F 00 60 01 7F 01 7F 60 02 7F 7F 01</span></span><br><span class="line"><span class="string">7F 03 07 06 01 04 00 02 03 00 04 05 01 70 01 02</span></span><br><span class="line"><span class="string">02 05 06 01 01 80 02 80 02 06 0F 02 7F 01 41 90</span></span><br><span class="line"><span class="string">88 C0 02 0B 7F 00 41 84 08 0B 07 82 01 09 06 6D</span></span><br><span class="line"><span class="string">65 6D 6F 72 79 02 00 19 5F 5F 69 6E 64 69 72 65</span></span><br><span class="line"><span class="string">63 74 5F 66 75 6E 63 74 69 6F 6E 5F 74 61 62 6C</span></span><br><span class="line"><span class="string">65 01 00 03 61 64 64 00 01 0B 5F 69 6E 69 74 69</span></span><br><span class="line"><span class="string">61 6C 69 7A 65 00 00 10 5F 5F 65 72 72 6E 6F 5F</span></span><br><span class="line"><span class="string">6C 6F 63 61 74 69 6F 6E 00 05 09 73 74 61 63 6B</span></span><br><span class="line"><span class="string">53 61 76 65 00 02 0C 73 74 61 63 6B 52 65 73 74</span></span><br><span class="line"><span class="string">6F 72 65 00 03 0A 73 74 61 63 6B 41 6C 6C 6F 63</span></span><br><span class="line"><span class="string">00 04 0A 5F 5F 64 61 74 61 5F 65 6E 64 03 01 09</span></span><br><span class="line"><span class="string">07 01 00 41 01 0B 01 00 0A 30 06 03 00 01 0B 07</span></span><br><span class="line"><span class="string">00 20 00 20 01 6A 0B 04 00 23 00 0B 06 00 20 00</span></span><br><span class="line"><span class="string">24 00 0B 10 00 23 00 20 00 6B 41 70 71 22 00 24</span></span><br><span class="line"><span class="string">00 20 00 0B 05 00 41 80 08 0B`</span>.trim().split(<span class="regexp">/[\s\r\n]+/g</span>).map(<span class="function"><span class="params">str</span> =&gt;</span> <span class="built_in">parseInt</span>(str, <span class="number">16</span>))</span><br><span class="line">)).then(<span class="function">(<span class="params">&#123;instance&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; add &#125; = instance.exports</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'2 + 4 ='</span>, add(<span class="number">2</span>, <span class="number">4</span>))</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>然后就会看到输出了 <code>2 + 4 = 6</code>。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/webassembly4.jpg" alt=""></p>
<h2 id="Web-API-尝试"><a href="#Web-API-尝试" class="headerlink" title="Web API 尝试"></a>Web API 尝试</h2><p>我们再尝试一下流式编译。直接使用之前的斐波纳契数字的 <code>fibonacci.wasm</code> 模块。</p>
<p>首先我们需要提供一个简单的 <code>HTTP</code> 服务，用来返回 <code>.wasm</code> 文件。</p>
<p>新建一个 <code>node.js</code> 文件。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">'url'</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">const</span> path =<span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> PORT = <span class="number">8888</span>;  <span class="comment">// 服务器监听的端口号；</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mime = &#123;</span><br><span class="line">  <span class="string">"html"</span>: <span class="string">"text/html;charset=UTF-8"</span>,</span><br><span class="line">  <span class="string">"wasm"</span>: <span class="string">"application/wasm"</span>  <span class="comment">// 当遇到对 ".wasm" 格式文件的请求时，返回特定的 MIME 头；</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">http.createServer(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> realPath = path.join(__dirname, <span class="string">`.<span class="subst">$&#123;url.parse(req.url).pathname&#125;</span>`</span>);</span><br><span class="line">  <span class="comment">// 检查所访问文件是否存在，且是否可读；</span></span><br><span class="line">  fs.access(realPath, fs.constants.R_OK, err =&gt; &#123;  </span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      res.writeHead(<span class="number">404</span>, &#123; <span class="string">'Content-Type'</span>: <span class="string">'text/plain'</span> &#125;);</span><br><span class="line">      res.end();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      fs.readFile(realPath, <span class="string">"binary"</span>, (err, file) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">          <span class="comment">// 文件读取失败时返回 500；          </span></span><br><span class="line">          res.writeHead(<span class="number">500</span>, &#123; <span class="string">'Content-Type'</span>: <span class="string">'text/plain'</span> &#125;);</span><br><span class="line">          res.end();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">// 根据请求的文件返回相应的文件内容；</span></span><br><span class="line">          <span class="keyword">let</span> ext = path.extname(realPath);</span><br><span class="line">          ext = ext ? ext.slice(<span class="number">1</span>) : <span class="string">'unknown'</span>;</span><br><span class="line">          <span class="keyword">let</span> contentType = mime[ext] || <span class="string">"text/plain"</span>;</span><br><span class="line">          res.writeHead(<span class="number">200</span>, &#123; <span class="string">'Content-Type'</span>: contentType &#125;);</span><br><span class="line">          res.write(file, <span class="string">"binary"</span>);</span><br><span class="line">          res.end();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;).listen(PORT);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"Server is runing at port: "</span> + PORT + <span class="string">"."</span>);</span><br></pre></td></tr></table></figure>
<p>然后来编写我们的 <code>html</code> 文件，讲到斐波那契数字，我们顺便做一个性能的测试，来比较一下使用 <code>wasm</code> 的方式和原生 <code>js</code> 的求解速度。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>斐波纳切数字<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">fibonacciJS</span>(<span class="params">n</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">if</span> (n &lt; <span class="number">2</span>) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="number">1</span>;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> fibonacciJS(n - <span class="number">1</span>) + fibonacciJS(n - <span class="number">2</span>);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> response = fetch(<span class="string">"fibonacci.wasm"</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> num = [<span class="number">5</span>, <span class="number">15</span>, <span class="number">25</span>, <span class="number">35</span>, <span class="number">45</span>];</span></span><br><span class="line"><span class="undefined">    WebAssembly.instantiateStreaming(response).then(</span></span><br><span class="line"><span class="undefined">      (&#123; instance &#125;) =&gt; &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> &#123; fibonacci &#125; = instance.exports;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">for</span>(<span class="keyword">let</span> n <span class="keyword">of</span> num) &#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(<span class="string">`斐波纳切数字: <span class="subst">$&#123;n&#125;</span>，运行 10 次`</span>)</span></span><br><span class="line"><span class="javascript">          <span class="keyword">let</span> cTime = <span class="number">0</span>;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">let</span> jsTime = <span class="number">0</span>;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">for</span>(<span class="keyword">let</span> time = <span class="number">0</span>; time &lt; <span class="number">10</span>; time++) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> start = performance.now();</span></span><br><span class="line"><span class="undefined">            fibonacci(n)</span></span><br><span class="line"><span class="undefined">            cTime += (performance.now() - start)</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">            start = performance.now();</span></span><br><span class="line"><span class="undefined">            fibonacciJS(n)</span></span><br><span class="line"><span class="undefined">            jsTime += (performance.now() - start)</span></span><br><span class="line"><span class="undefined">          &#125;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(<span class="string">`wasm 模块平均调用时间：<span class="subst">$&#123;cTime <span class="regexp">/ 10&#125;ms`)</span></span></span></span></span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(<span class="string">`js 模块平均调用时间：<span class="subst">$&#123;jsTime <span class="regexp">/ 10&#125;ms`)</span></span></span></span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    )</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>然后执行 <code>node node.js</code> 开启 <code>http</code> 服务，接着在浏览器中打开 <code>http://localhost:8888/index.html</code>，控制台中输出如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">斐波纳切数字: <span class="number">5</span>，运行 <span class="number">10</span> 次</span><br><span class="line">index.html:<span class="number">34</span> wasm 模块平均调用时间：<span class="number">0.001499993959441781</span>ms</span><br><span class="line">index.html:<span class="number">35</span> js 模块平均调用时间：<span class="number">0.005500001134350896</span>ms</span><br><span class="line">index.html:<span class="number">22</span> 斐波纳切数字: <span class="number">15</span>，运行 <span class="number">10</span> 次</span><br><span class="line">index.html:<span class="number">34</span> wasm 模块平均调用时间：<span class="number">0.005999993300065398</span>ms</span><br><span class="line">index.html:<span class="number">35</span> js 模块平均调用时间：<span class="number">0.15650001005269587</span>ms</span><br><span class="line">index.html:<span class="number">22</span> 斐波纳切数字: <span class="number">25</span>，运行 <span class="number">10</span> 次</span><br><span class="line">index.html:<span class="number">34</span> wasm 模块平均调用时间：<span class="number">0.6239999900572002</span>ms</span><br><span class="line">index.html:<span class="number">35</span> js 模块平均调用时间：<span class="number">1.1620000121183693</span>ms</span><br><span class="line">index.html:<span class="number">22</span> 斐波纳切数字: <span class="number">35</span>，运行 <span class="number">10</span> 次</span><br><span class="line">index.html:<span class="number">34</span> wasm 模块平均调用时间：<span class="number">70.59700000681914</span>ms</span><br><span class="line">index.html:<span class="number">35</span> js 模块平均调用时间：<span class="number">126.21099999523722</span>ms</span><br><span class="line">index.html:<span class="number">22</span> 斐波纳切数字: <span class="number">45</span>，运行 <span class="number">10</span> 次</span><br><span class="line">index.html:<span class="number">34</span> wasm 模块平均调用时间：<span class="number">8129.7520000021905</span>ms</span><br><span class="line">index.html:<span class="number">35</span> js 模块平均调用时间：<span class="number">16918.658500007587</span>ms</span><br></pre></td></tr></table></figure>
<p>整理成表格看一下：</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/webassembly6.jpg" alt=""></p>
<p>可以看到 <code>wasm</code> 很明显的提高了运行速度，运行时间稳定在 <code>js</code> 的一半，当规模达到 <code>45</code> 的时候，<code>wasm</code> 的运行时间比 <code>js</code> 少了整整 <code>8</code> 秒。</p>
<p>这里也可以看出，如果对于计算密集型的应用，<code>wasm</code> 可以大展身手了。</p>
<h1 id="前端应用"><a href="#前端应用" class="headerlink" title="前端应用"></a>前端应用</h1><p>来看一些目前已经成功落地的 <code>WebAssembly</code> 的应用。</p>
<ol>
<li><p><code>eBay</code> 的条形码扫描</p>
<p><code>eBay</code> 在原生应用中有专门的 <code>C++</code> 库用于条形码的扫描，在 <code>H5</code> 中利用开源 <code>JavaScript</code> 库 <code>BarcodeReader</code> 做了一个带条形码扫描功能的Web版本。 问题是它只有在 <code>20％</code> 的时间表现良好。 剩余的 <code>80％</code> 的时间运行非常缓慢，准确率也不高。</p>
<p>最终的解决方案是通过 <code>wasm</code> ，将原有的 <code>c++</code> 库引入，以及业界十分有名的、基于 <code>C</code> 语言编写的开源条形码扫描库 <code>ZBar</code> 引入，再加上原本的 <code>js</code> 库，三者协助，最终识别率达到了 <code>100%</code>。</p>
<p>产品上线后的最终效果如下图所示。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/webassembly7.png" alt=""></p>
<p>产品在上线使用了一段时间后，<code>eBay</code> 技术团队对应用的条形码扫描情况进行了统计，结果发现有 <code>53%</code> 的成功扫描来自于 <code>ZBar</code>；<code>34%</code> 来自于自研的 <code>C++</code> 库。剩下的 <code>13%</code> 则来自于第三方的 <code>JavaScript</code> 库实现。可见，其中通过 <code>Wasm</code> 实现得到的扫描结果占据了总成功次数的 <code>87%</code>。</p>
<p>更详细的过程可以参考 <a href="https://www.infoq.cn/article/vc*q7psQqWMaVU8igJeD" target="_blank" rel="noopener">WebAssembly在eBay的实践：速度提升50倍</a>。</p>
</li>
<li><p>AutoCAD</p>
<p><code>AutoCAD</code> 是一款由将近 <code>40</code> 年历史的知名桌面端设计软件，被广泛地用于土木建筑、装饰装潢、工业制图等多个领域中。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/webassembly8.png" alt=""></p>
<p>最初基于<code>C++</code>  编译为 <code>Java</code> 代码供 <code>Android</code> 设备使用，最后，在 <code>Google Web Toolkit</code>（一个 <code>Google</code> 开发的可以使用 <code>Java</code> 语言开发 <code>Web</code> 应用的工具集）的帮助下，又将这些 <code>Java</code> 代码转译为了 <code>Web</code> 平台可用的 <code>JavaScript</code> 代码。但最后生成的 <code>Web</code> 应用代码库十分庞大，且在浏览器中的运行性能并不可观。这个「粗糙版」的 <code>Web</code> 应用发布于 <code>2014</code> 年。</p>
<p><code>2015</code> 年通过 <code>Asm.js</code> 将原有的 <code>C++</code> 代码中的主要功能直接进行编译移植到到 <code>Web</code> 平台，性能有了很大的提告。<code>2018</code> 年 <code>3</code> 月，基于 <code>Wasm</code> 构建的 <code>AutoCAD Web</code> 也成功诞生，<a href="https://web.autocad.com/login" target="_blank" rel="noopener">https://web.autocad.com/login</a>。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/webassembly9.jpg" alt=""></p>
</li>
<li><p><a href="https://zh.wikipedia.org/wiki/Google%E5%9C%B0%E7%90%83" target="_blank" rel="noopener">谷歌地球</a></p>
<p><code>Google</code> 地球最初使用 <code>C++</code> 语言在 <code>Windows</code> 平台上开发。后来移植到了 <code>Android</code> 和 <code>iOS</code> 平台中。<code>2017</code> 年 <code>4</code> 月 <code>18</code> 日，经过全新设计的 <code>Google</code> 地球 <code>9.0</code> 发布。由于采用了 <a href="https://zh.wikipedia.org/wiki/Native_Client" target="_blank" rel="noopener">Native Client</a> 技术，刚发布时仅能在<code>Chrome</code> 中运行。<code>2020</code> 年 <code>2</code> 月 <code>27</code> 日，<code>Google</code> 使用 <code>C++</code> 语言通过 <code>WebAssembly</code> 上重写了 <code>Google</code> 地球，从此 <code>Google</code> 地球可以在 <code>Firefox</code> 和 <code>Edge</code> 上运行。</p>
</li>
<li><p>bilibili 上传视频的封面</p>
<p>在 <a href="https://www.zhihu.com/question/265700379/answer/951118579" target="_blank" rel="noopener">知乎</a> 看到的一个回答。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/webassembly10.jpg" alt=""></p>
<blockquote>
<p>投稿视频的时候，当你的视频还在上传中，已经可以自由选择AI推荐的封面。这里采用了webassembly+AI的前端整合。</p>
<p>webassembly 负责读取本地视频，生成图片；</p>
<p>tensorflow.js 负责加载AI训练过的 model，读取图片并打分。</p>
<p>从完全的服务端架构 =&gt; 前端架构 &amp;&amp; 服务端兜底。</p>
<p>webassembly支持解析99%以上的视频编码格式，速度提升体验惠及约50%的web投稿用户。</p>
<p>作者：Stois Fu<br>链接：<a href="https://www.zhihu.com/question/265700379/answer/951118579" target="_blank" rel="noopener">https://www.zhihu.com/question/265700379/answer/951118579</a><br>来源：知乎<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>
</blockquote>
</li>
</ol>
<p>由于当前 <code>Wasm</code> 标准下，<code>Wasm</code> 模块不能直接操纵 <code>dom</code> 元素，所以 <code>WebAssembly</code>  主要应用在了一些计算密集型的场景下，视频的解码编码、图像处理、涉及到复杂计算的算法、加密算法等等。</p>
<h1 id="不止于Web"><a href="#不止于Web" class="headerlink" title="不止于Web"></a>不止于Web</h1><p><code>Wasm</code> 除了应用在浏览器中，也可以应用到 <code>out-of-web</code> 环境中。通过 <code>WASI</code>（<code>WebAssembly System Interface</code>，<code>Wasm</code> 操作系统接口）标准，<code>Wasm</code> 可以直接与操作系统打交道。通过已经在各种环境实现了 <code>WASI</code> 标准的虚拟机，我们就可以将 <code>wasm</code> 用在嵌入式、IOT 物联网以及甚至云，AI 和区块链等特殊的领域和场景中。</p>
<p>有了 <code>WASI</code> 标准，文章最开始介绍的当前应用的架构在未来可能会发生质的改变。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/webassembly1.jpg" alt=""></p>
<p>上边架构的最大问题就是各个操作系统不能兼容，同一个<code>app</code> 需要采用不同的语言在不同平台下各实现一次。</p>
<p>比如一款 <code>A</code> 应用，如果想实现跨平台的话，我们需要用 <code>java</code> 完成在安卓上的开发，用 <code>Objective-C</code> 实现 <code>iOS</code> 上的开发，用 <code>C#</code> 实现 <code>PC</code> 端的开发… …也就是下边的样子。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/webassembly11.jpg" alt=""></p>
<p>但如果有了 <code>wasm</code> ，我们只需要选择任意一门语言，然后编译成 <code>wasm</code>，就可以分发到各个平台上了。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/webassembly12.jpg" alt=""></p>
<p>这也是 <code>Wasm</code> 官方宣传的 <code>Ending</code> 定律，<em>Any application that can be compiled to WebAssembly, will be compiled to WebAssembly eventually.</em></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>此时回顾一下，<code>WebAssebmly</code> 的定义，应该会清晰很多了。</p>
<blockquote>
<p>WebAssembly (abbreviated <em>Wasm</em>) is a binary instruction format for a stack-based virtual machine. Wasm is designed as a portable compilation target for programming languages, enabling deployment on the web for client and server applications.</p>
</blockquote>
<p>它不是一种语言，而是规定了一种虚拟指令集，可以作为各个语言的编译目标，然后通过 <code>wasm</code> 的虚拟机运行到浏览器还有其他各个平台中。</p>
<p>对于前端领域，当前 <code>Webassembly</code> 在某些场景下可以有效提高前端项目的性能，并且可以将 <code>C/C++</code> 领域的一些优秀的库通过编译直接运行到浏览器中。如果前端遇到了性能的问题，不妨可以考虑下 <code>WebAssmbly</code> 的方案。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://developer.ibm.com/zh/technologies/web-development/articles/wa-lo-webassembly-status-and-reality/" target="_blank" rel="noopener">WebAssembly 现状与实战</a></p>
<p><a href="https://dev.to/oayomide/webassembly-another-jvm-4g79" target="_blank" rel="noopener">WebAssembly: another JVM?</a></p>
<p><a href="https://medium.com/@mikevdg/why-webassembly-is-a-big-deal-a308d72c6de1" target="_blank" rel="noopener">Why WebAssembly is a Big Deal</a></p>
<p><a href="https://github.com/appcypher/awesome-wasm-langs" target="_blank" rel="noopener">Awesome WebAssembly Languages</a></p>
<p><a href="https://time.geekbang.org/column/intro/100059901?code=y9watqWBWzgfBrz1HyzOV9ktX8sAuL5W3ZLtRRJnaV4%3D" target="_blank" rel="noopener">极客时间WebAssembly入门课</a>，很系统，强烈推荐</p>
<p><a href="http://www.ruanyifeng.com/blog/2018/01/assembly-language-primer.html" target="_blank" rel="noopener">汇编语言入门教程</a></p>
<p><a href="https://www.infoq.cn/article/vc*q7psQqWMaVU8igJeD" target="_blank" rel="noopener">WebAssembly在eBay的实践：速度提升50倍</a></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>WebAssembly</tag>
      </tags>
  </entry>
  <entry>
    <title>Element使用的async-validator表单校验库源码解析</title>
    <url>/2022/05/17/async-validator%E8%A1%A8%E5%8D%95%E6%A0%A1%E9%AA%8C%E5%BA%93%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</url>
    <content><![CDATA[<p>平常开发写 <code>element</code> 表单的时候，肯定少不了表单的校验，<code>element</code> 使用的是 <a href="https://github.com/yiminghe/async-validator" target="_blank" rel="noopener">async-validator</a> 这个开源库。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220517090312952.png" alt="image-20220517090312952"></p>
<p>这篇文章详细分析一下 <code>async-validator</code> 的主流程。</p>
<h1 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Schema <span class="keyword">from</span> <span class="string">'async-validator'</span>;</span><br><span class="line"><span class="keyword">const</span> descriptor = &#123;</span><br><span class="line">  list: &#123;</span><br><span class="line">    required: <span class="literal">true</span>,</span><br><span class="line">    type: <span class="string">'number'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  limit: [</span><br><span class="line">    &#123;</span><br><span class="line">      required: <span class="literal">true</span>,</span><br><span class="line">      message: <span class="string">'数量必填'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      validator(r, v, cb) &#123;</span><br><span class="line">        <span class="keyword">if</span> (v &lt; <span class="number">100</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> cb(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'数量不能小于 100'</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        cb();</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> validator = <span class="keyword">new</span> Schema(descriptor);</span><br><span class="line">validator.validate(</span><br><span class="line">  &#123; <span class="attr">list</span>: <span class="string">'12'</span>, <span class="attr">limit</span>: <span class="literal">null</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">firstFields</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">  (errors, fields) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (errors) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'错误列表'</span>, errors);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p>我们需要定义 <code>descriptor</code> ，也就是我们在 <code>element</code> 中定义的 <code>rules</code> ，然后创建一个 <code>Schema</code> 对象。</p>
<p>最后调用 <code>validate</code> 函数，传递三个参数：</p>
<p>第一个参数是要校验的对象</p>
<p>第二个参数是 <code>options</code> 对象， <code>firstFields</code> 为 <code>true</code> ，表示同一个字段如果有多个校验规则，一旦出现校验不通过的规则后边的规则就不执行了。</p>
<p>还可以设置 <code>first</code> 为 <code>true</code>，这个是针对整个校验对象的，如果某个字段校验不通过，那么后边所有的字段就不再校验了。</p>
<p>第三个参数是校验结束后的回调函数，<code>erros</code> 保存了所有校验失败的字段以及 <code>message</code> 信息。</p>
<p>因此，上边代码的输出如下：</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220519081546339.png" alt="image-20220519081546339"></p>
<p><code>list</code> 对应结果的 <code>message</code> 是默认为我们添加的，<code>limit</code> 对应结果的 <code>message</code> 是我们自己设置的，会覆盖默认的 <code>message</code>。</p>
<p>因为我们设置了 <code>firstFields</code> 为 <code>true</code> ，所以只校验了 <code>limit</code> 的第一个规则，第二个规则就没有走到。</p>
<p>我们给 <code>limit</code> 设置一个值，让它走到第二个校验规则。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">validator.validate(</span><br><span class="line">  &#123; <span class="attr">list</span>: <span class="string">'12'</span>, <span class="attr">limit</span>: <span class="number">3</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">firstFields</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">  (errors, fields) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (errors) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'错误列表'</span>, errors);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p>输出如下：</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220519081840212.png" alt="image-20220519081840212"></p>
<p>此时 <code>limit</code> 对应结果就是一个 <code>Error</code> 对象了，<code>Error</code> 对象除了本身的 <code>message</code> 属性，默认还为我们添加了 <code>field</code> 和 <code>filedValue</code> 属性。</p>
<h1 id="预处理-descriptor"><a href="#预处理-descriptor" class="headerlink" title="预处理 descriptor"></a>预处理 descriptor</h1><p>校验前  <code>async-validator</code>  会将传入的 <code>descriptor</code> 规范化。</p>
<p>我们传进入的是下边的样子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> descriptor = &#123;</span><br><span class="line">  list: &#123;</span><br><span class="line">    required: <span class="literal">true</span>,</span><br><span class="line">    type: <span class="string">'number'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  limit: [</span><br><span class="line">    &#123;</span><br><span class="line">      required: <span class="literal">true</span>,</span><br><span class="line">      message: <span class="string">'数量必填'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      validator(r, v, cb) &#123;</span><br><span class="line">        <span class="keyword">if</span> (v &lt; <span class="number">100</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> cb(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'数量不能小于 100'</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        cb();</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>预处理后会变成下边的样子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  list: [</span><br><span class="line">    &#123;</span><br><span class="line">      rule: &#123;</span><br><span class="line">        required: <span class="literal">true</span>,</span><br><span class="line">        type: <span class="string">'number'</span>,</span><br><span class="line">        field: <span class="string">'list'</span>,</span><br><span class="line">        fullField: <span class="string">'list'</span>,</span><br><span class="line">        validator: <span class="function">(<span class="params">rule, value, callback, source, options</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">const</span> errors = [];</span><br><span class="line">          <span class="keyword">const</span> validate =</span><br><span class="line">            rule.required ||</span><br><span class="line">            (!rule.required &amp;&amp; source.hasOwnProperty(rule.field));</span><br><span class="line">          <span class="keyword">if</span> (validate) &#123;</span><br><span class="line">            <span class="keyword">if</span> (value === <span class="string">''</span>) &#123;</span><br><span class="line">              value = <span class="literal">undefined</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (isEmptyValue(value) &amp;&amp; !rule.required) &#123;</span><br><span class="line">              <span class="keyword">return</span> callback();</span><br><span class="line">            &#125;</span><br><span class="line">            rules.required(rule, value, source, errors, options);</span><br><span class="line">            <span class="keyword">if</span> (value !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">              rules.type(rule, value, source, errors, options);</span><br><span class="line">              rules.range(rule, value, source, errors, options);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          callback(errors);</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      value: <span class="string">'12'</span>,</span><br><span class="line">      source: &#123;</span><br><span class="line">        list: <span class="string">'12'</span>,</span><br><span class="line">        limit: <span class="number">3</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      field: <span class="string">'list'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">  limit: [</span><br><span class="line">    &#123;</span><br><span class="line">      rule: &#123;</span><br><span class="line">        required: <span class="literal">true</span>,</span><br><span class="line">        message: <span class="string">'数量必填'</span>,</span><br><span class="line">        field: <span class="string">'limit'</span>,</span><br><span class="line">        fullField: <span class="string">'limit'</span>,</span><br><span class="line">        type: <span class="string">'string'</span>,</span><br><span class="line">        validator: <span class="function">(<span class="params">rule, value, callback, source, options</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">const</span> errors = [];</span><br><span class="line">          <span class="keyword">const</span> type = <span class="built_in">Array</span>.isArray(value) ? <span class="string">'array'</span> : <span class="keyword">typeof</span> value;</span><br><span class="line">          rules.required(rule, value, source, errors, options, type);</span><br><span class="line">          callback(errors);</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      value: <span class="number">3</span>,</span><br><span class="line">      source: &#123;</span><br><span class="line">        list: <span class="string">'12'</span>,</span><br><span class="line">        limit: <span class="number">3</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      field: <span class="string">'limit'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      rule: &#123;</span><br><span class="line">        field: <span class="string">'limit'</span>,</span><br><span class="line">        fullField: <span class="string">'limit'</span>,</span><br><span class="line">        type: <span class="string">'string'</span>,</span><br><span class="line">        validator(r, v, cb) &#123;</span><br><span class="line">          <span class="keyword">if</span> (v &lt; <span class="number">100</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> cb(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'数量不能小于 100'</span>));</span><br><span class="line">          &#125;</span><br><span class="line">          cb();</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      value: <span class="number">3</span>,</span><br><span class="line">      source: &#123;</span><br><span class="line">        list: <span class="string">'12'</span>,</span><br><span class="line">        limit: <span class="number">3</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      field: <span class="string">'limit'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>主要做了三件事情：</p>
<ol>
<li>把每个字段的校验规则统一成了一个数组对象</li>
<li>把原本的校验对象放到了 <code>rule</code> 属性中，并且添加了 <code>value</code>、<code>source</code>、<code>field</code> 属性</li>
<li>根据 <code>required</code> 和 <code>type</code> 补充了默认的 <code>validator</code> 校验函数</li>
</ol>
<h1 id="预处理-descriptor-对应的源码"><a href="#预处理-descriptor-对应的源码" class="headerlink" title="预处理 descriptor 对应的源码"></a>预处理 descriptor 对应的源码</h1><p>让我们过一下这部分源码。</p>
<p>在构造函数中，把 <code>descriptor</code> 所有字段的 <code>rule</code> 转为了数组，保存到 <code>rules</code> 对象中。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">constructor</span>(descriptor: Rules) &#123;</span><br><span class="line">  <span class="keyword">this</span>.define(descriptor);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">define(rules: Rules) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!rules) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Cannot configure a schema with no rules'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> rules !== <span class="string">'object'</span> || <span class="built_in">Array</span>.isArray(rules)) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Rules must be an object'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">this</span>.rules = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">Object</span>.keys(rules).forEach(<span class="function"><span class="params">name</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> item: Rule = rules[name];</span><br><span class="line">    <span class="keyword">this</span>.rules[name] = <span class="built_in">Array</span>.isArray(item) ? item : [item];</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>剩下的处理都在 <code>validate</code> 函数中了，可以跟随下边的注释看一下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> validate(source_: Values, <span class="attr">o</span>: any = &#123;&#125;, <span class="attr">oc</span>: any = <span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;): <span class="built_in">Promise</span>&lt;Values&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> source: Values = source_;</span><br><span class="line">    <span class="keyword">let</span> options: ValidateOption = o;</span><br><span class="line">    <span class="keyword">let</span> callback: ValidateCallback = oc;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> options === <span class="string">'function'</span>) &#123;</span><br><span class="line">      callback = options;</span><br><span class="line">      options = &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    function complete(results: (ValidateError | ValidateError[])[]) &#123;</span><br><span class="line">      ...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> series: Record&lt;string, RuleValuePackage[]&gt; = &#123;&#125;;</span><br><span class="line">    <span class="keyword">const</span> keys = options.keys || <span class="built_in">Object</span>.keys(<span class="keyword">this</span>.rules); <span class="comment">// 得到所有的要校验的 key</span></span><br><span class="line">    keys.forEach(<span class="function"><span class="params">z</span> =&gt;</span> &#123; <span class="comment">// 遍历所有字段</span></span><br><span class="line">      <span class="keyword">const</span> arr = <span class="keyword">this</span>.rules[z];</span><br><span class="line">      <span class="keyword">let</span> value = source[z];</span><br><span class="line">      arr.forEach(<span class="function"><span class="params">r</span> =&gt;</span> &#123; <span class="comment">// 遍历每个字段的所有 rule</span></span><br><span class="line">        <span class="keyword">let</span> rule: InternalRuleItem = r;</span><br><span class="line">        ...</span><br><span class="line">        <span class="comment">// 如果是函数，放到 validator 属性中</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> rule === <span class="string">'function'</span>) &#123;</span><br><span class="line">          rule = &#123;</span><br><span class="line">            validator: rule,</span><br><span class="line">          &#125;;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          rule = &#123; ...rule &#125;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 填充 validator 属性</span></span><br><span class="line">        rule.validator = <span class="keyword">this</span>.getValidationMethod(rule);</span><br><span class="line">        <span class="keyword">if</span> (!rule.validator) &#123;</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 填充其他属性</span></span><br><span class="line">        rule.field = z;</span><br><span class="line">        rule.fullField = rule.fullField || z;</span><br><span class="line">        rule.type = <span class="keyword">this</span>.getType(rule);</span><br><span class="line">        series[z] = series[z] || [];</span><br><span class="line">        <span class="comment">// 保存到 series 中</span></span><br><span class="line">        series[z].push(&#123;</span><br><span class="line">          rule,</span><br><span class="line">          value,</span><br><span class="line">          source,</span><br><span class="line">          field: z,</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">const</span> errorFields = &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>看下上边的 <code>getValidationMethod</code> 方法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">getValidationMethod(rule: InternalRuleItem) &#123;</span><br><span class="line">  <span class="comment">// 如果用户自定了，直接返回自定义的</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> rule.validator === <span class="string">'function'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> rule.validator;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> keys = <span class="built_in">Object</span>.keys(rule);</span><br><span class="line">  <span class="keyword">const</span> messageIndex = keys.indexOf(<span class="string">'message'</span>);</span><br><span class="line">  <span class="keyword">if</span> (messageIndex !== <span class="number">-1</span>) &#123;</span><br><span class="line">    keys.splice(messageIndex, <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 如果只有一个 required 字段，返回 required 的校验函数</span></span><br><span class="line">  <span class="keyword">if</span> (keys.length === <span class="number">1</span> &amp;&amp; keys[<span class="number">0</span>] === <span class="string">'required'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> validators.required;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 否则的根据 type 去返回校验函数</span></span><br><span class="line">  <span class="keyword">return</span> validators[<span class="keyword">this</span>.getType(rule)] || <span class="literal">undefined</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>所有的校验函数都是提前定义好的：</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220519094003441.png" alt="image-20220519094003441"></p>
<p>在 <a href="https://pattern.windliang.wang/posts/%E5%89%8D%E7%AB%AF%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B3%BB%E5%88%97-%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F.html" target="_blank" rel="noopener">前端的设计模式中-策略模式</a> 中我们也提到过上边的逻辑。</p>
<h1 id="循环校验"><a href="#循环校验" class="headerlink" title="循环校验"></a>循环校验</h1><p>当我们有了预处理好的所有字段的校验规则。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> series = &#123;</span><br><span class="line">  list: [</span><br><span class="line">    &#123;</span><br><span class="line">      rule: &#123;</span><br><span class="line">        required: <span class="literal">true</span>,</span><br><span class="line">        type: <span class="string">'number'</span>,</span><br><span class="line">        field: <span class="string">'list'</span>,</span><br><span class="line">        fullField: <span class="string">'list'</span>,</span><br><span class="line">        validator: <span class="function">(<span class="params">rule, value, callback, source, options</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">const</span> errors = [];</span><br><span class="line">          <span class="keyword">const</span> validate =</span><br><span class="line">            rule.required ||</span><br><span class="line">            (!rule.required &amp;&amp; source.hasOwnProperty(rule.field));</span><br><span class="line">          <span class="keyword">if</span> (validate) &#123;</span><br><span class="line">            <span class="keyword">if</span> (value === <span class="string">''</span>) &#123;</span><br><span class="line">              value = <span class="literal">undefined</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (isEmptyValue(value) &amp;&amp; !rule.required) &#123;</span><br><span class="line">              <span class="keyword">return</span> callback();</span><br><span class="line">            &#125;</span><br><span class="line">            rules.required(rule, value, source, errors, options);</span><br><span class="line">            <span class="keyword">if</span> (value !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">              rules.type(rule, value, source, errors, options);</span><br><span class="line">              rules.range(rule, value, source, errors, options);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          callback(errors);</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      value: <span class="string">'12'</span>,</span><br><span class="line">      source: &#123;</span><br><span class="line">        list: <span class="string">'12'</span>,</span><br><span class="line">        limit: <span class="number">3</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      field: <span class="string">'list'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">  limit: [</span><br><span class="line">    &#123;</span><br><span class="line">      rule: &#123;</span><br><span class="line">        required: <span class="literal">true</span>,</span><br><span class="line">        message: <span class="string">'数量必填'</span>,</span><br><span class="line">        field: <span class="string">'limit'</span>,</span><br><span class="line">        fullField: <span class="string">'limit'</span>,</span><br><span class="line">        type: <span class="string">'string'</span>,</span><br><span class="line">        validator: <span class="function">(<span class="params">rule, value, callback, source, options</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">const</span> errors = [];</span><br><span class="line">          <span class="keyword">const</span> type = <span class="built_in">Array</span>.isArray(value) ? <span class="string">'array'</span> : <span class="keyword">typeof</span> value;</span><br><span class="line">          rules.required(rule, value, source, errors, options, type);</span><br><span class="line">          callback(errors);</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      value: <span class="number">3</span>,</span><br><span class="line">      source: &#123;</span><br><span class="line">        list: <span class="string">'12'</span>,</span><br><span class="line">        limit: <span class="number">3</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      field: <span class="string">'limit'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      rule: &#123;</span><br><span class="line">        field: <span class="string">'limit'</span>,</span><br><span class="line">        fullField: <span class="string">'limit'</span>,</span><br><span class="line">        type: <span class="string">'string'</span>,</span><br><span class="line">        validator(r, v, cb) &#123;</span><br><span class="line">          <span class="keyword">if</span> (v &lt; <span class="number">100</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> cb(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'数量不能小于 100'</span>));</span><br><span class="line">          &#125;</span><br><span class="line">          cb();</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      value: <span class="number">3</span>,</span><br><span class="line">      source: &#123;</span><br><span class="line">        list: <span class="string">'12'</span>,</span><br><span class="line">        limit: <span class="number">3</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      field: <span class="string">'limit'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>接下来只需要搞一个双重循环，执行所有的字段和每个字段的所有校验函数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">const</span> field <span class="keyword">of</span> <span class="built_in">Object</span>.keys(series)) &#123; <span class="comment">// 遍历每一个字段</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">const</span> data <span class="keyword">of</span> series[field]) &#123; <span class="comment">// 每一个规则</span></span><br><span class="line">    <span class="keyword">const</span> rule = data.rule;</span><br><span class="line">    <span class="keyword">const</span> res = rule.validator(rule, data.value, cb, data.source, options);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>rule</code> 、<code>data.value</code>、<code>data.source</code> 就是当前规则相关的变量，<code>options</code> 是最开始调用校验的时候传进来的 <code>{ firstFields: true },</code>，那么 <code>cb</code> 是什么？</p>
<p><code>cb</code> 函数接受一个错误数据列表，如果返回的不是数组会包装为数组，然后对错误进行填充。</p>
<p>最后调用 <code>doIt</code> 函数，将校验结果传入，后边会介绍这个方法。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cb</span>(<span class="params">e = []</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> errorList = <span class="built_in">Array</span>.isArray(e) ? e : [e];</span><br><span class="line">  <span class="keyword">if</span> (errorList.length &amp;&amp; rule.message !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">    errorList = [].concat(rule.message); <span class="comment">// 错误列表优先使用 message 字段</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// Fill error info</span></span><br><span class="line">  <span class="keyword">let</span> filledErrors = errorList.map(complementError(rule, source));</span><br><span class="line">  doIt(filledErrors); <span class="comment">// 将当前字段的错误列表保存起来</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>complementError</code> 会返回一个函数，将错误列表进行填充，主要就是补充了 <code>field</code> 和 <code>fieldValue</code> 属性。 </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">complementError</span>(<span class="params">rule: InternalRuleItem, source: Values</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">oe: ValidateError | ((</span>) =&gt;</span> string) | string): <span class="function"><span class="params">ValidateError</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> fieldValue;</span><br><span class="line">    <span class="keyword">if</span> (rule.fullFields) &#123;</span><br><span class="line">      fieldValue = getValue(source, rule.fullFields);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      fieldValue = source[(oe <span class="keyword">as</span> any).field || rule.fullField];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (isErrorObj(oe)) &#123;</span><br><span class="line">      oe.field = oe.field || rule.fullField;</span><br><span class="line">      oe.fieldValue = fieldValue;</span><br><span class="line">      <span class="keyword">return</span> oe;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      message: <span class="keyword">typeof</span> oe === <span class="string">'function'</span> ? oe() : oe,</span><br><span class="line">      fieldValue,</span><br><span class="line">      field: ((oe <span class="keyword">as</span> unknown) <span class="keyword">as</span> ValidateError).field || rule.fullField,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>收到的错误列表分为两种情况：</p>
<p>处理前如果 <code>cb</code> 收到的是 <code>Error</code> 列表，比如这样调用 <code>cb(new Error(&#39;数量不能小于 100&#39;));</code> 。</p>
<p>那么处理前是下图：</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220521082112809.png" alt="image-20220521082112809"></p>
<p>处理后，就会往 <code>Error</code> 对象中塞入 <code>field</code> 和 <code>fieldValue</code> 属性。 </p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220521082219018.png" alt="image-20220521082219018"></p>
<p>处理前如果<code>cb</code> 是字符串列表，比如这样调用 <code>cb([&#39;list is required&#39;, &#39;list is not a number&#39;])</code> 。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220521082345013.png" alt="image-20220521082345013"></p>
<p>同样的，处理后也是塞入 <code>field</code> 和 <code>fieldValue</code> 属性。 </p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220521082457313.png" alt="image-20220521082457313"></p>
<p>再回到我们的双重循环中。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">const</span> field <span class="keyword">of</span> <span class="built_in">Object</span>.keys(series)) &#123; <span class="comment">// 遍历每一个字段</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">const</span> data <span class="keyword">of</span> series[field]) &#123; <span class="comment">// 每一个规则</span></span><br><span class="line">    <span class="keyword">const</span> rule = data.rule;</span><br><span class="line">    <span class="keyword">const</span> res = rule.validator(rule, data.value, cb, data.source, options);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其中 <code>validator</code> 函数就是我们自己定义的：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">validator(r, v, cb) &#123;</span><br><span class="line">  <span class="keyword">if</span> (v &lt; <span class="number">100</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> cb(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'数量不能小于 100'</span>));</span><br><span class="line">  &#125;</span><br><span class="line">  cb();</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p>由于 <code>Element</code> 官方示例是上边的样子，所以我们一般都按照上边的样子写，但其实我们也可以不调用 <code>cb</code> 函数，而是仅仅 <code>return</code> 字符串数组，或者 <code>boolean</code> 值，调用 <code>cb</code> 函数交给双重循环。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">validator(r, v, cb) &#123;</span><br><span class="line">  <span class="keyword">if</span> (v &lt; <span class="number">100</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'数量不能小于 100'</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p>双重循环中来处理 <code>validator</code> 的返回值去调用 <code>cb</code> 函数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">const</span> field <span class="keyword">of</span> <span class="built_in">Object</span>.keys(series)) &#123; <span class="comment">// 遍历每一个字段</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">const</span> data <span class="keyword">of</span> series[field]) &#123; <span class="comment">// 每一个规则</span></span><br><span class="line">    <span class="keyword">const</span> rule = data.rule;</span><br><span class="line">    <span class="keyword">const</span> res = rule.validator(rule, data.value, cb, data.source, options);</span><br><span class="line">    <span class="comment">// 根据返回的结果，去调用 cb 函数</span></span><br><span class="line">    <span class="keyword">if</span> (res === <span class="literal">true</span>) &#123;</span><br><span class="line">      cb();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (res === <span class="literal">false</span>) &#123;</span><br><span class="line">      cb(</span><br><span class="line">        <span class="keyword">typeof</span> rule.message === <span class="string">'function'</span></span><br><span class="line">        ? rule.message(rule.fullField || rule.field)</span><br><span class="line">        : rule.message || <span class="string">`<span class="subst">$&#123;rule.fullField || rule.field&#125;</span> fails`</span>,</span><br><span class="line">      );</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (res <span class="keyword">instanceof</span> <span class="built_in">Array</span>) &#123;</span><br><span class="line">      cb(res);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (res <span class="keyword">instanceof</span> <span class="built_in">Error</span>) &#123;</span><br><span class="line">      cb(res.message);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="asyncMap"><a href="#asyncMap" class="headerlink" title="asyncMap"></a>asyncMap</h1><p>向上边我们直接粗暴的写双重循环去依次校验也没有问题，但因为校验库还支持一些参数，比如前边介绍的：</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220521083746778.png" alt="image-20220521083746778"></p>
<p>如果是 <code>for</code> 循环中去处理 <code>firstFields</code> 和 <code>first</code> 的逻辑，就过于耦合了，未来再扩充其他逻辑，双重循环中的逻辑就会越来越复杂。</p>
<p> <code>async-validator</code>  的处理方式在这里就比较优雅了，实现了 <code>asyncMap</code> 方法，作用就是遍历 <code>series</code> 数组，并且处理了 <code>firstFields</code> 和 <code>first</code> 参数的逻辑。</p>
<p>下边来分析一下实现：</p>
<p>看一下 <code>asyncMap</code> 的入口参数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">asyncMap</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  objArr: Record&lt;string, RuleValuePackage[]&gt;,</span></span></span><br><span class="line"><span class="function"><span class="params">  option: ValidateOption,</span></span></span><br><span class="line"><span class="function"><span class="params">  func: ValidateFunc,</span></span></span><br><span class="line"><span class="function"><span class="params">  callback: (errors: ValidateError[]</span>) =&gt; <span class="title">void</span>,</span></span><br><span class="line"><span class="function">  <span class="title">source</span>: <span class="title">Values</span>,</span></span><br><span class="line"><span class="function">)</span>&#123;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>接受 <code>5</code> 个参数：</p>
<p><code>objArr</code>：要遍历的 <code>rule</code> 规则，就是我们前边生成的 <code>series</code> 数组，即双重循环遍历的对象。</p>
<p><code>option</code> ：最开始传入的 <code>option</code>，可能包含 <code>firstFields</code> 和 <code>first</code> 属性。</p>
<p><code>func</code>：遍历过程的中会调用这个函数，会传入当前遍历的 <code>rule</code> 和一个 <code>doIt</code> 函数，<code>doIt</code> 函数需要接收处理好的校验结果。这里就需要我们之前 <code>for</code> 循环内部的处理逻辑。</p>
<p><code>callback</code> : 全部检验结束后调用，会传入所有的校验结果。</p>
<p><code>source</code>：要校验的对象。</p>
<p>这样我们就可以把 <code>for</code> 循环改为直接调用 <code>asyncMap</code> 函数了。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">asyncMap(</span><br><span class="line">  series,</span><br><span class="line">  options,</span><br><span class="line">  (data, doIt) =&gt; &#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;,</span><br><span class="line">  results =&gt; &#123;</span><br><span class="line">    complete(results);</span><br><span class="line">  &#125;,</span><br><span class="line">  source,</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p>第三个参数就是需要我们去处理 <code>data</code> 这个校验规则，也就是之前 <code>for</code> 循环中的逻辑移动过来。</p>
<p>其中 <code>doIt</code> 函数我们在之前讲的 <code>cb</code> 函数中调用即可。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(data, doIt) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> rule = data.rule;</span><br><span class="line">  rule.field = data.field;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">cb</span>(<span class="params">e: SyncErrorType | SyncErrorType[] = []</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> errorList = <span class="built_in">Array</span>.isArray(e) ? e : [e];</span><br><span class="line">    <span class="keyword">if</span> (errorList.length &amp;&amp; rule.message !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">      errorList = [].concat(rule.message);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Fill error info</span></span><br><span class="line">    <span class="keyword">let</span> filledErrors = errorList.map(complementError(rule, source));</span><br><span class="line">    doIt(filledErrors); <span class="comment">// 将当前字段的错误列表保存起来</span></span><br><span class="line">  &#125;</span><br><span class="line">	<span class="comment">/******** for 循环中的逻辑 *****************/</span></span><br><span class="line">  <span class="keyword">const</span> res = rule.validator(rule, data.value, cb, data.source, options);</span><br><span class="line">  <span class="keyword">if</span> (res === <span class="literal">true</span>) &#123;</span><br><span class="line">    cb();</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (res === <span class="literal">false</span>) &#123;</span><br><span class="line">    cb(</span><br><span class="line">      <span class="keyword">typeof</span> rule.message === <span class="string">'function'</span></span><br><span class="line">      ? rule.message(rule.fullField || rule.field)</span><br><span class="line">      : rule.message || <span class="string">`<span class="subst">$&#123;rule.fullField || rule.field&#125;</span> fails`</span>,</span><br><span class="line">    );</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (res <span class="keyword">instanceof</span> <span class="built_in">Array</span>) &#123;</span><br><span class="line">    cb(res);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (res <span class="keyword">instanceof</span> <span class="built_in">Error</span>) &#123;</span><br><span class="line">    cb(res.message);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/***************************************/</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p>最后就是全部遍历结束后的 <code>complete</code> 函数，我们只需要把 <code>results</code> 列表传到外边即可。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">complete</span>(<span class="params">results</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> fields: ValidateFieldsError = &#123;&#125;;</span><br><span class="line">  <span class="keyword">if</span> (!results.length) &#123;</span><br><span class="line">    callback(<span class="literal">null</span>, source);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    fields = convertFieldsError(results);</span><br><span class="line">    callback (results, fields);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上边的 <code>callback</code> 函数就是我们调用校验函数时候外部传入的：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> validator = <span class="keyword">new</span> Schema(descriptor);</span><br><span class="line">validator.validate(</span><br><span class="line">  &#123; <span class="attr">list</span>: <span class="string">'12'</span>, <span class="attr">limit</span>: <span class="literal">null</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">firstFields</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">  <span class="comment">//***** 上边的 callback ********************/</span></span><br><span class="line">  (errors, fields) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (errors) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'错误列表'</span>, errors);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//*********************************************/</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<h1 id="内层循环"><a href="#内层循环" class="headerlink" title="内层循环"></a>内层循环</h1><p>双重循环的的外层是遍历所有字段，内层是遍历该字段的所有规则。</p>
<p>我们来先看一下内层循环的实现：</p>
<p> <code>async-validator</code>  库提供了 <code>asyncParallelArray</code> 方法。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">asyncParallelArray</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  arr: RuleValuePackage[],</span></span></span><br><span class="line"><span class="function"><span class="params">  func: ValidateFunc,</span></span></span><br><span class="line"><span class="function"><span class="params">  callback: (errors: ValidateError[]</span>) =&gt; <span class="title">void</span>,</span></span><br><span class="line"><span class="function">) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> results: ValidateError[] = [];</span><br><span class="line">  <span class="keyword">let</span> total = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">const</span> arrLength = arr.length;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">count</span>(<span class="params">errors: ValidateError[]</span>) </span>&#123;</span><br><span class="line">    results.push(...(errors || []));</span><br><span class="line">    total++;</span><br><span class="line">    <span class="keyword">if</span> (total === arrLength) &#123;</span><br><span class="line">      callback(results);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  arr.forEach(<span class="function"><span class="params">a</span> =&gt;</span> &#123;</span><br><span class="line">    func(a, count);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>接受三个参数：</p>
<p><code>arr</code> 就是当前字段要遍历的规则列表。</p>
<p><code>func</code> 是处理 <code>rule</code> 规则的函数，内部会调用这里的 <code>count</code> 方法，接受当前 <code>a</code> 的校验结果。</p>
<p>传入的 <code>func</code> 其实就是我们前边介绍过的 <code>for</code> 循环内部逻辑，<code>a</code> 是下边的 <code>data</code> 参数，<code>count</code> 就是下边的 <code>doIt</code>。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(data, doIt) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> rule = data.rule;</span><br><span class="line">  rule.field = data.field;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">cb</span>(<span class="params">e: SyncErrorType | SyncErrorType[] = []</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> errorList = <span class="built_in">Array</span>.isArray(e) ? e : [e];</span><br><span class="line">    <span class="keyword">if</span> (errorList.length &amp;&amp; rule.message !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">      errorList = [].concat(rule.message);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Fill error info</span></span><br><span class="line">    <span class="keyword">let</span> filledErrors = errorList.map(complementError(rule, source));</span><br><span class="line">    doIt(filledErrors);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> res = rule.validator(rule, data.value, cb, data.source, options);</span><br><span class="line">  <span class="keyword">if</span> (res === <span class="literal">true</span>) &#123;</span><br><span class="line">    cb();</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (res === <span class="literal">false</span>) &#123;</span><br><span class="line">    cb(</span><br><span class="line">      <span class="keyword">typeof</span> rule.message === <span class="string">'function'</span></span><br><span class="line">      ? rule.message(rule.fullField || rule.field)</span><br><span class="line">      : rule.message || <span class="string">`<span class="subst">$&#123;rule.fullField || rule.field&#125;</span> fails`</span>,</span><br><span class="line">    );</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (res <span class="keyword">instanceof</span> <span class="built_in">Array</span>) &#123;</span><br><span class="line">    cb(res);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (res <span class="keyword">instanceof</span> <span class="built_in">Error</span>) &#123;</span><br><span class="line">    cb(res.message);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p>第三个参数 <code>callback</code> 是当前 <code>arr</code> 全部校验结束后的回调，代表当前字段的所有校验规则都判断结束。</p>
<p>这里需要注意的是，我们是通过 <code>count</code> 进入的次数来判断是否去调用 <code>callback</code> 函数，而不是 <code>arr</code> 遍历结束后调用 <code>callback</code>。</p>
<p>除了 <code>asyncParallelArray</code> 方法，因为有 <code>firstFields</code> 属性的存在，也就是遍历某个字段的所有规则时，如果出现校验不通过的规则就直接结束，后边的规则不再进行判断。</p>
<p>因此， <code>async-validator</code>  还提供了 <code>asyncSerialArray</code> 方法。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">asyncSerialArray</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  arr: RuleValuePackage[],</span></span></span><br><span class="line"><span class="function"><span class="params">  func: ValidateFunc,</span></span></span><br><span class="line"><span class="function"><span class="params">  callback: (errors: ValidateError[]</span>) =&gt; <span class="title">void</span>,</span></span><br><span class="line"><span class="function">) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">const</span> arrLength = arr.length;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">next</span>(<span class="params">errors: ValidateError[]</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (errors &amp;&amp; errors.length) &#123;</span><br><span class="line">      callback(errors);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> original = index;</span><br><span class="line">    index = index + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (original &lt; arrLength) &#123;</span><br><span class="line">      func(arr[original], next);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      callback([]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  next([]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>入口参数和 <code>asyncParallelArray</code> 是一致的，区别在于对于 <code>arr</code> 是顺序执行，如果过程中出现了校验不通过的规则，就直接调用 <code>callback</code> 结束。</p>
<h1 id="外层循环"><a href="#外层循环" class="headerlink" title="外层循环"></a>外层循环</h1><p>外层循环和上边很类似，其实就是遍历所有字段，然后把每个字段的校验列表传给内层循环即可。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">asyncMap</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  objArr: Record&lt;string, RuleValuePackage[]&gt;,</span></span></span><br><span class="line"><span class="function"><span class="params">  option: ValidateOption,</span></span></span><br><span class="line"><span class="function"><span class="params">  func: ValidateFunc,</span></span></span><br><span class="line"><span class="function"><span class="params">  callback: (errors: ValidateError[]</span>) =&gt; <span class="title">void</span>,</span></span><br><span class="line"><span class="function">  <span class="title">source</span>: <span class="title">Values</span>,</span></span><br><span class="line"><span class="function">) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> firstFields =</span><br><span class="line">    option.firstFields === <span class="literal">true</span></span><br><span class="line">      ? <span class="built_in">Object</span>.keys(objArr)</span><br><span class="line">      : option.firstFields || [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> objArrKeys = <span class="built_in">Object</span>.keys(objArr);</span><br><span class="line">  <span class="keyword">const</span> objArrLength = objArrKeys.length;</span><br><span class="line">  <span class="keyword">let</span> total = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">const</span> results: ValidateError[] = [];</span><br><span class="line">  <span class="keyword">const</span> next = <span class="function">(<span class="params">errors: ValidateError[]</span>) =&gt;</span> &#123;</span><br><span class="line">    results.push.apply(results, errors);</span><br><span class="line">    total++;</span><br><span class="line">    <span class="keyword">if</span> (total === objArrLength) &#123;</span><br><span class="line">      callback(results);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">if</span> (!objArrKeys.length) &#123;</span><br><span class="line">    callback(results);</span><br><span class="line">  &#125;</span><br><span class="line">  objArrKeys.forEach(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> arr = objArr[key];</span><br><span class="line">    <span class="keyword">if</span> (firstFields.indexOf(key) !== <span class="number">-1</span>) &#123;</span><br><span class="line">      asyncSerialArray(arr, func, next);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      asyncParallelArray(arr, func, next);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>入口参数前边已经介绍过了，可以看到我们做的就是遍历 <code>objArrKeys</code> 数组，然后根据 <code>firstFields</code> 的值去调用 <code>asyncSerialArray</code> 和 <code>asyncParallelArray</code> 。内存循环判断结束后会调用上边的 <code>next</code> 方法。</p>
<p><code>next</code> 同样也是通过进入的次数，来判断是否调用 <code>callback</code> 函数，也就是前边介绍的 <code>complete</code> 方法。</p>
<p>和内层循环类似，因为有 <code>first</code> 属性的存在，也就是遍历某个字段时，存在校验不通过的字段就直接结束，后边的字段就不再进行判断。</p>
<p>我们只需要把所有规则打平，然后调用 <code>asyncSerialArray</code> 方法即可。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (option.first) &#123;</span><br><span class="line">  <span class="keyword">const</span> next = <span class="function">(<span class="params">errors: ValidateError[]</span>) =&gt;</span> &#123;</span><br><span class="line">    callback(errors);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">const</span> flattenArr = flattenObjArr(objArr);</span><br><span class="line">  asyncSerialArray(flattenArr, func, next);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">flattenObjArr</span>(<span class="params">objArr: Record&lt;string, RuleValuePackage[]&gt;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> ret: RuleValuePackage[] = [];</span><br><span class="line">  <span class="built_in">Object</span>.keys(objArr).forEach(<span class="function"><span class="params">k</span> =&gt;</span> &#123;</span><br><span class="line">    ret.push(...(objArr[k] || []));</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="代码总"><a href="#代码总" class="headerlink" title="代码总"></a>代码总</h1><p>以上就是  <code>async-validator</code> 源码的主要流程了，说起来也简单，先预处理所有规则，然后通过 <code>asyncMap</code> 方法双层循环遍历所有校验规则即可，这个双层循环的抽离确实很优雅，避免了循环中耦合太多逻辑。</p>
<p>除了上边介绍的代码，因为 <code>async-validator</code> 还支持 <code>Promise</code> 的调用风格，校验函数支持 <code>Promise</code> 函数等其他功能，大家感兴趣也可以到 <a href="https://github.com/yiminghe/async-validator" target="_blank" rel="noopener">async-validator</a> 看一下更详细的源码。</p>
<p>值得一提的点是，双层循环是通过计数来判断是否结束的，而进入计数其实就是调用 <code>cb</code> 函数。因此如果我们规则是下边的样子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Schema <span class="keyword">from</span> <span class="string">'../src/index'</span>;</span><br><span class="line"><span class="keyword">const</span> descriptor = &#123;</span><br><span class="line">  limit: [</span><br><span class="line">    &#123;</span><br><span class="line">      validator(r, v, cb) &#123;</span><br><span class="line">        <span class="keyword">if</span> (v &lt; <span class="number">100</span>) &#123;</span><br><span class="line">          cb(<span class="string">'校验1'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        cb();</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      validator(r, v, cb) &#123;</span><br><span class="line">        <span class="keyword">if</span> (v &lt; <span class="number">50</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> cb(<span class="string">'校验2'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        cb();</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> validator = <span class="keyword">new</span> Schema(descriptor);</span><br><span class="line">validator.validate(</span><br><span class="line">  &#123; <span class="attr">limit</span>: <span class="number">3</span> &#125;,</span><br><span class="line">  (errors, fields) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (errors) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'错误列表'</span>, errors);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p>因为我们没有传递 <code>firstFields</code> 属性，所以我们期望的是将 <code>limit</code> 所有的校验都进行了，<code>limit</code> 的值是 <code>3</code> ，所以两个校验都没通过，应该输出下边的内容：</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220521103342907.png" alt="image-20220521103342907"></p>
<p>但其实只进行了第一个的校验：</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220521103508233.png" alt="image-20220521103508233"></p>
<p>原因就在于第一个 <code>validator</code> 进行了两次 <code>cb</code> ，然后内层循环的 <code>callback</code> 就提前调用了。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">validator(r, v, cb) &#123;</span><br><span class="line">  <span class="keyword">if</span> (v &lt; <span class="number">100</span>) &#123;</span><br><span class="line">    cb(<span class="string">'校验1'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  cb();</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p>因此我们最好保证一个 <code>validator</code> 只进行一次 <code>cb</code> ，走到 <code>cb</code> 后就直接 <code>return</code>。（因为 <code>Element</code> 会设置 <code>firstFields</code> 为 <code>true</code>，所以其实有多个 <code>cb</code> 也不影响最终结果）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">validator(r, v, cb) &#123;</span><br><span class="line">  <span class="keyword">if</span> (v &lt; <span class="number">100</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> cb(<span class="string">'校验1'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  cb();</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p>并且一定要有一个 <code>cb</code> ，不然最终的回调函数永远也不会执行了，这就是为什么 <code>Element</code> 提示我们要进行 <code>cb</code> 。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220521103841307.png" alt="image-20220521103841307"></p>
<p>但这里说的也不够严谨，我们也可以返回字符串，或者字符串数组、布尔值等， <code>async-validator</code> 内部会根据 <code>validator</code> 返回的结果去调用 <code>cb</code> 函数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> res = rule.validator(rule, data.value, cb, data.source, options);</span><br><span class="line">  <span class="keyword">if</span> (res === <span class="literal">true</span>) &#123;</span><br><span class="line">    cb();</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (res === <span class="literal">false</span>) &#123;</span><br><span class="line">    cb(</span><br><span class="line">      <span class="keyword">typeof</span> rule.message === <span class="string">'function'</span></span><br><span class="line">      ? rule.message(rule.fullField || rule.field)</span><br><span class="line">      : rule.message || <span class="string">`<span class="subst">$&#123;rule.fullField || rule.field&#125;</span> fails`</span>,</span><br><span class="line">    );</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (res <span class="keyword">instanceof</span> <span class="built_in">Array</span>) &#123;</span><br><span class="line">    cb(res);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (res <span class="keyword">instanceof</span> <span class="built_in">Error</span>) &#123;</span><br><span class="line">    cb(res.message);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p> <code>async-validator</code>  用计数的方式来判断是否去调用回调，就是为了实现异步的校验，当异步过程结束后才去调用 <code>cb</code> ，代表校验完成。</p>
<h1 id="其他属性"><a href="#其他属性" class="headerlink" title="其他属性"></a>其他属性</h1><p>平时写代码直接参照前人的校验规则去仿照着写了，大家也基本上是按照 <code>Element</code> 的样例来写校验规则，如果去  <a href="https://github.com/yiminghe/async-validator" target="_blank" rel="noopener">async-validator</a>  看一下的话，会发现一些其他没听过的属性，这里也记录下。</p>
<p><code>validator</code> 校验函数最多能接收到 <code>5</code> 个参数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">validator(rule, value, callback, source, options) &#123;</span><br><span class="line">  <span class="keyword">const</span> errors = [];</span><br><span class="line">  <span class="comment">// test if email address already exists in a database</span></span><br><span class="line">  <span class="comment">// and add a validation error to the errors array if it does</span></span><br><span class="line">  <span class="keyword">return</span> errors;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p>我们可以通过第四个参数 <code>source</code> 拿到整个表单的对象，如果想校验一些联动的逻辑，我们就可以通过 <code>source</code> 拿到其他字段的值。</p>
<p>对对象字段的校验，如果校验字段是个对象，我们可以通过 <code>fields</code> 来校验对象中的字段。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> descriptor = &#123;</span><br><span class="line">  address: &#123;</span><br><span class="line">    type: <span class="string">'object'</span>,</span><br><span class="line">    required: <span class="literal">true</span>,</span><br><span class="line">    fields: &#123;</span><br><span class="line">      street: &#123; <span class="attr">type</span>: <span class="string">'string'</span>, <span class="attr">required</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">      city: &#123; <span class="attr">type</span>: <span class="string">'string'</span>, <span class="attr">required</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">      zip: &#123; <span class="attr">type</span>: <span class="string">'string'</span>, <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">len</span>: <span class="number">8</span>, <span class="attr">message</span>: <span class="string">'invalid zip'</span> &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  name: &#123; <span class="attr">type</span>: <span class="string">'string'</span>, <span class="attr">required</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> validator = <span class="keyword">new</span> Schema(descriptor);</span><br><span class="line">validator.validate(&#123; <span class="attr">address</span>: &#123;&#125; &#125;, (errors, fields) =&gt; &#123;</span><br><span class="line">  <span class="comment">// errors for address.street, address.city, address.zip</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p><code>transform</code> 函数，可以将值先进行一次转换，然后再进行校验。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> descriptor = &#123;</span><br><span class="line">  name: &#123;</span><br><span class="line">    type: <span class="string">'string'</span>,</span><br><span class="line">    required: <span class="literal">true</span>,</span><br><span class="line">    pattern: <span class="regexp">/^[a-z]+$/</span>,</span><br><span class="line">    transform(value) &#123;</span><br><span class="line">      <span class="keyword">return</span> value.trim();</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><code>asyncValidator</code>，校验函数内部是用 <code>Promise</code> 或者直接返回一个 <code>Promise</code>。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fields = &#123;</span><br><span class="line">  asyncField: &#123;</span><br><span class="line">    asyncValidator(rule, value, callback) &#123;</span><br><span class="line">      ajax(&#123;</span><br><span class="line">        url: <span class="string">'xx'</span>,</span><br><span class="line">        value: value,</span><br><span class="line">      &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">        callback();</span><br><span class="line">      &#125;, <span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line">        callback(<span class="keyword">new</span> <span class="built_in">Error</span>(error));</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  promiseField: &#123;</span><br><span class="line">    asyncValidator(rule, value) &#123;</span><br><span class="line">      <span class="keyword">return</span> ajax(&#123;</span><br><span class="line">        url: <span class="string">'xx'</span>,</span><br><span class="line">        value: value,</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h1 id="总"><a href="#总" class="headerlink" title="总"></a>总</h1><p>上边就是   <code>async-validator</code>  开源库的核心源码了，希望对你有帮助。</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>element</tag>
      </tags>
  </entry>
  <entry>
    <title>前端er开发cocos小游戏快速入门</title>
    <url>/2022/11/07/%E5%89%8D%E7%AB%AFer%E5%BC%80%E5%8F%91cocos%E5%B0%8F%E6%B8%B8%E6%88%8F%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<p>前段时间一直在更 <a href="https://vue.windliang.wang/" target="_blank" rel="noopener">vue2的源码系列</a>，最近换了换口味，学了一下 <code>cocos</code> ，照猫画虎的写了一个「挑战1024」小游戏。</p>
<p>学习一门新语言或者新框架其实就是一个堆时间的过程了，整个过程就是结合已有经验进行不同的猜测，然后验证，搞不定就去官网或者搜索引擎找答案，<code>99.9%</code> 的问题应该都能找到。</p>
<p><code>cocos</code> 网上很多是视频教程，虽然对新手友好，但是信息密度太低了，这里我总结一下 <code>cocos</code> 专有的或者不太符合直觉的一些点，前端的同学看完以后能更快的进入 <code>cocos</code> 的开发中。</p>
<p>建议先跟着官方的 <a href="https://docs.cocos.com/creator/manual/zh/getting-started/first-game/" target="_blank" rel="noopener">快速上手</a> 先一步一步实现一个小游戏，再读下边的文章效果会更佳。</p>
<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p><code>cocos</code> 提供了游戏引擎，一些常用的操作，碰撞检测、重力模拟、变换位置、旋转、缩放、粒子系统等都可以通过配置一键实现，游戏引擎最终会帮我们把界面渲染到 <code>canvas</code> 节点上。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20221113101837574.png" alt="image-20221113101837574"></p>
<p>因为是渲染至 <code>canvas</code> ，当然很自然的可以支持跨端，一套代码可以编译至 <code>h5</code>、微信小游戏等平台。</p>
<p>同一个功能不同平台之间有不同的 <code>api</code> ，比如 <code>localstorage</code> 的使用会有所不同，<code>cocos</code> 会帮我们在上层抹平，只需要按照 <code>cocos</code> 的语法编写，编译的时候选择相应的平台就会转成对应平台的 <code>api</code>。</p>
<h1 id="编辑器"><a href="#编辑器" class="headerlink" title="编辑器"></a>编辑器</h1><p><code>cocos</code> 开发和平常的前端开发不太一样，它是代码结合 <code>UI</code> 拖拽来实现的，通过拖拽我们可以快速的布局、添加组件、设置属性等。</p>
<p>基于此，项目和编辑器就有了强绑定的关系，如果下载别人的项目，还需要下载相应的编辑器。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20221113104527992.png" alt="image-20221113104527992"></p>
<p>打开项目的时候需要选择相应的编辑器。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20221113104543991.png" alt="image-20221113104543991"></p>
<p>当然，如果编辑器差的版本比较小，<code>Cocos</code> 也可以帮我们自动升级项目的编辑器版本。如果是 <code>2.x</code> 升到 <code>3.x</code> 就会有 <code>break changes</code> ，需要手动进行一些代码的兼容。</p>
<p><code>ps</code>：<code>MAC</code> <code>M1</code> 版本不支持 <code>2.4.5</code> 以下的版本。</p>
<h1 id="场景-Scene"><a href="#场景-Scene" class="headerlink" title="场景/Scene"></a>场景/Scene</h1><p>游戏的 <code>ui</code> 、逻辑都挂载在某个场景（<code>Scene</code>）下，可以在资源管理器右键创建场景，然后双击打开。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20221113110410892.png" alt="image-20221113110410892"></p>
<p>接下来我们就可以在当前 <code>Canvas</code> 添加各种节点和代码逻辑了。</p>
<p>游戏如果有多个页面，可以新建多个场景各自维护。</p>
<p>ps：如果从导入网上下载的 <code>cocos</code> 项目，场景不会自动加载，需要双击一下场景然后再预览。</p>
<h1 id="节点-Node"><a href="#节点-Node" class="headerlink" title="节点/Node"></a>节点/Node</h1><p>我们可以通过右键创建节点，除了空结点，还帮我们预设了其他的很多节点，比如 <code>Label</code> 、<code>Button</code> 等。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20221113112755384.png" alt="image-20221113112755384"></p>
<p>节点是树状关系，每个节点可以得到它的父节点，也可以得到它的子节点。</p>
<p>比如我们可以通过 <code>getChildByName</code> 得到它的子节点。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.node.getChildByName(<span class="string">"message"</span>); <span class="comment">// 得到相应的 Node 节点</span></span><br></pre></td></tr></table></figure>
<p>通过 <code>this.node.parent</code> 拿到它的父节点。</p>
<h1 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h1><p>一个空结点只有一些位置、大小属性。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20221113153540396.png" alt="image-20221113153540396"></p>
<p>我们可以在 <code>Node</code> 节点上挂载一些组件让 <code>Node</code> 拥有样式和功能。</p>
<h2 id="Label-组件"><a href="#Label-组件" class="headerlink" title="Label 组件"></a>Label 组件</h2><p>如果我们创建一个 <code>Label</code> 节点，会自动挂一个 <code>Label</code> 组件。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20221113153748303.png" alt="image-20221113153748303"></p>
<p>通过 <code>Label</code> 组件我们可以设置文案 、字体大小等，展示到场景中的就是一个普通的 <code>Label</code>。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20221113153900887.png" alt="image-20221113153900887"></p>
<h2 id="图片组件"><a href="#图片组件" class="headerlink" title="图片组件"></a>图片组件</h2><p>我们可以通过将「资源管理器」中的图片拖动到「层级管理器」中生成一个带背景的 <code>Node</code> 节点。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20221113154522620.png" alt="image-20221113154522620"></p>
<p>拖过去之后会生成一个带有 <code>Sprite</code> 组件的节点，并将该图片设置为 <code>Sprite Frame</code> 属性的值，这样这张图片就会展示到场景中了。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20221113154930782.png" alt="image-20221113154930782"></p>
<p>如果想要更改图片，只要把 <code>Sprite Frame</code> 属性清空，重新拖一个图片上去即可。</p>
<h2 id="脚本组件"><a href="#脚本组件" class="headerlink" title="脚本组件"></a>脚本组件</h2><p>这个是最重要的，我们可以编写游戏逻辑，设置一些点击监听、节点之间联动等逻辑，然后挂到 <code>Node</code> 节点上。</p>
<p>先新建一个 <code>js</code> 文件，会自动帮我们生成带有生命周期的一些代码。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20221113160458554.png" alt="image-20221113160458554"></p>
<p>双击打开新建的 <code>js</code> 文件，我们可以把文件和 <code>VSCode</code> 关联，用 <code>VSCode</code> 进行代码的编辑。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Learn cc.Class:</span></span><br><span class="line"><span class="comment">//  - https://docs.cocos.com/creator/manual/en/scripting/class.html</span></span><br><span class="line"><span class="comment">// Learn Attribute:</span></span><br><span class="line"><span class="comment">//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html</span></span><br><span class="line"><span class="comment">// Learn life-cycle callbacks:</span></span><br><span class="line"><span class="comment">//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html</span></span><br><span class="line"></span><br><span class="line">cc.Class(&#123;</span><br><span class="line">    extends: cc.Component,</span><br><span class="line"></span><br><span class="line">    properties: &#123;</span><br><span class="line">        <span class="comment">// foo: &#123;</span></span><br><span class="line">        <span class="comment">//     // ATTRIBUTES:</span></span><br><span class="line">        <span class="comment">//     default: null,        // The default value will be used only when the component attaching</span></span><br><span class="line">        <span class="comment">//                           // to a node for the first time</span></span><br><span class="line">        <span class="comment">//     type: cc.SpriteFrame, // optional, default is typeof default</span></span><br><span class="line">        <span class="comment">//     serializable: true,   // optional, default is true</span></span><br><span class="line">        <span class="comment">// &#125;,</span></span><br><span class="line">        <span class="comment">// bar: &#123;</span></span><br><span class="line">        <span class="comment">//     get () &#123;</span></span><br><span class="line">        <span class="comment">//         return this._bar;</span></span><br><span class="line">        <span class="comment">//     &#125;,</span></span><br><span class="line">        <span class="comment">//     set (value) &#123;</span></span><br><span class="line">        <span class="comment">//         this._bar = value;</span></span><br><span class="line">        <span class="comment">//     &#125;</span></span><br><span class="line">        <span class="comment">// &#125;,</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// LIFE-CYCLE CALLBACKS:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// onLoad () &#123;&#125;,</span></span><br><span class="line"></span><br><span class="line">    start () &#123;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// update (dt) &#123;&#125;,</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p><code>properties</code> 是脚本组件的属性，写在这里的属性可以在 <code>Cocos</code> 的界面上看到。</p>
<p>比较重要是 <code>OnLoad</code> 和 <code>update</code> 两个生命周期，<code>OnLoad</code> 会在组件渲染前进行执行，这里我们可以进行一些初始化的操作，<code>update</code> 生命周期会在每一帧渲染前执行，这里我们就可以更新节点的位置让一些节点动起来。</p>
<p>文件编写好以后，我们可以以组件的形式逻辑挂载到相应的 <code>Node</code> 节点上。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20221113161547263.png" alt="image-20221113161547263"></p>
<h2 id="Widget-组件"><a href="#Widget-组件" class="headerlink" title="Widget 组件"></a>Widget 组件</h2><p>这个比较简单，它可以设置和边界的相对距离。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20221113173512981.png" alt="image-20221113173512981"></p>
<h2 id="碰撞组件"><a href="#碰撞组件" class="headerlink" title="碰撞组件"></a>碰撞组件</h2><p>两个 <code>Node</code> 节点相撞，我们可以根据它们的坐标手动进行判断，也可以在 <code>Node</code> 节点上挂载碰撞组件，设置它们的分组，然后在脚本组件中增加 <code>onCollisionEnter</code> 回调函数即可。</p>
<p>添加 <code>BoxCollider</code> 组件。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20221113162101123.png" alt="image-20221113162101123"></p>
<p>设置 <code>Node</code> 中的 <code>Group</code> 属性。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20221113162143563.png" alt="image-20221113162143563"></p>
<p><code>Group</code> 我们可以手动进行管理，并且设置哪些 <code>Group</code> 产生碰撞。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20221113162918517.png" alt="image-20221113162918517"></p>
<p>接下来还需要在游戏最开始的时候开始碰撞检测，可以给层级节点中的 <code>Canvas</code> 节点添加一个用户脚本组件 <code>game.js</code> ，然后修改脚本组件的 <code>OnLoad</code> 中调用下边的方法。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> collisionManager = cc.director.getCollisionManager();</span><br><span class="line">collisionManager.enabled = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure>
<p>最后在相应的 <code>Node</code> 节点的用户脚本中添加 <code>onCollisionEnter</code> 回调函数进行碰撞后的逻辑即可。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">onCollisionEnter(other) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.game.continueIng &amp;&amp; other.node.name !== <span class="string">"ground"</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">switch</span> (other.node.name) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"star"</span>:</span><br><span class="line">      <span class="keyword">this</span>.handleStar(other);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"meteorites"</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"ground"</span>:</span><br><span class="line">      <span class="keyword">this</span>.game.endGame();</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p>通过回调参数 <code>other</code> 可以拿到碰撞的节点。</p>
<h2 id="刚体组件"><a href="#刚体组件" class="headerlink" title="刚体组件"></a>刚体组件</h2><p>这里通过刚体组件我们可以实现物体受到重力的效果。</p>
<p>首先给节点添加一个 <code>RightBody</code> 组件，并且将类型设置为 <code>Dynamic</code> 。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20221113165834371.png" alt="image-20221113165834371"></p>
<p>和碰撞组件一样，我们在 <code>Canvas</code> 对应的用户脚本组件的 <code>OnLoad</code> 中调用下边的方法开启重力模拟即可。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> instance = cc.director.getPhysicsManager();</span><br><span class="line">instance.enabled = <span class="literal">true</span>;</span><br><span class="line">instance.gravity = cc.v2(<span class="number">0</span>, <span class="number">-980</span> * <span class="number">2</span>);</span><br></pre></td></tr></table></figure>
<p>这样相应的节点就会受到重力的作用了。</p>
<h2 id="动画组件"><a href="#动画组件" class="headerlink" title="动画组件"></a>动画组件</h2><p>在层级管理器选中相应的节点，点击「动画编辑器」，然后添加一个 <code>Animation</code> 组件</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20221113165636129.png" alt="image-20221113165636129"></p>
<p>接着添加一个 <code>Clip</code>，并进行编辑，设置动画的关键帧等，有点像 <code>photoShop</code> 里的动画编辑器。</p>
<p>保存后将新建的 <code>Clip</code> 拖到到对应的属性上即可。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20221113170821916.png" alt="image-20221113170821916"></p>
<h2 id="防穿透组件"><a href="#防穿透组件" class="headerlink" title="防穿透组件"></a>防穿透组件</h2><p><code>button</code> 被弹窗盖住，此时 <code>button</code> 依旧会响应到点击时间，此时可以通过给弹窗增加 <code>BlockInputEvents</code> 防止点击穿透。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20221119205327720.png" alt="image-20221119205327720"></p>
<p>需要点击的时候激活，关闭的时候取消激活。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.node.getComponent(cc.BlockInputEvents).enabled = <span class="literal">true</span>; <span class="comment">// 点击的时候激活</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.node.getComponent(cc.BlockInputEvents).enabled = <span class="literal">false</span>;  <span class="comment">// 关闭的时候取消激活</span></span><br></pre></td></tr></table></figure>
<h1 id="坐标系"><a href="#坐标系" class="headerlink" title="坐标系"></a>坐标系</h1><p>设置的 <code>positon</code> 是在父节点坐标系下的位置。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20221113173906330.png" alt=""></p>
<p>如果它有子节点，它的子节点设置的 <code>positon</code> 就是基于上边的红线和绿线为坐标轴进行排布。</p>
<h1 id="脚本组件属性"><a href="#脚本组件属性" class="headerlink" title="脚本组件属性"></a>脚本组件属性</h1><p>我们可以脚本组件中添加一些属性。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">properties: &#123;</span><br><span class="line">       bird: &#123;</span><br><span class="line">           <span class="keyword">default</span>: <span class="literal">null</span>,</span><br><span class="line">           type: Bird,</span><br><span class="line">       &#125;,</span><br><span class="line">       gravity: cc.v2(<span class="number">0</span>, <span class="number">-980</span> * <span class="number">2</span>),</span><br><span class="line">       starPool: &#123;</span><br><span class="line">           <span class="keyword">default</span>: <span class="literal">null</span>,</span><br><span class="line">           type: StarPool,</span><br><span class="line">       &#125;,</span><br><span class="line">       scoreDisplay: &#123;</span><br><span class="line">           <span class="keyword">default</span>: <span class="literal">null</span>,</span><br><span class="line">           type: cc.Label,</span><br><span class="line">       &#125;,</span><br><span class="line">       scoreResult: &#123;</span><br><span class="line">           <span class="keyword">default</span>: <span class="literal">null</span>,</span><br><span class="line">           type: cc.Node,</span><br><span class="line">       &#125;,</span><br><span class="line">       successAudio: &#123;</span><br><span class="line">           <span class="keyword">default</span>: <span class="literal">null</span>,</span><br><span class="line">           type: cc.AudioClip,</span><br><span class="line">       &#125;,</span><br><span class="line">       failAudio: &#123;</span><br><span class="line">           <span class="keyword">default</span>: <span class="literal">null</span>,</span><br><span class="line">           type: cc.AudioClip,</span><br><span class="line">       &#125;,</span><br><span class="line">   &#125;,</span><br></pre></td></tr></table></figure>
<p>这样在 <code>cocos</code> 编辑器中我们可以通过拖动进行属性的初始化。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20221113172140746.png" alt="image-20221113172140746"></p>
<p>值的注意的是，如果我们在 <code>properties</code> 外边写属性，比如下边的 <code>num</code>。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">cc.Class(&#123;</span><br><span class="line">    extends: cc.Component,</span><br><span class="line"></span><br><span class="line">    properties: &#123;</span><br><span class="line">        <span class="comment">// foo: &#123;</span></span><br><span class="line">        <span class="comment">//     // ATTRIBUTES:</span></span><br><span class="line">        <span class="comment">//     default: null,        // The default value will be used only when the component attaching</span></span><br><span class="line">        <span class="comment">//                           // to a node for the first time</span></span><br><span class="line">        <span class="comment">//     type: cc.SpriteFrame, // optional, default is typeof default</span></span><br><span class="line">        <span class="comment">//     serializable: true,   // optional, default is true</span></span><br><span class="line">        <span class="comment">// &#125;,</span></span><br><span class="line">        <span class="comment">// bar: &#123;</span></span><br><span class="line">        <span class="comment">//     get () &#123;</span></span><br><span class="line">        <span class="comment">//         return this._bar;</span></span><br><span class="line">        <span class="comment">//     &#125;,</span></span><br><span class="line">        <span class="comment">//     set (value) &#123;</span></span><br><span class="line">        <span class="comment">//         this._bar = value;</span></span><br><span class="line">        <span class="comment">//     &#125;</span></span><br><span class="line">        <span class="comment">// &#125;,</span></span><br><span class="line">    &#125;,</span><br><span class="line">  </span><br><span class="line">  	num: <span class="number">0</span>, <span class="comment">// 自定义属性</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// LIFE-CYCLE CALLBACKS:</span></span><br><span class="line"></span><br><span class="line">    onLoad () &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.num)</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    start () &#123;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// update (dt) &#123;&#125;,</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>此时我们在 <code>onLoad</code> 打印该值只会是 <code>undefind</code> ，如果想在当前实例上挂载属性，我们可以选择在 <code>onLoad</code> 中进行值的初始化。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">onLoad () &#123;</span><br><span class="line">  <span class="keyword">this</span>.num = <span class="number">2</span>; <span class="comment">// 自定义属性</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p>这里需要注意的是如果改变脚本代码，保存后我们需要重新切到 <code>Cocos</code> 的编辑页面 才会重新进行编译。</p>
<h1 id="Prelab"><a href="#Prelab" class="headerlink" title="Prelab"></a>Prelab</h1><p>节点可以在编辑器生成，当然也可以通过代码动态生成。对于需要重复生成的节点，我们可以将它保存成 <code>Prefab</code>（预制）资源，作为我们动态生成节点时使用的模板。</p>
<p>做法就是在「层级管理器」随便新建一个 <code>Node</code> 节点，并且添加所需要的组件和自定义的脚本组件，最后将该 <code>node</code> 节点拖动到「资源管理器」即可。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20221114064750298.png" alt="image-20221114064750298"></p>
<p>之后我们就可以层级管理器中刚新建的节点删除。当然，为了后续方便编辑，该 <code>Node</code> 节点也可以保留，但需要将其放到画面外，并且将脚本组件取消勾选一下，不执行逻辑。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20221114065217375.png" alt="image-20221114065217375"></p>
<p>有了预制资源后，我们可以通过下边的代码来动态生成 <code>Node</code>。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> newStar = cc.instantiate(<span class="keyword">this</span>.starPrefab); <span class="comment">// 根据预置资源生成 node 节点</span></span><br><span class="line">newStar.getComponent(<span class="string">"Star"</span>).init(<span class="keyword">this</span>, <span class="keyword">this</span>.game); <span class="comment">// 根据 node 节点的脚本组件进行初始化</span></span><br><span class="line"><span class="keyword">this</span>.node.addChild(newStar); <span class="comment">// 加到当前 node 节点的下面</span></span><br></pre></td></tr></table></figure>
<p>对于画面中移动的 <code>node</code> ，当移出画面后我们可以进行重复利用，这里可以引入 <code>NodePool</code> ，出画面后加入节点池，需要的时候再从里边拿。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.pool = <span class="keyword">new</span> cc.NodePool();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 放入节点池</span></span><br><span class="line"><span class="keyword">this</span>.pool.put(star);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 需要的时候从里边拿</span></span><br><span class="line"><span class="keyword">const</span> newStar = <span class="keyword">this</span>.pool.get();</span><br></pre></td></tr></table></figure>
<p>通过节点池我们可以节省内存的开销。</p>
<h1 id="Node-和-组件"><a href="#Node-和-组件" class="headerlink" title="Node 和 组件"></a>Node 和 组件</h1><p><code>Node</code> 和组件的关系最开始的时候有点懵逼，慢慢的调试后大致了解了，下边讲一下我的理解。</p>
<p>在定义 <code>properties</code> 的时候我们需要定义对象的属性，它可以是 <code>type: cc.Node,</code> ，也可以是自带的组件类型 <code>type: cc.Label</code> ，也可以是我们定义的脚本组件类型，可以先将编写的脚本代码引入 <code>const Bird = require(&quot;Bird&quot;);</code> ，然后将其作为一种类型  <code>type: Bird</code>。</p>
<p>一个节点属于复合类型，它既是本身的 <code>cc.Node</code> 类型，如果添加了相应的组件，它也是相应的组件类型。</p>
<p>以下图为例，它既是 <code>cc.Node</code> 类型，也是 <code>cc.Label</code> 类型，还是 <code>test</code> 类型。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20221113174535576.png" alt="image-20221113174535576"></p>
<p>下边以动态修改 <code>Label</code> 的值，讲一下 <code>Node</code> 和组件之间的关系。</p>
<p>首先新建一个 <code>canvas</code> 的脚本组件 <code>game.js</code> ，将该组件挂载到 <code>canvas</code> 节点中。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20221113182122357.png" alt="image-20221113182122357"></p>
<p><code>game.js</code> 中添加一个 <code>label</code> 属性，类型为 <code>cc.Node</code> 。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">cc.Class(&#123;</span><br><span class="line">    extends: cc.Component,</span><br><span class="line">    properties: &#123;</span><br><span class="line">        label: &#123;</span><br><span class="line">            <span class="keyword">default</span>: <span class="literal">null</span>,</span><br><span class="line">            type: cc.Node,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    onLoad() &#123;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    start() &#123;&#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// update (dt) &#123;&#125;,</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>选中 <code>Canvas</code> 节点，将 <code>FirstLabel</code> 节点拖动添加的属性中。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20221113174930670.png" alt="image-20221113174930670"></p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20221113175131343.png" alt="image-20221113175131343"></p>
<p>虽然 <code>firstLabel</code> 属于三种类型，但因为我们定义的类型是 <code>cc.Node</code> ，因此拿到的是一个 <code>Node</code> 对象，我们打印看一下。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">onLoad() &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.label);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20221113175207934.png" alt="image-20221113175207934"></p>
<p>如果想要在运行的时候改变当前节点的位置，调用 <code>setPositon</code> 即可。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">cc.Class(&#123;</span><br><span class="line">    extends: cc.Component,</span><br><span class="line"></span><br><span class="line">    properties: &#123;</span><br><span class="line">        label: &#123;</span><br><span class="line">            <span class="keyword">default</span>: <span class="literal">null</span>,</span><br><span class="line">            type: cc.Node,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    onLoad() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.label);</span><br><span class="line">        <span class="keyword">this</span>.label.setPosition(cc.v2(<span class="number">0</span>, <span class="number">-200</span>));</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    start() &#123;&#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// update (dt) &#123;&#125;,</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>如果我们想改变组件的文案，我们需要先通过 <code>getComponent</code> 拿到 <code>Label</code> 组件的实例对象，然后更新 <code>string</code> 属性即可。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">onLoad() &#123;</span><br><span class="line">       <span class="built_in">console</span>.log(<span class="keyword">this</span>.label);</span><br><span class="line">       <span class="keyword">this</span>.label.setPosition(cc.v2(<span class="number">0</span>, <span class="number">-200</span>));</span><br><span class="line">       <span class="keyword">this</span>.label.getComponent(cc.Label).string = <span class="string">"我改变了"</span>;</span><br><span class="line">   &#125;,</span><br></pre></td></tr></table></figure>
<p>初值设置的是 <code>设置文案</code>。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20221113175852560.png" alt="image-20221113175852560"></p>
<p>运行起来会发现是我们在 <code>onLoad</code> 中设置的值。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20221113180058709.png" alt="image-20221113180058709"></p>
<p>当然，我们也可以在开始的时候将组件类型设置为 <code>cc.Label</code> ，这样我们开始拿到的就是 <code>Label</code> 实例对象，就不需要再通过 <code>getComponent</code>  方法了。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">cc.Class(&#123;</span><br><span class="line">    extends: cc.Component,</span><br><span class="line"></span><br><span class="line">    properties: &#123;</span><br><span class="line">        label: &#123;</span><br><span class="line">            <span class="keyword">default</span>: <span class="literal">null</span>,</span><br><span class="line">            type: cc.Label,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    onLoad() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.label);</span><br><span class="line">        <span class="keyword">this</span>.label.string = <span class="string">"我改变了"</span>;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    start() &#123;&#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// update (dt) &#123;&#125;,</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>改为代码后我们重新拖动，更新下属性的值。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20221113180445655.png" alt="image-20221113180445655"></p>
<p>那么如果我们想改变 <code>node</code> 位置该怎么办呢？</p>
<p>获得的组件实例中有一个 <code>node</code> 属性，我们可以直接拿到当前的 <code>node</code> 对象实例，然后继续调用 <code>setPosition</code> 就可以了。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">cc.Class(&#123;</span><br><span class="line">    extends: cc.Component,</span><br><span class="line"></span><br><span class="line">    properties: &#123;</span><br><span class="line">        label: &#123;</span><br><span class="line">            <span class="keyword">default</span>: <span class="literal">null</span>,</span><br><span class="line">            type: cc.Label,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    onLoad() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.label);</span><br><span class="line">        <span class="keyword">this</span>.label.string = <span class="string">"我改变了"</span>;</span><br><span class="line">        <span class="keyword">this</span>.label.node.setPosition(cc.v2(<span class="number">0</span>, <span class="number">-300</span>));</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    start() &#123;&#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// update (dt) &#123;&#125;,</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>为了更深刻的理解，我们再绕一下，实现通过当前节点的 <code>Node</code> ，调用自定义脚本组件的方法，来动态修改 <code>Label</code> 的值。</p>
<p>首先编写自定义组件的代码，提供一个方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// test.js</span></span><br><span class="line">cc.Class(&#123;</span><br><span class="line">    extends: cc.Component,</span><br><span class="line"></span><br><span class="line">    properties: &#123;&#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// LIFE-CYCLE CALLBACKS:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// onLoad () &#123;&#125;,</span></span><br><span class="line"></span><br><span class="line">    start() &#123;&#125;,</span><br><span class="line"></span><br><span class="line">    setLabelValue() &#123;</span><br><span class="line">        <span class="keyword">this</span>.getComponent(cc.Label).string = <span class="string">"我被 test 改变了"</span>;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// update (dt) &#123;&#125;,</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>当前脚本添加到相应的属性中。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20221113181717593.png" alt="image-20221113181717593"></p>
<p>接着我们只需要在 <code>canvas</code> 的脚本组件中调用 <code>getComponent(&quot;test&quot;)</code> 拿到上边的脚本对象实例，调用 <code>setLabelValue</code> 方法即可。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">cc.Class(&#123;</span><br><span class="line">    extends: cc.Component,</span><br><span class="line"></span><br><span class="line">    properties: &#123;</span><br><span class="line">        label: &#123;</span><br><span class="line">            <span class="keyword">default</span>: <span class="literal">null</span>,</span><br><span class="line">            type: cc.Node,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    onLoad() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.label);</span><br><span class="line">        <span class="keyword">this</span>.label.getComponent(<span class="string">"test"</span>).setLabelValue();</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    start() &#123;&#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// update (dt) &#123;&#125;,</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>小结一下，使用对象的时候，我们需要明确当前是 <code>cc.Node</code> 类型，还是某种组件类型，每一个种类型都有自己的方法。</p>
<p>如果想从 <code>cc.Node</code> 对象中拿到相应的组件，调用 <code>getComponent</code> 方法即可。</p>
<p>如果想从组件中拿到 <code>cc.Node</code> 类型，不管是自带的组件，还是自定义的脚本组件，可以直接通过 <code>this.node</code> 拿到当前的 <code>node</code> 实例对象。</p>
<h1 id="显示隐藏"><a href="#显示隐藏" class="headerlink" title="显示隐藏"></a>显示隐藏</h1><p>最直接就是设置 <code>node</code> 对象的 <code>active</code> 属性即可。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">cc.Class(&#123;</span><br><span class="line">    extends: cc.Component,</span><br><span class="line"></span><br><span class="line">    properties: &#123;</span><br><span class="line">        label: &#123;</span><br><span class="line">            <span class="keyword">default</span>: <span class="literal">null</span>,</span><br><span class="line">            type: cc.Node,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    onLoad() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.label);</span><br><span class="line">        <span class="keyword">this</span>.label.active = <span class="literal">false</span>;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    start() &#123;&#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// update (dt) &#123;&#125;,</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>上边的方式类似于 <code>vue</code> 的 <code>v-if</code> ，会直接把节点销毁掉。</p>
<p>如果想保留节点，实现 <code>vue</code> 的 <code>v-show</code> ，我们可以设置 <code>opacity</code> 透明度属性弯道实现，只需要将值设置为 <code>0</code> 实现隐藏。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">cc.Class(&#123;</span><br><span class="line">    extends: cc.Component,</span><br><span class="line"></span><br><span class="line">    properties: &#123;</span><br><span class="line">        label: &#123;</span><br><span class="line">            <span class="keyword">default</span>: <span class="literal">null</span>,</span><br><span class="line">            type: cc.Node,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    onLoad() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.label);</span><br><span class="line">        <span class="keyword">this</span>.label.opacity = <span class="number">0</span>;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    start() &#123;&#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// update (dt) &#123;&#125;,</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>这里需要注意的是，虽然通过透明度可以隐藏组件，但是此时的点击事件还是存在的，需要处理一下。</p>
<h1 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h1><p>编译的时候我们选择微信小游戏，填写 <code>appId</code> ，编译完成后通过微信开发者工具导入 <code>build</code> 出来的文件就可以了。</p>
<p>菜单 -&gt;项目 -&gt; 构建发布：</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20221113183809044.png" alt="image-20221113183809044"></p>
<p>我们可以设置初始场景、设备方向等。</p>
<p>需要注意的是，微信主包有 <code>2M</code> 大小的限制，如果预览的微信小游戏遇到超包的情况，我们可以将没用到的组件在编译设置中去除。</p>
<p>菜单 -&gt; 项目 -&gt; 项目设置 -&gt; 模块设置：</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20221113184029466.png" alt="image-20221113184029466"></p>
<h1 id="微信小游戏排行榜"><a href="#微信小游戏排行榜" class="headerlink" title="微信小游戏排行榜"></a>微信小游戏排行榜</h1><p>微信为了防止好友的关系链泄露，提出了一个子域的概念，在子域中可以调用 <code>wx.getFriendCloudStorage</code> 方法拿到好友数据。</p>
<p>为了实现排行榜，我们需要再创建一个空项目，实现排行榜的显示逻辑，和正常项目开发是一致的。</p>
<p>添加 <code>message</code> 回调函数，供主项目调用。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">private onMessage(msg: any) &#123;</span><br><span class="line">        <span class="keyword">switch</span> (msg.event) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"setScore"</span>:</span><br><span class="line">                <span class="keyword">this</span>.setScore(msg.score);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"showRank"</span>:</span><br><span class="line">                <span class="keyword">this</span>.getRank();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>编译的时候需要选择 <code>微信小游戏开发数据域</code>，名称自己定义，我写的是<code>wxSubContext</code>，路径选择之前项目编译的文件夹。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20221113184927037.png" alt="image-20221113184927037"></p>
<p>然后在主项目中我们需要添加一个空节点，并且添加一个 <code>SubContextView</code> 组件，将这个节点作为排行榜项目的容器节点。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20221113184416196.png" alt="image-20221113184416196"></p>
<p>如果想要调用排行榜的方法通过 <code>postMessage</code> 。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">wx.postMessage(&#123;</span><br><span class="line">  event: <span class="string">"showRank"</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>编译的时候指定一下排行榜项目之前设置的名称 <code>wxSubContext</code>    。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20221113184628466.png" alt="image-20221113184628466"></p>
<p>上边就是实现排行榜的整个逻辑了，详细的可以参考 <a href="https://developers.weixin.qq.com/community/minigame/article/doc/00028ce147c270ac955a031b057813" target="_blank" rel="noopener">这篇文章</a>，相应的 <a href="https://gitee.com/ichenpipi/cocos-case-wxsubcontext" target="_blank" rel="noopener">代码仓库</a>，<code>clone</code> 下来可以直接用。这个项目的 <code>cocos</code> 编辑器是 <code>2.3.3</code> ，如果升级到 <code>2.4.5</code> 会出现无法滚动的情况，谨慎升级。</p>
<p>需要注意的一点是，当子项目的容器节点显示的时候，子项目才开始初始化，这就会导致主项目 <code>postMessage</code> 先调用，排行榜项目的<code>onMessage</code> 后调用，导致错失了消息。</p>
<p>解决这个问题的话，我们的显藏可以通过设置透明度的方式实现，让子项目提前加载。</p>
<h1 id="发布到微信"><a href="#发布到微信" class="headerlink" title="发布到微信"></a>发布到微信</h1><p>个人开发者提交的资料基本不用啥，有个自审资料网上找个模版在 <code>word</code> 填完截图就可以。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/%E8%87%AA%E6%9F%A5.jpg" alt="自查"></p>
<p>但提交审核的道路比较坎坷，除了慢以外，甚至被拒了两次。</p>
<p>第一次周日提交，周三还没有结果在微信社区平台催了一下审核，下午收到结果审核失败。</p>
<blockquote>
<p>小游戏涉嫌侵权，请参考示例截图标记点全面自查游戏内容，请于下个版本有效整改或举证，在微信公众平台-版本管理-提交审核-授权书/版本更新说明提交，包括但不限于游戏内容说明及对应截图、原创证明或有效授权书 主体信用分扣除-3分</p>
</blockquote>
<p>原因是一开始是准备仿 <code>Flappy bird</code> 的，直接用了相应的素材，就被驳回了，客服截图如下：</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20221119103132834.png" alt="image-20221119103132834"></p>
<p>第二次周三早上提交，周五晚上收到结果，又被拒了，这次就无法理解了：</p>
<blockquote>
<p>开发者你好，经平台审核，你的小游戏《挑战1024》未通过审核，具体原因如下：</p>
<p>1、小游戏需具有完整的游戏玩法，不能为简单的素材堆砌</p>
</blockquote>
<p>网上搜了搜，可能是因为我的游戏只有一个界面，点击就开始了。据说加个菜单就会好，于是又改了改，不同场景也换了换背景。</p>
<p>第三次周六晚上提交，周二晚上收到结果，同上次，审核被拒，原因为「小游戏需具有完整的游戏玩法，不能为简单的素材堆砌」。</p>
<p>已经不知道该怎么改了，周三早上点了审核失败那里的提交反馈，写了一段感人肺腑的话（* 的内容这里就省略了）。</p>
<blockquote>
<p>本游戏为益智类游戏，需要分数吃到 1024 才能获得胜利。<br>游戏场景分为菜单、第一关、最终关、好友排行，不同关卡也会通过背景色来区分。<br>菜单提供了分享好友、查看排行的功能。<br>第一关主要是为了体验游戏流程，星星的分数都是×2，因此只需要不停的吃分即可取得胜利。<br>最终关需要通过自己的策略，除了躲避陨石，还需要吃到星星上不同的分数，才能获得胜利。<br>游戏过程中，星星的速度、分数的出现会实时通过当前的状态进行变化，主要涉及到一些算法，也是本游戏的核心。<br>虽然素材都是星星，但结合算法上边的分数会一直变化，同时星星和陨石的比例也在不断变化。<br>除此之外玩家还需要躲避陨石，同时设定了策略，如果******。<br>在用户挑战失败的时候，增设了复活功能、重开功能。<br>游戏名为「挑战1024」，属于*******，来最终取得胜利。<br>希望审核大大可以再看一下，设计整个流程和算法确实花了很多心思。</p>
</blockquote>
<p>周四早上显示反馈成功。</p>
<blockquote>
<p>开发者你好，感谢你向小游戏审核团队反馈异议，经平台评估：我们已更正你的历史审核记录，如有需求，可重新提交审核</p>
</blockquote>
<p>周五早上进行了重新提审，周二下午终于通过了。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20221130083045661.png" alt="image-20221130083045661"></p>
<p>小游戏相比于小程序审核严格好多，前前后后花了有半个多月了，简单游戏竟然不让上线，这是我想不通的。</p>
<h1 id="总"><a href="#总" class="headerlink" title="总"></a>总</h1><p>整体就是这样了，整个 <code>cocos</code> 项目可以理解为一棵树，整个树就是一个场景，根节点是一个包含 <code>Canvas</code> 组件的 <code>node</code> ，接下来可以创建自己的 <code>node</code> ，每个 <code>node</code> 又可以挂载想要的自带组件和用户脚本组件。</p>
<p>希望对大家有帮助，如果错误也欢迎指出，也可以体验一下我这次开发的小游戏，哈哈：</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/gh_dc7db84e6a20_258.jpg" alt="gh_dc7db84e6a20_258"></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>cocos</tag>
      </tags>
  </entry>
  <entry>
    <title>存在主义哲学--人生的意义</title>
    <url>/2023/12/10/%E5%AD%98%E5%9C%A8%E4%B8%BB%E4%B9%89%E5%93%B2%E5%AD%A6-%E4%BA%BA%E7%94%9F%E7%9A%84%E6%84%8F%E4%B9%89/</url>
    <content><![CDATA[<blockquote>
<p>主要是摘抄了一些有感触的点，非原创观点</p>
</blockquote>
<h1 id="存在主义哲学"><a href="#存在主义哲学" class="headerlink" title="存在主义哲学"></a>存在主义哲学</h1><p><strong>存在主义</strong>指的是一种生命能意识到自己的存在，并且以“我”为中心去探索、追求、解决和优化其生命一切的哲学思想。</p>
<h1 id="发展历史"><a href="#发展历史" class="headerlink" title="发展历史"></a>发展历史</h1><h2 id="克尔凯郭尔：非此即彼"><a href="#克尔凯郭尔：非此即彼" class="headerlink" title="克尔凯郭尔：非此即彼"></a>克尔凯郭尔：非此即彼</h2><p><strong>索伦·奥贝·克尔凯郭尔</strong>（又译<strong>齐克果</strong>、<strong>祈克果</strong>、<strong>吉尔凯高尔</strong>等；1813年5月5日—1855年11月11日）是丹麦神学家、哲学家、诗人、社会批评家及宗教作家，一般被视为存在主义的创立者。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/S%C3%B8ren_Kierkegaard_(1813-1855)_-_(cropped).jpg" alt="undefined" style="zoom:50%;"></p>
<p>“传统哲学”用最通俗的语言来概括，就是三个字：“盖高楼”。从柏拉图开始，亚里士多德、阿奎那、笛卡尔、洛克、康德、黑格尔，都是体系的建造者，他们都是从一些最基本的概念出发，比如实体、理念、经验、上帝，建造一个自己的哲学大厦，而且几乎每个哲学家都要先把之前哲学家的大厦推倒，从地基开始重建。这是一种上帝视角的哲学，好像世界上发生的一切都尽在哲学家的掌握之中。</p>
<p>在克尔凯郭尔之前都是这种从抽象观念出发的哲学，他反对传统哲学从概念到概念的逻辑推演，开始主张要把个人的生存处境当作哲学的核心问题。</p>
<p>升学填报志愿的时候，上了这个学校就不能上那个，此后的人生就会大不相同；恋爱的时候选择伴侣，和这个人结婚就必须放弃那个人，此后的人生也会大不相同。甚至你今天晚上选择赴哪个饭局，遇到了哪个新朋友，得知了哪个新消息，此后的人生也可能会大不相同。每往前走一步，世界都会逼着我们做出大大小小的选择，而所有的选择都会给我们带来或多或少的焦虑和恐惧。</p>
<p>克尔凯郭尔把这种情绪说成是“面对自由的眩晕”，就好像我们站在悬崖旁边往下看的时候的那种感觉。这种面对自由选择的眩晕感，让他用<strong>「非此即彼」</strong>做了自己最有名的一本书的书名。</p>
<p>克尔凯郭尔心中的真理，不是传统哲学里那些放之四海皆准的“客观真理”，而是对于他自己而言的“主观的真理”，那就是面对人生的每一个境遇，忠于自己的内心，勇敢地做出“非此即彼”的选择。</p>
<h2 id="陀思妥耶夫斯基：二二得四"><a href="#陀思妥耶夫斯基：二二得四" class="headerlink" title="陀思妥耶夫斯基：二二得四"></a>陀思妥耶夫斯基：二二得四</h2><p><strong>费奥多尔·米哈伊洛维奇·陀思妥耶夫斯基</strong>1821年11月11日—1881年2月9日，俄国作家。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/200px-Dostoevsky.jpg" alt="img"></p>
<p>陀思妥耶夫斯基常常描绘那些生活在社会底层却都有着不同常人想法的角色，这使得他得以19世纪暗潮汹涌的俄国社会中小人物的心理。部分学者认为他是存在主义的奠基人，如美国哲学家瓦尔特·阿诺德·考夫曼、就曾认为《地下室手记》是第一本存在主义的书。</p>
<blockquote>
<p>世界是复杂的，并不像二二得四那样简单，因此，某些人“仅仅根据科学和理性的原则”拟定的“幸福体系”，只是空想，是实现不了的。人也是复杂的，不是单凭教育就能改造好的，因为人有个性，有自己的独立人格，每个人的行为都受自己的“自由意愿”支配，有时还有逆反心理，明知不好，对自己不利，却故意为之，以此显示自己的独立存在。</p>
</blockquote>
<h2 id="尼采：上帝死了"><a href="#尼采：上帝死了" class="headerlink" title="尼采：上帝死了"></a>尼采：上帝死了</h2><p><strong>弗里德里希·威廉·尼采</strong>，1844年10月15日—1900年8月25日），是出身德国的哲学家、诗人、文化批评家、古典语言学家和作曲家。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/220px-Nietzsche187a.jpg" alt="img"></p>
<p>尼采所提出的“上帝已死”成了存在主义的中心论点：如果没有上帝，那么就没有必然的价值或道德律；如果没有必然的价值或道德律，人类精神处境的真相是一片虚无，那人面对虚无该怎么办呢？</p>
<p>从苏格拉底之后，理论家们发明出各种各样的概念、真理、信仰，说在现实世界之上，还有一些更伟大的意义。于是，这些理论掩盖了人生虚无的真相，让人们陷入了幻觉，在幻觉中获得虚假的安慰。这就是理论虚假。</p>
<p>尼采提到了教士们发明的五种麻醉人们的手段。</p>
<p>第一种是催眠，教士们用教义的灌输，用冥想、苦修之类的训练，降低人们对生命意志的要求，让人们进入一种类似冬眠状态，追求一种无我的精神解脱。</p>
<p>第二种手段是机械性的活动，什么时间做礼拜，什么时间忏悔，什么时间劳动，都是规定好的。这些按照明确的指示进行的活动，可以分散人们的注意力，甚至填满人们有限的意识。</p>
<p>第三种是给人微小的快乐，基督教里有各种慈善和表彰，这些都能给人带来微小的快乐，减轻人们的痛苦。</p>
<p>第四种手段，是群体认同，就是让人结成一些小的团体，形成一种相互依赖的关系，这样人们就能把不满的情绪释放在小团体之中，而不会对整体造成威胁。</p>
<p>第五种，是让人的某些感情得到过度的发展，从而压制其他的情感。教士们特别注重培养信徒们在上帝面前的罪责意识，有了这种意识信徒就会心甘情愿地接受苦修和责罚，主动放弃自己的权力意志</p>
<p>现代的生活也完全可以上边的对应，那如果一切都是虚假的呢？</p>
<p>我们赤裸裸地站到了虚无面前，人生没有意义，理论都是虚假，安慰都是幻觉——到这个地步，人已经一无所有了，那么他还拥有什么呢？尼采的回答是，还有一样东西，就是人的生命力。</p>
<p>尼采认为，面对无意义的世界和无意义的生命，人应该立足于现实，直面无意义的荒谬，以强大的生命本能舞蹈，在生命活动中创造出价值。用尼采的话说，就是“成为你自己”。这样一来，虚无不再会让你沮丧和绝望，反倒会给你最广阔的创造自我意义的空间，虚无让人变成了积极的创造者，这就是积极的虚无主义。</p>
<p>「与怪兽搏斗的人要注意，不要让自己也变成怪兽。当你长久凝望深渊，深渊也会回望你。」</p>
<p>虚无主义就是这样一只怪兽，一道深渊，要活出自己的生命意义，我们就需要与这只怪兽搏斗，就需要凝望虚无的深渊。同时我们也要随时提防自己被虚无吞没，丧失对生命真正意义的追求。</p>
<h2 id="胡塞尔：回到事情本身"><a href="#胡塞尔：回到事情本身" class="headerlink" title="胡塞尔：回到事情本身"></a>胡塞尔：回到事情本身</h2><p><strong>埃德蒙·古斯塔夫·阿尔布雷希特·胡塞尔</strong>（1859年4月8日—1938年4月26日）是一名德国哲学家，现象学创立者。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/220px-Edmund_Husserl_1910s.jpg" alt="img"></p>
<p>现代哲学中的现象学可以简单地理解为一种从主观体验上理解意识和世界的学派。 举个例子：</p>
<p>关于桌上的一杯鸡尾酒：</p>
<p>柏拉图会说：在这个酒杯，那个酒杯，所有的、每一个酒杯之下，存在一个“绝对的、完美的、平均的”酒杯。而我们所能看见的、摸到的每一个酒杯，都分享了那个“绝对酒杯”的一部分特征和属性。正是因为在我们面前的那个酒杯也分享了“绝对酒杯”的属性，它才会被我们认知为是一个酒杯。</p>
<p>对于纯粹的经验主义者（譬如休谟和洛克）来说，“表象”是显示在脑海里的感官信息。杏子鸡尾酒酒杯这一物体的“现象”就是我们的视觉接收到的倒锥形形状、透明颜色、光滑材质，加之嗅觉感知到的杏子酒气味、加之手指能触摸到的冰凉的玻璃质感……等等感官信息的集合。</p>
<p>而对于纯粹的理性主义者（譬如笛卡尔）来说，一个人看见酒杯后出现在其脑海里的“酒杯”这个念头，是理性思考得出的酒杯的抽象“理念（idea）”。</p>
<p>胡塞尔会说：只有我看到，触摸到，感受到的酒杯是真实的。</p>
<p>他也并不会止步于此。他会详细描述和归类对鸡尾酒杯的所有体验：视觉、听觉、想象、思考、情绪感受、期望、欲望，以及行动（拿酒杯，喝酒等等）。</p>
<p>胡塞尔确实不是存在主义者，但是在胡塞尔的弟子们的看来，现象学就不仅仅是一个解决传统问题的新工具了，而是开辟出了一大片新的哲学问题。「回到事情本身」这句口号宣告了一种新的真实性，它要求我们不带偏见，尊重意识之中出现的所有现象。哪怕是传统哲学里面完全不屑于讨论的现象，比如无聊、焦虑、忧愁、绝望这些情绪，再比如恶心、幻觉、抑郁、濒死这些体验。</p>
<p>这些情绪和体验都是人在实际的生存境遇里会遇到的问题。但是在传统哲学看来，这些问题太主观、太表面、太非理性，完全入不了他们的法眼。而现象学就可以去关注这些意识对象，因为正确地描述现象，就是认识到了事物的本质。于是，胡塞尔的很多弟子，不约而同地用现象学的方法去观察和描述这些生存现象，存在主义就从现象学里面脱胎而出了。</p>
<h2 id="海德格尔：向死而生"><a href="#海德格尔：向死而生" class="headerlink" title="海德格尔：向死而生"></a>海德格尔：向死而生</h2><p>马丁·海德格尔（1889年9月26日—1976年5月26日），德国哲学家，海德格尔对于存在、时间、技术、语言和真理等问题有着独特的见解。代表作有《存在与时间》、《形而上学导论》等。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/220px-Heidegger.jpeg" alt="220px-Heidegger"></p>
<p>在海德格尔看来，传统哲学的错误就在于把人类生存里面那些“当下上手”的东西，当做了“现成在手”的东西去理解，这样就脱离了和遗忘了人的实际生活。海德格尔的存在主义，就是要把哲学转向人的实际生存。</p>
<blockquote>
<p>当我们拿起锤子钉钉子的时候，不会注意到它的形状、颜色、重量、用途，而是拿起来直接开始钉，这种状态被海德格尔称为“当下上手”（Zuhandenheit）的状态。除非是钉着钉着锤子不好用了，比如说锤头松了，或者太重了我敲不动了，这个时候，我才会停下手上的活儿，仔细端详这个锤子。海德格尔把这种状态叫做“现成在手”（Vorhandenheit）状态。</p>
<p>当然，如果人的全部生活都像用锤子钉钉子一样自然、顺畅，我们也就不需要哲学了。在我们的实际生活中也会遇到很多从“当下上手”到“现成在手”的转变，比如一次工作的变动、一次人际关系的危机、一次亲人的去世，这个时候，正常的生活中断了，原本明显的意义消失了，就好像我们不得不停下敲击，去注视手中的锤子。</p>
</blockquote>
<p>我们被抛入世界之后，大多数时候就是过着“常人”的生活，那是一种没有经过思考，“别人”做什么我也做什么的状态。这种缺乏反思、忘记自我的“常人”状态，就是海德格尔说的“沉沦”状态</p>
<blockquote>
<p>我们小的时候，看到别的小朋友要什么，自己也想要；大学生选专业的时候，很多时候是因为父母和老师的希望；毕业工作了，看到别人买LV，自己也想买；当了爹妈，看到别人的孩子上奥数，自己也想给孩子报名；出去旅游，别人拍照打卡的地方，也是我们一定要去留下脚步和照片的地方。</p>
<p>我们大多数的时候，都是这样自觉不自觉地受着别人的影响。而且，我们还经常说不出影响我们的这个“别人”到底是谁，肯定不只是自己的父母、自己身边的一两个同事或者朋友，我们周围还有数量巨大的图书、广告、自媒体，等等，这些东西都在或明或暗地影响着我们。</p>
<p>所有的这些人和东西，组成了一张无形的大网，把我们罩在里面。</p>
</blockquote>
<p>和“沉沦”相反的生存状态叫做“本真”（Eingentlichkeit），就是活出真正属于自己的生活。</p>
<p>即便是突然有一个时刻，意识到了自己过的只是“常人”的生活，开始扪心自问，想要做出改变。但是下一刻，可能还是会不由自主地回到那种沉沦的状态，或许只是因为那样更容易，或许只是因为被各种因素掣肘不得不那样。偶尔的灵光乍现还是远远不够的。</p>
<p>比这种“灵光乍现”更能给人当头棒喝的东西，那就是死亡，特别是直面自己终有一死的事实。它更能够迫使我们认识到自己的沉沦状态，甚至能够帮助我们超越沉沦状态</p>
<blockquote>
<p>当随口说出“人终有一死”，或者“我终有一死”时，死亡是一个外在于我的东西，一个和我无关的“死亡事件”。就像是谈论一个名人的死，或者谈论第二次世界大战中战死的人数。</p>
<p>我们当然也会悲伤，也会感慨一句：“哎，人生无常，要珍惜生命。”这么说的时候，我们当然也“知道”自己终有一死，但是这种“知道”是一种“闲谈”意义上的、人云亦云的“知道”。</p>
<p>说完了“人生无常，要珍惜生命”，我们还是会该干什么干什么，不管是从心态上还是从做的事情上，都和之前别无二致。这些时候，我们其实是把自己排除在死亡之外的，就像萨洛扬说的“总以为自己不会死”，至少认为死亡离自己很远。这种非常外在的对于死亡的意识，并不会帮助我们进入本真状态。</p>
<p>那什么样的死亡意识可以做到呢？就是真切地与自己将有一死面对面，清楚地认识到，我的死亡是一件最本己的事情，是任何人都不能替代的事情。我只能“亲自去死”，而且我还不知道死亡什么时候会来。</p>
</blockquote>
<p>“本真的生活”，在一个意义上确实比沉沦的生活要美好，因为我们毕竟过上了属于自己的生活，而不陷入常人的大网不能自拔。</p>
<p>但是从另一方面讲，如果我们把“美好”理解成确定的、容易的、快乐的，那“本真的生活”很可能一点都不美好，甚至是这些词的反面，它充满了不确定性、困难和痛苦。“本真的生活”没有给我带来任何内容上的确定性，因为海德格尔去掉了良知、本真这些词的道德意味，只强调人的个体性，所以他不会也不能告诉你具体应该去做什么</p>
<p>“向死存在是向着一种可能性的存在，也就是向着此在本身别具一格的可能性的存在。”活出“别具一格的可能性”，就是我们本真的生活。</p>
<h2 id="雅斯贝尔斯：边界性境遇"><a href="#雅斯贝尔斯：边界性境遇" class="headerlink" title="雅斯贝尔斯：边界性境遇"></a>雅斯贝尔斯：边界性境遇</h2><p>卡尔·特奥多·雅士培（1883年2月23日—1969年2月26日），旧译雅斯培，德国哲学家和精神病学家，基督教存在主义的代表，1967年他成为瑞士公民。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/235px-Karl_Jaspers_1910.jpg" alt=""></p>
<p>“边界性境遇”指的是必然与我们的存在联系在一起的，界定了我们作为人的生存的境遇，特别是那些威胁到我们日常生活的安全感和稳定感的境遇。</p>
<blockquote>
<p>比如说，我们的生活中一定会经历痛苦，一定会和其他人处于矛盾和斗争之中，一定将会死去。雅斯贝尔斯用了一个很有趣的比喻来描述边界性境遇，他说：“我们看不到边界性境遇背后还有什么别的东西，它们就像一堵墙，我们撞在上面，对它们无能为力……”</p>
</blockquote>
<p>那面对这些边界性境遇，我们要怎么应对呢？有两种办法，一种是闭目塞听的态度，假装没有看到它们，这就类似海德格尔说的此在的“沉沦状态”。另一种就是瞪大眼睛直视边界性境遇，把它们当作契机去转变自己的日常生活，通过三重超越实现本真的生存。</p>
<p>第一重超越：在边界性境遇中感受到，自己不仅仅是一个存在着的“东西”或者“物品”，过着没有反思、现成给定的生活，而是真切地感受到“我这个独特的个体”的生存。</p>
<p>在这之后，边界性境遇可以带来第二重超越，从认识上把握这些边界，把它们看作人生的各种非此即彼的可能性。当在死亡的战栗中感受到了自己的生存，开始掂量死亡给我保留了哪些可能性，哪些才是对我的生存真正重要的东西，哪些是可有可无的东西。</p>
<p>再下一步，第三重的超越，就是我基于之前的感受和认识，从我的自由出发，做出实际的行动来明确自己的生存。这样我就从可能性的生存超越到了现实性的生存。</p>
<p>“生存就意味着超越，只要我真的是我自己，我就确信，我并非由于我而是我自己。”</p>
<h2 id="阿伦特：政治性的存在"><a href="#阿伦特：政治性的存在" class="headerlink" title="阿伦特：政治性的存在"></a>阿伦特：政治性的存在</h2><p>汉娜·阿伦特（1906年10月14日—1975年12月4日），是政治哲学家、作家和纳粹大屠杀幸存者。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/Hannah_Arendt_1975_(cropped" alt="">.jpg)</p>
<p>最有名的观点应该是“恶的平庸性”或者“平庸之恶”了。</p>
<p>《艾希曼在耶路撒冷》，里面详细地记录了以色列审判纳粹高官艾希曼的过程。阿伦特发现，参与了屠杀很多犹太人的艾希曼，其实并不是人们想象中的恶魔，而仅仅是一个不会自己思考，平庸到可笑的官僚。</p>
<p>阿伦特很有洞见地看到了死亡的反面：人的出生。表面看来，我们是赤裸裸、孤零零地来到这个世界上的，就像我们终将孤身一人离开那样。但是如果我们深想一步就会发现，绝非如此。</p>
<blockquote>
<p>出生这个事件，恰恰显示了个人与共同体密不可分。我是由父母生出来的，我的父母又来自他们的父母，我生活在某个家庭、某个社区、某个国家之中。如果说死亡是把个人与他人扯开、孤立起来的境遇，那出生就是一种把个体与他人牢牢绑定在一起的境遇。</p>
<p>阿伦特还更进一步，认为死亡其实也不像海德格尔说的那么孤独，也带有很强的共同体色彩。阿伦特不否认，我们自己的选择和行动塑造了每个人生存的意义。但是一个人完整的人生意义，只有在他死后才能盖棺定论。而这个盖棺定论的工作，必然只能交给他所属的共同体去完成。</p>
<p>死亡让一个人把自己完整的生命意义交给他所属的共同体，让共同体对他形成一个前后连贯的“叙事”或者说“故事”。至于这个共同体是一个家庭、一个工作单位，还是一个国家，或者整个世界，取决于一个人生前做了哪些事，但是不管怎样，给人生赋予完整意义的工作都属于一个共同体</p>
</blockquote>
<p>有某个共同体，就意味着一群人生活在一个共同的境遇之中；同时也就意味着有复数的、多元的人。共同的境遇和彼此不同的个体，正是我们“政治性”的核心特征。那些塑造了“自我”的、我自由选择的行动，看似是我这个个体进行的选择，其实都是和我所处的共同体，以及我的政治性密不可分的。</p>
<h2 id="萨特：存在先于本质"><a href="#萨特：存在先于本质" class="headerlink" title="萨特：存在先于本质"></a>萨特：存在先于本质</h2><p>让-保罗·夏尔·艾马尔·萨特（1905年6月21日—1980年4月15日），是法国哲学家、剧作家、小说家、编剧、政治活动家、传记作家和文学评论家。他是存在主义]和现象学哲学的关键人物之一，主要哲学著作《存在与虚无》。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/250px-Sartre_1967_crop.jpg" alt=""></p>
<p><strong>存在就是虚无</strong></p>
<p>萨特把物的那种被决定的、不能改变的存在，叫做“自在”的存在。把人的这种“有待形成”的、不固定的存在，叫做“自为”的存在，就是自己“为自己”而存在。你可以记住这一点：自在的存在有一个固定不变的本质；而自为的存在没有固定的本质，它的本质是可以变化的</p>
<blockquote>
<p>萨特坐在花神咖啡馆里，他在思考这样一个问题：人的存在和物的存在究竟有什么区别？我们都知道，人是有意识的，而物品没有。但有意识的人和没有意识的物，究竟不同在哪里呢？</p>
<p>萨特看着眼前忙碌的服务员，又看着自己面前的杯子，他问自己：我们说这个服务员是一个服务员，和说这个杯子是一个杯子，这两种说法是同一回事吗？他感到大不相同！</p>
<p>说这个服务员是一个服务员，并不是注定的。如果这个人下班了，甚至辞职了，他就不再是一个服务员了。一个人是什么，这是可以改变的。</p>
<p>但杯子就不同了，杯子不能改变自己，它被判定为一个杯子，别无选择地就是一个杯子，就算你把它打碎了，它仍然是一个碎掉的杯子，而且杯子甚至不能自己选择把自己打碎。</p>
<p>你可能发现了，其中关键的区别，就在于有没有意识和意识支配的行动。为什么人的存在可以改变？因为人并没有什么预定的本质，人的存在原本就是虚无，它的本质是“有待形成”的。</p>
</blockquote>
<p><strong>存在先于本质</strong></p>
<p>哲学里，至少从柏拉图开始，主流的观点都是本质先于存在，比如说人的本质就是理性，圆形的本质就是与某个点距离相等的点的集合。这些带有普遍性的本质，在某个具体的人和具体的圆形存在之前就已经确定了，所以说“本质先于存在”。</p>
<p>但是在萨特看来，只有自在的存在，也就是那些没有意识的东西，才是“本质先于存在”的。一棵树、一张桌子，在它们存在之前，本质就已经确定了，一棵柳树苗就会长成柳树，一张桌子就是供人写字、吃饭的家具。</p>
<p>但是对于人这种“自为的存在”来讲，就完全不同了。因为人从根本上讲就是虚无，而虚无就是没有任何本质。一个婴儿在出生的时候得以存在，但是他这个存在是没有本质的，我们不能说他是好是坏，是工程师还是公务员，甚至不能说他是不是理性的。</p>
<p>因为在拥有存在的时候，他没有任何的确定性，他的一生充满了开放性，有无穷多的可能性，只有通过他日后有意识的选择，才能获得某种稳定的性质，拥有某种类似“本质”的东西。</p>
<p><strong>虚无奠定自由</strong></p>
<p>因为存在先于本质，那么就没有什么预先给定的东西把我们固定住、束缚住，就意味着我们永远可以超越“过去的本质”、“现在的本质”去追求“未来”。</p>
<p>换句话说，人永远不会“是”什么，而是永远都正在“成为”什么。在这个意义上，人是自由的，甚至人就是自由本身。还是那个比喻，站到舞台上，你可以扮演任何角色，每一个角色都不是你本人，但正因为如此，你的行动才是自由，因为你没有被任何一个角色所定义。</p>
<p>人是被判定为自由的，自由就是人的命运。人唯一的不自由就是不能摆脱自由。不论你是多么渺小，不论你受到多少外在的限制，在根本上你都是自由的。</p>
<p><strong>自由的负重</strong></p>
<p>自由选择必定会带来后果，那么谁来为这个后果负责？萨特说，没有任何别人可以承担这份责任，你做出了选择，你就要独自承担责任。但“承担责任”究竟是什么意思呢？为什么只能独自承担，难道这份责任就不能跟别人来分担吗？萨特的回答是：不能。</p>
<blockquote>
<p>每个人的生活都充满大大小小的选择，比如毕业之后继续深造还是直接工作，选择什么职业，要不要结婚，要不要孩子……所有的选择都会有后果，我们就生活在自己选择的后果之中，这些后果也在塑造我们自己。所以我们会在乎选择的好坏对错，谁都不想过后悔的人生，我们都会希望自己的选择有一个坚实可靠的依据</p>
<p>任何信条、任何主义，或者别人的建议，都不能成为你的借口。萨特认为，这些说辞都只是自欺欺人，是用来逃避自己的责任。开个夸张点的玩笑，假如你和你的伴侣分手了，朋友来安慰你，会说“这不是你的错”。但萨特可能就会说，这就是你的错，是你自己选择的人，是你自己谈的恋爱，这个结果当然是你的责任。</p>
<p>独自承担责任是什么意思？就是自己做自己的立法者，为自己做出的每一个选择承担绝对的责任。你看，从“存在就是虚无”，萨特推出了人的绝对自由，而从绝对的自由，萨特又推出了绝对的责任。这是一份非常沉重的负担</p>
</blockquote>
<p><strong>他人即地狱</strong></p>
<p>萨特认为，人总是要维护自己的主体性，所以人与人之间一定会为了争夺主体性而斗争。每个人在和他人相处的时候，都想把他人变成客体，以此来维护自己的主体性和自由。</p>
<blockquote>
<p>萨特举了一个例子，说你走在街上，迎面过来一个陌生人，用眼光上下打量你，你会觉得很不舒服。为什么你会不舒服？萨特解释说，别人注视你时，他下意识地就把你变成了他观察的客体。在这个注视中，他是主导者，你只是被他观看的物品；他要实现自己的主体性，代价就是把你的主体性给否定掉，把你物化。所以，你会下意识地回避对方的注视。但你也可以反抗，他看你一眼，你就回看他一眼，用你的注视把他变成客体。</p>
<p>在萨特看来，人和人的交往就是这样，总是在为了争夺主体性而斗争。即使是在爱情当中也不例外。萨特说，我们想象中的浪漫爱情是一个骗局，那种不分彼此、合二为一的爱情体验，只不过是刚刚开始时候的幻觉罢了。爱情同样充满了为争夺主体性而展开的冲突和斗争，到最后要么是受虐，在羞耻中享受快乐，要么是施虐，在内疚中感到愉悦。</p>
</blockquote>
<p>萨特的一个个人生选择，都体现出他对自由和本真生活的向往，他用自己的一生在践行存在主义哲学，自由选择和积极行动。</p>
<p>萨特是一位世界闻名的哲学家，但他从来没有在任何高等学府正式任教。他虽然撰写了很多严肃的哲学论文和著作，却也花了很多精力去写小说和戏剧，甚至获得了诺贝尔文学奖。</p>
<p>但更令人印象深刻的是，获奖之后，他公开拒绝领奖，理由是他“不接受任何来自官方的荣誉”。这引起了很大的争议，有人说这其实是萨特爱慕虚荣的表现，觉得获得诺贝尔奖还不够突出，还要成为第一个主动拒绝诺奖的人。</p>
<p>萨特和波伏瓦在上大学时相识，彼此志趣相投，很快就陷入了恋情。但他们都认为人是绝对自由的，不必受到习俗制度的约束，于是签订了一个奇特的爱情契约，作为彼此的伴侣，但永不结婚。他们的爱情是开放的，不排除与其他人发生亲密关系，但彼此坦诚，不会隐瞒。而且这个契约的有效期只有两年，每过两年双方就要确认一次，是否还继续这段伴侣关系。</p>
<p>这个契约足足延续了 51 年，从萨特 24 岁直到 75 岁去世，两人真的做到了相伴一生。</p>
<p>萨特不仅是哲学家和作家，还是一位社会政治活动家，甚至被哲学家福柯称为“法国最后的公共知识分子”。1968 年，法国又发生了史称“五月风暴”的抗议活动。萨特和波伏瓦发表声明支持这场运动，并且走上街头散发传单，直接参与抗议活动，结果被警察逮捕了。</p>
<p>但当时的法国总统戴高乐迅速介入干预，要求警方放人。戴高乐说，“我们能把伏尔泰关进监狱吗？不能，所以赶快把萨特放了吧”。萨特当时在法国的影响力，甚至足以与启蒙时代的伏尔泰相比。</p>
<h2 id="波伏娃：模糊性的道德"><a href="#波伏娃：模糊性的道德" class="headerlink" title="波伏娃：模糊性的道德"></a>波伏娃：模糊性的道德</h2><p>西蒙·露西·埃内斯蒂娜·玛丽·贝特朗·德·波伏娃（1908年1月9日—1986年4月14日），或称西蒙娜·德·波伏娃、西蒙娜·波伏娃，是出身法国的作家、存在主义哲学家、政治活动家、女权主义者、社会主义者和社会理论家。她的思想与学说等，对女权主义式存在主义和女权主义理论都产生了重大影响，以《第二性》闻名。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/220px-Simone_de_Beauvoir2.png" alt="img"></p>
<p>在波伏瓦看来，人从来不是孤独的存在，不能孤立地行使自由。像萨特那样强调一个人绝对的自由是没有意义的。我们总是和他人联系在一起，所以我们的自由总是有限的，与他人相互制约的。我们不能行使绝对的自由，而只能行使在某个情境中的相对自由。</p>
<p>一个人如果试图对抗他人，把他人当作“地狱”，他就会失去自由，也失去自我。相比萨特，波伏瓦更愿意强调人际关系中积极的方面，她认为我们之所以能够成为现在的自己，是因为出现在我们生命中的其他人，有父母、老师、朋友、爱人，还有陌生人，自我是不断被他人塑造的，始终处于一种“生成”的过程之中。</p>
<p>从人的这种总是与他人互动的生存状态，波伏瓦提出了一个很有意思的概念，叫做“模糊性的道德”，或者也可以翻译成“模棱两可的道德”。在波伏瓦看来，人类在本质上就带有模棱两可性或者模糊性。</p>
<p>我们既是主体也是客体，既是意识也是物质，既是理性也是非理性，既是自由的也是不自由的，既相互分离又相互依赖。但是传统哲学总是想要打压这种模糊性，把人概括成“理性的动物”、“思维的主体”，或者“物质的构成”</p>
<h2 id="加缪：荒诞"><a href="#加缪：荒诞" class="headerlink" title="加缪：荒诞"></a>加缪：荒诞</h2><p>阿尔贝·加缪（1913年11月7日—1960年1月4日），生于法属阿尔及利亚蒙多维城，法国小说家、哲学家、戏剧家、评论家，其于 1957 年获得诺贝尔文学奖。加缪位于20世纪最有名的和最重要的的法国作家之列。代表作有《局外人》、《西西弗神话》、《鼠疫》等。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/Albert_Camus,_gagnant_de_prix_Nobel,_portrait_en_buste,_pose%CC%81_au_bureau,_faisant_face_a%CC%80_gauche,_cigarette_de_tabagisme.jpg" alt="Albert_Camus,_gagnant_de_prix_Nobel,_portrait_en_buste,_posé_au_bureau,_faisant_face_à_gauche,_cigarette_de_tabagisme" style="zoom:50%;"></p>
<p>“自杀是唯一真正严肃的哲学问题。判断人生值不值得活，这本身就是在回答哲学的根本问题。”</p>
<p>《西西弗神话》中描写了希腊神话里的一位国王西西弗，因为欺骗诸神，被罚在地狱里推着一块大石头上山。每当他费尽力气把石头推上山，石头又会重新滑落，西西弗只能从头再来。你还能想象比这更悲催的人生吗？这个神话故事最好地展现了加缪讨论自杀问题的背景：如果人生注定是没有意义的、荒谬的，我们是不是应该选择自杀呢？</p>
<p>人一定要追问意义，但是又注定不可能得到期待的答案，这就是荒谬感的根源，荒谬就是人与世界之间必然的联系。</p>
<p>如果世界注定没有意义，如果人生注定荒谬，我们能怎么办呢？面对“我们是否应该自杀？”的问题，加缪又能给出什么样答案呢？他给出的答案是：坦然接受这个世界的荒谬性，用真诚的心过好当下的生活，感受生活中的美好，这就是我们能够赋予生活的全部意义。</p>
<p>自杀绝对不是对抗荒谬的办法，因为自杀意味着承认荒谬的胜利，那不是对抗，而是投降。2唯有直面荒谬，珍惜当下，才能创造出此时此地的意义，哪怕这种意义只是闻到了海风的气息，只是又推着石头前进了一寸。</p>
<p>“登上顶峰的斗争本身足以充实人的心灵。应该设想，西西弗斯是幸福的。”</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/resize,w_1920,m_lfit.png" alt="img"></p>
<p>假如恶魔在某一天或某个夜晚闯入你最难耐的孤寂中，并对你说：‘你现在和过去的生活，就是你今后的生活。它将周而复始，不断重复，绝无新意，你生活中的每种痛苦、欢乐、思想、叹息，以及一切大大小小、无可言说的事情都会在你身上重现，会以同样的顺序降临’。”（尼采：《快乐的科学》341）如果你听到这话瘫软在地，那你过的就不是本真的生活；如果你面对这个恶魔说，我从来没有听过比这更神圣的话。你会把你所有的人生选择重新选一遍，那么你过的就是本真的生活，忠于自己的生活。</p>
<h1 id="相关资料"><a href="#相关资料" class="headerlink" title="相关资料"></a>相关资料</h1><p>得到：刘玮·存在主义哲学20讲</p>
<p>得到：刘擎·西方现代思想</p>
<p>《哲学家们都干了些什么》</p>
<p>《存在主义咖啡馆：自由、存在和杏子鸡尾酒 》</p>
<p>《苏菲的世界》</p>
<p>chatGPT</p>
<p>维基百科</p>
]]></content>
      <categories>
        <category>随想</category>
      </categories>
      <tags>
        <tag>随想</tag>
      </tags>
  </entry>
  <entry>
    <title>Webpack 打包 commonjs 和 esmodule 动态引入模块的产物对比</title>
    <url>/2022/05/03/Webpack%E6%89%93%E5%8C%85commonjs%E5%92%8Cesmodule%E5%8A%A8%E6%80%81%E5%BC%95%E5%85%A5%E6%A8%A1%E5%9D%97%E7%9A%84%E4%BA%A7%E7%89%A9%E5%AF%B9%E6%AF%94/</url>
    <content><![CDATA[<p>接 <a href="https://zhuanlan.zhihu.com/p/508808789" target="_blank" rel="noopener">Webpack 打包 commonjs 和 esmodule 模块的产物对比</a> 我们来继续分析。这篇文章主要来看一下动态引入，允许我们引入的模块名包含变量。</p>
<p>⚠️超长代码预警，需要几个小时的时间去啃，但读懂以后应该会很开心。</p>
<h1 id="commonjs"><a href="#commonjs" class="headerlink" title="commonjs"></a>commonjs</h1><p>新建一个 <code>json</code> 文件夹，包含几个 <code>json</code> 文件，和一个 <code>add</code> 方法。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220503173159890.png" alt=""></p>
<p>其中 <code>add.js</code> 就是一个简单的加法模块。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// src/commonjs/json/add.js</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"add开始引入"</span>);</span><br><span class="line"><span class="built_in">module</span>.exports.add = <span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><code>test1.json</code> 和 <code>test2.json</code> 都是一个 <code>json</code> 对象。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// src/commonjs/json/test1.json</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"data"</span>: <span class="string">"test1"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// src/commonjs/json/test2.json</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"data"</span>: <span class="string">"test2"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后我们提供一个 <code>hello</code> 模块，可以根据用户传入的参数，来引入不同的 <code>json</code> 文件返回给用户。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params">filename</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> data = <span class="built_in">require</span>(<span class="string">"./json/"</span> + filename + <span class="string">".json"</span>);</span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>需要注意的上边 <code>require</code> 传入的模块名一定不能是一个纯变量，比如 <code>require(filename)</code> ，不然 <code>webpack</code> 就不知道该打包哪些文件了。</p>
<p>上边我们限定了目录位置 <code>./json</code> 和文件名后缀 <code>.json</code> 。这样 <code>Webpack</code> 就会把 <code>json</code> 文件夹下所有的 <code>.json</code> 文件进行打包。</p>
<p>主函数 <code>index.js</code> 来调用 <code>hello</code> 方法。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">"commonjs开始执行"</span>);</span><br><span class="line"><span class="keyword">const</span> hello = <span class="built_in">require</span>(<span class="string">"./hello"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(hello(<span class="string">"test1"</span>));</span><br></pre></td></tr></table></figure>
<p>可以看一下控制台是正常输出：</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220503173736921.png" alt="image-20220503173736921"></p>
<p>看一下打包产物：</p>
<p>主要看一下保存所有模块的 <code>__webpack_modules__</code> 变量，其它的可以看一下上篇 <a href="https://zhuanlan.zhihu.com/p/508808789" target="_blank" rel="noopener">Webpack 打包 commonjs 和 esmodule 模块的产物对比</a> 。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> __webpack_modules__ = &#123;</span><br><span class="line">        <span class="string">"./src/commonjs/hello.js"</span>: (</span><br><span class="line">            <span class="built_in">module</span>,</span><br><span class="line">            __unused_webpack_exports,</span><br><span class="line">            __webpack_require__</span><br><span class="line">        ) =&gt; &#123;</span><br><span class="line">            <span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params">filename</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">const</span> data = __webpack_require__(</span><br><span class="line">                    <span class="string">"./src/commonjs/json sync recursive ^\\.\\/.*\\.json$"</span></span><br><span class="line">                )(<span class="string">"./"</span> + filename + <span class="string">".json"</span>);</span><br><span class="line">                <span class="keyword">return</span> data;</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        <span class="string">"./src/commonjs/json sync recursive ^\\.\\/.*\\.json$"</span>: (</span><br><span class="line">            <span class="built_in">module</span>,</span><br><span class="line">            __unused_webpack_exports,</span><br><span class="line">            __webpack_require__</span><br><span class="line">        ) =&gt; &#123;</span><br><span class="line">            ...</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        <span class="string">"./src/commonjs/json/test1.json"</span>: <span class="function">(<span class="params"><span class="built_in">module</span></span>) =&gt;</span> &#123;</span><br><span class="line"><span class="meta">            "use strict"</span>;</span><br><span class="line">            <span class="built_in">module</span>.exports = &#123; <span class="attr">data</span>: <span class="string">"test1"</span> &#125;;</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        <span class="string">"./src/commonjs/json/test2.json"</span>: <span class="function">(<span class="params"><span class="built_in">module</span></span>) =&gt;</span> &#123;</span><br><span class="line"><span class="meta">            "use strict"</span>;</span><br><span class="line">            <span class="built_in">module</span>.exports = &#123; <span class="attr">data</span>: <span class="string">"test2"</span> &#125;;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure>
<p>主要是四个模块 <code>./src/commonjs/hello.js</code> 、<code>./src/commonjs/json sync recursive ^\\.\\/.*\\.json$</code>、<code>./src/commonjs/json/test1.json</code> 和 <code>./src/commonjs/json/test2.json</code> 。</p>
<p><code>./src/commonjs/json/test1.json</code> 和 <code>./src/commonjs/json/test2.json</code> 这两个模块就是把我们的 <code>json</code> 文件用 <code>module.exports</code> 来导出。</p>
<p><code>./src/commonjs/hello.js</code> 模块中先调用 <code>./src/commonjs/json sync recursive ^\\.\\/.*\\.json$</code> 模块的方法，再进行传参。</p>
<p>此外将我们原本的 <code>&quot;./json/&quot; + filename + &quot;.json&quot;</code> 参数转为了 <code>&quot;./&quot; + filename + &quot;.json&quot;</code> 。</p>
<p>重点来看下 <code>./src/commonjs/json sync recursive ^\\.\\/.*\\.json$</code> ，详见下边的注释</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">"./src/commonjs/json sync recursive ^\\.\\/.*\\.json$"</span>: (</span><br><span class="line">            <span class="built_in">module</span>,</span><br><span class="line">            __unused_webpack_exports,</span><br><span class="line">            __webpack_require__</span><br><span class="line">        ) =&gt; &#123;</span><br><span class="line">  					<span class="comment">// 映射 key</span></span><br><span class="line">            <span class="keyword">var</span> map = &#123;</span><br><span class="line">                <span class="string">"./test1.json"</span>: <span class="string">"./src/commonjs/json/test1.json"</span>,</span><br><span class="line">                <span class="string">"./test2.json"</span>: <span class="string">"./src/commonjs/json/test2.json"</span>,</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">function</span> <span class="title">webpackContext</span>(<span class="params">req</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">var</span> id = webpackContextResolve(req); <span class="comment">// 得到映射后的 key</span></span><br><span class="line">                <span class="keyword">return</span> __webpack_require__(id); <span class="comment">// 通过 __webpack_require__ 导入文件</span></span><br><span class="line">            &#125;</span><br><span class="line">  					<span class="comment">// 返回映射后的 key</span></span><br><span class="line">            <span class="function"><span class="keyword">function</span> <span class="title">webpackContextResolve</span>(<span class="params">req</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (!__webpack_require__.o(map, req)) &#123;</span><br><span class="line">                    <span class="keyword">var</span> e = <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"Cannot find module '"</span> + req + <span class="string">"'"</span>);</span><br><span class="line">                    e.code = <span class="string">"MODULE_NOT_FOUND"</span>;</span><br><span class="line">                    <span class="keyword">throw</span> e;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> map[req];</span><br><span class="line">            &#125;</span><br><span class="line">            webpackContext.keys = <span class="function"><span class="keyword">function</span> <span class="title">webpackContextKeys</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">Object</span>.keys(map);</span><br><span class="line">            &#125;;</span><br><span class="line">            webpackContext.resolve = webpackContextResolve;</span><br><span class="line">            <span class="built_in">module</span>.exports = webpackContext;</span><br><span class="line">            webpackContext.id =</span><br><span class="line">                <span class="string">"./src/commonjs/json sync recursive ^\\.\\/.*\\.json$"</span>;</span><br><span class="line">        &#125;,</span><br></pre></td></tr></table></figure>
<p><code>commonjs</code> 模块整体上就是把匹配 <code>&quot;./json/&quot; + filename + &quot;.json&quot;</code> 这个格式的文件 <code>test1.json</code> 和 <code>test2.json</code> 都进行了打包，并且略过了 <code>add.js</code> 文件。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220503173159890.png" alt=""></p>
<p>可以再看下整体的产物：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> __webpack_modules__ = &#123;</span><br><span class="line">        <span class="string">"./src/commonjs/hello.js"</span>: (</span><br><span class="line">            <span class="built_in">module</span>,</span><br><span class="line">            __unused_webpack_exports,</span><br><span class="line">            __webpack_require__</span><br><span class="line">        ) =&gt; &#123;</span><br><span class="line">            <span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params">filename</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">const</span> data = __webpack_require__(</span><br><span class="line">                    <span class="string">"./src/commonjs/json sync recursive ^\\.\\/.*\\.json$"</span></span><br><span class="line">                )(<span class="string">"./"</span> + filename + <span class="string">".json"</span>);</span><br><span class="line">                <span class="keyword">return</span> data;</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        <span class="string">"./src/commonjs/json sync recursive ^\\.\\/.*\\.json$"</span>: (</span><br><span class="line">            <span class="built_in">module</span>,</span><br><span class="line">            __unused_webpack_exports,</span><br><span class="line">            __webpack_require__</span><br><span class="line">        ) =&gt; &#123;</span><br><span class="line">            <span class="keyword">var</span> map = &#123;</span><br><span class="line">                <span class="string">"./test1.json"</span>: <span class="string">"./src/commonjs/json/test1.json"</span>,</span><br><span class="line">                <span class="string">"./test2.json"</span>: <span class="string">"./src/commonjs/json/test2.json"</span>,</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">function</span> <span class="title">webpackContext</span>(<span class="params">req</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">var</span> id = webpackContextResolve(req);</span><br><span class="line">                <span class="keyword">return</span> __webpack_require__(id);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="function"><span class="keyword">function</span> <span class="title">webpackContextResolve</span>(<span class="params">req</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (!__webpack_require__.o(map, req)) &#123;</span><br><span class="line">                    <span class="keyword">var</span> e = <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"Cannot find module '"</span> + req + <span class="string">"'"</span>);</span><br><span class="line">                    e.code = <span class="string">"MODULE_NOT_FOUND"</span>;</span><br><span class="line">                    <span class="keyword">throw</span> e;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> map[req];</span><br><span class="line">            &#125;</span><br><span class="line">            webpackContext.keys = <span class="function"><span class="keyword">function</span> <span class="title">webpackContextKeys</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">Object</span>.keys(map);</span><br><span class="line">            &#125;;</span><br><span class="line">            webpackContext.resolve = webpackContextResolve;</span><br><span class="line">            <span class="built_in">module</span>.exports = webpackContext;</span><br><span class="line">            webpackContext.id =</span><br><span class="line">                <span class="string">"./src/commonjs/json sync recursive ^\\.\\/.*\\.json$"</span>;</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        <span class="string">"./src/commonjs/json/test1.json"</span>: <span class="function">(<span class="params"><span class="built_in">module</span></span>) =&gt;</span> &#123;</span><br><span class="line"><span class="meta">            "use strict"</span>;</span><br><span class="line">            <span class="built_in">module</span>.exports = &#123; <span class="attr">data</span>: <span class="string">"test1"</span> &#125;;</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        <span class="string">"./src/commonjs/json/test2.json"</span>: <span class="function">(<span class="params"><span class="built_in">module</span></span>) =&gt;</span> &#123;</span><br><span class="line"><span class="meta">            "use strict"</span>;</span><br><span class="line">            <span class="built_in">module</span>.exports = &#123; <span class="attr">data</span>: <span class="string">"test2"</span> &#125;;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> __webpack_module_cache__ = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__webpack_require__</span>(<span class="params">moduleId</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> cachedModule = __webpack_module_cache__[moduleId];</span><br><span class="line">        <span class="keyword">if</span> (cachedModule !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> cachedModule.exports;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> <span class="built_in">module</span> = (__webpack_module_cache__[moduleId] = &#123;</span><br><span class="line">            exports: &#123;&#125;,</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        __webpack_modules__[moduleId](</span><br><span class="line">            <span class="built_in">module</span>,</span><br><span class="line">            <span class="built_in">module</span>.exports,</span><br><span class="line">            __webpack_require__</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">module</span>.exports;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    (<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        __webpack_require__.o = <span class="function">(<span class="params">obj, prop</span>) =&gt;</span></span><br><span class="line">            <span class="built_in">Object</span>.prototype.hasOwnProperty.call(obj, prop);</span><br><span class="line">    &#125;)();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> __webpack_exports__ = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    (<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"commonjs开始执行"</span>);</span><br><span class="line">        <span class="keyword">const</span> hello = __webpack_require__(<span class="string">"./src/commonjs/hello.js"</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(hello(<span class="string">"test1"</span>));</span><br><span class="line">    &#125;)();</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>
<h1 id="esmodule"><a href="#esmodule" class="headerlink" title="esmodule"></a>esmodule</h1><p><code>esmodule</code> 提供了 <code>import()</code> 方法进行动态引入，会返回一个 <code>Promise</code> 对象。</p>
<blockquote>
<p>The <a href="https://whatwg.github.io/loader/" target="_blank" rel="noopener">ES2015 Loader spec</a> defines <code>import()</code> as method to load ES2015 modules dynamically on runtime.</p>
</blockquote>
<p>我们来用 <code>esmodule</code> 的形式改写下上边 <code>commonjs</code> 的代码。</p>
<p>首先是 <code>hello.js</code> 。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// src/esmodule/hello.js</span></span><br><span class="line"><span class="keyword">const</span> hello = <span class="function">(<span class="params">filename</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">import</span>(<span class="string">"./json/"</span> + filename + <span class="string">".json"</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> hello;</span><br></pre></td></tr></table></figure>
<p>然后是 <code>index.js</code> </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// src/esmodule/index.js</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"esmodule开始执行"</span>);</span><br><span class="line"><span class="keyword">import</span> hello <span class="keyword">from</span> <span class="string">"./hello"</span>;</span><br><span class="line">hello(<span class="string">"test1"</span>).then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>不同于 <code>commonjs</code> ，除了输出 <code>test1.json</code> 原本的数据，还多了一个 <code>default</code> 属性。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220503191214724.png" alt="image-20220503191214724"></p>
<p>打包文件中除了 <code>main.js</code> ，把两个 <code>json</code> 文件也单拎了出来，如下图：</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220503214502914.png" alt="image-20220503214502914"></p>
<p>打包产物中除了  <a href="https://zhuanlan.zhihu.com/p/508808789" target="_blank" rel="noopener">Webpack 打包 commonjs 和 esmodule 模块的产物对比</a>  介绍的 <code>d、o、r</code> 方法，又多了很多奇奇怪怪的方法。</p>
<p><code>m</code> 属性指向 <code>__webpack_modules__</code>，保存了导出的所有模块。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> __webpack_modules__ = &#123;</span><br><span class="line">        <span class="string">"./src/esmodule/hello.js"</span>: (</span><br><span class="line">            __unused_webpack_module,</span><br><span class="line">            __webpack_exports__,</span><br><span class="line">            __webpack_require__</span><br><span class="line">        ) =&gt; &#123;</span><br><span class="line"><span class="meta">            "use strict"</span>;</span><br><span class="line">            __webpack_require__.r(__webpack_exports__);</span><br><span class="line">            __webpack_require__.d(__webpack_exports__, &#123;</span><br><span class="line">                <span class="keyword">default</span>: <span class="function"><span class="params">()</span> =&gt;</span> __WEBPACK_DEFAULT_EXPORT__,</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">const</span> hello = <span class="function">(<span class="params">filename</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> __webpack_require__(</span><br><span class="line">                    <span class="string">"./src/esmodule/json lazy recursive ^\\.\\/.*\\.json$"</span></span><br><span class="line">                )(<span class="string">"./"</span> + filename + <span class="string">".json"</span>);</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="keyword">const</span> __WEBPACK_DEFAULT_EXPORT__ = hello;</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        <span class="string">"./src/esmodule/json lazy recursive ^\\.\\/.*\\.json$"</span>: (</span><br><span class="line">            <span class="built_in">module</span>,</span><br><span class="line">            __unused_webpack_exports,</span><br><span class="line">            __webpack_require__</span><br><span class="line">        ) =&gt; &#123;</span><br><span class="line">            ...</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">__webpack_require__.m = __webpack_modules__;</span><br></pre></td></tr></table></figure>
<p><code>g</code> 属性指向全局对象，浏览器中的话就会返回 <code>window</code> 。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">__webpack_require__.g = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">           <span class="keyword">if</span> (<span class="keyword">typeof</span> globalThis === <span class="string">"object"</span>) <span class="keyword">return</span> globalThis; <span class="comment">// 这句就直接返回</span></span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               <span class="keyword">return</span> <span class="keyword">this</span> || <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">"return this"</span>)();</span><br><span class="line">           &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">               <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">window</span> === <span class="string">"object"</span>) <span class="keyword">return</span> <span class="built_in">window</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;)();</span><br></pre></td></tr></table></figure>
<p><code>u</code> 方法是将 <code>chunkId</code> 末尾加上 <code>.main.js</code> ，主要是为了和打包出来的文件名吻合。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">__webpack_require__.u = <span class="function">(<span class="params">chunkId</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">""</span> + chunkId + <span class="string">".main.js"</span>;</span><br><span class="line">        &#125;;</span><br></pre></td></tr></table></figure>
<p><code>p</code> 属性主要是为了拿到域名，开始执行的时候浏览器会加载我们的 <code>main.js</code> 。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220503214502914.png" alt="image-20220503214502914"></p>
<p>当前请求的地址是 <code>http://127.0.0.1:5501/dist/main.js</code> ，通过这个地址，我们要拿到 <code>http://127.0.0.1:5501/dist/</code> ，详见下边的代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> scriptUrl;</span><br><span class="line">        <span class="keyword">if</span> (__webpack_require__.g.importScripts) <span class="comment">// 这里不执行</span></span><br><span class="line">            scriptUrl = __webpack_require__.g.location + <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">var</span> <span class="built_in">document</span> = __webpack_require__.g.document; <span class="comment">// 这里拿到 window.document</span></span><br><span class="line">        <span class="keyword">if</span> (!scriptUrl &amp;&amp; <span class="built_in">document</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">document</span>.currentScript) scriptUrl = <span class="built_in">document</span>.currentScript.src; <span class="comment">// 这里得到 http://127.0.0.1:5501/dist/main.js</span></span><br><span class="line">            <span class="keyword">if</span> (!scriptUrl) &#123; <span class="comment">// 这里不执行</span></span><br><span class="line">                <span class="keyword">var</span> scripts = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"script"</span>);</span><br><span class="line">                <span class="keyword">if</span> (scripts.length) scriptUrl = scripts[scripts.length - <span class="number">1</span>].src;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!scriptUrl)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(</span><br><span class="line">                <span class="string">"Automatic publicPath is not supported in this browser"</span></span><br><span class="line">            );</span><br><span class="line">        scriptUrl = scriptUrl</span><br><span class="line">            .replace(<span class="regexp">/#.*$/</span>, <span class="string">""</span>)</span><br><span class="line">            .replace(<span class="regexp">/\?.*$/</span>, <span class="string">""</span>)</span><br><span class="line">            .replace(<span class="regexp">/\/[^\/]+$/</span>, <span class="string">"/"</span>); <span class="comment">// 这里得到 http://127.0.0.1:5501/dist/</span></span><br><span class="line">        __webpack_require__.p = scriptUrl;</span><br></pre></td></tr></table></figure>
<p>接下来会比较复杂，会分成 <code>8</code> 个步骤来看一下 <code>esmodule</code> 异步加载的主流程。整体思路是通过 <code>JSONP</code> 的形式发送请求加载我们的 <code>JSON</code> 文件，同时把整个的加载过程会包装为一个 <code>Promise</code> ，加载完成将内容保存到 <code>__webpack_modules__</code> 中。</p>
<ol>
<li><p><code>hello</code> 方法通过 <code>__webpack_require__</code> 调用 <code>&quot;./src/esmodule/json lazy recursive ^\\.\\/.*\\.json$&quot;</code> 方法。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">"./src/esmodule/hello.js"</span>: (</span><br><span class="line">            __unused_webpack_module,</span><br><span class="line">            __webpack_exports__,</span><br><span class="line">            __webpack_require__</span><br><span class="line">        ) =&gt; &#123;</span><br><span class="line"><span class="meta">            "use strict"</span>;</span><br><span class="line">            __webpack_require__.r(__webpack_exports__);</span><br><span class="line">            __webpack_require__.d(__webpack_exports__, &#123;</span><br><span class="line">                <span class="keyword">default</span>: <span class="function"><span class="params">()</span> =&gt;</span> __WEBPACK_DEFAULT_EXPORT__,</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">const</span> hello = <span class="function">(<span class="params">filename</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> __webpack_require__(</span><br><span class="line">                    <span class="string">"./src/esmodule/json lazy recursive ^\\.\\/.*\\.json$"</span></span><br><span class="line">                )(<span class="string">"./"</span> + filename + <span class="string">".json"</span>);</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="keyword">const</span> __WEBPACK_DEFAULT_EXPORT__ = hello;</span><br><span class="line">        &#125;,</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>./src/esmodule/json lazy recursive ^\\.\\/.*\\.json$</code> 方法导出的是 <code>webpackAsyncContext</code> 方法。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">"./src/esmodule/json lazy recursive ^\\.\\/.*\\.json$"</span>: (</span><br><span class="line">            <span class="built_in">module</span>,</span><br><span class="line">            __unused_webpack_exports,</span><br><span class="line">            __webpack_require__</span><br><span class="line">        ) =&gt; &#123;</span><br><span class="line">            <span class="keyword">var</span> map = &#123;</span><br><span class="line">                <span class="string">"./test1.json"</span>: [</span><br><span class="line">                    <span class="string">"./src/esmodule/json/test1.json"</span>,</span><br><span class="line">                    <span class="string">"src_esmodule_json_test1_json"</span>,</span><br><span class="line">                ],</span><br><span class="line">                <span class="string">"./test2.json"</span>: [</span><br><span class="line">                    <span class="string">"./src/esmodule/json/test2.json"</span>,</span><br><span class="line">                    <span class="string">"src_esmodule_json_test2_json"</span>,</span><br><span class="line">                ],</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="function"><span class="keyword">function</span> <span class="title">webpackAsyncContext</span>(<span class="params">req</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (!__webpack_require__.o(map, req)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                        <span class="keyword">var</span> e = <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"Cannot find module '"</span> + req + <span class="string">"'"</span>);</span><br><span class="line">                        e.code = <span class="string">"MODULE_NOT_FOUND"</span>;</span><br><span class="line">                        <span class="keyword">throw</span> e;</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">debugger</span>;</span><br><span class="line">                <span class="keyword">var</span> ids = map[req],</span><br><span class="line">                    id = ids[<span class="number">0</span>];</span><br><span class="line">                <span class="keyword">return</span> __webpack_require__.e(ids[<span class="number">1</span>]).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> __webpack_require__.t(id, <span class="number">3</span> | <span class="number">16</span>);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">            webpackAsyncContext.keys = <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">Object</span>.keys(map);</span><br><span class="line">            webpackAsyncContext.id =</span><br><span class="line">                <span class="string">"./src/esmodule/json lazy recursive ^\\.\\/.*\\.json$"</span>;</span><br><span class="line">            <span class="built_in">module</span>.exports = webpackAsyncContext;</span><br></pre></td></tr></table></figure>
<p><code>map</code> 中定义了 <code>json</code> 文件的映射，<code>&quot;./src/esmodule/json/test1.json&quot;</code> 是原本的文件位置，会作为模块的 <code>key</code> ，<code>&quot;src_esmodule_json_test1_json&quot;</code> 对应打包后的文件名。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220503214502914.png" alt="image-20220503214502914"></p>
<p>看一下 <code>webpackAsyncContext</code> 方法，先调用 <code>__webpack_require__.e</code> 方法来发送请求加载文件并且返回一个  <code>Promise</code> 。<code>__webpack_require__.t</code> 方法会将返回的数据加一个 <code>default</code> 属性，也就是开头说的一个不同之处。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">webpackAsyncContext</span>(<span class="params">req</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!__webpack_require__.o(map, req)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">var</span> e = <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"Cannot find module '"</span> + req + <span class="string">"'"</span>);</span><br><span class="line">      e.code = <span class="string">"MODULE_NOT_FOUND"</span>;</span><br><span class="line">      <span class="keyword">throw</span> e;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> ids = map[req], <span class="comment">// ids[0] 是原本路径, id[1] 是打包后的文件名字</span></span><br><span class="line">      id = ids[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">return</span> __webpack_require__.e(ids[<span class="number">1</span>]).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> __webpack_require__.t(id, <span class="number">3</span> | <span class="number">16</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>详细看一下 <code>__webpack_require__.e</code> 方法，传入了一个参数 <code>chunkId</code> ，这里就是 <code>src_esmodule_json_test1_json</code> 。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">__webpack_require__.e = <span class="function">(<span class="params">chunkId</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.all(</span><br><span class="line">    <span class="built_in">Object</span>.keys(__webpack_require__.f).reduce(<span class="function">(<span class="params">promises, key</span>) =&gt;</span> &#123;</span><br><span class="line">      __webpack_require__.f[key](chunkId, promises);</span><br><span class="line">      <span class="keyword">return</span> promises;</span><br><span class="line">    &#125;, [])</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>主要就是执行 <code>f</code> 对象的所有属性函数，<code>f</code> 的属性函数会在传入的 <code>promises</code> 中添加当前的 <code>Promise</code> 。</p>
<p>看一下 <code>f</code> 对象的属性函数的定义。</p>
</li>
<li><p><code>f</code> 对象当前场景下只有一个 <code>j</code> 属性函数，所以在上边的 <code>e</code> 方法中会执行下边的 <code>j</code> 函数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> installedChunks = &#123; <span class="comment">// 记录加载的文件</span></span><br><span class="line">  main: <span class="number">0</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">__webpack_require__.f.j = <span class="function">(<span class="params">chunkId, promises</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> installedChunkData = __webpack_require__.o( <span class="comment">// o 方法是判断当前对象是否有该属性</span></span><br><span class="line">    installedChunks,</span><br><span class="line">    chunkId</span><br><span class="line">  )</span><br><span class="line">  ? installedChunks[chunkId]</span><br><span class="line">  : <span class="literal">undefined</span>;</span><br><span class="line">  <span class="keyword">if</span> (installedChunkData !== <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (installedChunkData) &#123;</span><br><span class="line">      promises.push(installedChunkData[<span class="number">2</span>]);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="comment">// 第一次加载文件会走到这里</span></span><br><span class="line">        <span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(</span><br><span class="line">          (resolve, reject) =&gt;</span><br><span class="line">          (installedChunkData = installedChunks[chunkId] =</span><br><span class="line">           [resolve, reject]) <span class="comment">// 将 resolve 和 reject 保存</span></span><br><span class="line">        );</span><br><span class="line">        promises.push((installedChunkData[<span class="number">2</span>] = promise)); <span class="comment">// 把当前 promise 塞入到传入的 promises 数组</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> url =</span><br><span class="line">            __webpack_require__.p +</span><br><span class="line">            __webpack_require__.u(chunkId); <span class="comment">// url 拼成了 http://127.0.0.1:5501/dist/src_esmodule_json_test1_json.main.js</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> error = <span class="keyword">new</span> <span class="built_in">Error</span>();</span><br><span class="line">        <span class="keyword">var</span> loadingEnded = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (</span><br><span class="line">            __webpack_require__.o(installedChunks, chunkId)</span><br><span class="line">          ) &#123;</span><br><span class="line">              ...</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        </span><br><span class="line">        __webpack_require__.l(</span><br><span class="line">          url,</span><br><span class="line">          loadingEnded,</span><br><span class="line">          <span class="string">"chunk-"</span> + chunkId,</span><br><span class="line">          chunkId</span><br><span class="line">        );</span><br><span class="line">      &#125; <span class="keyword">else</span> installedChunks[chunkId] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>上边的 <code>j</code> 函数执行完后，会在 <code>installedChunks</code>  对象中增加一个 <code>src_esmodule_json_test1_json</code> 的 <code>key</code> ，值是一个数组，数组的 <code>0</code> 是 <code>promise</code> 的 <code>resolve</code> ，<code>1</code> 是 <code>promise</code> 的 <code>reject</code> ，<code>2</code> 是当前 <code>promise</code> ，如下图所示。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220504181410631.png" alt="image-20220504181410631"></p>
<p>最后执行 <code>l</code> 方法，就是我们的主角，通过 <code>JSONP</code> 的形式，塞一个 <code>script</code> 去加载 <code>http://127.0.0.1:5501/dist/src_esmodule_json_test1_json.main.js</code> 文件。</p>
<p>加载完成或者加载错误会执行上边的 <code>loadingEnded</code> 方法。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> error = <span class="keyword">new</span> <span class="built_in">Error</span>();</span><br><span class="line"><span class="keyword">var</span> loadingEnded = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    __webpack_require__.o(installedChunks, chunkId)</span><br><span class="line">  ) &#123;</span><br><span class="line">    installedChunkData = installedChunks[chunkId];</span><br><span class="line">    <span class="keyword">if</span> (installedChunkData !== <span class="number">0</span>)</span><br><span class="line">      installedChunks[chunkId] = <span class="literal">undefined</span>;</span><br><span class="line">    <span class="keyword">if</span> (installedChunkData) &#123; <span class="comment">// 走到这里 installedChunkData 应该已经是 0 了(后边会讲到哪里置的 0)，不然的话就抛出错误</span></span><br><span class="line">      <span class="keyword">var</span> errorType =</span><br><span class="line">          event &amp;&amp;</span><br><span class="line">          (event.type === <span class="string">"load"</span></span><br><span class="line">           ? <span class="string">"missing"</span></span><br><span class="line">           : event.type);</span><br><span class="line">      <span class="keyword">var</span> realSrc =</span><br><span class="line">          event &amp;&amp;</span><br><span class="line">          event.target &amp;&amp;</span><br><span class="line">          event.target.src;</span><br><span class="line">      error.message =</span><br><span class="line">        <span class="string">"Loading chunk "</span> +</span><br><span class="line">        chunkId +</span><br><span class="line">        <span class="string">" failed.\n("</span> +</span><br><span class="line">        errorType +</span><br><span class="line">        <span class="string">": "</span> +</span><br><span class="line">        realSrc +</span><br><span class="line">        <span class="string">")"</span>;</span><br><span class="line">      error.name = <span class="string">"ChunkLoadError"</span>;</span><br><span class="line">      error.type = errorType;</span><br><span class="line">      error.request = realSrc;</span><br><span class="line">      installedChunkData[<span class="number">1</span>](error); <span class="comment">// installedChunkData[1] 是之前保存的 reject</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
</li>
<li><p>看一下 <code>l</code> 方法。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> inProgress = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> dataWebpackPrefix = <span class="string">"webpack-demo:"</span>;</span><br><span class="line"></span><br><span class="line">__webpack_require__.l = <span class="function">(<span class="params">url, done, key, chunkId</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (inProgress[url]) &#123;</span><br><span class="line">    inProgress[url].push(done);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> script, needAttach;</span><br><span class="line">  ...</span><br><span class="line">  <span class="comment">// 设置 script</span></span><br><span class="line">  <span class="keyword">if</span> (!script) &#123;</span><br><span class="line">    needAttach = <span class="literal">true</span>;</span><br><span class="line">    script = <span class="built_in">document</span>.createElement(<span class="string">"script"</span>);</span><br><span class="line"></span><br><span class="line">    script.charset = <span class="string">"utf-8"</span>;</span><br><span class="line">    script.timeout = <span class="number">120</span>;</span><br><span class="line">    <span class="keyword">if</span> (__webpack_require__.nc) &#123;</span><br><span class="line">      script.setAttribute(<span class="string">"nonce"</span>, __webpack_require__.nc);</span><br><span class="line">    &#125;</span><br><span class="line">    script.setAttribute(<span class="string">"data-webpack"</span>, dataWebpackPrefix + key);</span><br><span class="line">    script.src = url;</span><br><span class="line">  &#125;</span><br><span class="line">  inProgress[url] = [done];</span><br><span class="line">  <span class="keyword">var</span> onScriptComplete = <span class="function">(<span class="params">prev, event</span>) =&gt;</span> &#123;</span><br><span class="line">    script.onerror = script.onload = <span class="literal">null</span>;</span><br><span class="line">    clearTimeout(timeout);</span><br><span class="line">    <span class="keyword">var</span> doneFns = inProgress[url];</span><br><span class="line">    <span class="keyword">delete</span> inProgress[url];</span><br><span class="line">    script.parentNode &amp;&amp; script.parentNode.removeChild(script);</span><br><span class="line">    doneFns &amp;&amp; doneFns.forEach(<span class="function">(<span class="params">fn</span>) =&gt;</span> fn(event));</span><br><span class="line">    <span class="keyword">if</span> (prev) <span class="keyword">return</span> prev(event);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">var</span> timeout = setTimeout(</span><br><span class="line">    onScriptComplete.bind(<span class="literal">null</span>, <span class="literal">undefined</span>, &#123;</span><br><span class="line">      type: <span class="string">"timeout"</span>,</span><br><span class="line">      target: script,</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="number">120000</span></span><br><span class="line">  );</span><br><span class="line">  script.onerror = onScriptComplete.bind(<span class="literal">null</span>, script.onerror);</span><br><span class="line">  script.onload = onScriptComplete.bind(<span class="literal">null</span>, script.onload);</span><br><span class="line">  needAttach &amp;&amp; <span class="built_in">document</span>.head.appendChild(script); <span class="comment">// 插入当前 script</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>主要就是 <code>scrpit</code> 加载完毕后的回调，然后将当前 <code>script</code> 插入到 <code>head</code> 标签中。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220504183052534.png" alt="image-20220504183052534"></p>
</li>
<li><p>接着浏览器就会发送请求加载我们之前打包后的 <code>js</code> 文件。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220504183143512.png" alt="image-20220504183143512"></p>
<p>看一下文件内容：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">"use strict"</span>;</span><br><span class="line">(self[<span class="string">"webpackChunkwebpack_demo"</span>] =</span><br><span class="line">    self[<span class="string">"webpackChunkwebpack_demo"</span>] || []).push([</span><br><span class="line">    [<span class="string">"src_esmodule_json_test1_json"</span>],</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">"./src/esmodule/json/test1.json"</span>: <span class="function">(<span class="params"><span class="built_in">module</span></span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">module</span>.exports = &#123; <span class="attr">data</span>: <span class="string">"test1"</span> &#125;;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">]);</span><br></pre></td></tr></table></figure>
<p>加载完毕后会执行上边的代码，<code>self[&quot;webpackChunkwebpack_demo&quot;]</code> 的 <code>push</code> 方法之前已经重定义好了，也就是下边的代码。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> webpackJsonpCallback = <span class="function">(<span class="params">parentChunkLoadingFunction, data</span>) =&gt;</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> chunkLoadingGlobal = (self[<span class="string">"webpackChunkwebpack_demo"</span>] =</span><br><span class="line">                          self[<span class="string">"webpackChunkwebpack_demo"</span>] || []);</span><br><span class="line">chunkLoadingGlobal.forEach(webpackJsonpCallback.bind(<span class="literal">null</span>, <span class="number">0</span>));</span><br><span class="line">chunkLoadingGlobal.push = webpackJsonpCallback.bind( <span class="comment">// 定义 push 方法</span></span><br><span class="line">  <span class="literal">null</span>,</span><br><span class="line">  chunkLoadingGlobal.push.bind(chunkLoadingGlobal)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p>执行 <code>self[&quot;webpackChunkwebpack_demo&quot;] || []).push</code> 相当于执行 <code>webpackJsonpCallback</code> 方法。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> webpackJsonpCallback = <span class="function">(<span class="params">parentChunkLoadingFunction, data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> [chunkIds, moreModules, runtime] = data;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> moduleId,</span><br><span class="line">      chunkId,</span><br><span class="line">      i = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> (chunkIds.some(<span class="function">(<span class="params">id</span>) =&gt;</span> installedChunks[id] !== <span class="number">0</span>)) &#123;</span><br><span class="line">    <span class="keyword">for</span> (moduleId <span class="keyword">in</span> moreModules) &#123;</span><br><span class="line">      <span class="keyword">if</span> (__webpack_require__.o(moreModules, moduleId)) &#123;</span><br><span class="line">        __webpack_require__.m[moduleId] = moreModules[moduleId];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (runtime) <span class="keyword">var</span> result = runtime(__webpack_require__);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (parentChunkLoadingFunction) parentChunkLoadingFunction(data);</span><br><span class="line">  <span class="keyword">for</span> (; i &lt; chunkIds.length; i++) &#123;</span><br><span class="line">    chunkId = chunkIds[i];</span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">      __webpack_require__.o(installedChunks, chunkId) &amp;&amp;</span><br><span class="line">      installedChunks[chunkId]</span><br><span class="line">    ) &#123;</span><br><span class="line">      installedChunks[chunkId][<span class="number">0</span>]();</span><br><span class="line">    &#125;</span><br><span class="line">    installedChunks[chunkIds[i]] = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>传入的 <code>data</code> 参数就是加载的文件内容时候传入的，也就是下边的样子。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">    [<span class="string">"src_esmodule_json_test1_json"</span>],</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">"./src/esmodule/json/test1.json"</span>: <span class="function">(<span class="params"><span class="built_in">module</span></span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">module</span>.exports = &#123; <span class="attr">data</span>: <span class="string">"test1"</span> &#125;;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p><code>webpackJsonpCallback</code> 拿到上边的  <code>data</code> 后主要做了三件事情：</p>
<ol>
<li><p>将 <code>./src/esmodule/json/test1.json</code> 模块保存到 <code>__webpack_modules__</code> </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (chunkIds.some(<span class="function">(<span class="params">id</span>) =&gt;</span> installedChunks[id] !== <span class="number">0</span>)) &#123;</span><br><span class="line">  <span class="keyword">for</span> (moduleId <span class="keyword">in</span> moreModules) &#123;</span><br><span class="line">    <span class="keyword">if</span> (__webpack_require__.o(moreModules, moduleId)) &#123;</span><br><span class="line">      __webpack_require__.m[moduleId] = moreModules[moduleId];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (runtime) <span class="keyword">var</span> result = runtime(__webpack_require__);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>__webpack_require__.m</code> 就是 <code>__webpack_modules__</code> ，保存着所有模块的键值对。</p>
</li>
<li><p>将 <code>installedChunks</code> 之前保存的 <code>promise</code> 执行 <code>resolve</code> 。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (; i &lt; chunkIds.length; i++) &#123;</span><br><span class="line">    chunkId = chunkIds[i];</span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">      __webpack_require__.o(installedChunks, chunkId) &amp;&amp;</span><br><span class="line">      installedChunks[chunkId]</span><br><span class="line">    ) &#123;</span><br><span class="line">      installedChunks[chunkId][<span class="number">0</span>](); <span class="comment">// 数组 0 保存的就是 resolve</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>将 <code>installedChunks</code> 相应的对象置为 <code>0</code> ，代表加载完成了，前边讲的 <code>loadingEnded</code> 会判断这里是不是 <code>0</code>。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">installedChunks[chunkIds[i]] = <span class="number">0</span>;</span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
<li><p>上边一大堆完成了 <code>JSONP</code> ，并且成功将动态加载的模块放到了 <code>__webpack_modules__</code> 中，然后我们看一下执行到哪里了：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">webpackAsyncContext</span>(<span class="params">req</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!__webpack_require__.o(map, req)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">var</span> e = <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"Cannot find module '"</span> + req + <span class="string">"'"</span>);</span><br><span class="line">      e.code = <span class="string">"MODULE_NOT_FOUND"</span>;</span><br><span class="line">      <span class="keyword">throw</span> e;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> ids = map[req], <span class="comment">// ids[0] 是原本路径, id[1] 是打包后的文件名字</span></span><br><span class="line">      id = ids[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">return</span> __webpack_require__.e(ids[<span class="number">1</span>]).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> __webpack_require__.t(id, <span class="number">3</span> | <span class="number">16</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>执行完 <code>e</code> 方法，接下执行 <code>t</code> 方法，会有很多不同的 <code>mode</code> 进入不同的分支，这里就不细究了，只需要知道最终结果是把数据加了 <code>default</code> 属性然后返回。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">__webpack_require__.t = <span class="function"><span class="keyword">function</span> (<span class="params">value, mode</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (mode &amp; <span class="number">1</span>) value = <span class="keyword">this</span>(value);</span><br><span class="line">  <span class="keyword">if</span> (mode &amp; <span class="number">8</span>) <span class="keyword">return</span> value;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> value === <span class="string">"object"</span> &amp;&amp; value) &#123;</span><br><span class="line">    <span class="keyword">if</span> (mode &amp; <span class="number">4</span> &amp;&amp; value.__esModule) <span class="keyword">return</span> value;</span><br><span class="line">    <span class="keyword">if</span> (mode &amp; <span class="number">16</span> &amp;&amp; <span class="keyword">typeof</span> value.then === <span class="string">"function"</span>) <span class="keyword">return</span> value;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> ns = <span class="built_in">Object</span>.create(<span class="literal">null</span>);</span><br><span class="line">  __webpack_require__.r(ns);</span><br><span class="line">  <span class="keyword">var</span> def = &#123;&#125;;</span><br><span class="line">  leafPrototypes = leafPrototypes || [</span><br><span class="line">    <span class="literal">null</span>,</span><br><span class="line">    getProto(&#123;&#125;),</span><br><span class="line">    getProto([]),</span><br><span class="line">    getProto(getProto),</span><br><span class="line">  ];</span><br><span class="line">  <span class="keyword">for</span> (</span><br><span class="line">    <span class="keyword">var</span> current = mode &amp; <span class="number">2</span> &amp;&amp; value;</span><br><span class="line">    <span class="keyword">typeof</span> current == <span class="string">"object"</span> &amp;&amp; !~leafPrototypes.indexOf(current);</span><br><span class="line">    current = getProto(current)</span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="built_in">Object</span>.getOwnPropertyNames(current).forEach(</span><br><span class="line">      (key) =&gt; <span class="function">(<span class="params">def[key] = (</span>) =&gt;</span> value[key])</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">  def[<span class="string">"default"</span>] = <span class="function"><span class="params">()</span> =&gt;</span> value;</span><br><span class="line">  __webpack_require__.d(ns, def);</span><br><span class="line">  <span class="keyword">return</span> ns;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>拿数据的话就是第一行代码，<code>if (mode &amp; 1) value = this(value);</code> ，这里的 <code>this</code> 就是 <code>webpack_require</code> 函数，相当于执行 <code>__webpack_require__(&#39;./src/esmodule/json/test1.json&#39;)</code>。关于 <code>this</code> 指向可以参考 <a href="https://zhuanlan.zhihu.com/p/431472497" target="_blank" rel="noopener">JavaScript中this指向详细分析(译)</a>。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__webpack_require__</span>(<span class="params">moduleId</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> cachedModule = __webpack_module_cache__[moduleId];</span><br><span class="line">  <span class="keyword">if</span> (cachedModule !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> cachedModule.exports;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> <span class="built_in">module</span> = (__webpack_module_cache__[moduleId] = &#123;</span><br><span class="line">    exports: &#123;&#125;,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  __webpack_modules__[moduleId](</span><br><span class="line">    <span class="built_in">module</span>,</span><br><span class="line">    <span class="built_in">module</span>.exports,</span><br><span class="line">    __webpack_require__</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">module</span>.exports;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>&#39;./src/esmodule/json/test1.json&#39;</code> 之前已经保存到了 <code>__webpack_modules__</code> 中，所以就把之前加载的内容返回给了 <code>value</code>。</p>
</li>
<li><p>上边讲了 <code>hello</code> 方法的执行，最后返回了一个包含数据的 <code>promise</code> ，最终回到了我们的 <code>index</code> 函数中。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> _hello__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(</span><br><span class="line">  <span class="string">"./src/esmodule/hello.js"</span></span><br><span class="line">);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"esmodule开始执行"</span>);</span><br><span class="line">(<span class="number">0</span>, _hello__WEBPACK_IMPORTED_MODULE_0__[<span class="string">"default"</span>])(<span class="string">"test1"</span>).then(</span><br><span class="line">  (data) =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>以上就是 <code>esmodule</code> 异步加载模块的全过程了，稍微有些复杂，整体流程如下：</p>
<p>定义 <code>JSOP</code> 的回调函数（<code>(self[&quot;webpackChunkwebpack_demo&quot;].push</code>） -&gt; </p>
<p>进入 <code>index</code> 函数 -&gt; 进入 <code>hello</code> 函数 -&gt; 进入 <code>webpackAsyncContext</code> 函数 -&gt;</p>
<p>进入 <code>__webpack_require__.e</code> 函数 -&gt; </p>
<p>执行 <code>__webpack_require__.f.j</code> 函数，保存 <code>promise</code> ，生成要下载的文件 <code>url</code>  -&gt; </p>
<p>进入 <code>__webpack_require__.l</code> 函数，运用 <code>JSONP</code>，动态插入 <code>script</code>  -&gt;</p>
<p>加载 <code>script</code> 文件，执行回调函数 <code>(self[&quot;webpackChunkwebpack_demo&quot;].push</code> ，将数据保存到 <code>__webpack_modules__</code>  -&gt;</p>
<p>执行 <code>__webpack_require__.t</code> 方法，将数据加上 <code>default</code> 返回 -&gt;</p>
<p><code>hello</code> 函数执行完毕 -&gt;</p>
<p>回到 <code>index</code> 函数继续执行，输出导入的数据。</p>
<p>可以再看下完整代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> __webpack_modules__ = &#123;</span><br><span class="line">        <span class="string">"./src/esmodule/hello.js"</span>: (</span><br><span class="line">            __unused_webpack_module,</span><br><span class="line">            __webpack_exports__,</span><br><span class="line">            __webpack_require__</span><br><span class="line">        ) =&gt; &#123;</span><br><span class="line"><span class="meta">            "use strict"</span>;</span><br><span class="line">            __webpack_require__.r(__webpack_exports__);</span><br><span class="line">            __webpack_require__.d(__webpack_exports__, &#123;</span><br><span class="line">                <span class="keyword">default</span>: <span class="function"><span class="params">()</span> =&gt;</span> __WEBPACK_DEFAULT_EXPORT__,</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">const</span> hello = <span class="function">(<span class="params">filename</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> __webpack_require__(</span><br><span class="line">                    <span class="string">"./src/esmodule/json lazy recursive ^\\.\\/.*\\.json$"</span></span><br><span class="line">                )(<span class="string">"./"</span> + filename + <span class="string">".json"</span>);</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="keyword">const</span> __WEBPACK_DEFAULT_EXPORT__ = hello;</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        <span class="string">"./src/esmodule/json lazy recursive ^\\.\\/.*\\.json$"</span>: (</span><br><span class="line">            <span class="built_in">module</span>,</span><br><span class="line">            __unused_webpack_exports,</span><br><span class="line">            __webpack_require__</span><br><span class="line">        ) =&gt; &#123;</span><br><span class="line">            <span class="keyword">var</span> map = &#123;</span><br><span class="line">                <span class="string">"./test1.json"</span>: [</span><br><span class="line">                    <span class="string">"./src/esmodule/json/test1.json"</span>,</span><br><span class="line">                    <span class="string">"src_esmodule_json_test1_json"</span>,</span><br><span class="line">                ],</span><br><span class="line">                <span class="string">"./test2.json"</span>: [</span><br><span class="line">                    <span class="string">"./src/esmodule/json/test2.json"</span>,</span><br><span class="line">                    <span class="string">"src_esmodule_json_test2_json"</span>,</span><br><span class="line">                ],</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="function"><span class="keyword">function</span> <span class="title">webpackAsyncContext</span>(<span class="params">req</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (!__webpack_require__.o(map, req)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                        <span class="keyword">var</span> e = <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"Cannot find module '"</span> + req + <span class="string">"'"</span>);</span><br><span class="line">                        e.code = <span class="string">"MODULE_NOT_FOUND"</span>;</span><br><span class="line">                        <span class="keyword">throw</span> e;</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">debugger</span>;</span><br><span class="line">                <span class="keyword">var</span> ids = map[req],</span><br><span class="line">                    id = ids[<span class="number">0</span>];</span><br><span class="line">                <span class="keyword">return</span> __webpack_require__.e(ids[<span class="number">1</span>]).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> __webpack_require__.t(id, <span class="number">3</span> | <span class="number">16</span>);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">            webpackAsyncContext.keys = <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">Object</span>.keys(map);</span><br><span class="line">            webpackAsyncContext.id =</span><br><span class="line">                <span class="string">"./src/esmodule/json lazy recursive ^\\.\\/.*\\.json$"</span>;</span><br><span class="line">            <span class="built_in">module</span>.exports = webpackAsyncContext;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> __webpack_module_cache__ = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__webpack_require__</span>(<span class="params">moduleId</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> cachedModule = __webpack_module_cache__[moduleId];</span><br><span class="line">        <span class="keyword">if</span> (cachedModule !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> cachedModule.exports;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> <span class="built_in">module</span> = (__webpack_module_cache__[moduleId] = &#123;</span><br><span class="line">            exports: &#123;&#125;,</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        __webpack_modules__[moduleId](</span><br><span class="line">            <span class="built_in">module</span>,</span><br><span class="line">            <span class="built_in">module</span>.exports,</span><br><span class="line">            __webpack_require__</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">module</span>.exports;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    __webpack_require__.m = __webpack_modules__;</span><br><span class="line"></span><br><span class="line">    (<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> getProto = <span class="built_in">Object</span>.getPrototypeOf</span><br><span class="line">            ? <span class="function">(<span class="params">obj</span>) =&gt;</span> <span class="built_in">Object</span>.getPrototypeOf(obj)</span><br><span class="line">            : <span class="function">(<span class="params">obj</span>) =&gt;</span> obj.__proto__;</span><br><span class="line">        <span class="keyword">var</span> leafPrototypes;</span><br><span class="line"></span><br><span class="line">        __webpack_require__.t = <span class="function"><span class="keyword">function</span> (<span class="params">value, mode</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (mode &amp; <span class="number">1</span>) value = <span class="keyword">this</span>(value);</span><br><span class="line">            <span class="keyword">if</span> (mode &amp; <span class="number">8</span>) <span class="keyword">return</span> value;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">typeof</span> value === <span class="string">"object"</span> &amp;&amp; value) &#123;</span><br><span class="line">                <span class="keyword">if</span> (mode &amp; <span class="number">4</span> &amp;&amp; value.__esModule) <span class="keyword">return</span> value;</span><br><span class="line">                <span class="keyword">if</span> (mode &amp; <span class="number">16</span> &amp;&amp; <span class="keyword">typeof</span> value.then === <span class="string">"function"</span>) <span class="keyword">return</span> value;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">var</span> ns = <span class="built_in">Object</span>.create(<span class="literal">null</span>);</span><br><span class="line">            __webpack_require__.r(ns);</span><br><span class="line">            <span class="keyword">var</span> def = &#123;&#125;;</span><br><span class="line">            leafPrototypes = leafPrototypes || [</span><br><span class="line">                <span class="literal">null</span>,</span><br><span class="line">                getProto(&#123;&#125;),</span><br><span class="line">                getProto([]),</span><br><span class="line">                getProto(getProto),</span><br><span class="line">            ];</span><br><span class="line">            <span class="keyword">for</span> (</span><br><span class="line">                <span class="keyword">var</span> current = mode &amp; <span class="number">2</span> &amp;&amp; value;</span><br><span class="line">                <span class="keyword">typeof</span> current == <span class="string">"object"</span> &amp;&amp; !~leafPrototypes.indexOf(current);</span><br><span class="line">                current = getProto(current)</span><br><span class="line">            ) &#123;</span><br><span class="line">                <span class="built_in">Object</span>.getOwnPropertyNames(current).forEach(</span><br><span class="line">                    (key) =&gt; <span class="function">(<span class="params">def[key] = (</span>) =&gt;</span> value[key])</span><br><span class="line">                );</span><br><span class="line">            &#125;</span><br><span class="line">            def[<span class="string">"default"</span>] = <span class="function"><span class="params">()</span> =&gt;</span> value;</span><br><span class="line">            __webpack_require__.d(ns, def);</span><br><span class="line">            <span class="keyword">return</span> ns;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;)();</span><br><span class="line"></span><br><span class="line">    (<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        __webpack_require__.d = <span class="function">(<span class="params">exports, definition</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> definition) &#123;</span><br><span class="line">                <span class="keyword">if</span> (</span><br><span class="line">                    __webpack_require__.o(definition, key) &amp;&amp;</span><br><span class="line">                    !__webpack_require__.o(exports, key)</span><br><span class="line">                ) &#123;</span><br><span class="line">                    <span class="built_in">Object</span>.defineProperty(exports, key, &#123;</span><br><span class="line">                        enumerable: <span class="literal">true</span>,</span><br><span class="line">                        get: definition[key],</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;)();</span><br><span class="line"></span><br><span class="line">    (<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        __webpack_require__.f = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">        __webpack_require__.e = <span class="function">(<span class="params">chunkId</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Promise</span>.all(</span><br><span class="line">                <span class="built_in">Object</span>.keys(__webpack_require__.f).reduce(<span class="function">(<span class="params">promises, key</span>) =&gt;</span> &#123;</span><br><span class="line">                    __webpack_require__.f[key](chunkId, promises);</span><br><span class="line">                    <span class="keyword">return</span> promises;</span><br><span class="line">                &#125;, [])</span><br><span class="line">            );</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;)();</span><br><span class="line"></span><br><span class="line">    (<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        __webpack_require__.u = <span class="function">(<span class="params">chunkId</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">""</span> + chunkId + <span class="string">".main.js"</span>;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;)();</span><br><span class="line"></span><br><span class="line">    (<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        __webpack_require__.g = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">typeof</span> globalThis === <span class="string">"object"</span>) <span class="keyword">return</span> globalThis;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span> || <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">"return this"</span>)();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">window</span> === <span class="string">"object"</span>) <span class="keyword">return</span> <span class="built_in">window</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)();</span><br><span class="line">    &#125;)();</span><br><span class="line"></span><br><span class="line">    (<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        __webpack_require__.o = <span class="function">(<span class="params">obj, prop</span>) =&gt;</span></span><br><span class="line">            <span class="built_in">Object</span>.prototype.hasOwnProperty.call(obj, prop);</span><br><span class="line">    &#125;)();</span><br><span class="line"></span><br><span class="line">    (<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> inProgress = &#123;&#125;;</span><br><span class="line">        <span class="keyword">var</span> dataWebpackPrefix = <span class="string">"webpack-demo:"</span>;</span><br><span class="line"></span><br><span class="line">        __webpack_require__.l = <span class="function">(<span class="params">url, done, key, chunkId</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (inProgress[url]) &#123;</span><br><span class="line">                inProgress[url].push(done);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">var</span> script, needAttach;</span><br><span class="line">            <span class="keyword">if</span> (key !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">                <span class="keyword">var</span> scripts = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"script"</span>);</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; scripts.length; i++) &#123;</span><br><span class="line">                    <span class="keyword">var</span> s = scripts[i];</span><br><span class="line">                    <span class="keyword">if</span> (</span><br><span class="line">                        s.getAttribute(<span class="string">"src"</span>) == url ||</span><br><span class="line">                        s.getAttribute(<span class="string">"data-webpack"</span>) ==</span><br><span class="line">                            dataWebpackPrefix + key</span><br><span class="line">                    ) &#123;</span><br><span class="line">                        script = s;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!script) &#123;</span><br><span class="line">                needAttach = <span class="literal">true</span>;</span><br><span class="line">                script = <span class="built_in">document</span>.createElement(<span class="string">"script"</span>);</span><br><span class="line"></span><br><span class="line">                script.charset = <span class="string">"utf-8"</span>;</span><br><span class="line">                script.timeout = <span class="number">120</span>;</span><br><span class="line">                <span class="keyword">if</span> (__webpack_require__.nc) &#123;</span><br><span class="line">                    script.setAttribute(<span class="string">"nonce"</span>, __webpack_require__.nc);</span><br><span class="line">                &#125;</span><br><span class="line">                script.setAttribute(<span class="string">"data-webpack"</span>, dataWebpackPrefix + key);</span><br><span class="line">                script.src = url;</span><br><span class="line">            &#125;</span><br><span class="line">            inProgress[url] = [done];</span><br><span class="line">            <span class="keyword">var</span> onScriptComplete = <span class="function">(<span class="params">prev, event</span>) =&gt;</span> &#123;</span><br><span class="line">                script.onerror = script.onload = <span class="literal">null</span>;</span><br><span class="line">                clearTimeout(timeout);</span><br><span class="line">                <span class="keyword">var</span> doneFns = inProgress[url];</span><br><span class="line">                <span class="keyword">delete</span> inProgress[url];</span><br><span class="line">                script.parentNode &amp;&amp; script.parentNode.removeChild(script);</span><br><span class="line">                doneFns &amp;&amp; doneFns.forEach(<span class="function">(<span class="params">fn</span>) =&gt;</span> fn(event));</span><br><span class="line">                <span class="keyword">if</span> (prev) <span class="keyword">return</span> prev(event);</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="keyword">var</span> timeout = setTimeout(</span><br><span class="line">                onScriptComplete.bind(<span class="literal">null</span>, <span class="literal">undefined</span>, &#123;</span><br><span class="line">                    type: <span class="string">"timeout"</span>,</span><br><span class="line">                    target: script,</span><br><span class="line">                &#125;),</span><br><span class="line">                <span class="number">120000</span></span><br><span class="line">            );</span><br><span class="line">            script.onerror = onScriptComplete.bind(<span class="literal">null</span>, script.onerror);</span><br><span class="line">            script.onload = onScriptComplete.bind(<span class="literal">null</span>, script.onload);</span><br><span class="line">            needAttach &amp;&amp; <span class="built_in">document</span>.head.appendChild(script);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;)();</span><br><span class="line"></span><br><span class="line">    (<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        __webpack_require__.r = <span class="function">(<span class="params">exports</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">Symbol</span> !== <span class="string">"undefined"</span> &amp;&amp; <span class="built_in">Symbol</span>.toStringTag) &#123;</span><br><span class="line">                <span class="built_in">Object</span>.defineProperty(exports, <span class="built_in">Symbol</span>.toStringTag, &#123;</span><br><span class="line">                    value: <span class="string">"Module"</span>,</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">Object</span>.defineProperty(exports, <span class="string">"__esModule"</span>, &#123; <span class="attr">value</span>: <span class="literal">true</span> &#125;);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;)();</span><br><span class="line"></span><br><span class="line">    (<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> scriptUrl;</span><br><span class="line">        <span class="keyword">if</span> (__webpack_require__.g.importScripts)</span><br><span class="line">            scriptUrl = __webpack_require__.g.location + <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">var</span> <span class="built_in">document</span> = __webpack_require__.g.document;</span><br><span class="line">        <span class="keyword">if</span> (!scriptUrl &amp;&amp; <span class="built_in">document</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">document</span>.currentScript) scriptUrl = <span class="built_in">document</span>.currentScript.src;</span><br><span class="line">            <span class="keyword">if</span> (!scriptUrl) &#123;</span><br><span class="line">                <span class="keyword">var</span> scripts = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"script"</span>);</span><br><span class="line">                <span class="keyword">if</span> (scripts.length) scriptUrl = scripts[scripts.length - <span class="number">1</span>].src;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!scriptUrl)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(</span><br><span class="line">                <span class="string">"Automatic publicPath is not supported in this browser"</span></span><br><span class="line">            );</span><br><span class="line">        scriptUrl = scriptUrl</span><br><span class="line">            .replace(<span class="regexp">/#.*$/</span>, <span class="string">""</span>)</span><br><span class="line">            .replace(<span class="regexp">/\?.*$/</span>, <span class="string">""</span>)</span><br><span class="line">            .replace(<span class="regexp">/\/[^\/]+$/</span>, <span class="string">"/"</span>);</span><br><span class="line">        __webpack_require__.p = scriptUrl;</span><br><span class="line">    &#125;)();</span><br><span class="line"></span><br><span class="line">    (<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> installedChunks = &#123;</span><br><span class="line">            main: <span class="number">0</span>,</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        __webpack_require__.f.j = <span class="function">(<span class="params">chunkId, promises</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">var</span> installedChunkData = __webpack_require__.o(</span><br><span class="line">                installedChunks,</span><br><span class="line">                chunkId</span><br><span class="line">            )</span><br><span class="line">                ? installedChunks[chunkId]</span><br><span class="line">                : <span class="literal">undefined</span>;</span><br><span class="line">            <span class="keyword">if</span> (installedChunkData !== <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (installedChunkData) &#123;</span><br><span class="line">                    promises.push(installedChunkData[<span class="number">2</span>]);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                        <span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(</span><br><span class="line">                            (resolve, reject) =&gt;</span><br><span class="line">                                (installedChunkData = installedChunks[chunkId] =</span><br><span class="line">                                    [resolve, reject])</span><br><span class="line">                        );</span><br><span class="line">                        promises.push((installedChunkData[<span class="number">2</span>] = promise));</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">var</span> url =</span><br><span class="line">                            __webpack_require__.p +</span><br><span class="line">                            __webpack_require__.u(chunkId);</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">var</span> error = <span class="keyword">new</span> <span class="built_in">Error</span>();</span><br><span class="line">                        <span class="keyword">var</span> loadingEnded = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">                            <span class="keyword">if</span> (</span><br><span class="line">                                __webpack_require__.o(installedChunks, chunkId)</span><br><span class="line">                            ) &#123;</span><br><span class="line">                                installedChunkData = installedChunks[chunkId];</span><br><span class="line">                                <span class="keyword">if</span> (installedChunkData !== <span class="number">0</span>)</span><br><span class="line">                                    installedChunks[chunkId] = <span class="literal">undefined</span>;</span><br><span class="line">                                <span class="keyword">if</span> (installedChunkData) &#123;</span><br><span class="line">                                    <span class="keyword">var</span> errorType =</span><br><span class="line">                                        event &amp;&amp;</span><br><span class="line">                                        (event.type === <span class="string">"load"</span></span><br><span class="line">                                            ? <span class="string">"missing"</span></span><br><span class="line">                                            : event.type);</span><br><span class="line">                                    <span class="keyword">var</span> realSrc =</span><br><span class="line">                                        event &amp;&amp;</span><br><span class="line">                                        event.target &amp;&amp;</span><br><span class="line">                                        event.target.src;</span><br><span class="line">                                    error.message =</span><br><span class="line">                                        <span class="string">"Loading chunk "</span> +</span><br><span class="line">                                        chunkId +</span><br><span class="line">                                        <span class="string">" failed.\n("</span> +</span><br><span class="line">                                        errorType +</span><br><span class="line">                                        <span class="string">": "</span> +</span><br><span class="line">                                        realSrc +</span><br><span class="line">                                        <span class="string">")"</span>;</span><br><span class="line">                                    error.name = <span class="string">"ChunkLoadError"</span>;</span><br><span class="line">                                    error.type = errorType;</span><br><span class="line">                                    error.request = realSrc;</span><br><span class="line">                                    installedChunkData[<span class="number">1</span>](error);</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;;</span><br><span class="line">                        __webpack_require__.l(</span><br><span class="line">                            url,</span><br><span class="line">                            loadingEnded,</span><br><span class="line">                            <span class="string">"chunk-"</span> + chunkId,</span><br><span class="line">                            chunkId</span><br><span class="line">                        );</span><br><span class="line">                    &#125; <span class="keyword">else</span> installedChunks[chunkId] = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> webpackJsonpCallback = <span class="function">(<span class="params">parentChunkLoadingFunction, data</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">var</span> [chunkIds, moreModules, runtime] = data;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> moduleId,</span><br><span class="line">                chunkId,</span><br><span class="line">                i = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (chunkIds.some(<span class="function">(<span class="params">id</span>) =&gt;</span> installedChunks[id] !== <span class="number">0</span>)) &#123;</span><br><span class="line">                <span class="keyword">for</span> (moduleId <span class="keyword">in</span> moreModules) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (__webpack_require__.o(moreModules, moduleId)) &#123;</span><br><span class="line">                        __webpack_require__.m[moduleId] = moreModules[moduleId];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (runtime) <span class="keyword">var</span> result = runtime(__webpack_require__);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (parentChunkLoadingFunction) parentChunkLoadingFunction(data);</span><br><span class="line">            <span class="keyword">for</span> (; i &lt; chunkIds.length; i++) &#123;</span><br><span class="line">                chunkId = chunkIds[i];</span><br><span class="line">                <span class="keyword">if</span> (</span><br><span class="line">                    __webpack_require__.o(installedChunks, chunkId) &amp;&amp;</span><br><span class="line">                    installedChunks[chunkId]</span><br><span class="line">                ) &#123;</span><br><span class="line">                    installedChunks[chunkId][<span class="number">0</span>]();</span><br><span class="line">                &#125;</span><br><span class="line">                installedChunks[chunkIds[i]] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> chunkLoadingGlobal = (self[<span class="string">"webpackChunkwebpack_demo"</span>] =</span><br><span class="line">            self[<span class="string">"webpackChunkwebpack_demo"</span>] || []);</span><br><span class="line">        chunkLoadingGlobal.forEach(webpackJsonpCallback.bind(<span class="literal">null</span>, <span class="number">0</span>));</span><br><span class="line">        chunkLoadingGlobal.push = webpackJsonpCallback.bind(</span><br><span class="line">            <span class="literal">null</span>,</span><br><span class="line">            chunkLoadingGlobal.push.bind(chunkLoadingGlobal)</span><br><span class="line">        );</span><br><span class="line">    &#125;)();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> __webpack_exports__ = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    (<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line"><span class="meta">        "use strict"</span>;</span><br><span class="line"></span><br><span class="line">        __webpack_require__.r(__webpack_exports__);</span><br><span class="line">        <span class="keyword">var</span> _hello__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(</span><br><span class="line">            <span class="string">"./src/esmodule/hello.js"</span></span><br><span class="line">        );</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"esmodule开始执行"</span>);</span><br><span class="line"></span><br><span class="line">        (<span class="number">0</span>, _hello__WEBPACK_IMPORTED_MODULE_0__[<span class="string">"default"</span>])(<span class="string">"test1"</span>).then(</span><br><span class="line">            (data) =&gt; &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(data);</span><br><span class="line">            &#125;</span><br><span class="line">        );</span><br><span class="line">    &#125;)();</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>
<h1 id="总"><a href="#总" class="headerlink" title="总"></a>总</h1><p><code>require</code> 引入模块是同步的，因此打包的时候就将数据保存起来了，打包产物也比较简单。</p>
<p><code>import()</code> 是异步的，需要异步加载的文件提前单独生成文件，然后通过 <code>JSONP</code> 的形式进行加载，加载完毕后通过回调将数据添加到 <code>__webpack_modules__</code> 对象中，方便后续使用。</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>git原理浅析</title>
    <url>/2020/07/20/git%E5%8E%9F%E7%90%86%E6%B5%85%E6%9E%90/</url>
    <content><![CDATA[<h1 id="git-历史"><a href="#git-历史" class="headerlink" title="git 历史"></a>git 历史</h1><p><code>linux</code> 之父 <code>Linus Torvalds</code> 大家应该都知道，而 <code>git</code> 也是由 <code>Linus</code> 开发的。从 <code>1991</code> 年发布了第一版的 <code>linux</code> 内核，Linux 内核开源项目有着众多的参与者，但绝大多数的 <code>Linux</code> 内核维护工作都花在了提交补丁和保存归档的繁琐事务上（<code>1991</code>－<code>2002</code>年间）。到 <code>2002</code> 年，整个项目组开始启用一个专有的分布式版本控制系统 <code>BitKeeper</code> 来管理和维护代码，之前市面上也有其他的版本管理系统，比如 <code>CSV</code>、<code>SVN</code>，但是 <code>Linus</code> 觉得它们很蠢，直到有了 <code>BitKeeper</code> 才开始使用版本管理系统。</p>
<p>至于为什么又自己开发了 <code>git</code> ，看完下边对 <code>Linus</code> 的采访就明白了。</p>
<blockquote>
<p>你为什么要开发 Git？</p>
<p>Torvalds：我从来没有想过去做版本控制软件，因为在我看来那是计算机世界里最无聊的事了（如果数据库除外的话 ;^），我天生就不喜欢 source-control management (SCM)。但是 BitKeeper(BK) 的诞生改变了我对版本控制的认识。BK 在大多数方面是正确的，在本地保存一个仓库的副本，分布式合并确实是一大创新。这个分布式版本控制的创新完美地解决了 SCM 的通病：“谁可以修改代码”的难题。BK 告诉我们，你只要给每个人一个仓库，问题就解决了。但是 BK 也存在一些问题，技术上的问题（例如重命名很麻烦）还不算什么，它最大的坏处是不开源，很多人因为这个不使用它。所以即使我们有几个核心维护者使用 BK——开源项目可以免费使用——但它也没有普及。虽然它帮助过我们开发内核，但依然有不少痛点没有解决。</p>
<p>当 Tridge 违反 BK 的使用协议反编译 BK 的时候，我们到达了紧急关头。我花了几个周（还是几个月来着？）试图调解 Tridge 和 Larry McVoy（注：他是 Bitkeeper 的 老大），最后也没有成功。我意识到我不能继续使用 BK 了，但我真的不想回到没有 BK 的黑暗时代。遗憾的是，我们想用其他 SCM 来代替它，却没有找到能在远程方面工作得好的。现有的软件不能满足我对远程方面的需求，我又担心整个流程和代码的完整性，所以最后我决定自己写一个。</p>
</blockquote>
<p>总结就是，本来 <code>BK</code> 免费给他们用，但是有 <code>linux</code> 内核有成员开始反编译 <code>BK</code>，<code>BK</code> 就不让他们用了，然后 <code>Linus</code> 就用了几周的时间自己写了一个，<code>git</code> 就此诞生。。。然后 <code>linus</code> 就专心又去搞 <code>linux</code> 了，把 <code>git</code> 交给团队成员 <code>Junio Hamano</code> 进行后期的迭代维护。</p>
<h1 id="git-原理浅析"><a href="#git-原理浅析" class="headerlink" title="git 原理浅析"></a>git 原理浅析</h1><p>首先在一个空文件夹中执行 <code>git init</code> 命令初始化 <code>git</code> 仓库，然后会自动生成一个隐藏文件夹 <code>.git</code> ，目录树如下。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">.git</span><br><span class="line">├── HEAD</span><br><span class="line">├── config</span><br><span class="line">├── description</span><br><span class="line">├── hooks</span><br><span class="line">│   ├── applypatch-msg.sample</span><br><span class="line">│   ├── commit-msg.sample</span><br><span class="line">│   ├── fsmonitor-watchman.sample</span><br><span class="line">│   ├── post-update.sample</span><br><span class="line">│   ├── pre-applypatch.sample</span><br><span class="line">│   ├── pre-commit.sample</span><br><span class="line">│   ├── pre-merge-commit.sample</span><br><span class="line">│   ├── pre-push.sample</span><br><span class="line">│   ├── pre-rebase.sample</span><br><span class="line">│   ├── pre-receive.sample</span><br><span class="line">│   ├── prepare-commit-msg.sample</span><br><span class="line">│   └── update.sample</span><br><span class="line">├── info</span><br><span class="line">│   └── exclude</span><br><span class="line">├── objects</span><br><span class="line">│   ├── info</span><br><span class="line">│   └── pack</span><br><span class="line">└── refs</span><br><span class="line">    ├── heads</span><br><span class="line">    └── tags</span><br></pre></td></tr></table></figure>
<p>下边依次分析下上边的文件。</p>
<h2 id="description-文件"><a href="#description-文件" class="headerlink" title="description 文件"></a>description 文件</h2><p> <code>description</code> 文件仅供 <code>GitWeb</code> 程序使用，一般用不到。</p>
<h2 id="info文件夹"><a href="#info文件夹" class="headerlink" title="info文件夹"></a>info文件夹</h2><p> <code>info</code> 目录包含一个全局性排除（global exclude）文件， 用以放置那些不希望被记录在 <code>.gitignore</code> 文件中的忽略模式（ignored patterns），和 <code>.gitignore</code>文件是 一个作用。</p>
<h2 id="config-文件"><a href="#config-文件" class="headerlink" title="config 文件"></a>config 文件</h2><p>默认的配置文件，打开后显示的是下边的内容。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[core]</span><br><span class="line">        repositoryformatversion = <span class="number">0</span></span><br><span class="line">        filemode = <span class="keyword">true</span></span><br><span class="line">        bare = <span class="keyword">false</span></span><br><span class="line">        logallrefupdates = <span class="keyword">true</span></span><br><span class="line">        ignorecase = <span class="keyword">true</span></span><br><span class="line">        precomposeunicode = <span class="keyword">true</span></span><br></pre></td></tr></table></figure>
<p>主要是当前仓库的一些配置，<code>git</code> 除了在这里有配置文件，还存在于 <code>~/.gitconfig</code> ，打开后看一下。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[http]</span><br><span class="line">        proxy = socks5:<span class="comment">//127.0.0.1:1080</span></span><br><span class="line">[https]</span><br><span class="line">        proxy = socks5:<span class="comment">//127.0.0.1:1080</span></span><br><span class="line">[user]</span><br><span class="line">        name = windliang</span><br><span class="line">        email = <span class="number">6489178757</span><span class="meta">@qq</span>.com</span><br></pre></td></tr></table></figure>
<p> <code>/etc/gitconfig</code> 也是 <code>git</code> 的一个配置文件，但由于没有配置过这个文件，所以我电脑里这个文件不存在。</p>
<p><code>git</code> 为我们提供了 <code>config</code> 命令用来配置上边的文件。</p>
<p><code>git config --list</code> 是展示配置文件中已有的配置项，输出如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">http.proxy=socks5:<span class="comment">//127.0.0.1:1080</span></span><br><span class="line">https.proxy=socks5:<span class="comment">//127.0.0.1:1080</span></span><br><span class="line">user.name=windliang</span><br><span class="line">user.email=<span class="number">6489178757</span><span class="meta">@qq</span>.com</span><br><span class="line">core.repositoryformatversion=<span class="number">0</span></span><br><span class="line">core.filemode=<span class="keyword">true</span></span><br><span class="line">core.bare=<span class="keyword">false</span></span><br><span class="line">core.logallrefupdates=<span class="keyword">true</span></span><br><span class="line">core.ignorecase=<span class="keyword">true</span></span><br><span class="line">core.precomposeunicode=<span class="keyword">true</span></span><br></pre></td></tr></table></figure>
<p>可以看到就是把之前两个配置文件的内容按一定的格式输出。</p>
<p>上边讲到配置文件分布在三个文件中，<code>git</code> 为我们提供了三个参数 <code>--local</code>，<code>--global</code>，<code>--system</code> ，分别处理 <code>git</code> 当前仓库下的 <code>config</code> 文件、 <code>~/.gitconfig</code> 、以及<code>/etc/gitconfig</code>，如果存在同名的配置项，当前仓库下的配置文件优先级最高，其次是<code>~/.gitconfig</code> ，<code>/etc/gitconfig</code> 优先级最低。</p>
<p>举几个例子。</p>
<p>比如我们只想查看当前仓库下配置文件的配置项，可以执行 <code>git config --local --list</code> ，输出如下。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">core.repositoryformatversion=<span class="number">0</span></span><br><span class="line">core.filemode=<span class="keyword">true</span></span><br><span class="line">core.bare=<span class="keyword">false</span></span><br><span class="line">core.logallrefupdates=<span class="keyword">true</span></span><br><span class="line">core.ignorecase=<span class="keyword">true</span></span><br><span class="line">core.precomposeunicode=<span class="keyword">true</span></span><br></pre></td></tr></table></figure>
<p>在  <code>~/.gitconfig</code> 中增加一个配置项，<code>git config --global alias.ss status</code>，执行后再打开   <code>~/.gitconfig</code> ，可以看到就增加了一个配置项。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[http]</span><br><span class="line">        proxy = socks5:<span class="comment">//127.0.0.1:1080</span></span><br><span class="line">[https]</span><br><span class="line">        proxy = socks5:<span class="comment">//127.0.0.1:1080</span></span><br><span class="line">[user]</span><br><span class="line">        name = windliang</span><br><span class="line">        email = <span class="number">6489178757</span><span class="meta">@qq</span>.com</span><br><span class="line">[alias]</span><br><span class="line">        ss = status</span><br></pre></td></tr></table></figure>
<p>通过上边 <code>alias</code> 的配置，下次如果我们想执行 <code>git status</code> 只需要输入 <code>git ss</code> 就可以了，也就是别名。</p>
<p>如果想删除某个配置项，可以添加 <code>--unset</code> 参数，比如执行 <code>git config --global --unset alias.ss</code>。</p>
<p>也可以单独查看某个配置项，例如输入 <code>git config --global user.name</code>，输出如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">windliang</span><br></pre></td></tr></table></figure>
<h2 id="底层命令和上层命令"><a href="#底层命令和上层命令" class="headerlink" title="底层命令和上层命令"></a>底层命令和上层命令</h2><p>我们经常使用的命令其实是上层命令(porcelain commands)，参考下边的表格。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git-add                 git-rebase              git-cherry</span><br><span class="line">git-am                  git-reset               git-count-objects</span><br><span class="line">git-archive             git-revert              git-difftool</span><br><span class="line">git-bisect              git-rm                  git-fsck</span><br><span class="line">git-branch              git-shortlog            git-get-tar-commit-id</span><br><span class="line">git-bundle              git-show                git-help</span><br><span class="line">git-checkout            git-stash               git-instaweb</span><br><span class="line">git-cherry-pick         git-status              git-merge-tree</span><br><span class="line">git-citool              git-submodule           git-rerere</span><br><span class="line">git-clean               git-tag                 git-rev-parse</span><br><span class="line">git-clone               git-worktree            git-show-branch</span><br><span class="line">git-commit              gitk                    git-verify-commit</span><br><span class="line">git-describe            git-config              git-verify-tag</span><br><span class="line">git-diff                git-fast-export         git-whatchanged</span><br><span class="line">git-fetch               git-fast-import         gitweb</span><br><span class="line">git-format-patch        git-filter-branch       git-archimport</span><br><span class="line">git-gc                  git-mergetool           git-cvsexportcommit</span><br><span class="line">git-grep                git-pack-refs           git-cvsimport</span><br><span class="line">git-gui                 git-prune               git-cvsserver</span><br><span class="line">git-init                git-reflog              git-imap-send</span><br><span class="line">git-log                 git-relink              git-p4</span><br><span class="line">git-merge               git-remote              git-quiltimport</span><br><span class="line">git-mv                  git-repack              git-request-pull</span><br><span class="line">git-notes               git-replace             git-send-email</span><br><span class="line">git-pull                git-annotate            git-svn</span><br><span class="line">git-push                git-blame</span><br></pre></td></tr></table></figure>
<p>其实还有我们没有用过的底层命令(plumbing commands)，多数底层命令并不面向最终用户，它们更适合作为新工具的组件和自定义脚本的组成部分。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git-apply               git-for-each-ref        git-receive-pack</span><br><span class="line">git-checkout-index      git-ls-files            git-shell</span><br><span class="line">git-commit-tree         git-ls-remote           git-upload-archive</span><br><span class="line">git-hash-object         git-ls-tree             git-upload-pack</span><br><span class="line">git-index-pack          git-merge-base          git-check-attr</span><br><span class="line">git-merge-file          git-name-rev            git-check-ignore</span><br><span class="line">git-merge-index         git-pack-redundant      git-check-mailmap</span><br><span class="line">git-mktag               git-rev-list            git-check-ref-format</span><br><span class="line">git-mktree              git-show-index          git-column</span><br><span class="line">git-pack-objects        git-show-ref            git-credential</span><br><span class="line">git-prune-packed        git-unpack-file         git-credential-cache</span><br><span class="line">git-read-tree           git-var                 git-credential-store</span><br><span class="line">git-symbolic-ref        git-verify-pack         git-fmt-merge-msg</span><br><span class="line">git-unpack-objects      git-daemon              git-interpret-trailers</span><br><span class="line">git-update-index        git-fetch-pack          git-mailinfo</span><br><span class="line">git-update-ref          git-http-backend        git-mailsplit</span><br><span class="line">git-write-tree          git-send-pack           git-merge-one-file</span><br><span class="line">git-cat-file            git-update-server-info  git-patch-id</span><br><span class="line">git-diff-files          git-http-fetch          git-sh-i18n</span><br><span class="line">git-diff-index          git-http-push           git-sh-setup</span><br><span class="line">git-diff-tree           git-parse-remote        git-stripspace</span><br></pre></td></tr></table></figure>
<p>下边用底层命令来进行 <code>git</code> 的相关操作，以便对 <code>git</code> 原理有个更深的了解。</p>
<h2 id="objects-文件夹"><a href="#objects-文件夹" class="headerlink" title="objects 文件夹"></a>objects 文件夹</h2><p>这个文件夹顾名思义，就是存储对象的。<code>git</code> 主要有三种对象，<code>blob</code> 对象，<code>tree</code> 对象，<code>commit</code> 对象。和文件有关的东西都会存到这个文件夹中，相当于一个键值对的数据库。</p>
<h3 id="blob-对象"><a href="#blob-对象" class="headerlink" title="blob 对象"></a>blob 对象</h3><p>首先新建一个 <code>test.txt</code>，写入 <code>hello world</code>，<code>echo &#39;hello world&#39; &gt; test.txt</code>。</p>
<p>然后执行 <code>git hash-object -w test.txt</code> 命令，得到</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">3</span>b18e512dba79e4c8300dd08aeb37f8e728b8dad</span><br></pre></td></tr></table></figure>
<p><code>hash-object</code> 命令会返回生成对象的键值，<code>-w</code> 会把该对象写入数据库，也就是 <code>objects</code> 文件夹中。</p>
<p>键值其实就是【头部信息】加上【文件原始内容】做了 <code>SHA-1</code> 得到的 <code>40</code> 位的哈希值，其中「头部信息」指的是 <code>对象类型+空格+数据的字节数+空字节</code>。</p>
<p>我们来看一下 <code>objects</code> 文件夹的变化。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">objects</span><br><span class="line">├── <span class="number">3</span>b</span><br><span class="line">│   └── <span class="number">18e512</span>dba79e4c8300dd08aeb37f8e728b8dad</span><br><span class="line">├── info</span><br><span class="line">└── pack</span><br></pre></td></tr></table></figure>
<p>可以看到多了一个文件夹 <code>3b</code> 和一个文件 <code>18e512dba79e4c8300dd08aeb37f8e728b8dadf</code> ，组合起来刚好就是我们得到的键值。</p>
<p>通过指令 <code>git cat-file -p 3b18e512d</code> 看一下该文件的内容。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">hello world</span><br></pre></td></tr></table></figure>
<p><code>cat-file</code> 可以解码刚刚生成的对象，<code>-p</code> 参数会自动选择内容的编码，<code>3b18e512d</code> 是键值的前几位。</p>
<p>然后我们修改一下文件的内容，<code>echo &#39;hello world 2&#39; &gt; test.txt</code>，再次执行 <code>git hash-object -w test.txt</code>。</p>
<p>再看一下 <code>objects</code> 文件夹。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">objects</span><br><span class="line">├── <span class="number">3</span>b</span><br><span class="line">│   └── <span class="number">18e512</span>dba79e4c8300dd08aeb37f8e728b8dad</span><br><span class="line">├── d0</span><br><span class="line">│   └── e1e95455754bd31d56260d19a7774fd7aebe5d</span><br><span class="line">├── info</span><br><span class="line">└── pack</span><br></pre></td></tr></table></figure>
<p>可以看到我们又多了一个对象，此时我们把本地的 <code>test.txt</code> 文件删除，<code>rm test.txt</code>。</p>
<p>然后看一下之前写的内容还在不在，<code>git cat-file -p d0e1e954557</code>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">hello world <span class="number">2</span></span><br></pre></td></tr></table></figure>
<p>可以看到还是能取到之前的内容，<code>git</code> 把之前所有的内容都存了起来，这就是简单的版本管理。但有个问题就是，当前我们只存了键值，并没有存文件名，这种类型的对象我们叫做「数据对象」<code>blob object</code>，通过 <code>git cat-file -t</code> 命令加上 <code>SHA-1</code> 的键值前几位，就能查看该对象的内部类型。<code>git cat-file -t d0e1e954557</code>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">blob</span><br></pre></td></tr></table></figure>
<h3 id="tree-对象"><a href="#tree-对象" class="headerlink" title="tree 对象"></a>tree 对象</h3><p><code>tree</code> 对象记录了文件名以及文件之间的关系，相当于就是文件夹的作用，可以理解为下边的图。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/git1.png" alt=""></p>
<p>下边演示如何用底层命令生成一个 <code>tree</code> 对象。</p>
<p>生成 <code>tree</code> 对象之前，我们需要将文件加入到暂存区。</p>
<p>新建一个空项目，然后 <code>git init</code>，新建文件 <code>test.txt</code>。</p>
<p>执行 <code>git update-index --add test.txt</code>，这个命令会生成相应的对象存入 <code>objects</code> 文件夹中，并将 <code>test.txt</code> 加入暂存区，</p>
<p>可以执行 <code>git status</code> 看一下。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">On branch master</span><br><span class="line"></span><br><span class="line">No commits yet</span><br><span class="line"></span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use <span class="string">"git rm --cached &lt;file&gt;..."</span> to unstage)</span><br><span class="line">	<span class="keyword">new</span> file:   test.txt</span><br></pre></td></tr></table></figure>
<p>同时可以看到 <code>objects</code> 文件夹中多了一个文件。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">objects</span><br><span class="line">├── <span class="number">95</span></span><br><span class="line">│   └── d09f2b10159347eece71399a7e2e907ea3df4f</span><br><span class="line">├── info</span><br><span class="line">└── pack</span><br></pre></td></tr></table></figure>
<p>暂存区有了文件以后，就可以生成一个 <code>tree</code> 对象了，执行 <code>git write-tree</code>，生成当前暂存区的一个快照，返回值如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">f03546f10f086a5cbc7b8580632ca6db2ba9411d</span><br></pre></td></tr></table></figure>
<p>会返回 <code>tree</code> 对象的 <code>key</code> 值，看一下 <code>objects</code> 文件夹，新生成了一个文件。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">objects</span><br><span class="line">├── <span class="number">95</span></span><br><span class="line">│   └── d09f2b10159347eece71399a7e2e907ea3df4f</span><br><span class="line">├── f0</span><br><span class="line">│   └── <span class="number">3546f</span>10f086a5cbc7b8580632ca6db2ba9411d</span><br><span class="line">├── info</span><br><span class="line">└── pack</span><br></pre></td></tr></table></figure>
<p>然后我们通过 <code>git cat-file -p f0354</code> 看一下 <code>tree</code> 对象的内容。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">100644 blob 95d09f2b10159347eece71399a7e2e907ea3df4f	test.txt</span><br></pre></td></tr></table></figure>
<p>可以看到当前 <code>tree</code> 对象包含有一个 <code>blob</code> 对象，文件名是 <code>test.txt</code>，<code>100644</code> 表示普通文件，还包括：<code>100755</code>，表示一个可执行文件；<code>120000</code>，表示一个符号链接。 </p>
<p>有了 <code>tree</code> 对象我们就有了文件名，以及文件之间的关系，但是更改文件后我们可能还需要一些注释，如果是多人合作，还需要指明是谁生成的快照。因此我们需要将当前 <code>tree</code> 对象再包装一层，生成 <code>commit</code> 对象。</p>
<h3 id="commit-对象"><a href="#commit-对象" class="headerlink" title="commit 对象"></a>commit 对象</h3><p>执行 <code>echo &#39;first commit&#39; | git commit-tree f0354</code> 将之前的 <code>tree</code> 对象包装成一个 <code>commit</code> 对象。<code>f0354</code> 是之前 <code>tree</code> 对象的 <code>key</code>，返回值如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">84340</span>eaeccbc0854bdec82f6b07f05eb01bd4dcd</span><br></pre></td></tr></table></figure>
<p>同样的给我们返回了 <code>commit</code> 对象的 <code>key</code>，同时看一下 <code>objects</code> 文件夹，也会多一个文件。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">objects</span><br><span class="line">├── <span class="number">84</span></span><br><span class="line">│   └── <span class="number">340</span>eaeccbc0854bdec82f6b07f05eb01bd4dcd</span><br><span class="line">├── <span class="number">95</span></span><br><span class="line">│   └── d09f2b10159347eece71399a7e2e907ea3df4f</span><br><span class="line">├── f0</span><br><span class="line">│   └── <span class="number">3546f</span>10f086a5cbc7b8580632ca6db2ba9411d</span><br><span class="line">├── info</span><br><span class="line">└── pack</span><br></pre></td></tr></table></figure>
<p>我们看一下这个 <code>commit</code> 对象的内容，<code>git cat-file -p 8434</code>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">tree f03546f10f086a5cbc7b8580632ca6db2ba9411d</span><br><span class="line">author windliang &lt;<span class="number">6489178757</span><span class="meta">@qq</span>.com&gt; <span class="number">1594200559</span> +<span class="number">0800</span></span><br><span class="line">committer windliang &lt;<span class="number">6489178757</span><span class="meta">@qq</span>.com&gt; <span class="number">1594200559</span> +<span class="number">0800</span></span><br><span class="line"></span><br><span class="line">first commit</span><br></pre></td></tr></table></figure>
<p>此外 <code>git commit-tree</code> 还有一个 <code>-p</code> 参数，用来指定当前 <code>commit</code> 对象的父 <code>commit</code> 对象。</p>
<p>比如我们修改一下文件，再生成新的 <code>tree</code> 对象，依次执行下边的命令。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">echo <span class="string">'hello world2'</span> &gt; test2.txt </span><br><span class="line">git update-index --add test2.txt</span><br><span class="line">git write-tree</span><br></pre></td></tr></table></figure>
<p>此时就得到了一个 <code>tree</code> 对象。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ab00cb505b3f955ab5fb245b7ca155a5820d2cd4</span><br></pre></td></tr></table></figure>
<p>接下再生成新的 <code>commit</code> 对象，并且指定父 <code>commit</code> 对象，<code>echo &#39;second commit&#39; | git commit-tree ab00 -p 8434</code>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">44</span>d318147e6b7bf2c3a5268018390440b2beae56</span><br></pre></td></tr></table></figure>
<p>然后我们通过这个 <code>commit</code> 对象的 <code>key</code> 查看一下 <code>log</code> ，<code>git log 44d3</code>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">commit <span class="number">44</span>d318147e6b7bf2c3a5268018390440b2beae56</span><br><span class="line">Author: windliang &lt;<span class="number">6489178757</span><span class="meta">@qq</span>.com&gt;</span><br><span class="line">Date:   Wed Jul <span class="number">8</span> <span class="number">17</span>:<span class="number">47</span>:<span class="number">31</span> <span class="number">2020</span> +<span class="number">0800</span></span><br><span class="line"></span><br><span class="line">    second commit</span><br><span class="line"></span><br><span class="line">commit <span class="number">84340</span>eaeccbc0854bdec82f6b07f05eb01bd4dcd</span><br><span class="line">Author: windliang &lt;<span class="number">6489178757</span><span class="meta">@qq</span>.com&gt;</span><br><span class="line">Date:   Wed Jul <span class="number">8</span> <span class="number">17</span>:<span class="number">29</span>:<span class="number">19</span> <span class="number">2020</span> +<span class="number">0800</span></span><br><span class="line"></span><br><span class="line">    first commit</span><br></pre></td></tr></table></figure>
<p>因为设置了父 <code>commit</code> 对象，所以第一次的提交也可以看到。</p>
<h2 id="refs-文件夹，HEAD-文件"><a href="#refs-文件夹，HEAD-文件" class="headerlink" title="refs 文件夹，HEAD 文件"></a>refs 文件夹，HEAD 文件</h2><h3 id="heads"><a href="#heads" class="headerlink" title="heads"></a>heads</h3><p>我们刚刚执行 <code>git log</code> 命令的时候，写的是 <code>git log 44d3</code>，多加了 <code>commit</code> 对象的 <code>key</code> 值 <code>44d3</code>，写起来很麻烦，我们可以给它起一个别名，这个别名就是我们一直用的分支了。</p>
<p>我们将 <code>commit</code> 对象的 <code>key</code> 值写入 <code>.git/refs/heads/master</code> 文件中</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line">echo 44d318147e6b7bf2c3a5268018390440b2beae56 &gt; .git/refs/heads/master</span><br></pre></td></tr></table></figure>
<p>然后执行 <code>git log master</code> 就可以看到 <code>log</code> 了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">commit <span class="number">44</span>d318147e6b7bf2c3a5268018390440b2beae56 (HEAD -&gt; master)</span><br><span class="line">Author: windliang &lt;<span class="number">6489178757</span><span class="meta">@qq</span>.com&gt;</span><br><span class="line">Date:   Wed Jul <span class="number">8</span> <span class="number">17</span>:<span class="number">47</span>:<span class="number">31</span> <span class="number">2020</span> +<span class="number">0800</span></span><br><span class="line"></span><br><span class="line">    second commit</span><br><span class="line"></span><br><span class="line">commit <span class="number">84340</span>eaeccbc0854bdec82f6b07f05eb01bd4dcd</span><br><span class="line">Author: windliang &lt;<span class="number">6489178757</span><span class="meta">@qq</span>.com&gt;</span><br><span class="line">Date:   Wed Jul <span class="number">8</span> <span class="number">17</span>:<span class="number">29</span>:<span class="number">19</span> <span class="number">2020</span> +<span class="number">0800</span></span><br><span class="line"></span><br><span class="line">    first commit</span><br></pre></td></tr></table></figure>
<p>可以省略 <code>master</code> ，直接执行 <code>git log</code> ，默认查询的就是当前分支的 <code>log</code>。</p>
<p>我们也可以给另外一个 <code>commit</code> 对象创建一个别名，换句话说创建一个新的分支。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">echo <span class="number">84340</span>eaeccbc0854bdec82f6b07f05eb01bd4dcd &gt; .git/refs/heads/dev</span><br></pre></td></tr></table></figure>
<p>然后执行 <code>git checkout dev</code> 会发现可以成功的切换分支，说明分支创建成功了。</p>
<p>这里我们直接操控了文件，<code>git</code> 其实给我提供了一个命令，会更加安全</p>
<p><code>git update-ref refs/heads/dev 84340eaeccbc0854bdec82f6b07f05eb01bd4dcd</code></p>
<p>回想一下我们之前创建分支的命令，会执行 <code>git branch fix</code> ，注意到我们并没有指定 <code>commit</code> 对象的 <code>key</code> 值，为什么可以成功创建分支呢？</p>
<p><code>HEAD</code> 文件！它里边始终保存着最新的 <code>commit</code> 对象的 <code>key</code> 值，当有新的 <code>commit</code> 的时候它会更新，当切换分支的时候它也会更新。</p>
<p>打开 <code>HEAD</code> 文件可以看一下。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ref: refs/heads/master</span><br></pre></td></tr></table></figure>
<p>他保存了一个引用，<code>refs/heads/master</code> 文件保存的就是当前分支最新的 <code>commit</code> 对象的 <code>key</code> 值。</p>
<p>如果我们切换分支，<code>git checkout dev</code> ，可以看到 <code>HEAD</code> 中的值也会相应的变化。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ref: refs/heads/dev</span><br></pre></td></tr></table></figure>
<h3 id="tags"><a href="#tags" class="headerlink" title="tags"></a>tags</h3><p>上边介绍了 <code>blob</code> 对象，<code>tree</code> 对象，<code>commit</code> 对象。<code>commit</code> 对象是包装了 <code>tree</code> 对象，还有个 <code>tag</code> 对象，通常是对 <code>commit</code> 对象的包装。</p>
<p>标签的话主要分为附注标签和轻量标签。 可以像创建分支那样创建一个轻量标签：</p>
<p><code>git update-ref refs/tags/v1.0 44d318147e6b7bf2c3a5268018390440b2beae56</code></p>
<p>轻量标签的话相当于就是对 <code>commit</code> 的一个引用，没有创建新的对象。</p>
<p>我们再来创建一个附录对象，可以添加一些注释。</p>
<p><code>git tag -a v1.1 84340eaeccbc0854bdec82f6b07f05eb01bd4dcd  -m &#39;test tag&#39;</code></p>
<p>看一下新创建对象的 <code>key</code> 值，<code>cat .git/refs/tags/v1.1</code>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">b518af197d2a925b668043edf1af88b82664e19f</span><br></pre></td></tr></table></figure>
<p>然后查看一下该对象，<code>git cat-file -p b518</code>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">object <span class="number">84340</span>eaeccbc0854bdec82f6b07f05eb01bd4dcd</span><br><span class="line">type commit</span><br><span class="line">tag v1.1</span><br><span class="line">tagger windliang &lt;<span class="number">6489178757</span><span class="meta">@qq</span>.com&gt; <span class="number">1594208408</span> +<span class="number">0800</span></span><br><span class="line"></span><br><span class="line">test tag</span><br></pre></td></tr></table></figure>
<p>我们顺便看一下这个对象的类型，<code>git cat-file -t b518</code>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">tag</span><br></pre></td></tr></table></figure>
<p>另外要注意的是，标签对象并非必须指向某个 <code>commit</code> 对象，它可以对任意类型的 <code>git</code> 对象打标签。</p>
<h3 id="remotes"><a href="#remotes" class="headerlink" title="remotes"></a>remotes</h3><p>如果有远程仓库，并对其执行过推送操作，<code>git</code> 会记录下最近一次推送操作时的分支，并保存在 <code>refs/remotes</code> 目录下。 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">$ git remote add origin git<span class="meta">@github</span>.com:wind-liang/test.git</span><br><span class="line">$ git push -u origin master</span><br><span class="line">Enumerating objects: <span class="number">6</span>, done.</span><br><span class="line">Counting objects: <span class="number">100</span>% (<span class="number">6</span>/<span class="number">6</span>), done.</span><br><span class="line">Delta compression using up to <span class="number">12</span> threads</span><br><span class="line">Compressing objects: <span class="number">100</span>% (<span class="number">3</span>/<span class="number">3</span>), done.</span><br><span class="line">Writing objects: <span class="number">100</span>% (<span class="number">6</span>/<span class="number">6</span>), <span class="number">467</span> bytes | <span class="number">467.00</span> KiB/s, done.</span><br><span class="line">Total <span class="number">6</span> (delta <span class="number">0</span>), reused <span class="number">0</span> (delta <span class="number">0</span>)</span><br><span class="line">To github.com:wind-liang/test.git</span><br><span class="line"> * [<span class="keyword">new</span> branch]      master -&gt; master</span><br><span class="line">Branch <span class="string">'master'</span> set up to track remote branch <span class="string">'master'</span> from <span class="string">'origin'</span>.</span><br></pre></td></tr></table></figure>
<p>然后查看 <code>remotes</code> 里的文件，<code>cat .git/refs/remotes/origin/master</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">44</span>d318147e6b7bf2c3a5268018390440b2beae56</span><br></pre></td></tr></table></figure>
<p>这个值就是最新的 <code>commit</code> 对象的 <code>key</code> 值。远程引用和分支（位于 <code>refs/heads</code> 目录下的引用）之间最主要的区别在于，远程引用是只读的。 虽然可以 <code>git checkout</code> 到某个远程引用，但是 <code>Git</code> 并不会将 <code>HEAD</code> 引用指向该远程引用。</p>
<h2 id="objects-pack"><a href="#objects-pack" class="headerlink" title="objects/pack"></a>objects/pack</h2><p>前边我们讲了每一个文件都作为一个对象存到 <code>objects</code> 目录下，如果只修改了文件的某一行，然后进行提交，依旧会新生成一个 <code>object</code>。如果 <code>git</code> 只保存其中一个，再保存另一个对象与之前版本的差异内容，不是能省些空间吗？</p>
<p>事实上 <code>Git</code> 可以那样做。 但 <code>Git</code> 最初向磁盘中存储对象时所使用的格式被称为「松散（loose）」对象格式。 <code>Git</code> 会时不时地将多个这些对象打包成一个称为“包文件（packfile）”的二进制文件，以节省空间和提高效率。 当版本库中有太多的松散对象，或者手动执行 <code>git gc</code> 命令，或者你向远程服务器执行推送时，<code>Git</code> 都会这样做。 </p>
<p><code>Git</code> 打包对象时，会查找命名及大小相近的文件，并只保存文件不同版本之间的差异内容。可以找一个项目看一下 <code>pack</code> 下的目录。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">pack</span><br><span class="line">├── pack-<span class="number">0</span>efa08fc30b8d98dff42203c71c6afe0533ce468.idx</span><br><span class="line">├── pack-<span class="number">0</span>efa08fc30b8d98dff42203c71c6afe0533ce468.pack</span><br><span class="line">├── pack-<span class="number">19571818</span>da01df976f52298facf362dc93d61026.idx</span><br><span class="line">├── pack-<span class="number">19571818</span>da01df976f52298facf362dc93d61026.pack</span><br><span class="line">├── pack-<span class="number">725</span>ab685133ed6e35083c5b3dcaf02ebc238489c.idx</span><br><span class="line">├── pack-<span class="number">725</span>ab685133ed6e35083c5b3dcaf02ebc238489c.pack</span><br><span class="line">├── pack-<span class="number">7</span>c01d29f0cb068c617aa49471cbf9f6eb1cb2156.idx</span><br><span class="line">├── pack-<span class="number">7</span>c01d29f0cb068c617aa49471cbf9f6eb1cb2156.pack</span><br><span class="line">├── pack-a59c4fce103fb83cec0f513ab32cd92e6122e7a4.idx</span><br><span class="line">├── pack-a59c4fce103fb83cec0f513ab32cd92e6122e7a4.pack</span><br><span class="line">├── pack-db0d185ea0e7d96bbad911bb371c67869d8599b0.idx</span><br><span class="line">├── pack-db0d185ea0e7d96bbad911bb371c67869d8599b0.pack</span><br><span class="line">├── pack-f07ea07e30bb0aa4dfbb1fcb08da4cd5e5e5f793.idx</span><br><span class="line">└── pack-f07ea07e30bb0aa4dfbb1fcb08da4cd5e5e5f793.pack</span><br></pre></td></tr></table></figure>
<p>可以是两种类型，一种是打包文件，另一种就是索引文件，用来记录不同版本之间的差异。更详细的可以看一下 <a href="https://git-scm.com/book/zh/v2/Git-%E5%86%85%E9%83%A8%E5%8E%9F%E7%90%86-%E5%8C%85%E6%96%87%E4%BB%B6" target="_blank" rel="noopener">Git 内部原理 - 包文件</a>。</p>
<h2 id="packed-refs文件"><a href="#packed-refs文件" class="headerlink" title="packed-refs文件"></a>packed-refs文件</h2><p>执行 <code>gc</code> 以后，会将 <code>refs</code> 文件夹中的引用打包到这个文件中。</p>
<h2 id="index"><a href="#index" class="headerlink" title="index"></a>index</h2><p>当我们执行了 <code>git add</code> 或者上边讲到的 <code>git update-index --add</code> 命令，我们就会发现 <code>.git</code> 目录下增加了一个 <code>index</code> 文件。这个文件存储的东西就是我们常说的「暂存区」。它主要存储了每个文件的索引，也就是在 <code>objects</code> 目录下生成的对象的 <code>SHA-1</code> 哈希值。还有生成 <code>tree</code> 对象的一些信息，比如文件名以及文件之间的关系，为下一步生成 <code>tree</code> 对象做准备。</p>
<h2 id="hooks-文件夹"><a href="#hooks-文件夹" class="headerlink" title="hooks 文件夹"></a>hooks 文件夹</h2><p>这里主要是 <code>git</code> 为我们提供了一些钩子函数，把下边的 <code>.sample</code> 去掉，当前钩子就会生效。可以编辑各个钩子文件，就可以在执行 <code>push</code>、<code>commit</code> 等操作时完成一些自己想要的一些动作。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">hooks</span><br><span class="line">├── applypatch-msg.sample</span><br><span class="line">├── commit-msg.sample</span><br><span class="line">├── fsmonitor-watchman.sample</span><br><span class="line">├── post-update.sample</span><br><span class="line">├── pre-applypatch.sample</span><br><span class="line">├── pre-commit.sample</span><br><span class="line">├── pre-merge-commit.sample</span><br><span class="line">├── pre-push.sample</span><br><span class="line">├── pre-rebase.sample</span><br><span class="line">├── pre-receive.sample</span><br><span class="line">├── prepare-commit-msg.sample</span><br><span class="line">└── update.sample</span><br></pre></td></tr></table></figure>
<p>通过钩子，可以实现提交代码前自动格式化代码、规范化 <code>commit-msg</code> 等功能，还可以做到当远程仓库 <code>github</code> 更新后，让服务器端自动拉取最新项目，实现一些 <code>web</code> 项目的自动更新。</p>
<h2 id="COMMIT-EDITMSG"><a href="#COMMIT-EDITMSG" class="headerlink" title="COMMIT_EDITMSG"></a>COMMIT_EDITMSG</h2><p>存储最后一次提交的信息内容。<code>git commit</code> 命令之后打开的编辑器就是在编辑此文件，退出编辑器保存后，<code>git</code> 会把此文件内容写入 <code>commit</code> 记录。一般直接在 <code>commit</code> 命令后添加 <code>-m</code> 选项，附加提交信息。</p>
<h2 id="ORIG-HEAD-文件"><a href="#ORIG-HEAD-文件" class="headerlink" title="ORIG_HEAD 文件"></a>ORIG_HEAD 文件</h2><p>相当于 <code>HEAD</code> 文件的一个备份，会指向 <code>HEAD</code> 之前的一个 <code>commit</code> 对象。当执行一些危险的操作，比如 <code>git rebase</code> 等，需要先记录 <code>ORIG_HEAD</code> 再执行其他的操作。</p>
<h2 id="FETCH-HEAD-文件"><a href="#FETCH-HEAD-文件" class="headerlink" title="FETCH_HEAD 文件"></a>FETCH_HEAD 文件</h2><p><code>FETCH_HEAD</code> 记录了 <code>fetch</code> 时候远程分支的 <code>key</code> 值，也就是 <code>commit</code> 对象的 <code>SHA-1</code> 哈希值。当执行 <code>git pull</code> 的时候相当于先执行 <code>git fetch</code> ，然后执行 <code>git merge FETCH_HEAD</code> ，也就是和拉取下来的远程分支合并。</p>
<p>打开 <code>FETCH_HEAD</code> 文件，第一行就是 <code>FETCH_HEAD</code> 的值，用于 <code>merge</code>，其它行是同时拉取下来的分支。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">d6a81fdb23503d5e85cb8f74ea77cd4ab20e0659		branch <span class="string">'master'</span> of ssh:<span class="comment">//git.github.com/ed-f2e/test</span></span><br><span class="line"><span class="number">5</span>ce98b8e6f832382417c5a1ef55f1f1ca303f86d	not-<span class="keyword">for</span>-merge	branch <span class="string">'foodsafetab-20200701'</span> of ssh:<span class="comment">//git.github.com/ed-f2e/test</span></span><br><span class="line">d46bec5fea5af996d75497b05592802ef31fe63b	not-<span class="keyword">for</span>-merge	branch <span class="string">'overview-20200601'</span> of ssh:<span class="comment">//git.github.com/ed-f2e/test</span></span><br><span class="line"><span class="number">005</span>ef114aa680401681f582b8f71dfe020417989	not-<span class="keyword">for</span>-merge	branch <span class="string">'visual-20200622'</span> of ssh:<span class="comment">//git.github.com/ed-f2e/test</span></span><br></pre></td></tr></table></figure>
<p>关键字 <code>not-for-merge</code>，表明 <code>git pull</code> 时只 <code>fetch</code>，不 <code>merge</code>。</p>
<h2 id="logs-文件夹"><a href="#logs-文件夹" class="headerlink" title="logs 文件夹"></a>logs 文件夹</h2><p>记录了操作信息，<code>git reflog</code> 命令以及像 <code>HEAD@{1}</code> 形式的路径会用到。如果删除此文件夹，那么依赖于 <code>reflog</code> 的命令就会报错。</p>
<h2 id="文件夹总"><a href="#文件夹总" class="headerlink" title="文件夹总"></a>文件夹总</h2><p>基本上把 <code>.git</code> 目录总结完了，下边汇总一下。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── COMMIT_EDITMSG <span class="comment">// git commit 时候编辑的文件</span></span><br><span class="line">├── FETCH_HEAD <span class="comment">// git fetch 保存从远程仓库抓取下来的 commit 对象的键值</span></span><br><span class="line">├── HEAD <span class="comment">// 保存当前 commit 对象的键值</span></span><br><span class="line">├── ORIG_HEAD <span class="comment">// 执行危险操作时 HEAD 的备份</span></span><br><span class="line">├── config <span class="comment">// 当前 git 仓库的相关配置，优先级最高</span></span><br><span class="line">├── description <span class="comment">// 仅供 GitWeb 程序使用</span></span><br><span class="line">├── hooks <span class="comment">// 保存 git 的所有钩子</span></span><br><span class="line">│   ├── applypatch-msg.sample</span><br><span class="line">│   ├── commit-msg</span><br><span class="line">│   ├── commit-msg.git-flow</span><br><span class="line">│   ├── commit-msg.sample</span><br><span class="line">│   ├── fsmonitor-watchman.sample</span><br><span class="line">│   ├── post-update.sample</span><br><span class="line">│   ├── pre-applypatch.sample</span><br><span class="line">│   ├── pre-commit</span><br><span class="line">│   ├── pre-commit.git-flow</span><br><span class="line">│   ├── pre-commit.mt-eslint-check</span><br><span class="line">│   ├── pre-commit.sample</span><br><span class="line">│   ├── pre-merge-commit.sample</span><br><span class="line">│   ├── pre-push</span><br><span class="line">│   ├── pre-push.git-flow</span><br><span class="line">│   ├── pre-push.sample</span><br><span class="line">│   ├── pre-rebase.sample</span><br><span class="line">│   ├── pre-receive.sample</span><br><span class="line">│   ├── prepare-commit-msg.sample</span><br><span class="line">│   └── update.sample</span><br><span class="line">├── index <span class="comment">// 暂存区，保存对象的索引和 tree 对象的相关信息</span></span><br><span class="line">├── info</span><br><span class="line">│   └── exclude <span class="comment">// 和 .gitignore 一样的作用</span></span><br><span class="line">├── logs <span class="comment">// 记录历史的一些操作，git reflog 命令依赖于此目录</span></span><br><span class="line">├── objects <span class="comment">// git 的数据库，存放所有对象</span></span><br><span class="line">│   ├── <span class="number">0f</span></span><br><span class="line">│   │   ├── <span class="number">01</span>ae962d3a527bfd692175ee5600501eef43fb</span><br><span class="line">│   │   ├── <span class="number">5</span>ef114aa680401681f582b8f71dfe020417989</span><br><span class="line">│   │   ├── <span class="number">71685e674</span>a8190ba2f94391cae5f99ea4854fb</span><br><span class="line">│   │   └── cef7d6ec44ae5ffabf2514bd19ccb1ec303eb4</span><br><span class="line">│   ├── <span class="number">34</span></span><br><span class="line">│   │   ├── <span class="number">621</span>a5fb9cdb057a09c559586702a4d20388c71</span><br><span class="line">│   │   └── <span class="number">6e1</span>d53b34578f0bfcef11dd2d59dc25072e79e</span><br><span class="line">│   ├── <span class="number">55</span></span><br><span class="line">│   │   ├── <span class="number">137e5</span>e9f4e37218033af62bc9fcc2fded5545b</span><br><span class="line">│   │   ├── c0d6f9e2d8df065ccb512d45cbbd61d327e7fd</span><br><span class="line">│   │   └── eeddf196be55abc4292f562b8bd4fb19bbb2d4</span><br><span class="line">│   ├── info</span><br><span class="line">│   └── pack</span><br><span class="line">│       ├── pack-<span class="number">679830</span>bc13d16192a07ddaa0f51f49b0163b7578.idx</span><br><span class="line">│       └── pack-<span class="number">679830</span>bc13d16192a07ddaa0f51f49b0163b7578.pack</span><br><span class="line">├── packed-refs <span class="comment">// 执行 gc 以后，将 refs 中的引用进行打包</span></span><br><span class="line">└── refs <span class="comment">// 对 commit 对象的引用</span></span><br><span class="line">    ├── heads <span class="comment">//所有分支</span></span><br><span class="line">    │   ├── master</span><br><span class="line">    ├── remotes <span class="comment">// 远程分支所对应的 key 值</span></span><br><span class="line">    │   └── origin</span><br><span class="line">    │       ├── HEAD</span><br><span class="line">    │       └── master</span><br><span class="line">    └── tags <span class="comment">// 所有标签</span></span><br></pre></td></tr></table></figure>
<h2 id="对象总结"><a href="#对象总结" class="headerlink" title="对象总结"></a>对象总结</h2><p>主要包括 <code>blob</code> 对象，<code>tree</code> 对象，<code>commit</code> 对象，还有 <code>tag</code> 对象。通过 <code>commit</code> 对象以链表的形式连接在了一起。</p>
<p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/git2.png" alt=""></p>
<p>可以看到第一次 <code>commit</code> 的时候，创建了 <code>README.md</code>，<code>index.html</code>，<code>js</code> 文件夹以及 <code>index.js</code>。</p>
<p>第二次 <code>commit</code> 的时候，仅仅修改了 <code>index.html</code>，其他文件仍旧指向原来的对象。并且用当前 <code>commit</code> 包装了一个 <code>tag</code> 对象。</p>
<p>第三次 <code>commit</code> 的时候，增加了 <code>index.css</code> 文件，其他文件仍旧指向原来的对象。此外当前 <code>commit</code> 对象是当前操作的对象，所以 <code>HEAD</code> 指向当前 <code>commit</code> 对象，另外 <code>mater</code> 分支也指向当前 <code>commit</code> 对象。</p>
<h1 id="换一种眼光看命令"><a href="#换一种眼光看命令" class="headerlink" title="换一种眼光看命令"></a>换一种眼光看命令</h1><p>这一节回顾一下 <code>git</code> 经常用的命令和上边介绍的文件的一些关系。为了方便监测每个命令改变了哪些文件，我们在 <code>.git</code> 目录中再执行一次 <code>git init</code>，也就是将 <code>.git</code> 目录看作我们的另外一个项目，操作如下：</p>
<p>新建一个目录，<code>learnGit</code>，在里边新建 <code>index.html</code>，<code>README.md</code>，<code>js</code> 文件夹，<code>js</code> 文件夹中新建 <code>index.js</code>。目录结构如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── README.md</span><br><span class="line">├── index.html</span><br><span class="line">└── js</span><br><span class="line">    └── index.js</span><br></pre></td></tr></table></figure>
<p>然后初始化当前目录为 <code>git</code> 仓库。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">learnGit % git init</span><br><span class="line">Initialized empty Git repository in /Users/learnGit/.git/</span><br></pre></td></tr></table></figure>
<p>此时就会自动生成 <code>.git</code> 目录，进入 <code>.git</code> 目录再执行一次 <code>git init</code> ，<code>git add .</code> ，<code>git commit -m &quot;init&quot;</code>，来监测后续  <code>.git</code> 目录的变化情况。然后回到我们的根目录<code>learnGit</code> 中进行下边的实验。</p>
<h2 id="git-add"><a href="#git-add" class="headerlink" title="git add ."></a>git add .</h2><p>此时会发现每个文件会生成一个对象，因此 <code>objects</code> 文件夹中多了 <code>3</code> 个文件（如果是 <code>mac</code> 系统会发现多了 <code>4</code> 个文件，原因是系统自动生成了一个 <code>.DS_Store</code> 文件，这里就不考虑了），也就是 <code>3</code> 个 <code>blob</code> 对象。此外，增加了 <code>index</code> 文件，也就是暂存区，会存储每个 <code>commit</code> 对象的索引，以及生成 <code>tree</code> 对象的相关信息。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">create mode 100644 index</span><br><span class="line">create mode 100644 objects/4d/7a16a7949cf8206f6f910535fd6811d4a5e3d2</span><br><span class="line">create mode 100644 objects/94/a127e7307c6562a2bdbf2d156589572c31963e</span><br><span class="line">create mode 100644 objects/c3/b573586becc940e02cd0914ef2eaf6d1ff7a28</span><br></pre></td></tr></table></figure>
<p>相当于执行了 <code>git hash-object -w 文件名</code> 生成对象，以及 <code>git update-index --add 文件名</code> 命令，将文件加入暂存区。</p>
<h2 id="git-commit-m"><a href="#git-commit-m" class="headerlink" title="git commit -m"></a>git commit -m</h2><p>执行 <code>git commit -m &quot;first&quot;</code>，文件变化情况如下。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">create mode 100644 COMMIT_EDITMSG</span><br><span class="line">create mode 100644 logs/HEAD</span><br><span class="line">create mode 100644 logs/refs/heads/master</span><br><span class="line">create mode 100644 objects/74/900affe800f97c02e9cad8a9b2304e21f0a412 //commit 对象</span><br><span class="line">create mode 100644 objects/bc/4a821da58aa317d1790199b98b1e1b638baebb //tree 对象</span><br><span class="line">create mode 100644 objects/d2/eb8f97312f90fe39586e6deefb6b41b4d8340f //tree 对象</span><br><span class="line">create mode 100644 refs/heads/master</span><br></pre></td></tr></table></figure>
<p>会发现 <code>objects</code> 文件夹中多了三个文件，其中两个是 <code>tree</code> 对象，因为我们的目录有两个文件夹。另一个就是包装了 <code>tree</code> 对象的 <code>commit</code> 对象。</p>
<p>增加了 <code>COMMIT_EDITMSG</code>，也就是 <code>commit</code> 时候写的提交信息，在这里的话里边内容就是 “first”。</p>
<p><code>logs</code> 目录发生了一些变化，<code>reflog</code> 命令依赖这里的文件。</p>
<p>自动为我们创建了 <code>mater</code> 分支，因此增加了 <code>refs/heads/master</code> 文件，里边的内容就是我们刚刚生成的 <code>commit</code> 对象的 <code>hash</code> 值，也就是 <code>74900affe800f97c02」9cad8a9b2304e21f0a412</code>。</p>
<h2 id="git-push"><a href="#git-push" class="headerlink" title="git push"></a>git push</h2><p>我们先执行 <code>git remote add origin git@github.com:wind-liang/learnGit.git</code> 添加一个远程仓库。此时 <code>config</code> 文件多了三行，记录了远程仓库。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[remote <span class="string">"origin"</span>]</span><br><span class="line">	url = git<span class="meta">@github</span>.com:wind-liang/learnGit.git</span><br><span class="line">	fetch = +refs/heads<span class="comment">/*:refs/remotes/origin/*</span></span><br></pre></td></tr></table></figure>
<p>记录了远程仓库的名字 <code>origin</code>，以及 <code>url</code> 地址，还有就是执行 <code>fetch</code> 时候的默认操作，从远程取回所有分支的更新，可以看下一节<code>fetch</code> 命令的介绍。</p>
<p>格式：<code>git push &lt;远程主机名&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt;</code>。</p>
<p>我们执行 <code>git push origin master</code>，可以省略远程分支名，默认和本地分支名一致。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">create mode <span class="number">100644</span> logs/refs/remotes/origin/master</span><br><span class="line">create mode <span class="number">100644</span> refs/remotes/origin/master</span><br></pre></td></tr></table></figure>
<p><code>logs</code> 就不说了。会发现本地新建了一个远程分支 <code>origin/master</code>，里边内容就是我们刚刚推送的本地 <code>mater</code> 分支指向的 <code>commit</code> 对象的 <code>hash</code> 值，也就是 <code>74900affe800f97c02e9cad8a9b2304e21f0a412</code> 。</p>
<p>此时我们修改 <code>index.html</code> ，然后执行 <code>git add .</code> 加到暂存区。看一下文件的变化。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">index                                             | Bin <span class="number">396</span> -&gt; <span class="number">377</span> bytes</span><br><span class="line">objects/<span class="number">07</span>/<span class="number">51</span>aaed4e8f37c1f84eb7780ca08989029ec504 | Bin <span class="number">0</span> -&gt; <span class="number">247</span> bytes</span><br></pre></td></tr></table></figure>
<p>此时会多一个对象，也就是新一版的 <code>index.html</code> ，以及 <code>index</code> 文件会发生变化。</p>
<p>接着执行 <code>git commit -m &quot;second&quot;</code>，会根据暂存区的信息生成当前的树对象以及 <code>commit</code> 对象，<code>objects</code> 文件夹中应该会增加两个对象，一个 <code>tree</code> 对象，一个 <code>commit</code> 对象。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">COMMIT_EDITMSG                                    |   <span class="number">2</span> +-</span><br><span class="line">index                                             | Bin <span class="number">377</span> -&gt; <span class="number">396</span> bytes</span><br><span class="line">logs/HEAD                                         |   <span class="number">1</span> +</span><br><span class="line">logs/refs/heads/master                            |   <span class="number">1</span> +</span><br><span class="line">objects/<span class="number">63</span>/<span class="number">53</span>b5966f6bbf3f6a840b1261030519b67fdf51 | Bin <span class="number">0</span> -&gt; <span class="number">150</span> bytes</span><br><span class="line">objects/af/f7b5ebae94eba99e5fa0ef245595c21686562b | Bin <span class="number">0</span> -&gt; <span class="number">154</span> bytes</span><br><span class="line">refs/heads/master                                 |   <span class="number">2</span> +-</span><br></pre></td></tr></table></figure>
<p><code>refs/heads/master</code> 也会更新，指向最新的 <code>commit</code> 对象。</p>
<p>如果我们想把当前改变再推送到远程仓库，又需要执行 <code>git push origin master</code> ，有些长。<code>git</code> 为我们提供了 <code>--set-upstream</code> 参数，简写是 <code>-u</code>，可以让本地分支关联都某个远程分支，这样的话如果下次想把当前分支推送到远程，只需要执行 <code>git push</code> 就可以了。</p>
<p>我们执行一下 <code>git push -u origin master</code> ，看一下哪些文件会变化。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">config                          | 3 +++</span><br><span class="line">logs/refs/remotes/origin/master | 1 +</span><br><span class="line">refs/remotes/origin/master      | 2 +-</span><br></pre></td></tr></table></figure>
<p>看一下 <code>config</code> 文件。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[core]</span><br><span class="line">	repositoryformatversion = 0</span><br><span class="line">	filemode = <span class="literal">true</span></span><br><span class="line">	bare = <span class="literal">false</span></span><br><span class="line">	logallrefupdates = <span class="literal">true</span></span><br><span class="line">	ignorecase = <span class="literal">true</span></span><br><span class="line">	precomposeunicode = <span class="literal">true</span></span><br><span class="line">[remote <span class="string">"origin"</span>]</span><br><span class="line">	url = git@github.com:wind-liang/learnGit.git</span><br><span class="line">	fetch = +refs/heads/*:refs/remotes/origin/*</span><br><span class="line">[branch <span class="string">"master"</span>]</span><br><span class="line">	remote = origin</span><br><span class="line">	merge = refs/heads/master</span><br></pre></td></tr></table></figure>
<p>可以看到，它记录了本地 <code>mater</code> 分支和远程仓库 <code>origin</code> 中的 <code>refs/heads/mater</code> 关联。除了在 <code>git push</code> 起作用，<code>git fetch</code> 和 <code>git pull</code> 的默认操作也会依赖这里的配置，可以继续看下边的小节。</p>
<p>此外，这里建立的远程分支必须要和本地分支同名，因为在 <code>Git 2.0</code> 之后 <code>git push</code> 不加任何参数的话，默认模式为 <code>simple</code>，推送当前分支到<code>upstream</code> 分支上，必须保证本地分支与 <code>upstream</code> 分支同名，不然的话 <code>git push</code> 是没有用的。</p>
<p>比如我们将 <code>mater</code> 分支和远程仓库的 <code>dev</code> 分支关联，执行 <code>git branch -u origin/dev</code>，再执行 <code>git push</code> 就会得到下边的提示。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">fatal: The upstream branch of your current branch does not match</span><br><span class="line">the name of your current branch.  To push to the upstream branch</span><br><span class="line">on the remote, use</span><br><span class="line"></span><br><span class="line">    git push origin HEAD:dev</span><br><span class="line"></span><br><span class="line">To push to the branch of the same name on the remote, use</span><br><span class="line"></span><br><span class="line">    git push origin HEAD</span><br><span class="line"></span><br><span class="line">To choose either option permanently, see push.<span class="keyword">default</span> in <span class="string">'git help config'</span>.</span><br></pre></td></tr></table></figure>
<p>还有其他的模式，<code>nothing, current, upstream,  matching</code>，一般就用默认的 <code>simple</code>，这里就不介绍了。</p>
<h2 id="git-fetch"><a href="#git-fetch" class="headerlink" title="git fetch"></a>git fetch</h2><p>为了更详细的看 <code>git fetch</code> 命令的作用。我新建了另一个远程仓库 <code>origin2</code>，关联到了当前本地仓库，并且在远程仓库中添加了 <code>index2.txt</code>。</p>
<p>同时在原来 <code>origin</code> 的远程仓库中，在 <code>mater</code> 分支新增了 <code>index.css</code> 文件。增加了 <code>dev</code> 分支，并且修改了 <code>index.html</code> 。</p>
<p>当前本地仓库的配置文件如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[core]</span><br><span class="line">	repositoryformatversion = 0</span><br><span class="line">	filemode = <span class="literal">true</span></span><br><span class="line">	bare = <span class="literal">false</span></span><br><span class="line">	logallrefupdates = <span class="literal">true</span></span><br><span class="line">	ignorecase = <span class="literal">true</span></span><br><span class="line">	precomposeunicode = <span class="literal">true</span></span><br><span class="line">[remote <span class="string">"origin"</span>]</span><br><span class="line">	url = git@github.com:wind-liang/learnGit.git</span><br><span class="line">	fetch = +refs/heads/*:refs/remotes/origin/*</span><br><span class="line">[branch <span class="string">"master"</span>]</span><br><span class="line">	remote = origin</span><br><span class="line">	merge = refs/heads/master</span><br><span class="line">[remote <span class="string">"origin2"</span>]</span><br><span class="line">	url = git@github.com:wind-liang/learnGit2.git</span><br><span class="line">	fetch = +refs/heads/*:refs/remotes/origin2/*</span><br></pre></td></tr></table></figure>
<p> <code>git fetch</code>  的命令格式为 <code>git fetch &lt;远程主机名&gt; &lt;分支名&gt;</code>。</p>
<p>我们不加参数，只执行 <code>git fetch</code> 看一下效果。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">FETCH_HEAD                                        |   2 ++</span><br><span class="line">logs/refs/remotes/origin/dev                      |   1 +</span><br><span class="line">logs/refs/remotes/origin/master                   |   1 +</span><br><span class="line">objects/08/f4162aa74066285166b9b46f845ea648941943 | Bin 0 -&gt; 151 bytes</span><br><span class="line">objects/36/619ae122d6e01b7c82838247754173c1b6930a | Bin 0 -&gt; 177 bytes</span><br><span class="line">objects/88/688aebd84396af325f55f82a4bdf0e283a8e4a | Bin 0 -&gt; 251 bytes</span><br><span class="line">objects/b1/be33b8a27e1fcfa2c9f01b0fcb76a28b091071 |   2 ++</span><br><span class="line">objects/be/5678cb94b6da6f94cad10077739a850cd893b5 | Bin 0 -&gt; 38 bytes</span><br><span class="line">objects/ff/383d0247ea2c27dd2d44753dd5b18ca4ecfeaf | Bin 0 -&gt; 177 bytes</span><br><span class="line">refs/remotes/origin/dev                           |   1 +</span><br><span class="line">refs/remotes/origin/master                        |   2 +-</span><br><span class="line">11 files changed, 8 insertions(+), 1 deletion(-)</span><br></pre></td></tr></table></figure>
<p>默认抓取了远程仓库 <code>origin</code> 的两个分支。由于远程仓库新增了 <code>index.css</code> 文件，并且修改了 <code>dev</code> 分支中的 <code>index.html</code> ，所以是 <code>2</code> 个 <code>blob</code> 对象，<code>2</code> 个 <code>tree</code> 对象，<code>2</code>  个 <code>commit</code> 对象，所以 <code>objects</code> 文件中增加了 <code>6</code> 个对象。</p>
<p><code>FETCH_HEAD</code> 记录了两个分支指向的最新 <code>commit</code> 对象的 <code>hash</code> 值。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">b1be33b8a27e1fcfa2c9f01b0fcb76a28b091071		branch <span class="string">'master'</span> of github.com:wind-liang/learnGit</span><br><span class="line"><span class="number">08f</span>4162aa74066285166b9b46f845ea648941943	not-<span class="keyword">for</span>-merge	branch <span class="string">'dev'</span> of github.com:wind-liang/learnGit</span><br></pre></td></tr></table></figure>
<p><code>refs/remotes/origin/dev</code> 和 <code>refs/remotes/origin/master</code> 分别记录了分支所对应的 <code>commit</code> 对象。</p>
<h2 id="git-merge"><a href="#git-merge" class="headerlink" title="git merge"></a>git merge</h2><p><code>git fetch</code> 仅仅把远程分支拉取了下来，我们还需要通过 <code>git merge</code> 将远程分支的内容和本地内容进行合并。</p>
<p>我们将本地的 <code>mater</code> 分支和远程的 <code>mater</code> 分支进行合并。</p>
<p>首先可以执行 <code>git diff origin/mater</code> 看一下和远程仓库代码的区别。</p>
<p>然后可以执行 <code>git merge origin/master</code> 将刚刚拉下来的远端分支和当前分支合并。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ORIG_HEAD              |   1 +</span><br><span class="line">index                  | Bin 396 -&gt; 468 bytes</span><br><span class="line">logs/HEAD              |   1 +</span><br><span class="line">logs/refs/heads/master |   1 +</span><br><span class="line">refs/heads/master      |   2 +-</span><br><span class="line">5 files changed, 4 insertions(+), 1 deletion(-)</span><br></pre></td></tr></table></figure>
<p>可以看到 <code>index</code> 文件进行了更新，也就是更新了暂存区。<code>refs/heads/master</code> 文件进行了更新，也就是将 <code>mater</code> 分支指向了最新的 <code>commit</code> 对象。查看 <code>refs/heads/master</code> 文件中的内容是 <code>b1be33b8a27e1fcfa2c9f01b0fcb76a28b091071</code> ，和我们刚刚 <code>FETCH_HEAD</code> 中远端 <code>mater</code> 分支的 <code>commit</code> 对象的 <code>hash</code> 值一致。新增的 <code>ORIG_HEAD</code> 文件是 <code>HEAD</code> 的备份。</p>
<p>这种合并方式属于 <code>Fast Forward</code>，合并的时候直接将 <code>mater</code> 分支指向了最新的提交。是因为要合并过来的分支是之前 <code>mater</code> 分出去的，并且分出去之后 <code>mater</code> 分支没有再产生新的 <code>commit</code> 对象，也就是下面的情况。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">       ------------ origin/master</span><br><span class="line">      /</span><br><span class="line">-----master</span><br></pre></td></tr></table></figure>
<p>这种情况合并的话，直接把 <code>mater</code> 指向 <code>origin/master</code> 即可。</p>
<p>还有另外一种情况，如下图。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">       ------------ origin/master</span><br><span class="line">      /</span><br><span class="line">-------------master</span><br></pre></td></tr></table></figure>
<p>分出去以后，<code>mater</code> 分支又进行了几次提交，此时我们再执行 <code>git merge origin/master</code> 看一下会是什么情况。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Merge remote-tracking branch <span class="string">'origin/master'</span></span><br><span class="line"># Please enter a commit message to explain why this merge is necessary,</span><br><span class="line"># especially if it merges an updated upstream into a topic branch.</span><br><span class="line">#</span><br><span class="line"># Lines starting with '#' will be ignored, and an empty message aborts</span><br><span class="line"># the commit.</span><br><span class="line">~</span><br></pre></td></tr></table></figure>
<p>此时会进入一个编辑文件，让我们填写 <code>commit</code> 对象的信息，填写退出后，文件变化如下。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ORIG_HEAD                                         |   2 +-</span><br><span class="line">index                                             | Bin 468 -&gt; 468 bytes</span><br><span class="line">logs/HEAD                                         |   1 +</span><br><span class="line">logs/refs/heads/master                            |   1 +</span><br><span class="line">objects/09/1d34a18801e88da14b609d29ac6d6ee8ea9079 | Bin 0 -&gt; 209 bytes</span><br><span class="line">objects/dd/c0e866456daf833034119e6a797eb63614cb4a | Bin 0 -&gt; 178 bytes</span><br><span class="line">refs/heads/master                                 |   2 +-</span><br></pre></td></tr></table></figure>
<p>相比之前的 <code>Fast Forward</code> 模式，这里我们相当于多进行了一个 <code>commit</code> 操作，增加了 <code>tree</code> 对象和 <code>commit</code> 对象。</p>
<p>而且这个 <code>commit</code> 对象比较特殊，它有两个 <code>parent</code> 对象， 通过命令 <code>git cat-file -p 091d</code> 来看一下。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">tree ddc0e866456daf833034119e6a797eb63614cb4a</span><br><span class="line">parent b9ba3b492e1fad20acd003ea4dad463a012b357a</span><br><span class="line">parent <span class="number">5f</span>4cfe0f32a1580924a1b5a2d2673d6e6b13639c</span><br><span class="line">author windliang &lt;<span class="number">6489178757</span><span class="meta">@qq</span>.com&gt; <span class="number">1595149755</span> +<span class="number">0800</span></span><br><span class="line">committer windliang &lt;<span class="number">6489178757</span><span class="meta">@qq</span>.com&gt; <span class="number">1595149755</span> +<span class="number">0800</span></span><br><span class="line"></span><br><span class="line">Merge remote-tracking branch <span class="string">'origin/master'</span></span><br></pre></td></tr></table></figure>
<p>所以最后合并后的情况相当于下边的样子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">       ------------ origin/master</span><br><span class="line">      /            \</span><br><span class="line">		            - master</span><br><span class="line">-------------      /</span><br></pre></td></tr></table></figure>
<h2 id="git-pull"><a href="#git-pull" class="headerlink" title="git pull"></a>git pull</h2><p>在 <code>dev</code> 分支下执行 <code>git pull</code> 命令。</p>
<p>理解了 <code>git fetch</code> 和 <code>git merge</code>，<code>git pull</code> 就好说了。它相当于先执行 <code>git fetch</code> 拉取下了所有分支，然后再执行 <code>git merge FETCH_HEAD</code>。<code>FETCH_HEAD</code> 就是当前分支跟踪的远程分支的 <code>commit</code> 对象的 <code>HASH</code> 值。它怎么知道当前分支追踪的远程分支是哪个呢？就是我们之前 <code>git push</code> 设置的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[branch <span class="string">"dev"</span>]</span><br><span class="line">	remote = origin</span><br><span class="line">	merge = refs/heads/dev</span><br></pre></td></tr></table></figure>
<p>这样的话，如下所示，<code>FETCH_HEAD</code> 文件第一行存储的是远端 <code>dev</code> 分支的 <code>commit</code> 对象的 <code>HASH</code> 值，做为 <code>FETCH_HEAD</code> 的引用，用于接下来的 <code>git merge FETCH_HEAD</code> 操作。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">cc28c96446ecf074671a0521c917025d5942ef9c		branch <span class="string">'dev'</span> of github.com:wind-liang/learnGit</span><br><span class="line"><span class="number">0932e6</span>eb2fc387f7eeb94147a98cf16f8a0c27b8	not-<span class="keyword">for</span>-merge	branch <span class="string">'master'</span> of github.com:wind-liang/learnGit</span><br></pre></td></tr></table></figure>
<p>如果我们执行<code>git branch -u origin/master</code> ，让当前分支 <code>dev</code> 去追踪远程仓库的 <code>master</code> 分支。此时再执行 <code>git fetch</code> 。 <code>FETCH_HEAD</code> 第一行记录的就是远程仓库 <code>mater</code> 分支了。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">a2837cd3f45d3f9ebe7d5d6a3f90ff633938a40b		branch <span class="string">'master'</span> of github.com:wind-liang/learnGit</span><br><span class="line">79d8411ee2466e7e6f361a18601b81d5b7a98156	not-for-merge	branch <span class="string">'dev'</span> of github.com:wind-liang/learnGit</span><br></pre></td></tr></table></figure>
<p>上边是 <code>git pull/fetch</code> 的默认操作，<code>git pull</code> 的完整格式为 <code>git pull &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;</code>。如果不指定本地分支名，则默认为当前分支。</p>
<p>如果我们指定了远程的分支，执行<code>git pull origin mater</code> ，就相当于先执行 <code>git fetch origin master</code>，此时就不会拉取所有分支，<code>FETCH_HEAD</code> 就指向这个唯一拉下来的分支了。</p>
<h1 id="总"><a href="#总" class="headerlink" title="总"></a>总</h1><p>主要从两个角度介绍了 <code>git</code> ，一方面介绍了 <code>.git</code> 目录中每个文件的作用以及相关的底层命令，另一方面介绍了常用的一些命令对 <code>.git</code> 目录的影响。花了不少时间总结下来，自己对 <code>git</code> 有了更深的理解，希望对大家也能够有所帮助。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接:"></a>参考链接:</h1><p><a href="https://en.wikipedia.org/wiki/Git" target="_blank" rel="noopener">Git维基百科</a></p>
<p><a href="https://linuxstory.org/10-years-of-git-an-interview-with-git-creator-linus-torvalds/" target="_blank" rel="noopener">Git 10 周年访谈：Linus Torvalds 讲述背后故事</a></p>
<p><a href="https://www.linux.com/news/10-years-git-interview-git-creator-linus-torvalds/" target="_blank" rel="noopener">10 Years of Git: An Interview with Git Creator Linus Torvalds</a></p>
<p><a href="https://www.zensoftware.nl/nl/3412-2/" target="_blank" rel="noopener">Torvalds on Version Control: Git good, SVN terrible!</a></p>
<p><a href="https://cloud.tencent.com/developer/article/1565474" target="_blank" rel="noopener">探秘git隐藏文件夹</a></p>
<p><a href="https://tonybai.com/2020/04/07/illustrated-tale-of-git-internal-key-concepts/" target="_blank" rel="noopener">图解git原理的几个关键概念</a> </p>
<p> <a href="[https://git-scm.com/book/zh/v2/Git-%E5%86%85%E9%83%A8%E5%8E%9F%E7%90%86-%E5%BA%95%E5%B1%82%E5%91%BD%E4%BB%A4%E4%B8%8E%E4%B8%8A%E5%B1%82%E5%91%BD%E4%BB%A4](https://git-scm.com/book/zh/v2/Git-内部原理-底层命令与上层命令">Git 内部原理 - 底层命令与上层命令</a>)</p>
<p><a href="https://stackoverflow.com/questions/39847781/which-are-the-plumbing-and-porcelain-commands" target="_blank" rel="noopener">Which are the plumbing and porcelain commands?</a></p>
<p><a href="https://cjting.me/2017/05/13/how-git-generate-diff/" target="_blank" rel="noopener">Git 是怎样生成 diff 的：Myers 算法</a></p>
<p><a href="http://www.ruanyifeng.com/blog/2018/10/git-internals.html" target="_blank" rel="noopener">Git 原理入门</a></p>
<p><a href="https://developer.aliyun.com/article/716483" target="_blank" rel="noopener">.git文件夹探秘，理解git运作机制</a></p>
<p><a href="https://github.com/git/git/blob/master/Documentation/technical/racy-git.txt?spm=a2c6h.12873639.0.0.592469418daUIL&amp;file=racy-git.txt" target="_blank" rel="noopener">Use of index and Racy Git problem</a></p>
<p><a href="https://github.com/git/git/blob/master/Documentation/technical/index-format.txt?spm=a2c6h.12873639.0.0.592469418daUIL&amp;file=index-format.txt" target="_blank" rel="noopener">Git index format</a></p>
<p><a href="https://www.atlassian.com/git/tutorials/refs-and-the-reflog" target="_blank" rel="noopener">Refs and the Reflog</a></p>
<p><a href="Git中的push和pull的默认行为">Git中的push和pull的默认行为</a></p>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git原理</tag>
        <tag>git目录</tag>
      </tags>
  </entry>
</search>
