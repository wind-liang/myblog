<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>windliang</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://windliang.wang/"/>
  <updated>2023-12-10T02:52:24.295Z</updated>
  <id>https://windliang.wang/</id>
  
  <author>
    <name>windliang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>存在主义哲学--人生的意义</title>
    <link href="https://windliang.wang/2023/12/10/%E5%AD%98%E5%9C%A8%E4%B8%BB%E4%B9%89%E5%93%B2%E5%AD%A6-%E4%BA%BA%E7%94%9F%E7%9A%84%E6%84%8F%E4%B9%89/"/>
    <id>https://windliang.wang/2023/12/10/%E5%AD%98%E5%9C%A8%E4%B8%BB%E4%B9%89%E5%93%B2%E5%AD%A6-%E4%BA%BA%E7%94%9F%E7%9A%84%E6%84%8F%E4%B9%89/</id>
    <published>2023-12-10T01:43:02.000Z</published>
    <updated>2023-12-10T02:52:24.295Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>主要是摘抄了一些有感触的点，非原创观点</p></blockquote><h1 id="存在主义哲学"><a href="#存在主义哲学" class="headerlink" title="存在主义哲学"></a>存在主义哲学</h1><p><strong>存在主义</strong>指的是一种生命能意识到自己的存在，并且以“我”为中心去探索、追求、解决和优化其生命一切的哲学思想。</p><h1 id="发展历史"><a href="#发展历史" class="headerlink" title="发展历史"></a>发展历史</h1><h2 id="克尔凯郭尔：非此即彼"><a href="#克尔凯郭尔：非此即彼" class="headerlink" title="克尔凯郭尔：非此即彼"></a>克尔凯郭尔：非此即彼</h2><p><strong>索伦·奥贝·克尔凯郭尔</strong>（又译<strong>齐克果</strong>、<strong>祈克果</strong>、<strong>吉尔凯高尔</strong>等；1813年5月5日—1855年11月11日）是丹麦神学家、哲学家、诗人、社会批评家及宗教作家，一般被视为存在主义的创立者。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/S%C3%B8ren_Kierkegaard_(1813-1855)_-_(cropped).jpg" alt="undefined" style="zoom:50%;"></p><p>“传统哲学”用最通俗的语言来概括，就是三个字：“盖高楼”。从柏拉图开始，亚里士多德、阿奎那、笛卡尔、洛克、康德、黑格尔，都是体系的建造者，他们都是从一些最基本的概念出发，比如实体、理念、经验、上帝，建造一个自己的哲学大厦，而且几乎每个哲学家都要先把之前哲学家的大厦推倒，从地基开始重建。这是一种上帝视角的哲学，好像世界上发生的一切都尽在哲学家的掌握之中。</p><p>在克尔凯郭尔之前都是这种从抽象观念出发的哲学，他反对传统哲学从概念到概念的逻辑推演，开始主张要把个人的生存处境当作哲学的核心问题。</p><p>升学填报志愿的时候，上了这个学校就不能上那个，此后的人生就会大不相同；恋爱的时候选择伴侣，和这个人结婚就必须放弃那个人，此后的人生也会大不相同。甚至你今天晚上选择赴哪个饭局，遇到了哪个新朋友，得知了哪个新消息，此后的人生也可能会大不相同。每往前走一步，世界都会逼着我们做出大大小小的选择，而所有的选择都会给我们带来或多或少的焦虑和恐惧。</p><p>克尔凯郭尔把这种情绪说成是“面对自由的眩晕”，就好像我们站在悬崖旁边往下看的时候的那种感觉。这种面对自由选择的眩晕感，让他用<strong>「非此即彼」</strong>做了自己最有名的一本书的书名。</p><p>克尔凯郭尔心中的真理，不是传统哲学里那些放之四海皆准的“客观真理”，而是对于他自己而言的“主观的真理”，那就是面对人生的每一个境遇，忠于自己的内心，勇敢地做出“非此即彼”的选择。</p><h2 id="陀思妥耶夫斯基：二二得四"><a href="#陀思妥耶夫斯基：二二得四" class="headerlink" title="陀思妥耶夫斯基：二二得四"></a>陀思妥耶夫斯基：二二得四</h2><p><strong>费奥多尔·米哈伊洛维奇·陀思妥耶夫斯基</strong>1821年11月11日—1881年2月9日，俄国作家。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/200px-Dostoevsky.jpg" alt="img"></p><p>陀思妥耶夫斯基常常描绘那些生活在社会底层却都有着不同常人想法的角色，这使得他得以19世纪暗潮汹涌的俄国社会中小人物的心理。部分学者认为他是存在主义的奠基人，如美国哲学家瓦尔特·阿诺德·考夫曼、就曾认为《地下室手记》是第一本存在主义的书。</p><blockquote><p>世界是复杂的，并不像二二得四那样简单，因此，某些人“仅仅根据科学和理性的原则”拟定的“幸福体系”，只是空想，是实现不了的。人也是复杂的，不是单凭教育就能改造好的，因为人有个性，有自己的独立人格，每个人的行为都受自己的“自由意愿”支配，有时还有逆反心理，明知不好，对自己不利，却故意为之，以此显示自己的独立存在。</p></blockquote><h2 id="尼采：上帝死了"><a href="#尼采：上帝死了" class="headerlink" title="尼采：上帝死了"></a>尼采：上帝死了</h2><p><strong>弗里德里希·威廉·尼采</strong>，1844年10月15日—1900年8月25日），是出身德国的哲学家、诗人、文化批评家、古典语言学家和作曲家。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/220px-Nietzsche187a.jpg" alt="img"></p><p>尼采所提出的“上帝已死”成了存在主义的中心论点：如果没有上帝，那么就没有必然的价值或道德律；如果没有必然的价值或道德律，人类精神处境的真相是一片虚无，那人面对虚无该怎么办呢？</p><p>从苏格拉底之后，理论家们发明出各种各样的概念、真理、信仰，说在现实世界之上，还有一些更伟大的意义。于是，这些理论掩盖了人生虚无的真相，让人们陷入了幻觉，在幻觉中获得虚假的安慰。这就是理论虚假。</p><p>尼采提到了教士们发明的五种麻醉人们的手段。</p><p>第一种是催眠，教士们用教义的灌输，用冥想、苦修之类的训练，降低人们对生命意志的要求，让人们进入一种类似冬眠状态，追求一种无我的精神解脱。</p><p>第二种手段是机械性的活动，什么时间做礼拜，什么时间忏悔，什么时间劳动，都是规定好的。这些按照明确的指示进行的活动，可以分散人们的注意力，甚至填满人们有限的意识。</p><p>第三种是给人微小的快乐，基督教里有各种慈善和表彰，这些都能给人带来微小的快乐，减轻人们的痛苦。</p><p>第四种手段，是群体认同，就是让人结成一些小的团体，形成一种相互依赖的关系，这样人们就能把不满的情绪释放在小团体之中，而不会对整体造成威胁。</p><p>第五种，是让人的某些感情得到过度的发展，从而压制其他的情感。教士们特别注重培养信徒们在上帝面前的罪责意识，有了这种意识信徒就会心甘情愿地接受苦修和责罚，主动放弃自己的权力意志</p><p>现代的生活也完全可以上边的对应，那如果一切都是虚假的呢？</p><p>我们赤裸裸地站到了虚无面前，人生没有意义，理论都是虚假，安慰都是幻觉——到这个地步，人已经一无所有了，那么他还拥有什么呢？尼采的回答是，还有一样东西，就是人的生命力。</p><p>尼采认为，面对无意义的世界和无意义的生命，人应该立足于现实，直面无意义的荒谬，以强大的生命本能舞蹈，在生命活动中创造出价值。用尼采的话说，就是“成为你自己”。这样一来，虚无不再会让你沮丧和绝望，反倒会给你最广阔的创造自我意义的空间，虚无让人变成了积极的创造者，这就是积极的虚无主义。</p><p>「与怪兽搏斗的人要注意，不要让自己也变成怪兽。当你长久凝望深渊，深渊也会回望你。」</p><p>虚无主义就是这样一只怪兽，一道深渊，要活出自己的生命意义，我们就需要与这只怪兽搏斗，就需要凝望虚无的深渊。同时我们也要随时提防自己被虚无吞没，丧失对生命真正意义的追求。</p><h2 id="胡塞尔：回到事情本身"><a href="#胡塞尔：回到事情本身" class="headerlink" title="胡塞尔：回到事情本身"></a>胡塞尔：回到事情本身</h2><p><strong>埃德蒙·古斯塔夫·阿尔布雷希特·胡塞尔</strong>（1859年4月8日—1938年4月26日）是一名德国哲学家，现象学创立者。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/220px-Edmund_Husserl_1910s.jpg" alt="img"></p><p>现代哲学中的现象学可以简单地理解为一种从主观体验上理解意识和世界的学派。 举个例子：</p><p>关于桌上的一杯鸡尾酒：</p><p>柏拉图会说：在这个酒杯，那个酒杯，所有的、每一个酒杯之下，存在一个“绝对的、完美的、平均的”酒杯。而我们所能看见的、摸到的每一个酒杯，都分享了那个“绝对酒杯”的一部分特征和属性。正是因为在我们面前的那个酒杯也分享了“绝对酒杯”的属性，它才会被我们认知为是一个酒杯。</p><p>对于纯粹的经验主义者（譬如休谟和洛克）来说，“表象”是显示在脑海里的感官信息。杏子鸡尾酒酒杯这一物体的“现象”就是我们的视觉接收到的倒锥形形状、透明颜色、光滑材质，加之嗅觉感知到的杏子酒气味、加之手指能触摸到的冰凉的玻璃质感……等等感官信息的集合。</p><p>而对于纯粹的理性主义者（譬如笛卡尔）来说，一个人看见酒杯后出现在其脑海里的“酒杯”这个念头，是理性思考得出的酒杯的抽象“理念（idea）”。</p><p>胡塞尔会说：只有我看到，触摸到，感受到的酒杯是真实的。</p><p>他也并不会止步于此。他会详细描述和归类对鸡尾酒杯的所有体验：视觉、听觉、想象、思考、情绪感受、期望、欲望，以及行动（拿酒杯，喝酒等等）。</p><p>胡塞尔确实不是存在主义者，但是在胡塞尔的弟子们的看来，现象学就不仅仅是一个解决传统问题的新工具了，而是开辟出了一大片新的哲学问题。「回到事情本身」这句口号宣告了一种新的真实性，它要求我们不带偏见，尊重意识之中出现的所有现象。哪怕是传统哲学里面完全不屑于讨论的现象，比如无聊、焦虑、忧愁、绝望这些情绪，再比如恶心、幻觉、抑郁、濒死这些体验。</p><p>这些情绪和体验都是人在实际的生存境遇里会遇到的问题。但是在传统哲学看来，这些问题太主观、太表面、太非理性，完全入不了他们的法眼。而现象学就可以去关注这些意识对象，因为正确地描述现象，就是认识到了事物的本质。于是，胡塞尔的很多弟子，不约而同地用现象学的方法去观察和描述这些生存现象，存在主义就从现象学里面脱胎而出了。</p><h2 id="海德格尔：向死而生"><a href="#海德格尔：向死而生" class="headerlink" title="海德格尔：向死而生"></a>海德格尔：向死而生</h2><p>马丁·海德格尔（1889年9月26日—1976年5月26日），德国哲学家，海德格尔对于存在、时间、技术、语言和真理等问题有着独特的见解。代表作有《存在与时间》、《形而上学导论》等。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/220px-Heidegger.jpeg" alt="220px-Heidegger"></p><p>在海德格尔看来，传统哲学的错误就在于把人类生存里面那些“当下上手”的东西，当做了“现成在手”的东西去理解，这样就脱离了和遗忘了人的实际生活。海德格尔的存在主义，就是要把哲学转向人的实际生存。</p><blockquote><p>当我们拿起锤子钉钉子的时候，不会注意到它的形状、颜色、重量、用途，而是拿起来直接开始钉，这种状态被海德格尔称为“当下上手”（Zuhandenheit）的状态。除非是钉着钉着锤子不好用了，比如说锤头松了，或者太重了我敲不动了，这个时候，我才会停下手上的活儿，仔细端详这个锤子。海德格尔把这种状态叫做“现成在手”（Vorhandenheit）状态。</p><p>当然，如果人的全部生活都像用锤子钉钉子一样自然、顺畅，我们也就不需要哲学了。在我们的实际生活中也会遇到很多从“当下上手”到“现成在手”的转变，比如一次工作的变动、一次人际关系的危机、一次亲人的去世，这个时候，正常的生活中断了，原本明显的意义消失了，就好像我们不得不停下敲击，去注视手中的锤子。</p></blockquote><p>我们被抛入世界之后，大多数时候就是过着“常人”的生活，那是一种没有经过思考，“别人”做什么我也做什么的状态。这种缺乏反思、忘记自我的“常人”状态，就是海德格尔说的“沉沦”状态</p><blockquote><p>我们小的时候，看到别的小朋友要什么，自己也想要；大学生选专业的时候，很多时候是因为父母和老师的希望；毕业工作了，看到别人买LV，自己也想买；当了爹妈，看到别人的孩子上奥数，自己也想给孩子报名；出去旅游，别人拍照打卡的地方，也是我们一定要去留下脚步和照片的地方。</p><p>我们大多数的时候，都是这样自觉不自觉地受着别人的影响。而且，我们还经常说不出影响我们的这个“别人”到底是谁，肯定不只是自己的父母、自己身边的一两个同事或者朋友，我们周围还有数量巨大的图书、广告、自媒体，等等，这些东西都在或明或暗地影响着我们。</p><p>所有的这些人和东西，组成了一张无形的大网，把我们罩在里面。</p></blockquote><p>和“沉沦”相反的生存状态叫做“本真”（Eingentlichkeit），就是活出真正属于自己的生活。</p><p>即便是突然有一个时刻，意识到了自己过的只是“常人”的生活，开始扪心自问，想要做出改变。但是下一刻，可能还是会不由自主地回到那种沉沦的状态，或许只是因为那样更容易，或许只是因为被各种因素掣肘不得不那样。偶尔的灵光乍现还是远远不够的。</p><p>比这种“灵光乍现”更能给人当头棒喝的东西，那就是死亡，特别是直面自己终有一死的事实。它更能够迫使我们认识到自己的沉沦状态，甚至能够帮助我们超越沉沦状态</p><blockquote><p>当随口说出“人终有一死”，或者“我终有一死”时，死亡是一个外在于我的东西，一个和我无关的“死亡事件”。就像是谈论一个名人的死，或者谈论第二次世界大战中战死的人数。</p><p>我们当然也会悲伤，也会感慨一句：“哎，人生无常，要珍惜生命。”这么说的时候，我们当然也“知道”自己终有一死，但是这种“知道”是一种“闲谈”意义上的、人云亦云的“知道”。</p><p>说完了“人生无常，要珍惜生命”，我们还是会该干什么干什么，不管是从心态上还是从做的事情上，都和之前别无二致。这些时候，我们其实是把自己排除在死亡之外的，就像萨洛扬说的“总以为自己不会死”，至少认为死亡离自己很远。这种非常外在的对于死亡的意识，并不会帮助我们进入本真状态。</p><p>那什么样的死亡意识可以做到呢？就是真切地与自己将有一死面对面，清楚地认识到，我的死亡是一件最本己的事情，是任何人都不能替代的事情。我只能“亲自去死”，而且我还不知道死亡什么时候会来。</p></blockquote><p>“本真的生活”，在一个意义上确实比沉沦的生活要美好，因为我们毕竟过上了属于自己的生活，而不陷入常人的大网不能自拔。</p><p>但是从另一方面讲，如果我们把“美好”理解成确定的、容易的、快乐的，那“本真的生活”很可能一点都不美好，甚至是这些词的反面，它充满了不确定性、困难和痛苦。“本真的生活”没有给我带来任何内容上的确定性，因为海德格尔去掉了良知、本真这些词的道德意味，只强调人的个体性，所以他不会也不能告诉你具体应该去做什么</p><p>“向死存在是向着一种可能性的存在，也就是向着此在本身别具一格的可能性的存在。”活出“别具一格的可能性”，就是我们本真的生活。</p><h2 id="雅斯贝尔斯：边界性境遇"><a href="#雅斯贝尔斯：边界性境遇" class="headerlink" title="雅斯贝尔斯：边界性境遇"></a>雅斯贝尔斯：边界性境遇</h2><p>卡尔·特奥多·雅士培（1883年2月23日—1969年2月26日），旧译雅斯培，德国哲学家和精神病学家，基督教存在主义的代表，1967年他成为瑞士公民。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/235px-Karl_Jaspers_1910.jpg" alt=""></p><p>“边界性境遇”指的是必然与我们的存在联系在一起的，界定了我们作为人的生存的境遇，特别是那些威胁到我们日常生活的安全感和稳定感的境遇。</p><blockquote><p>比如说，我们的生活中一定会经历痛苦，一定会和其他人处于矛盾和斗争之中，一定将会死去。雅斯贝尔斯用了一个很有趣的比喻来描述边界性境遇，他说：“我们看不到边界性境遇背后还有什么别的东西，它们就像一堵墙，我们撞在上面，对它们无能为力……”</p></blockquote><p>那面对这些边界性境遇，我们要怎么应对呢？有两种办法，一种是闭目塞听的态度，假装没有看到它们，这就类似海德格尔说的此在的“沉沦状态”。另一种就是瞪大眼睛直视边界性境遇，把它们当作契机去转变自己的日常生活，通过三重超越实现本真的生存。</p><p>第一重超越：在边界性境遇中感受到，自己不仅仅是一个存在着的“东西”或者“物品”，过着没有反思、现成给定的生活，而是真切地感受到“我这个独特的个体”的生存。</p><p>在这之后，边界性境遇可以带来第二重超越，从认识上把握这些边界，把它们看作人生的各种非此即彼的可能性。当在死亡的战栗中感受到了自己的生存，开始掂量死亡给我保留了哪些可能性，哪些才是对我的生存真正重要的东西，哪些是可有可无的东西。</p><p>再下一步，第三重的超越，就是我基于之前的感受和认识，从我的自由出发，做出实际的行动来明确自己的生存。这样我就从可能性的生存超越到了现实性的生存。</p><p>“生存就意味着超越，只要我真的是我自己，我就确信，我并非由于我而是我自己。”</p><h2 id="阿伦特：政治性的存在"><a href="#阿伦特：政治性的存在" class="headerlink" title="阿伦特：政治性的存在"></a>阿伦特：政治性的存在</h2><p>汉娜·阿伦特（1906年10月14日—1975年12月4日），是政治哲学家、作家和纳粹大屠杀幸存者。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/Hannah_Arendt_1975_(cropped" alt="">.jpg)</p><p>最有名的观点应该是“恶的平庸性”或者“平庸之恶”了。</p><p>《艾希曼在耶路撒冷》，里面详细地记录了以色列审判纳粹高官艾希曼的过程。阿伦特发现，参与了屠杀很多犹太人的艾希曼，其实并不是人们想象中的恶魔，而仅仅是一个不会自己思考，平庸到可笑的官僚。</p><p>阿伦特很有洞见地看到了死亡的反面：人的出生。表面看来，我们是赤裸裸、孤零零地来到这个世界上的，就像我们终将孤身一人离开那样。但是如果我们深想一步就会发现，绝非如此。</p><blockquote><p>出生这个事件，恰恰显示了个人与共同体密不可分。我是由父母生出来的，我的父母又来自他们的父母，我生活在某个家庭、某个社区、某个国家之中。如果说死亡是把个人与他人扯开、孤立起来的境遇，那出生就是一种把个体与他人牢牢绑定在一起的境遇。</p><p>阿伦特还更进一步，认为死亡其实也不像海德格尔说的那么孤独，也带有很强的共同体色彩。阿伦特不否认，我们自己的选择和行动塑造了每个人生存的意义。但是一个人完整的人生意义，只有在他死后才能盖棺定论。而这个盖棺定论的工作，必然只能交给他所属的共同体去完成。</p><p>死亡让一个人把自己完整的生命意义交给他所属的共同体，让共同体对他形成一个前后连贯的“叙事”或者说“故事”。至于这个共同体是一个家庭、一个工作单位，还是一个国家，或者整个世界，取决于一个人生前做了哪些事，但是不管怎样，给人生赋予完整意义的工作都属于一个共同体</p></blockquote><p>有某个共同体，就意味着一群人生活在一个共同的境遇之中；同时也就意味着有复数的、多元的人。共同的境遇和彼此不同的个体，正是我们“政治性”的核心特征。那些塑造了“自我”的、我自由选择的行动，看似是我这个个体进行的选择，其实都是和我所处的共同体，以及我的政治性密不可分的。</p><h2 id="萨特：存在先于本质"><a href="#萨特：存在先于本质" class="headerlink" title="萨特：存在先于本质"></a>萨特：存在先于本质</h2><p>让-保罗·夏尔·艾马尔·萨特（1905年6月21日—1980年4月15日），是法国哲学家、剧作家、小说家、编剧、政治活动家、传记作家和文学评论家。他是存在主义]和现象学哲学的关键人物之一，主要哲学著作《存在与虚无》。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/250px-Sartre_1967_crop.jpg" alt=""></p><p><strong>存在就是虚无</strong></p><p>萨特把物的那种被决定的、不能改变的存在，叫做“自在”的存在。把人的这种“有待形成”的、不固定的存在，叫做“自为”的存在，就是自己“为自己”而存在。你可以记住这一点：自在的存在有一个固定不变的本质；而自为的存在没有固定的本质，它的本质是可以变化的</p><blockquote><p>萨特坐在花神咖啡馆里，他在思考这样一个问题：人的存在和物的存在究竟有什么区别？我们都知道，人是有意识的，而物品没有。但有意识的人和没有意识的物，究竟不同在哪里呢？</p><p>萨特看着眼前忙碌的服务员，又看着自己面前的杯子，他问自己：我们说这个服务员是一个服务员，和说这个杯子是一个杯子，这两种说法是同一回事吗？他感到大不相同！</p><p>说这个服务员是一个服务员，并不是注定的。如果这个人下班了，甚至辞职了，他就不再是一个服务员了。一个人是什么，这是可以改变的。</p><p>但杯子就不同了，杯子不能改变自己，它被判定为一个杯子，别无选择地就是一个杯子，就算你把它打碎了，它仍然是一个碎掉的杯子，而且杯子甚至不能自己选择把自己打碎。</p><p>你可能发现了，其中关键的区别，就在于有没有意识和意识支配的行动。为什么人的存在可以改变？因为人并没有什么预定的本质，人的存在原本就是虚无，它的本质是“有待形成”的。</p></blockquote><p><strong>存在先于本质</strong></p><p>哲学里，至少从柏拉图开始，主流的观点都是本质先于存在，比如说人的本质就是理性，圆形的本质就是与某个点距离相等的点的集合。这些带有普遍性的本质，在某个具体的人和具体的圆形存在之前就已经确定了，所以说“本质先于存在”。</p><p>但是在萨特看来，只有自在的存在，也就是那些没有意识的东西，才是“本质先于存在”的。一棵树、一张桌子，在它们存在之前，本质就已经确定了，一棵柳树苗就会长成柳树，一张桌子就是供人写字、吃饭的家具。</p><p>但是对于人这种“自为的存在”来讲，就完全不同了。因为人从根本上讲就是虚无，而虚无就是没有任何本质。一个婴儿在出生的时候得以存在，但是他这个存在是没有本质的，我们不能说他是好是坏，是工程师还是公务员，甚至不能说他是不是理性的。</p><p>因为在拥有存在的时候，他没有任何的确定性，他的一生充满了开放性，有无穷多的可能性，只有通过他日后有意识的选择，才能获得某种稳定的性质，拥有某种类似“本质”的东西。</p><p><strong>虚无奠定自由</strong></p><p>因为存在先于本质，那么就没有什么预先给定的东西把我们固定住、束缚住，就意味着我们永远可以超越“过去的本质”、“现在的本质”去追求“未来”。</p><p>换句话说，人永远不会“是”什么，而是永远都正在“成为”什么。在这个意义上，人是自由的，甚至人就是自由本身。还是那个比喻，站到舞台上，你可以扮演任何角色，每一个角色都不是你本人，但正因为如此，你的行动才是自由，因为你没有被任何一个角色所定义。</p><p>人是被判定为自由的，自由就是人的命运。人唯一的不自由就是不能摆脱自由。不论你是多么渺小，不论你受到多少外在的限制，在根本上你都是自由的。</p><p><strong>自由的负重</strong></p><p>自由选择必定会带来后果，那么谁来为这个后果负责？萨特说，没有任何别人可以承担这份责任，你做出了选择，你就要独自承担责任。但“承担责任”究竟是什么意思呢？为什么只能独自承担，难道这份责任就不能跟别人来分担吗？萨特的回答是：不能。</p><blockquote><p>每个人的生活都充满大大小小的选择，比如毕业之后继续深造还是直接工作，选择什么职业，要不要结婚，要不要孩子……所有的选择都会有后果，我们就生活在自己选择的后果之中，这些后果也在塑造我们自己。所以我们会在乎选择的好坏对错，谁都不想过后悔的人生，我们都会希望自己的选择有一个坚实可靠的依据</p><p>任何信条、任何主义，或者别人的建议，都不能成为你的借口。萨特认为，这些说辞都只是自欺欺人，是用来逃避自己的责任。开个夸张点的玩笑，假如你和你的伴侣分手了，朋友来安慰你，会说“这不是你的错”。但萨特可能就会说，这就是你的错，是你自己选择的人，是你自己谈的恋爱，这个结果当然是你的责任。</p><p>独自承担责任是什么意思？就是自己做自己的立法者，为自己做出的每一个选择承担绝对的责任。你看，从“存在就是虚无”，萨特推出了人的绝对自由，而从绝对的自由，萨特又推出了绝对的责任。这是一份非常沉重的负担</p></blockquote><p><strong>他人即地狱</strong></p><p>萨特认为，人总是要维护自己的主体性，所以人与人之间一定会为了争夺主体性而斗争。每个人在和他人相处的时候，都想把他人变成客体，以此来维护自己的主体性和自由。</p><blockquote><p>萨特举了一个例子，说你走在街上，迎面过来一个陌生人，用眼光上下打量你，你会觉得很不舒服。为什么你会不舒服？萨特解释说，别人注视你时，他下意识地就把你变成了他观察的客体。在这个注视中，他是主导者，你只是被他观看的物品；他要实现自己的主体性，代价就是把你的主体性给否定掉，把你物化。所以，你会下意识地回避对方的注视。但你也可以反抗，他看你一眼，你就回看他一眼，用你的注视把他变成客体。</p><p>在萨特看来，人和人的交往就是这样，总是在为了争夺主体性而斗争。即使是在爱情当中也不例外。萨特说，我们想象中的浪漫爱情是一个骗局，那种不分彼此、合二为一的爱情体验，只不过是刚刚开始时候的幻觉罢了。爱情同样充满了为争夺主体性而展开的冲突和斗争，到最后要么是受虐，在羞耻中享受快乐，要么是施虐，在内疚中感到愉悦。</p></blockquote><p>萨特的一个个人生选择，都体现出他对自由和本真生活的向往，他用自己的一生在践行存在主义哲学，自由选择和积极行动。</p><p>萨特是一位世界闻名的哲学家，但他从来没有在任何高等学府正式任教。他虽然撰写了很多严肃的哲学论文和著作，却也花了很多精力去写小说和戏剧，甚至获得了诺贝尔文学奖。</p><p>但更令人印象深刻的是，获奖之后，他公开拒绝领奖，理由是他“不接受任何来自官方的荣誉”。这引起了很大的争议，有人说这其实是萨特爱慕虚荣的表现，觉得获得诺贝尔奖还不够突出，还要成为第一个主动拒绝诺奖的人。</p><p>萨特和波伏瓦在上大学时相识，彼此志趣相投，很快就陷入了恋情。但他们都认为人是绝对自由的，不必受到习俗制度的约束，于是签订了一个奇特的爱情契约，作为彼此的伴侣，但永不结婚。他们的爱情是开放的，不排除与其他人发生亲密关系，但彼此坦诚，不会隐瞒。而且这个契约的有效期只有两年，每过两年双方就要确认一次，是否还继续这段伴侣关系。</p><p>这个契约足足延续了 51 年，从萨特 24 岁直到 75 岁去世，两人真的做到了相伴一生。</p><p>萨特不仅是哲学家和作家，还是一位社会政治活动家，甚至被哲学家福柯称为“法国最后的公共知识分子”。1968 年，法国又发生了史称“五月风暴”的抗议活动。萨特和波伏瓦发表声明支持这场运动，并且走上街头散发传单，直接参与抗议活动，结果被警察逮捕了。</p><p>但当时的法国总统戴高乐迅速介入干预，要求警方放人。戴高乐说，“我们能把伏尔泰关进监狱吗？不能，所以赶快把萨特放了吧”。萨特当时在法国的影响力，甚至足以与启蒙时代的伏尔泰相比。</p><h2 id="波伏娃：模糊性的道德"><a href="#波伏娃：模糊性的道德" class="headerlink" title="波伏娃：模糊性的道德"></a>波伏娃：模糊性的道德</h2><p>西蒙·露西·埃内斯蒂娜·玛丽·贝特朗·德·波伏娃（1908年1月9日—1986年4月14日），或称西蒙娜·德·波伏娃、西蒙娜·波伏娃，是出身法国的作家、存在主义哲学家、政治活动家、女权主义者、社会主义者和社会理论家。她的思想与学说等，对女权主义式存在主义和女权主义理论都产生了重大影响，以《第二性》闻名。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/220px-Simone_de_Beauvoir2.png" alt="img"></p><p>在波伏瓦看来，人从来不是孤独的存在，不能孤立地行使自由。像萨特那样强调一个人绝对的自由是没有意义的。我们总是和他人联系在一起，所以我们的自由总是有限的，与他人相互制约的。我们不能行使绝对的自由，而只能行使在某个情境中的相对自由。</p><p>一个人如果试图对抗他人，把他人当作“地狱”，他就会失去自由，也失去自我。相比萨特，波伏瓦更愿意强调人际关系中积极的方面，她认为我们之所以能够成为现在的自己，是因为出现在我们生命中的其他人，有父母、老师、朋友、爱人，还有陌生人，自我是不断被他人塑造的，始终处于一种“生成”的过程之中。</p><p>从人的这种总是与他人互动的生存状态，波伏瓦提出了一个很有意思的概念，叫做“模糊性的道德”，或者也可以翻译成“模棱两可的道德”。在波伏瓦看来，人类在本质上就带有模棱两可性或者模糊性。</p><p>我们既是主体也是客体，既是意识也是物质，既是理性也是非理性，既是自由的也是不自由的，既相互分离又相互依赖。但是传统哲学总是想要打压这种模糊性，把人概括成“理性的动物”、“思维的主体”，或者“物质的构成”</p><h2 id="加缪：荒诞"><a href="#加缪：荒诞" class="headerlink" title="加缪：荒诞"></a>加缪：荒诞</h2><p>阿尔贝·加缪（1913年11月7日—1960年1月4日），生于法属阿尔及利亚蒙多维城，法国小说家、哲学家、戏剧家、评论家，其于 1957 年获得诺贝尔文学奖。加缪位于20世纪最有名的和最重要的的法国作家之列。代表作有《局外人》、《西西弗神话》、《鼠疫》等。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/Albert_Camus,_gagnant_de_prix_Nobel,_portrait_en_buste,_pose%CC%81_au_bureau,_faisant_face_a%CC%80_gauche,_cigarette_de_tabagisme.jpg" alt="Albert_Camus,_gagnant_de_prix_Nobel,_portrait_en_buste,_posé_au_bureau,_faisant_face_à_gauche,_cigarette_de_tabagisme" style="zoom:50%;"></p><p>“自杀是唯一真正严肃的哲学问题。判断人生值不值得活，这本身就是在回答哲学的根本问题。”</p><p>《西西弗神话》中描写了希腊神话里的一位国王西西弗，因为欺骗诸神，被罚在地狱里推着一块大石头上山。每当他费尽力气把石头推上山，石头又会重新滑落，西西弗只能从头再来。你还能想象比这更悲催的人生吗？这个神话故事最好地展现了加缪讨论自杀问题的背景：如果人生注定是没有意义的、荒谬的，我们是不是应该选择自杀呢？</p><p>人一定要追问意义，但是又注定不可能得到期待的答案，这就是荒谬感的根源，荒谬就是人与世界之间必然的联系。</p><p>如果世界注定没有意义，如果人生注定荒谬，我们能怎么办呢？面对“我们是否应该自杀？”的问题，加缪又能给出什么样答案呢？他给出的答案是：坦然接受这个世界的荒谬性，用真诚的心过好当下的生活，感受生活中的美好，这就是我们能够赋予生活的全部意义。</p><p>自杀绝对不是对抗荒谬的办法，因为自杀意味着承认荒谬的胜利，那不是对抗，而是投降。2唯有直面荒谬，珍惜当下，才能创造出此时此地的意义，哪怕这种意义只是闻到了海风的气息，只是又推着石头前进了一寸。</p><p>“登上顶峰的斗争本身足以充实人的心灵。应该设想，西西弗斯是幸福的。”</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/resize,w_1920,m_lfit.png" alt="img"></p><p>假如恶魔在某一天或某个夜晚闯入你最难耐的孤寂中，并对你说：‘你现在和过去的生活，就是你今后的生活。它将周而复始，不断重复，绝无新意，你生活中的每种痛苦、欢乐、思想、叹息，以及一切大大小小、无可言说的事情都会在你身上重现，会以同样的顺序降临’。”（尼采：《快乐的科学》341）如果你听到这话瘫软在地，那你过的就不是本真的生活；如果你面对这个恶魔说，我从来没有听过比这更神圣的话。你会把你所有的人生选择重新选一遍，那么你过的就是本真的生活，忠于自己的生活。</p><h1 id="相关资料"><a href="#相关资料" class="headerlink" title="相关资料"></a>相关资料</h1><p>得到：刘玮·存在主义哲学20讲</p><p>得到：刘擎·西方现代思想</p><p>《哲学家们都干了些什么》</p><p>《存在主义咖啡馆：自由、存在和杏子鸡尾酒 》</p><p>《苏菲的世界》</p><p>chatGPT</p><p>维基百科</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;主要是摘抄了一些有感触的点，非原创观点&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;存在主义哲学&quot;&gt;&lt;a href=&quot;#存在主义哲学&quot; class=&quot;headerlink&quot; title=&quot;存在主义哲学&quot;&gt;&lt;/a&gt;存在主义哲学&lt;/h1&gt;&lt;p&gt;
      
    
    </summary>
    
    
      <category term="随想" scheme="https://windliang.wang/categories/%E9%9A%8F%E6%83%B3/"/>
    
    
      <category term="随想" scheme="https://windliang.wang/tags/%E9%9A%8F%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>小程序原理系列二之 wxml</title>
    <link href="https://windliang.wang/2023/11/27/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%8E%9F%E7%90%86%E7%B3%BB%E5%88%97%E4%B9%8Bwxml/"/>
    <id>https://windliang.wang/2023/11/27/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%8E%9F%E7%90%86%E7%B3%BB%E5%88%97%E4%B9%8Bwxml/</id>
    <published>2023-11-26T23:54:35.000Z</published>
    <updated>2023-12-02T12:37:44.565Z</updated>
    
    <content type="html"><![CDATA[<p>平常小程序写的多一些，简单总结一下原理。但因为小程序也没开源，只能参考相关文档以及开发者工具慢慢理解了。</p><p>理解小程序原理的突破口就是开发者工具了，开发者工具是基于 <code>NW.js</code>，一个基于 <code>Chromium</code> 和 <code>node.js</code> 的应用运行时。同时暴漏了 <code>debug</code>  的入口。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20231121074438703.png" alt=""></p><p>点开后就是一个新的 <code>devTools</code> 的窗口，这里我们可以找到预览界面的 <code>dom</code>。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20231121074627001.png" alt=""></p><p>小程序界面是一个独立的 <code>webview</code>，也就是常说的视图层，可以在命令行执行 <code>document.getElementsByTagName(&#39;webview&#39;)</code> ，可以看到很多 <code>webview</code>。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20231121075414589.png" alt=""></p><p>我这边第 <code>0</code> 个就是 <code>pages/index/index</code> 的视图层，再通过 <code>document.getElementsByTagName(&#39;webview&#39;)[0].showDevTools(true)</code> 命令单独打开这个 <code>webview</code> 。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20231121075550310.png" alt=""></p><p>熟悉的感觉回来了，其实就是普通的 <code>html/css</code> ，小程序的原理的突破口也就在这里了。</p><p>这篇文章简单看一下页面的 <code>dom</code> 是怎么来的，也就是 <code>wxml</code> 做了什么事情。</p><p>源代码：</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20231128083757746.png" alt=""></p><p>渲染出来的代码：</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20231128083838687.png" alt="image-20231128083838687"></p><p><code>view</code> 变成了 <code>wx-view</code> ，<code>text</code>  变成了 <code>wx-text</code> ，并且里边加了 <code>&lt;span&gt;</code>。两个关键信息，<code>wx-xxx</code> 标签以及 <code>exparser</code> 。</p><h1 id="自定义标签"><a href="#自定义标签" class="headerlink" title="自定义标签"></a>自定义标签</h1><p><code>html</code>  是支持我们直接写自定义名字的标签的，并且在上边设置 <code>class</code>  也会直接生效。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20231130083327633.png" alt=""></p><p>区别在于自己写的标签没有一些预制的属性，比如 <code>div</code> 的 <code>display: block</code> 。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20231130083443521.png" alt=""></p><p>如果我们给 <code>wx-view</code> 也加个 <code>display: block</code> ，那表现上它和 <code>div</code> 也就一致了。</p><p>微信已经帮我们把自定义标签的属性提前内置了。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20231130083621685.png" alt=""></p><p>至于为什么要把我们写的 <code>view</code> 转成 <code>wx-view</code> ，因为自定义元素中规定必须用 <code>-</code> 连接。</p><blockquote><p>“自定义元素的名字必须包含一个破折号（<code>-</code>）所以<code>&lt;x-tags&gt;</code>、<code>&lt;my-element&gt;</code>和<code>&lt;my-awesome-app&gt;</code>都是正确的名字，而<code>&lt;tabs&gt;</code>和<code>&lt;foo_bar&gt;</code>是不正确的。这样的限制使得 HTML 解析器可以分辨那些是标准元素，哪些是自定义元素。”</p></blockquote><p>有 <code>-</code> 可以保证一定的兼容性，并且也可以和浏览器自带的元素有一定的区分。</p><h1 id="Exparser"><a href="#Exparser" class="headerlink" title="Exparser"></a>Exparser</h1><p>简单讲，就是一个仿照 <code>Web Components</code> 的组件系统，它会维护标签的属性、事件，提供 <code>registerElement</code> 方法用于注册自定义组件，提供 <code>createElement</code> 来渲染组件，对于自定义组件会采用 <code>Shadow DOM</code>  的技术。</p><p><code>Exparser</code>  的相关代码在哪里呢？这就是微信传说中的基础库里了，在渲染层引入的是 <code>WAWebview.js</code> 。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20231201083243411.png" alt=""></p><p>可以右键打开这个文件，复制出来格式化一下：</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20231201083422729.png" alt=""></p><p>由于文件比较大，用 <code>VSCode</code> 直接格式化可能会很卡，可以写个脚本来格式化。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20231202081218159.png" alt=""></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// chatGPT 生成</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">const</span> prettier = <span class="built_in">require</span>(<span class="string">'prettier'</span>);</span><br><span class="line"><span class="keyword">const</span> jsBeautify = <span class="built_in">require</span>(<span class="string">'js-beautify'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> filePath = process.argv[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!filePath) &#123;</span><br><span class="line">  <span class="built_in">console</span>.error(<span class="string">'Please provide a file path'</span>);</span><br><span class="line">  process.exit(<span class="number">1</span>);</span><br><span class="line">&#125; </span><br><span class="line"><span class="built_in">console</span>.log(filePath)</span><br><span class="line">fs.readFile(filePath, <span class="string">'utf8'</span>, <span class="keyword">async</span> (err, data) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(<span class="string">`Error reading file: <span class="subst">$&#123;err&#125;</span>`</span>);</span><br><span class="line">    process.exit(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 使用 prettier 格式化代码</span></span><br><span class="line">  <span class="keyword">const</span> formattedCode = <span class="keyword">await</span> prettier.format(data, &#123; <span class="attr">parser</span>: <span class="string">'babel'</span> &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 使用 js-beautify 进一步格式化代码</span></span><br><span class="line">  <span class="keyword">const</span> beautifiedCode = jsBeautify(formattedCode, &#123; <span class="attr">indent_size</span>: <span class="number">2</span> &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 将格式化后的代码写回文件</span></span><br><span class="line">  fs.writeFile(filePath, beautifiedCode, <span class="string">'utf8'</span>, (err) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="built_in">console</span>.error(<span class="string">`Error writing file: <span class="subst">$&#123;err&#125;</span>`</span>);</span><br><span class="line">      process.exit(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'File formatted successfully'</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>然后在命令行执行 <code>node format.js ./WAWebview.js</code> ，接下来就看到格式化的代码了：</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20231202081803850.png" alt=""></p><p>是 <code>2.32.3</code> 版本，目前微信已经更到 <code>3.x.x</code> 了，新增了渲染引擎 <code>Skyline</code>，为了简单些这次就先看 <code>2.x</code> 的版本了。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20231202082009585.png" alt=""></p><p>总共有 <code>14</code> 万行</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20231202082112148.png" alt=""></p><p>接下来通过搜索、折行，找一下 <code>Exparser</code> 的部分，因为都是压缩过的代码，逐行理解肯定不现实，就找几个关键点看一下：</p><p>提供了注册组件的方法 <code>registerElement</code> 。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20231202090844714.png" alt=""></p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20231202091928675.png" alt=""></p><p>提前注册了内置的组件：</p><p><code>wx-view</code>：</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20231202091334728.png" alt=""></p><p><code>wx-text</code> ：</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20231202091413794.png" alt=""></p><p>可以看到上边最终转成了 <code>span</code> 标签，和我们开发者工具看到的也是一致的：</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20231202091522286.png" alt=""></p><p>提供了 <code>createElement</code> 方法，将注册的组件生成为最终的 <code>dom</code> 。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20231202092329181.png" alt=""></p><p>最终会调用 <code>document</code>  来创建 <code>dom</code> 。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20231202092914565.png" alt=""></p><h1 id="生成流程"><a href="#生成流程" class="headerlink" title="生成流程"></a>生成流程</h1><p>再回到加载的 <code>dom</code>  看一下 <code>wxml</code> 转换成了什么：</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20231202093121268.png" alt=""></p><p>右键打开这个文件：</p><p>定义了 <code>$gw</code> 这个函数，接收 <code>path</code> 参数。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20231202093657732.png" alt=""></p><p>返回一个函数：</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20231202093756333.png" alt=""></p><p>内部有我们 <code>wxml</code> 的变量：</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20231202093851877.png" alt=""></p><p>对应于原文件：</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20231202093943000.png" alt=""></p><p>看一下调用这个函数的地方：</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20231202100111614.png" alt=""></p><p>传入当前页面路径将生成的函数赋值给了 <code>generateFunc</code> ，接着用 <code>document.dispatchEvent</code> 触发事件 <code>generateFuncReady</code>，并且将 <code>generateFunc</code> 传入。</p><p>我们在控制台手动执行一下 <code>generateFunc</code> ，看下返回值：</p><p>可以看到 <code>3</code> 个子元素：</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20231202160157283.png" alt=""></p><p>但因为前两个的值是在逻辑层 <code>data</code>  中，因为我们没有传递，所以上边前两个子元素 <code>children</code> 都是空字符串</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20231202160244055.png" alt=""></p><p>这个 <code>data</code> 需要在调用 <code>generateFunc</code> 的时候传入：</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20231202160620254.png" alt=""></p><p>现在就正常返回了标签的结构，接着渲染层内部就会利用它生成虚拟 <code>dom</code> ，再利用 <code>Exparser</code> 生成最终的 <code>dom</code> 元素了。</p><p>大概是下边的流程（下边的代码是最早期的基础库，目前的版本已经不是下边的结构了，目前先按下边的流程理解，后边再理清当前基础库的逻辑）：</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20231202175146660.png" alt=""></p><p>调用 <code>virtualTree</code> 将 <code>generateFunc</code> 返回的结构变为虚拟 <code>dom</code> ，接着调用 <code>render</code>  ，<code>render</code> 内部就是调用前边介绍的 <code>Exparser</code> 的 <code>createElement</code> 方法生成真正的 <code>dom</code> ，最后通过 <code>replaceChild</code> 挂载到页面上。</p><p>当然 <code>generateFunc</code> 需要的 <code>data</code> 数据需要等待逻辑层传过来，后边的文章再介绍通信机制。</p><h1 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h1><p>剩下最后一个问题，<code>wxml.js</code> 是哪里来的？</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20231202093121268.png" alt=""></p><p>和 <a href="https://zhuanlan.zhihu.com/p/668845449" target="_blank" rel="noopener">wxss</a> 一样，是微信提前编译生成的。编译工具可以在微信开发者工具目录搜索 <code>wcc</code> ，<code>Library</code> 是个隐藏目录。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20231202180839768.png" alt=""></p><p>我们把这个 <code>wcc</code> 文件拷贝到 <code>index.wxml</code> 的所在目录，然后将我们的 <code>index.wxml</code> 手动编译一下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./wcc -js ./index.wxml &gt;&gt; wxml.js</span><br></pre></td></tr></table></figure><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20231202181028950.png" alt=""></p><p>可以看到  <code>$gw</code>  函数就生成了。</p><h1 id="总"><a href="#总" class="headerlink" title="总"></a>总</h1><p>大概过程就是上边了，先提前编译出了  <code>$gw</code>  函数，会返回一个函数，可以把 <code>wxml</code> 实例为一个 <code>dom</code> 的标签结构。传入当前页面的路径执行该函数生成 <code>generateFunc</code> 函数，将函数传给视图层。</p><p>视图层拿到逻辑层的数据后将 <code>generateFunc</code> 函数返回的 <code>dom</code> 结构生成虚拟 <code>dom</code> ，通过 <code>Exparser</code> 执行 <code>render</code> 生成最终的 <code>dom</code> 挂载到页面。</p><p>至于拿到逻辑层的数据的时机，相互通信的逻辑就放到后边的文章了，看着混淆的代码，头大。</p><p>历史文章：</p><p><a href="https://zhuanlan.zhihu.com/p/668845449" target="_blank" rel="noopener">小程序原理系列一之wxss</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;平常小程序写的多一些，简单总结一下原理。但因为小程序也没开源，只能参考相关文档以及开发者工具慢慢理解了。&lt;/p&gt;
&lt;p&gt;理解小程序原理的突破口就是开发者工具了，开发者工具是基于 &lt;code&gt;NW.js&lt;/code&gt;，一个基于 &lt;code&gt;Chromium&lt;/code&gt; 和 
      
    
    </summary>
    
    
      <category term="前端" scheme="https://windliang.wang/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="微信小程序" scheme="https://windliang.wang/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>小程序原理系列一之wxss</title>
    <link href="https://windliang.wang/2023/11/21/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%8E%9F%E7%90%86%E7%B3%BB%E5%88%97%E4%B9%8Bwxss/"/>
    <id>https://windliang.wang/2023/11/21/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%8E%9F%E7%90%86%E7%B3%BB%E5%88%97%E4%B9%8Bwxss/</id>
    <published>2023-11-20T23:32:54.000Z</published>
    <updated>2023-12-02T10:08:04.806Z</updated>
    
    <content type="html"><![CDATA[<p>平常小程序写的多一些，简单总结一下原理。但因为小程序也没开源，只能参考相关文档以及开发者工具慢慢理解了。</p><p>理解小程序原理的突破口就是开发者工具了，开发者工具是基于 <code>NW.js</code>，一个基于 <code>Chromium</code> 和 <code>node.js</code> 的应用运行时。同时暴漏了 <code>debug</code>  的入口。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20231121074438703.png" alt=""></p><p>点开后就是一个新的 <code>devTools</code> 的窗口，这里我们可以找到预览界面的 <code>dom</code>。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20231121074627001.png" alt=""></p><p>小程序界面是一个独立的 <code>webview</code>，也就是常说的视图层，可以在命令行执行 <code>document.getElementsByTagName(&#39;webview&#39;)</code> ，可以看到很多 <code>webview</code>。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20231121075414589.png" alt=""></p><p>我这边第 <code>0</code> 个就是 <code>pages/index/index</code> 的视图层，再通过 <code>document.getElementsByTagName(&#39;webview&#39;)[0].showDevTools(true)</code> 命令单独打开这个 <code>webview</code> 。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20231121075550310.png" alt=""></p><p>熟悉的感觉回来了，其实就是普通的 <code>html/css</code> ，小程序的原理的突破口也就在这里了。</p><p>这篇文章简单看一下页面的样式是怎么来的，也就是 <code>wxss</code> 做了什么事情。</p><p>源码中 <code>data1</code> 的样式：</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20231121080905989.png" alt=""></p><p>开发中工具中对应的样式：</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20231121080942683.png" alt=""></p><p><code>rpx</code> 的单位转成了 <code>px</code> ，同时保留网页不认识的属性名，大概就是为了方便的看到当前类本身的属性和一些文件信息。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20231121081115204.png" alt=""></p><p>这个样式是定义在 <code>&lt;style&gt;</code> 中，</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20231121081221907.png" alt=""></p><p>让我们展开 <code>&lt;head&gt;</code> 找一下：</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20231121081518529.png" alt=""></p><p><code>data1</code> 确实在 <code>&lt;style&gt;</code> 中，继续搜索，可以看到这里 <code>&lt;style&gt;</code> 中的内容是通过在 <code>&lt;script&gt;</code> 执行 <code>eval</code> 插入进来的。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20231126095416265.png" alt=""></p><p>把这一段代码丢给 <code>chatGPT</code> 整理一下：</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20231122081918824.png" alt=""></p><p>来一段一段看一下：</p><h1 id="设备信息"><a href="#设备信息" class="headerlink" title="设备信息"></a>设备信息</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> BASE_DEVICE_WIDTH = <span class="number">750</span>;</span><br><span class="line"><span class="keyword">var</span> isIOS = navigator.userAgent.match(<span class="string">"iPhone"</span>);</span><br><span class="line"><span class="keyword">var</span> deviceWidth = <span class="built_in">window</span>.screen.width || <span class="number">375</span>;</span><br><span class="line"><span class="keyword">var</span> deviceDPR = <span class="built_in">window</span>.devicePixelRatio || <span class="number">2</span>;</span><br><span class="line"><span class="keyword">var</span> checkDeviceWidth = <span class="built_in">window</span>.__checkDeviceWidth__ || <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> newDeviceWidth = <span class="built_in">window</span>.screen.width || <span class="number">375</span>;</span><br><span class="line">    <span class="keyword">var</span> newDeviceDPR = <span class="built_in">window</span>.devicePixelRatio || <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">var</span> newDeviceHeight = <span class="built_in">window</span>.screen.height || <span class="number">375</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">window</span>.screen.orientation &amp;&amp; <span class="regexp">/^landscape/</span>.test(<span class="built_in">window</span>.screen.orientation.type || <span class="string">''</span>)) &#123;</span><br><span class="line">        newDeviceWidth = newDeviceHeight;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (newDeviceWidth !== deviceWidth || newDeviceDPR !== deviceDPR) &#123;</span><br><span class="line">        deviceWidth = newDeviceWidth;</span><br><span class="line">        deviceDPR = newDeviceDPR;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">checkDeviceWidth();</span><br></pre></td></tr></table></figure><p>主要更新了几个变量，<code>deviceWidth</code>、<code>deviceDPR</code> ，像素相关的知识很久很久以前写过一篇文章 <a href="https://zhuanlan.zhihu.com/p/55819582" target="_blank" rel="noopener">分辨率是什么？</a>。</p><p>这里再补充一下，这里的 <code>deviceWidth</code> 是设备独立像素(逻辑像素)，是操作系统为了方便开发者而提供的一种抽象。看一下开发者工具预设的设备：</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20231122082636996.png" alt=""></p><p>如上图，以 <code>iphone6</code> 为例，宽度是 <code>375</code> ，事实上 <code>iphone6</code> 宽度的物理像素是 <code>750</code>。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20231122082903038.png" alt=""></p><p>所以就有了 <code>Dpr</code> 的含义， <code>iphone6</code> 的 <code>dpr</code> 是 <code>2</code>， <code>1px</code> 相当于渲染在两个物理像素上。</p><h1 id="rpx-转换"><a href="#rpx-转换" class="headerlink" title="rpx 转换"></a>rpx 转换</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> eps = <span class="number">1e-4</span>;</span><br><span class="line"><span class="keyword">var</span> transformRPX = <span class="built_in">window</span>.__transformRpx__ || <span class="function"><span class="keyword">function</span>(<span class="params">number, newDeviceWidth</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (number === <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    number = number / BASE_DEVICE_WIDTH * (newDeviceWidth || deviceWidth);</span><br><span class="line">    number = <span class="built_in">Math</span>.floor(number + eps);</span><br><span class="line">    <span class="keyword">if</span> (number === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (deviceDPR === <span class="number">1</span> || !isIOS) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0.5</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> number;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>核心就是这一行 <code>number = number / BASE_DEVICE_WIDTH * (newDeviceWidth || deviceWidth);</code> ，其中 <code>BASE_DEVICE_WIDTH</code> 是 <code>750</code> ，也就是微信把屏幕宽度先强行规定为了 <code>750</code> ，先用用户设定的 <code>rpx</code> 值除以 <code>750</code> 算出一个比例，最后乘上设备的逻辑像素。</p><p>如果设备是 <code>iphone6</code> ，那么这里设备的逻辑像素就是 <code>350</code>，所以如果是 <code>2rpx</code> ，<code>2/750*375=1</code> 最后算出来就是 <code>1px</code> ，实际上在 <code>iphone6</code> 渲染的是两个物理像素，也就是常常遇到的 <code>1px</code> 过粗的问题，解决方案可以参考这篇 <a href="https://zhuanlan.zhihu.com/p/535456539" target="_blank" rel="noopener">前端移动端1px问题及解决方案</a>。</p><p>接下来一行 <code>number = Math.floor(number + eps);</code> 是为了解决浮点数精度问题，比如除下来等于 <code>3.9999999998</code> ，实际上应该等于 <code>4</code> ，只是浮点数的问题导致没有算出来 <code>4</code> ，加个 <code>eps</code> ，然后向下 <code>floor</code> 去整，就可以正常得到 <code>4</code> 了，关于浮点数可以看 <a href="https://zhuanlan.zhihu.com/p/75581822" target="_blank" rel="noopener">一直迷糊的浮点数</a>。</p><p>接着往下看：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (number === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (deviceDPR === <span class="number">1</span> || !isIOS) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0.5</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 <code>transformRPX</code> 函数整个代码里第一行 <code>if (number === 0) return 0;</code> ，<code>number</code> 等于 <code>0</code> 已经提前结束了，所以这里 <code>number</code> 得到 <code>0</code> 就是因为除的时候得到了一个小数。</p><p>如果 <code>deviceDPR === 1</code>，说明逻辑像素和物理像素是一比一的，不可能展示半个像素，直接 <code>return 1</code> 。</p><p>如果不是 <code>iOS</code> 也直接返回 <code>1</code> ，这是因为安卓手机厂商众多，即使 <code>deviceDPR</code> 大于 <code>1</code> ，也不一定支持像素传小数，传小数可能导致变 <code>0</code> 或者变 <code>1</code> ，为了最大可能的保证兼容性，就直接返回 <code>1</code>。</p><p>对于苹果手机，据说是从 <code>iOS 8</code> 开始支持 <code>0.5px</code> 的，但没找到当时的官方说明：</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20231125092544214.png" alt=""></p><p>因此上边的代码中，对于 <code>deviceDPR</code> 大于 <code>1</code> ，并且是苹果手机的就直接返回 <code>0.5</code> 了。</p><h1 id="生成-css"><a href="#生成-css" class="headerlink" title="生成 css"></a>生成 css</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">setCssToHead(</span><br><span class="line">[</span><br><span class="line">    <span class="string">"."</span>,</span><br><span class="line">    [<span class="number">1</span>],</span><br><span class="line">    <span class="string">"container &#123; display: flex; align-items: center; justify-content: center; ;wxcs_originclass: .container;;wxcs_fileinfo: ./pages/index/index.wxss 1 1; &#125;\n"</span>,</span><br><span class="line">    <span class="string">"."</span>,</span><br><span class="line">    [<span class="number">1</span>],</span><br><span class="line">    <span class="string">"data1&#123; color: red; font-size: "</span>,</span><br><span class="line">    [<span class="number">0</span>, <span class="number">50</span>],</span><br><span class="line">    <span class="string">"; ;wxcs_style_font-size : 50rpx; ;wxcs_originclass: .data1;;wxcs_fileinfo: ./pages/index/index.wxss 6 1; &#125;\n"</span>,</span><br><span class="line">    <span class="string">"."</span>,</span><br><span class="line">    [<span class="number">1</span>],</span><br><span class="line">    <span class="string">"data2&#123; color: blue; font-size: "</span>,</span><br><span class="line">    [<span class="number">0</span>, <span class="number">100</span>],</span><br><span class="line">    <span class="string">"; ;wxcs_style_font-size : 100rpx; ;wxcs_originclass: .data2;;wxcs_fileinfo: ./pages/index/index.wxss 11 1; &#125;\n"</span>,</span><br><span class="line">    <span class="string">"."</span>,</span><br><span class="line">    [<span class="number">1</span>],</span><br><span class="line">    <span class="string">"data3&#123; color: blue; font-size: "</span>,</span><br><span class="line">    [<span class="number">0</span>, <span class="number">100</span>],</span><br><span class="line">    <span class="string">"; ;wxcs_style_font-size : 100rpx; ;wxcs_originclass: .data3;;wxcs_fileinfo: ./pages/index/index.wxss 17 1; &#125;\n"</span>,</span><br><span class="line">],</span><br><span class="line"><span class="literal">undefined</span>,</span><br><span class="line">&#123; <span class="attr">path</span>: <span class="string">"./pages/index/index.wxss"</span> &#125;</span><br><span class="line">)();</span><br></pre></td></tr></table></figure><p>通过调用 <code>setCssToHead</code> 把上边传的数组拼接为最终的 <code>css</code> 。</p><p>核心逻辑就是循环上边的数组，如果数组元素是字符串直接相加就好，如果是数组 <code>[1]</code>、<code>[0, 50]</code> 这样，需要特殊处理下：</p><p>核心逻辑是 <code>makeup</code> 函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeup</span>(<span class="params">file, opt</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> _n = <span class="keyword">typeof</span>(file) === <span class="string">'string'</span>;</span><br><span class="line">      <span class="keyword">if</span> (_n &amp;&amp; Ca.hasOwnProperty(file)) <span class="keyword">return</span> <span class="string">''</span>;</span><br><span class="line">      <span class="keyword">if</span> (_n) Ca[file] = <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">var</span> ex = _n ? _C[file] : file;</span><br><span class="line">      <span class="keyword">var</span> res = <span class="string">''</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i = ex.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">          <span class="keyword">var</span> content = ex[i];</span><br><span class="line">          <span class="keyword">if</span> (<span class="keyword">typeof</span>(content) === <span class="string">'object'</span>) &#123;</span><br><span class="line">              <span class="keyword">var</span> op = content[<span class="number">0</span>];</span><br><span class="line">              <span class="keyword">if</span> (op === <span class="number">0</span>) res = transformRPX(content[<span class="number">1</span>], opt.deviceWidth) + <span class="string">'px'</span> + res;</span><br><span class="line">              <span class="keyword">else</span> <span class="keyword">if</span> (op === <span class="number">1</span>) res = opt.suffix + res;</span><br><span class="line">              <span class="keyword">else</span> <span class="keyword">if</span> (op === <span class="number">2</span>) res = makeup(content[<span class="number">1</span>], opt) + res;</span><br><span class="line">          &#125; <span class="keyword">else</span> res = content + res;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> res;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>如果遇到 <code>content</code> 是 <code>[1]</code>，也就是  <code>op</code> 等于 <code>1</code> ，添加一个前缀 <code>res = opt.suffix + res;</code> 。</p><p>如果遇到 <code>content</code> 是 <code>[0, 50]</code>，也就是  <code>op</code> 等于 <code>0</code> ，这里的 <code>50</code> 其实就是用户写的 <code>50rpx</code> 的 <code>50</code> ，因此需要调用 <code>transformRPX</code> 将 <code>50</code> 转为 <code>px</code> 再相加 <code>res = transformRPX(content[1], opt.deviceWidth) + &#39;px&#39; + res;</code> 。</p><p>通过 <code>makeup</code> 函数，生成 <code>css</code>  字符串后，剩下的工作就是生成一个 <code>style</code> 标签插入到 <code>head</code> 中了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">css = makeup(file, opt);</span><br><span class="line"><span class="keyword">if</span> (!style) &#123;</span><br><span class="line">    <span class="keyword">var</span> head = <span class="built_in">document</span>.head || <span class="built_in">document</span>.getElementsByTagName(<span class="string">'head'</span>)[<span class="number">0</span>];</span><br><span class="line">    style = <span class="built_in">document</span>.createElement(<span class="string">'style'</span>);</span><br><span class="line">    style.type = <span class="string">'text/css'</span>;</span><br><span class="line">    style.setAttribute(<span class="string">"wxss:path"</span>, info.path);</span><br><span class="line">    head.appendChild(style);</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (style.styleSheet) &#123;</span><br><span class="line">    style.styleSheet.cssText = css;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (style.childNodes.length === <span class="number">0</span>)</span><br><span class="line">        style.appendChild(<span class="built_in">document</span>.createTextNode(css));</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        style.childNodes[<span class="number">0</span>].nodeValue = css;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="注入的全部代码"><a href="#注入的全部代码" class="headerlink" title="注入的全部代码"></a>注入的全部代码</h1><p>这里贴一下注入的全部代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> BASE_DEVICE_WIDTH = <span class="number">750</span>;</span><br><span class="line"><span class="keyword">var</span> isIOS = navigator.userAgent.match(<span class="string">"iPhone"</span>);</span><br><span class="line"><span class="keyword">var</span> deviceWidth = <span class="built_in">window</span>.screen.width || <span class="number">375</span>;</span><br><span class="line"><span class="keyword">var</span> deviceDPR = <span class="built_in">window</span>.devicePixelRatio || <span class="number">2</span>;</span><br><span class="line"><span class="keyword">var</span> checkDeviceWidth = <span class="built_in">window</span>.__checkDeviceWidth__ || <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> newDeviceWidth = <span class="built_in">window</span>.screen.width || <span class="number">375</span>;</span><br><span class="line">    <span class="keyword">var</span> newDeviceDPR = <span class="built_in">window</span>.devicePixelRatio || <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">var</span> newDeviceHeight = <span class="built_in">window</span>.screen.height || <span class="number">375</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">window</span>.screen.orientation &amp;&amp; <span class="regexp">/^landscape/</span>.test(<span class="built_in">window</span>.screen.orientation.type || <span class="string">''</span>)) &#123;</span><br><span class="line">        newDeviceWidth = newDeviceHeight;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (newDeviceWidth !== deviceWidth || newDeviceDPR !== deviceDPR) &#123;</span><br><span class="line">        deviceWidth = newDeviceWidth;</span><br><span class="line">        deviceDPR = newDeviceDPR;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">checkDeviceWidth();</span><br><span class="line"><span class="keyword">var</span> eps = <span class="number">1e-4</span>;</span><br><span class="line"><span class="keyword">var</span> transformRPX = <span class="built_in">window</span>.__transformRpx__ || <span class="function"><span class="keyword">function</span>(<span class="params">number, newDeviceWidth</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (number === <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    number = number / BASE_DEVICE_WIDTH * (newDeviceWidth || deviceWidth);</span><br><span class="line">    number = <span class="built_in">Math</span>.floor(number + eps);</span><br><span class="line">    <span class="keyword">if</span> (number === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (deviceDPR === <span class="number">1</span> || !isIOS) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0.5</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> number;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">window</span>.__rpxRecalculatingFuncs__ = <span class="built_in">window</span>.__rpxRecalculatingFuncs__ || [];</span><br><span class="line"><span class="keyword">var</span> __COMMON_STYLESHEETS__ = __COMMON_STYLESHEETS__ || &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> setCssToHead = <span class="function"><span class="keyword">function</span>(<span class="params">file, _xcInvalid, info</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> Ca = &#123;&#125;;</span><br><span class="line">    <span class="keyword">var</span> css_id;</span><br><span class="line">    <span class="keyword">var</span> info = info || &#123;&#125;;</span><br><span class="line">    <span class="keyword">var</span> _C = __COMMON_STYLESHEETS__;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">makeup</span>(<span class="params">file, opt</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> _n = <span class="keyword">typeof</span>(file) === <span class="string">'string'</span>;</span><br><span class="line">        <span class="keyword">if</span> (_n &amp;&amp; Ca.hasOwnProperty(file)) <span class="keyword">return</span> <span class="string">''</span>;</span><br><span class="line">        <span class="keyword">if</span> (_n) Ca[file] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">var</span> ex = _n ? _C[file] : file;</span><br><span class="line">        <span class="keyword">var</span> res = <span class="string">''</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = ex.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">var</span> content = ex[i];</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">typeof</span>(content) === <span class="string">'object'</span>) &#123;</span><br><span class="line">                <span class="keyword">var</span> op = content[<span class="number">0</span>];</span><br><span class="line">                <span class="keyword">if</span> (op === <span class="number">0</span>) res = transformRPX(content[<span class="number">1</span>], opt.deviceWidth) + <span class="string">'px'</span> + res;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (op === <span class="number">1</span>) res = opt.suffix + res;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (op === <span class="number">2</span>) res = makeup(content[<span class="number">1</span>], opt) + res;</span><br><span class="line">            &#125; <span class="keyword">else</span> res = content + res;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> styleSheetManager = <span class="built_in">window</span>.__styleSheetManager2__;</span><br><span class="line">    <span class="keyword">var</span> rewritor = <span class="function"><span class="keyword">function</span>(<span class="params">suffix, opt, style</span>) </span>&#123;</span><br><span class="line">        opt = opt || &#123;&#125;;</span><br><span class="line">        suffix = suffix || <span class="string">''</span>;</span><br><span class="line">        opt.suffix = suffix;</span><br><span class="line">        <span class="keyword">if</span> (opt.allowIllegalSelector !== <span class="literal">undefined</span> &amp;&amp; _xcInvalid !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (opt.allowIllegalSelector) <span class="built_in">console</span>.warn(<span class="string">"For developer:"</span> + _xcInvalid);</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.error(_xcInvalid);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Ca = &#123;&#125;;</span><br><span class="line">        css = makeup(file, opt);</span><br><span class="line">        <span class="keyword">if</span> (styleSheetManager) &#123;</span><br><span class="line">            <span class="keyword">var</span> key = (info.path || <span class="built_in">Math</span>.random()) + <span class="string">':'</span> + suffix;</span><br><span class="line">            <span class="keyword">if</span> (!style) &#123;</span><br><span class="line">                styleSheetManager.addItem(key, info.path);</span><br><span class="line">                <span class="built_in">window</span>.__rpxRecalculatingFuncs__.push(<span class="function"><span class="keyword">function</span>(<span class="params">size</span>) </span>&#123;</span><br><span class="line">                    opt.deviceWidth = size.width;</span><br><span class="line">                    rewritor(suffix, opt, <span class="literal">true</span>);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">            styleSheetManager.setCss(key, css);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!style) &#123;</span><br><span class="line">            <span class="keyword">var</span> head = <span class="built_in">document</span>.head || <span class="built_in">document</span>.getElementsByTagName(<span class="string">'head'</span>)[<span class="number">0</span>];</span><br><span class="line">            style = <span class="built_in">document</span>.createElement(<span class="string">'style'</span>);</span><br><span class="line">            style.type = <span class="string">'text/css'</span>;</span><br><span class="line">            style.setAttribute(<span class="string">"wxss:path"</span>, info.path);</span><br><span class="line">            head.appendChild(style);</span><br><span class="line">            <span class="built_in">window</span>.__rpxRecalculatingFuncs__.push(<span class="function"><span class="keyword">function</span>(<span class="params">size</span>) </span>&#123;</span><br><span class="line">                opt.deviceWidth = size.width;</span><br><span class="line">                rewritor(suffix, opt, style);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (style.styleSheet) &#123;</span><br><span class="line">            style.styleSheet.cssText = css;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (style.childNodes.length === <span class="number">0</span>)</span><br><span class="line">                style.appendChild(<span class="built_in">document</span>.createTextNode(css));</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                style.childNodes[<span class="number">0</span>].nodeValue = css;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> rewritor;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setCssToHead([])();</span><br><span class="line">setCssToHead(</span><br><span class="line">    [</span><br><span class="line">      <span class="string">"."</span>,</span><br><span class="line">      [<span class="number">1</span>],</span><br><span class="line">      <span class="string">"container &#123; height: 100%; display: flex; flex-direction: column; align-items: center; justify-content: space-between; padding: "</span>,</span><br><span class="line">      [<span class="number">0</span>, <span class="number">200</span>],</span><br><span class="line">      <span class="string">" 0; ;wxcs_style_padding : 200rpx 0; box-sizing: border-box; ;wxcs_originclass: .container;;wxcs_fileinfo: ./app.wxss 2 1; &#125;\n"</span>,</span><br><span class="line">    ],</span><br><span class="line">    <span class="literal">undefined</span>,</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">"./app.wxss"</span> &#125;</span><br><span class="line">  )();</span><br><span class="line">setCssToHead(</span><br><span class="line">[</span><br><span class="line">    <span class="string">"."</span>,</span><br><span class="line">    [<span class="number">1</span>],</span><br><span class="line">    <span class="string">"container &#123; display: flex; align-items: center; justify-content: center; ;wxcs_originclass: .container;;wxcs_fileinfo: ./pages/index/index.wxss 1 1; &#125;\n"</span>,</span><br><span class="line">    <span class="string">"."</span>,</span><br><span class="line">    [<span class="number">1</span>],</span><br><span class="line">    <span class="string">"data1&#123; color: red; font-size: "</span>,</span><br><span class="line">    [<span class="number">0</span>, <span class="number">50</span>],</span><br><span class="line">    <span class="string">"; ;wxcs_style_font-size : 50rpx; ;wxcs_originclass: .data1;;wxcs_fileinfo: ./pages/index/index.wxss 6 1; &#125;\n"</span>,</span><br><span class="line">    <span class="string">"."</span>,</span><br><span class="line">    [<span class="number">1</span>],</span><br><span class="line">    <span class="string">"data2&#123; color: blue; font-size: "</span>,</span><br><span class="line">    [<span class="number">0</span>, <span class="number">100</span>],</span><br><span class="line">    <span class="string">"; ;wxcs_style_font-size : 100rpx; ;wxcs_originclass: .data2;;wxcs_fileinfo: ./pages/index/index.wxss 11 1; &#125;\n"</span>,</span><br><span class="line">    <span class="string">"."</span>,</span><br><span class="line">    [<span class="number">1</span>],</span><br><span class="line">    <span class="string">"data3&#123; color: blue; font-size: "</span>,</span><br><span class="line">    [<span class="number">0</span>, <span class="number">100</span>],</span><br><span class="line">    <span class="string">"; ;wxcs_style_font-size : 100rpx; ;wxcs_originclass: .data3;;wxcs_fileinfo: ./pages/index/index.wxss 17 1; &#125;\n"</span>,</span><br><span class="line">],</span><br><span class="line"><span class="literal">undefined</span>,</span><br><span class="line">&#123; <span class="attr">path</span>: <span class="string">"./pages/index/index.wxss"</span> &#125;</span><br><span class="line">)();</span><br></pre></td></tr></table></figure><h1 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h1><p>剩下一个问题，我们写的代码是：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.data1</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">50</span>rpx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.data2</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>: blue;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">100</span>rpx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.data3</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>: blue;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">100</span>rpx;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但上边分析的 <code>&lt;script&gt;</code> 生成 <code>css</code> 的数组是哪里来的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    <span class="string">"."</span>,</span><br><span class="line">    [<span class="number">1</span>],</span><br><span class="line">    <span class="string">"container &#123; display: flex; align-items: center; justify-content: center; ;wxcs_originclass: .container;;wxcs_fileinfo: ./pages/index/index.wxss 1 1; &#125;\n"</span>,</span><br><span class="line">    <span class="string">"."</span>,</span><br><span class="line">    [<span class="number">1</span>],</span><br><span class="line">    <span class="string">"data1&#123; color: red; font-size: "</span>,</span><br><span class="line">    [<span class="number">0</span>, <span class="number">50</span>],</span><br><span class="line">    <span class="string">"; ;wxcs_style_font-size : 50rpx; ;wxcs_originclass: .data1;;wxcs_fileinfo: ./pages/index/index.wxss 6 1; &#125;\n"</span>,</span><br><span class="line">    <span class="string">"."</span>,</span><br><span class="line">    [<span class="number">1</span>],</span><br><span class="line">    <span class="string">"data2&#123; color: blue; font-size: "</span>,</span><br><span class="line">    [<span class="number">0</span>, <span class="number">100</span>],</span><br><span class="line">    <span class="string">"; ;wxcs_style_font-size : 100rpx; ;wxcs_originclass: .data2;;wxcs_fileinfo: ./pages/index/index.wxss 11 1; &#125;\n"</span>,</span><br><span class="line">    <span class="string">"."</span>,</span><br><span class="line">    [<span class="number">1</span>],</span><br><span class="line">    <span class="string">"data3&#123; color: blue; font-size: "</span>,</span><br><span class="line">    [<span class="number">0</span>, <span class="number">100</span>],</span><br><span class="line">    <span class="string">"; ;wxcs_style_font-size : 100rpx; ;wxcs_originclass: .data3;;wxcs_fileinfo: ./pages/index/index.wxss 17 1; &#125;\n"</span>,</span><br><span class="line">],</span><br></pre></td></tr></table></figure><p>是微信帮我们把 <code>wxss</code> 进行了编译，编译工具可以在微信开发者工具目录搜索 <code>wcsc</code> ，<code>Library</code> 是个隐藏目录。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20231125123847684.png" alt=""></p><p>我们把这个 <code>wcsc</code> 文件拷贝到 <code>index.wxss</code> 的所在目录，然后将我们的 <code>wxss</code> 手动编译一下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./wcsc -js ./index.wxss &gt;&gt; wxss.js</span><br></pre></td></tr></table></figure><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20231125124432358.png" alt="image-20231125124432358"></p><p>此时会发现生成的 <code>wxss.js</code> 就是我们上边分析的全部代码了：</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20231125124528090.png" alt=""></p><h1 id="总"><a href="#总" class="headerlink" title="总"></a>总</h1><p>因此对于代码 <code>wxss</code> 到显示到页面中就是三步了，第一步是编译为 <code>js</code>，第二步将 <code>js</code> 通过 <code>eval</code> 注入到页面，第三步就是 <code>js</code> 执行过程中把 <code>rpx</code> 转为 <code>px</code>，并且把 <code>css</code> 注入到 <code>style</code>  标签中。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;平常小程序写的多一些，简单总结一下原理。但因为小程序也没开源，只能参考相关文档以及开发者工具慢慢理解了。&lt;/p&gt;
&lt;p&gt;理解小程序原理的突破口就是开发者工具了，开发者工具是基于 &lt;code&gt;NW.js&lt;/code&gt;，一个基于 &lt;code&gt;Chromium&lt;/code&gt; 和 
      
    
    </summary>
    
    
      <category term="前端" scheme="https://windliang.wang/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="微信小程序" scheme="https://windliang.wang/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>记前端大会 FEDay 的一天</title>
    <link href="https://windliang.wang/2023/11/19/%E8%AE%B0%E5%89%8D%E7%AB%AF%E5%A4%A7%E4%BC%9AFEDay/"/>
    <id>https://windliang.wang/2023/11/19/%E8%AE%B0%E5%89%8D%E7%AB%AF%E5%A4%A7%E4%BC%9AFEDay/</id>
    <published>2023-11-19T03:13:00.000Z</published>
    <updated>2023-11-22T23:39:14.993Z</updated>
    
    <content type="html"><![CDATA[<p>周六去杭州参加了第六届 FEDay，买的晚宴票，晚上还和大佬们吃了饭，看着网上活跃的 id 变成了吃饭的同桌，还真有一些不真切的感觉。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20231119172323465.png" alt="image-20231119172323465" style="zoom: 33%;"></p><p>趁着对周六分享还有些记忆，就简单写一写周六的分享和感触吧，<strong>中间会混着我的一些观点</strong>，主要是听到分享后想到的，大家也不要误解。</p><h1 id="阮贝琪（Jecelyn-Yeen）：网页调试的最新进展（Modern-Web-Debugging）"><a href="#阮贝琪（Jecelyn-Yeen）：网页调试的最新进展（Modern-Web-Debugging）" class="headerlink" title="阮贝琪（Jecelyn Yeen）：网页调试的最新进展（Modern Web Debugging）"></a>阮贝琪（Jecelyn Yeen）：网页调试的最新进展（Modern Web Debugging）</h1><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20231119172721731.png" alt="image-20231119172721731" style="zoom:33%;"></p><p>一位谷歌的大佬，分享的非常幽默，主要介绍了 Chrome 的 devTools，调试相关的东西。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20231119174738753.png" alt="image-20231119174738753"></p><p>更新了一个认识： Source Maps 规格竟然停留在了 <a href="https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit?pli=1#heading=h.1ce2c87bpj24" target="_blank" rel="noopener">2011</a>，但过去十年前端发生了太多的变化，导致 SourceMap 目前很 flexible， 目前 Chrome 也在与 TC39 合作，强化规范并改善调试体验。</p><p>介绍了很多调试 Tips，印象比较深的两个：</p><p>前段时间知道了 Chrome 可以覆盖相应内容，意味着 Mock 再也不需要第三方插件了。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20231119180001931.png" alt="image-20231119180001931"></p><p>会上还展示了 Override headers，通过编辑 headers 也可以直接解决跨域问题，这是之前没有想到的。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20231119180135764.png" alt="image-20231119180135764"></p><p>另外还有个之前遇到的头疼的问题，如果想调试搜索框选中下拉元素的样式。</p><p>当切到 Element，搜索框下边的内容就会消失掉</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20231119180330182.png" alt="image-20231119180330182"></p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20231119180338334.png" alt="image-20231119180338334"></p><p>此时找到 MoreTools，Rendering</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20231119180403639.png" alt="image-20231119180403639"></p><p>开启 Emulate a focused page，此时下拉就出来了。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20231119180446239.png" alt="image-20231119180446239"></p><p>Jecelyn Yeen 也自嘲这么好的功能为什么大家都不知道，未来也会把这个功能放到外层。</p><p>最后，所有的功能其实都是有人在默默开发，遇到问题没有人反馈其实不会自己偷偷修复，Jecelyn Yeen  也提倡大家有问题可以及时报告。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20231119180824327.png" alt="image-20231119180824327"></p><h1 id="周爱民：从JS到TS无缝迁移的实践报告"><a href="#周爱民：从JS到TS无缝迁移的实践报告" class="headerlink" title="周爱民：从JS到TS无缝迁移的实践报告"></a>周爱民：从JS到TS无缝迁移的实践报告</h1><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20231119184127214.png" alt="image-20231119184127214" style="zoom:33%;"></p><p>分享了无缝迁移 Mocha 到 TS 的全过程，以及期间遇到的常见的问题。</p><p>突然发现是一个学 TS 不错的方法，github 找一个还没有 ts 的开源项目，然后去转 TS 来练习。</p><p>关于用不用 TS 一直争议不断，前段时间我也有写过一篇 <a href="https://zhuanlan.zhihu.com/p/649557019" target="_blank" rel="noopener">关于 TS 的思考</a>。</p><p>周爱民老师也分享了自己的看法：持续迭代的复杂项目，值得去转 TS。</p><p>换言之，如果一个简单项目，直接 js 就好了，用 TS 徒增复杂度。但对于复杂项目是不是也要转 TS 这里我觉得还是有争议的，对于框架类、工具类接入 TS 是毫无疑问的，比如 Vue3 就全面拥抱了 TS。</p><p>但对于复杂的业务项目，由于参与人数众多，很多结构也很依赖于后端，随着慢慢迭代，更多的 any 或者类型和实际用的数据渐渐不一致，就变成破窗效应，迭代需求时候就没有人再愿意维护旧类型了。</p><h1 id="蒋豪群：一种-Vue-2-3-共存开发的思路"><a href="#蒋豪群：一种-Vue-2-3-共存开发的思路" class="headerlink" title="蒋豪群：一种 Vue 2/3 共存开发的思路"></a>蒋豪群：一种 Vue 2/3 共存开发的思路</h1><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20231119194238059.png" alt="image-20231119194238059" style="zoom:33%;"></p><p>Vue2 将在年底彻底停止维护，分享了之前 Vue2 修复的安全漏洞，继续使用 Vue2 一个最大的问题就是安全问题。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20231120090032301.png" alt="image-20231120090032301"></p><p>但在国内这个问题不会引起重视的[旺柴]，毕竟 XP 还有很多市场，我们团队内的项目甚至还是 Vue 2.5 的版本，对于业务团队，完全没有足够的理由去说升级这个事，风险远远大于收益。</p><p>之前升级项目的 ElementUI 的版本也是灰度了很久才完成，Vue 去升级想都不敢想，只能是新开的项目来使用 Vue3 了。</p><p>后边具体的分享了 Vue2/3 同时维护的方案，一种是一套源代码编译成 Vue2/3 两套代码，另一种是直接写两套代码，都一定程度上会多增加一些工作量，目前看来还是没有一种完美的方案来让 Vue2/3 共存。</p><h1 id="张磊：响应式-WebComponents"><a href="#张磊：响应式-WebComponents" class="headerlink" title="张磊：响应式 WebComponents"></a>张磊：响应式 WebComponents</h1><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20231119194430058.png" alt="image-20231119194430058" style="zoom: 33%;"></p><p>磊哥分享很硬核，直接上一页又一页的代码，人也自带搞笑属性，哈哈。主要介绍了 Omi 的一些思路，Web components + 信号驱动的响应式编程，响应式编程还就是 Vue 那套，感兴趣的同学也可以看我之前总结的  <a href="https://vue.windliang.wang/" target="_blank" rel="noopener">vue.windliang.wang/</a>。</p><p>分享了对于 Web Components 遇到的一些问题，还有许久没有操作的 dom，介绍了一个有用的 API TreeWalker，解决 Shadow Dom 样式被隔离的问题，全面拥抱 TailWind css，解决取名问题，同时避免各个 class 相互影响，实现组件内聚到 HTML 标签上。</p><p>我突然产生了一种感觉，随着 Web component 的完善，更多的框架出现，未来会不会又回到原生标签的开发中，哈哈。</p><p>最重要的就是 ALL IN AI，生成式 AI 势不可挡，下午也有更多的分享嘉宾带来了 AI 方面的思考。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20231119195532826.png" alt="image-20231119195532826"></p><h1 id="渚薰：作为一名前端，如何赶上AR时代的脚步"><a href="#渚薰：作为一名前端，如何赶上AR时代的脚步" class="headerlink" title="渚薰：作为一名前端，如何赶上AR时代的脚步"></a>渚薰：作为一名前端，如何赶上AR时代的脚步</h1><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20231119195650859.png" alt="image-20231119195650859" style="zoom:33%;"></p><p>主要分享了 AR / XR 方面的知识，自己之前也没接触过这方面知识，同时分享了未来的畅享。分享了给他儿子写的一个奥特曼 AR 应用，你相信光吗，看着心潮澎湃，哈哈。</p><p>另外提到目前网页都是二维或者三维的渲染，期待未来实现二维和三维的混合渲染，同时三维也尽可能的接近目前 html/css 的开发模式，目前已经有个框架在往这方面发展，还可以直接在 VSCode 上调试，但框架名我忘记了。</p><p>此外，AR/XR 的未来，完全看苹果的表现了，虽然已经发展了很多年，那依然还是没能像手机一样普及。如果苹果的 Vision Pro 继续发展，电影中的场景也会很快实现，明年也许是真正的 AR 元年。</p><p>对于前端来说，未来又多了一批职业。</p><h1 id="李杰（一丝）：resvg-js-高性能的-SVG-跨端渲染引擎"><a href="#李杰（一丝）：resvg-js-高性能的-SVG-跨端渲染引擎" class="headerlink" title="李杰（一丝）：resvg-js 高性能的 SVG 跨端渲染引擎"></a>李杰（一丝）：resvg-js 高性能的 SVG 跨端渲染引擎</h1><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20231119204648441.png" alt="image-20231119204648441" style="zoom:33%;"></p><p>演讲的时候没有感受到，吃饭的时候发现一丝姐姐好活泼，哈哈。主要介绍了 SVG 的渲染引擎，底层是基于 Rust ，上次进行封装，提供操作 SVG 的方法，浏览器通过 WebAssebmy 进行调用。</p><p>也都是自己知识外的知识，但只记得一点就行了，如果要高性能的渲染 SVG，去看 resvg-js 就好了，哈哈。</p><h1 id="吴亮（月影）：AI-大模型时代前端新思路"><a href="#吴亮（月影）：AI-大模型时代前端新思路" class="headerlink" title="吴亮（月影）：AI 大模型时代前端新思路"></a>吴亮（月影）：AI 大模型时代前端新思路</h1><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20231120092616443.png" alt="image-20231120092616443" style="zoom:33%;"></p><p>介绍了创业项目 AirCode，现场演示了目前的一些功能。</p><p>生成式 AI 未来可能会引发新的交互形式，maybe 智能组件，比如一个时间选择组件，直接通过自然语言进行交互，「勾选中秋节假期」，而不是自己先去查中秋是啥时候，当然是指一个简单的设想，未来也说不准会怎么样，比如现在国外团队最近发布的 Ai Pin，直接挂到胸前，通过语音沟通，还能投影到手掌。</p><p><img src="https://image.woshipm.com/2023/11/10/e9df295e-7f85-11ee-836d-00163e0b5ff3.jpg" alt="img" style="zoom:50%;"></p><p>另一个点是，ai 有一个问题是不确定性。可能无法很好的遵从我们的指令，如果这个问题可以解决了，未来会有更大的想象力，甚至成为一门新的编程语言，而这门编程语言完全是我们的自然语言了。</p><h1 id="张敏：WebNN-Web-端侧推理的未来"><a href="#张敏：WebNN-Web-端侧推理的未来" class="headerlink" title="张敏：WebNN, Web 端侧推理的未来"></a>张敏：WebNN, Web 端侧推理的未来</h1><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20231119201814989.png" alt="image-20231119201814989" style="zoom:33%;"></p><p>好吧，涉及硬件的东西，完全没有看懂：</p><blockquote><p>AI PC 以及 AI Mobile 的新兴时代已经到来，越来越多的设备集成了强大的神经处理单元 NPU，以实现高效的人工智能加速，这对需要端侧推理的应用至关重要。除了通过 CPU 和 GPU 进行推理之外，Web Neural Network API (WebNN) 提供了 Web 应用访问此类专有 AI 加速器 NPU 的途径，以获得卓越性能及更低功耗。</p><p>本演讲将会给大家分享 WebNN API 的 W3C 标准进度，对 CNN, Transformer 以及更广泛的生成式 AI (Generative AI) 模型的支持情况和计划，以及在 Chrome, Edge 等浏览器的实现进展。作为 JavaScript ML 框架的后端，WebNN 将会在几乎不更改前端代码的前提下，为 Web 开发者及他们的产品带来相较于 Wasm, WebGL 更为优异的性能体验。</p></blockquote><p>大概就是提供专门的硬件 NPU，同时上层提供专门的 API 加速 AI 计算，为上层的应用服务，比如后边分享的 Transformer。</p><h1 id="贺师俊（Hax）：如何更丝滑地在应用中调用-GPT"><a href="#贺师俊（Hax）：如何更丝滑地在应用中调用-GPT" class="headerlink" title="贺师俊（Hax）：如何更丝滑地在应用中调用 GPT"></a>贺师俊（Hax）：如何更丝滑地在应用中调用 GPT</h1><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20231119201953880.png" alt="image-20231119201953880" style="zoom:33%;"></p><p>大佬很和蔼，吃饭的时候甚至就在旁边。分享的很实用，因为 Hax 在做 AI 相关的应用，底层是基于 GPT 的，很细节的分享了如何调用 GPT 和踩的一些坑。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20231119202425785.png" alt="image-20231119202425785"></p><p>这一次的生成式 AI 真的越来越像人，具备了人的特点。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20231119202606595.png" alt="image-20231119202606595"></p><p>之前听孟岩的播客也提到这个，GPT 是基于概率来逐次生成完整的对话，我们人其实也完全是这样，如果要说一大段话，基于周围的环境，前边说的，一点一点的完成整个对话，和 GPT 真的太像了。</p><p>另外，只要热爱编程，就忘掉 35 岁吧，贺老已经 45 了。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20231119202337901.png" alt="image-20231119202337901"></p><h1 id="Joshua-Lochner：-State-of-the-art-Machine-Learning-for-the-Web（远程分享）"><a href="#Joshua-Lochner：-State-of-the-art-Machine-Learning-for-the-Web（远程分享）" class="headerlink" title="Joshua Lochner： State-of-the-art Machine Learning for the Web（远程分享）"></a>Joshua Lochner： State-of-the-art Machine Learning for the Web（远程分享）</h1><blockquote><p>在本次演讲中，你将了解 Hugging Face 如何通过 Transformers.js 将最先进的机器学习带到 Web 中，同时我们将讨论 WebML 技术的优势，以及如何将其用于加速您的 Web 应用程序。最后，为了展示 Transformers.js 的潜力，我们将探索一些使用该库构建的引人注目的应用。</p></blockquote><p>在 chatGPT 出现之前，这一定是非常惊艳的，可以在浏览器本地直接实现语音识别、翻译、图像识别等， Hugging Face  提供了众多训练好的专有模型，前端直接通过一行代码引入就可以直接使用，底层还是之前很火的深度学习模型。之前我也通过 <a href="https://zhuanlan.zhihu.com/p/71647786" target="_blank" rel="noopener">Tensorflow.js</a> 来直接在浏览器实现图像识别.</p><p>但当大模型兴起后，之前的深度学习就略显尴尬了，毕竟在各个方面大模型都可以吊打各个深度学习的专有模型了。但在浏览器直接跑模型好处也是有的，那就是隐私，由于是完全本地调用 AI 模型，无需通过网络，隐私完全不会暴露，同时速度也很快。</p><p>未来发展方向就是将大模型也能内置到浏览器，但还需要继续发展。</p><h1 id="陈天壹（七桑）：抖音商家端-Rust-业务实践"><a href="#陈天壹（七桑）：抖音商家端-Rust-业务实践" class="headerlink" title="陈天壹（七桑）：抖音商家端 Rust 业务实践"></a>陈天壹（七桑）：抖音商家端 Rust 业务实践</h1><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20231119203908997.png" style="zoom:33%;"></p><blockquote><p>随着抖音电商业务高速增长，商家端在有高复用要求的背景下，选用了 Electron + Web 构建跨平台、快交付的高效率方案，但也面对着不小的性能及稳定性压力。我们通过 Rust 在抖音商家端落地，为高性能挑战的业务(如IM)提供了底层能力支持，抬高原有架构性能天花板，并保持跨平台应对未来变化。</p><p>本次分享我们将揭示抖音商家端Rust 实战的精华内容，你将了解到:<br>- Electron架构面临什么样的性能和稳定性挑战? 选型上与其他方案有什么样的考虑？<br>- 为什么选择Rust语言? 如何设计 Rust SDK 架构实现跨平台<br>- Rust 怎么在 Electron 内跑起来？与web如何交互？<br>- 提升IM的稳定性，抬高性能天花板，我们拿到了什么样的收益？</p></blockquote><p>Rust 一直如火如荼，但一直没有近距离的接触过。七桑用代码演示了使用的过程，同时介绍了在抖音电商的落地。未来相关基建一定会用 Rust 来重新了，但不知道自己啥时候会遇到这样的需求。</p><h1 id="黄玄（Hux）：我的大前端世界观"><a href="#黄玄（Hux）：我的大前端世界观" class="headerlink" title="黄玄（Hux）：我的大前端世界观"></a>黄玄（Hux）：我的大前端世界观</h1><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20231119204430533.png" alt="image-20231119204430533" style="zoom:33%;"></p><p>会议开头直接抛出了问题，后端是什么，前端又是什么？</p><p>确实很难定义清楚，狭义的讲，跑在服务器的就是后端，html/css/js 就是前端。</p><p>但随着前端的发展，Node.js、WebAssembly、Rust、React、Vue、RN、小程序的出现，前端的领域范围越来越大，一切都是前端，还有前端不能做的吗[旺柴] </p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/v2-a62f4ac750b6a977fd9f4c53f1c21542_r.jpg" alt=""></p><p>Hux 也形象的用 O(n) -&gt; O(1) 来比喻边际效应，从 Flash 到 H5 到移动端，当技术让边际成本足够低，相应的职业也就会消失。有老的技术的消失，但随之又会有新技术的出现，技术肯定是为人所服务的，只要有技术，我们就会在。</p><p>这也是我之前的想法，但 Hux 讲的更深入，更高大上一些，之前我写的详见 <a href="https://zhuanlan.zhihu.com/p/640990591" target="_blank" rel="noopener">工作三年后的胡思乱想</a>。</p><p>我们确实站在了 AI 变革的时间点，但不用担心被 AI 取代，历史的经验已经充分告诉我们，一个的消失一定会有新的出现，保持学习即可。</p><h1 id="尤雨溪：前端与框架（线上录屏）"><a href="#尤雨溪：前端与框架（线上录屏）" class="headerlink" title="尤雨溪：前端与框架（线上录屏）"></a>尤雨溪：前端与框架（线上录屏）</h1><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20231120085703675.png" alt="image-20231120085703675"></p><p>可惜这次还是没有见到尤大，到尤大时间已经比较紧了，视频也开始 1.25、1.5 倍速，因为是在电影院，后面一场电影马上要来人了。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20231120091828930.png" alt="image-20231120091828930"></p><p>尤大的分享确实很干，主要是关于 Vue2 到 Vue3 中犯的一些错误，业务迁移困难、相关基建迁移困难，但好在 Vue3 现在也蓬勃发展了，并且吸取了教训用在后续 Vite 迭代中。</p><p>讲了目前 Vite 开发采用 esbuild 很快，但线上打包采用更加灵活的 rollup，两者可能会带来差异，后续会开发 rolldown，吸取 esbuild 和 rollup 两者的优点，但估计是个漫长的过程了。</p><h1 id="总"><a href="#总" class="headerlink" title="总"></a>总</h1><p>一天分享的内容很多很多，不停的超时，哈哈。上边就是自己印象深刻的一些点，后续 FEDay 的组织者也许会在 <a href="https://fequan.com/2023/" target="_blank" rel="noopener">「前端圈」 </a>把 ppt 都分享出来，大家感兴趣也可以去找找。</p><p>一天下来，最重要的大概就是 AI 了，之前一直说风口，Web1.0 时代、移动互联网时代，新的 ai 时代开启了，但我们可以做些什么呢？好吧，果然还是普通人，只能静静的等待 ai 时代的明星公司一个接着一个诞生了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;周六去杭州参加了第六届 FEDay，买的晚宴票，晚上还和大佬们吃了饭，看着网上活跃的 id 变成了吃饭的同桌，还真有一些不真切的感觉。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://windliangblog.oss-cn-beijing.aliyuncs.com/im
      
    
    </summary>
    
    
      <category term="前端" scheme="https://windliang.wang/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>从小白到入门编程的成长之路</title>
    <link href="https://windliang.wang/2023/08/31/%E4%BB%8E%E5%B0%8F%E7%99%BD%E5%88%B0%E5%85%A5%E9%97%A8%E7%BC%96%E7%A8%8B%E7%9A%84%E6%88%90%E9%95%BF%E4%B9%8B%E8%B7%AF/"/>
    <id>https://windliang.wang/2023/08/31/%E4%BB%8E%E5%B0%8F%E7%99%BD%E5%88%B0%E5%85%A5%E9%97%A8%E7%BC%96%E7%A8%8B%E7%9A%84%E6%88%90%E9%95%BF%E4%B9%8B%E8%B7%AF/</id>
    <published>2023-08-30T23:48:32.000Z</published>
    <updated>2023-08-31T23:44:33.759Z</updated>
    
    <content type="html"><![CDATA[<p>前段时间在知乎看到这个问题「<a href="https://www.zhihu.com/question/614706706/answer/3146012068" target="_blank" rel="noopener">想请教现在的在职程序员第一次编程入门的是怎样的？</a>」，现在又到了大学新生入学的日子，这里把答案贴过来，希望对大家有所帮助。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20230831075109555.png" alt=""></p><p>按时间线来回忆下：</p><h2 id="14-年-9-月-15-年-3-月大一上"><a href="#14-年-9-月-15-年-3-月大一上" class="headerlink" title="14 年 9 月 - 15 年 3 月大一上"></a>14 年 9 月 - 15 年 3 月大一上</h2><p>14 年进入大学接触编程，第一门编程语言 C++。</p><p>开始就是学基础语法，学循环、学递归，求绝对值、求阶乘、一元二次方程求解，到最后的学生管理系统。</p><p><img src="https://pic1.zhimg.com/80/v2-bb99a05769ad80fa59a3b06bb6ea3b3a_1440w.webp?source=1940ef5c" alt="img"></p><p>txt 文件是类似下边的数据：</p><p><img src="https://pica.zhimg.com/80/v2-f5539b9fed34796b59820eca4a45b18d_1440w.webp?source=1940ef5c" alt="img"></p><p>写出的程序就是命令行之间的交互，程序把 txt 读入，然后进行增删改查的操作。</p><p><img src="https://picx.zhimg.com/80/v2-d79811e1b2c1128171481c1a1b731c7b_1440w.webp?source=1940ef5c" alt="img"></p><p>最开始底层是用一个大数组保存的，当时正好在学链表，自己就想着干脆再用链表重写一下吧，然后花了几天时间将整个代码进行了重写，未来遇到链表的问题都变得轻轻松松了。</p><p>大一寒假回家闲来无事就在网上找了些课程，学了<a href="https://www.zhihu.com/search?q=郝斌&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra={&quot;sourceType&quot;%3A&quot;answer&quot;%2C&quot;sourceId&quot;%3A3146012068}" target="_blank" rel="noopener">郝斌</a>的数据构课程，但当时应该是懵懵懂懂，只了解了大概。</p><h2 id="15-年-3-月-15-年-9-月大一下"><a href="#15-年-3-月-15-年-9-月大一下" class="headerlink" title="15 年 3 月 - 15 年 9 月大一下"></a>15 年 3 月 - 15 年 9 月大一下</h2><p>大一下学期接触了 GUI，也就是有界面的应用，学校的课程是 MFC。</p><p><img src="https://picx.zhimg.com/80/v2-09c41120e35b979bfd84f9590cb0a2df_1440w.webp?source=1940ef5c" alt="img"></p><p>课程末，把大一上写的黑框的学生管理系统改成了有界面的。</p><p><img src="https://pic1.zhimg.com/80/v2-22a454919b675bb94b57509a23c19024_1440w.webp?source=1940ef5c" alt="img"></p><p>接着暑假开始的时候没有直接回家，学校当时有 ACM 集训第一个月留校了，但当时基础太差，如听天书，最终也没走 ACM 的道路。</p><p>但期间因为有了 MFC 的知识，自己又尝试做了一个双人版的贪吃蛇。完全从零自己开始写， 画蛇身，动起来，操控，一步一步最后完成的。</p><p>并且实现了局域网对战，对网络有了初步的了解。</p><p><img src="https://pic1.zhimg.com/80/v2-639aacf85cd02dc4e47b4d8d073f398f_1440w.webp?source=1940ef5c" alt="img"></p><p><a href="https://www.zhihu.com/question/398508166/answer/1281030495" target="_blank" rel="noopener">用c语言可以实现多人在线游戏吗？100 赞同 · 8 评论回答<img src="https://pica.zhimg.com/v2-e41503e83cfeb73864b2e95f02305656_720w.jpg?source=7e7ef6e2" alt="img"></a></p><p>大一期间还接触过其他事情：</p><p>期间接触到 <a href="https://www.zhihu.com/people/fd7c571a0ada1a72e42e8d7992c4a780" target="_blank" rel="noopener">@萧井陌</a>的 <a href="https://zhuanlan.zhihu.com/p/19959253" target="_blank" rel="noopener">Badger4us：编程入门指南 v2.0</a> ，陆陆续续开始看里边的 python 课（未来写过很多 python）、哈佛大学的 cs50 课（了解到很多概念，对 scratch 也印象深刻，未来也专门又用了一次）、SICP（神书，也学到了 lisp 语言）。这篇文章对自己帮助很大，每当迷茫的时候就会去读读。</p><p>期间联系了一位老师，从大一寒假开始陆陆续续看论文、学 MATLAB、学算法，详细的故事可以看 <a href="https://www.zhihu.com/question/345429819/answer/825839114" target="_blank" rel="noopener">有一些超级难的算法比如遗传算法，蚁群算法，看了数学建模国赛感觉好难写，那些人怎么写出来的?</a></p><h2 id="15-年-9-月-16-年-3-月大二上"><a href="#15-年-9-月-16-年-3-月大二上" class="headerlink" title="15 年 9 月 - 16 年 3 月大二上"></a>15 年 9 月 - 16 年 3 月大二上</h2><p>学校课程多了数据结构，对链表、树、图有了更多的了解，期间有个小作业继续利用 MFC 进行可视化。</p><p><img src="https://pic1.zhimg.com/80/v2-195910d9ca4f88006bbb2b09d0a23abf_1440w.webp?source=1940ef5c" alt="img"></p><p>当时学校查成绩只能到教务网站自己去查，没有自己的官方 app，于是就萌发了自己去写一个 app 的想法，开始一步步践行。</p><p>寒假的时候开始学习 java 语言：</p><p><img src="https://pic1.zhimg.com/80/v2-3d1c83872eda9181dad6bf2dd2d27935_1440w.webp?source=1940ef5c" alt="img"></p><p>学习 Java 之后才对面向过程编程和面向对象有了更多的理解。</p><h2 id="16-年-3-月-16-年-9-月大二下"><a href="#16-年-3-月-16-年-9-月大二下" class="headerlink" title="16 年 3 月 - 16 年 9 月大二下"></a>16 年 3 月 - 16 年 9 月大二下</h2><p>继续学习 java，开始写简单的安卓应用，之前学数据结构的时候做过无界面的计算器，这里结合安卓就做了一个有界面的计算器。</p><p><img src="https://picx.zhimg.com/80/v2-dfb40f0bc2f909899bf651e34ea9ba16_1440w.webp?source=1940ef5c" alt="img"></p><p><img src="https://picx.zhimg.com/80/v2-e8893468a94ce52d6350f1903ae4bf27_1440w.webp?source=1940ef5c" alt="img"></p><p>掌握基本安卓开发后，如果做查成绩的 app 肯定还需要数据，于是又捡起之前的 python，学习爬虫，了解网络知识、html 解析，最终成功查出来。</p><p><img src="https://pic1.zhimg.com/80/v2-7a215cc8ec325de96292549640523468_1440w.webp?source=1940ef5c" alt="img"></p><p>这个之后，被学校的一个互联网社团看到了，于是有了联系，他们也有做学校 app 的想法，于是从独自作战变成了团队合作。</p><p>当时的学校网络需要连好之后进行手动登录，于是又写了一个 app</p><p><img src="https://pic1.zhimg.com/80/v2-dfd8fbbc924002d987de499ad459754b_1440w.webp?source=1940ef5c" alt="img"></p><p>暑假第一个月继续留校学习，借了几本安卓的书开始学习</p><p><img src="https://picx.zhimg.com/80/v2-fbaa883623a6e3b70f0f4f74fe93f3b1_1440w.webp?source=1940ef5c" alt="img"></p><h2 id="16-年-9-月-1-7-年-3-月-大三上"><a href="#16-年-9-月-1-7-年-3-月-大三上" class="headerlink" title="16 年 9 月 - 1 7 年 3 月 大三上"></a>16 年 9 月 - 1 7 年 3 月 大三上</h2><p>在团队里有了更多的事情，由于当时 python 比较熟，又写了一个接口用来在线充值饭卡，之前学校充值饭卡只能线下充。</p><p><img src="https://pic1.zhimg.com/80/v2-874aa93a9fd9f71eec8107a06f98dd71_1440w.webp?source=1940ef5c" alt="img"></p><p>学校课程里也陆陆续续接触一些底层的计算机知识，操作系统、计算机组成原理、汇编语言、数字逻辑这些。</p><p>比如电脑上模拟 8086 CPU 做的一个东西：</p><p><img src="https://picx.zhimg.com/80/v2-c1b5c11dd34076abbd0cb596b157ae9d_1440w.webp?source=1940ef5c" alt="img"></p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/Kapture%202023-08-31%20at%2007.55.40.gif" alt=""></p><p>17 年生日的时候搭建了自己的第一个博客，<a href="https://windliang.wang">https://windliang.wang</a> ，了解了域名、服务器、git 各种概念，后边陆陆续续就开始总结文章了。</p><p><img src="https://pic1.zhimg.com/80/v2-9229df4b76596c05f7506b65e60d4750_1440w.webp?source=1940ef5c" alt="img"></p><h2 id="17-年-3-月-17-年-9-月-大三下"><a href="#17-年-3-月-17-年-9-月-大三下" class="headerlink" title="17 年 3 月 - 17 年 9 月 大三下"></a>17 年 3 月 - 17 年 9 月 大三下</h2><p>大三下一开学，app 正式上线，支持查课表、查成绩、充值饭卡：</p><p><img src="https://picx.zhimg.com/80/v2-67f10cc5625425d19439fa2839c8d041_1440w.webp?source=1940ef5c" alt="img"></p><h2 id="17-年-9-月-17-年-3-月大四上"><a href="#17-年-9-月-17-年-3-月大四上" class="headerlink" title="17 年 9 月 - 17 年 3 月大四上"></a>17 年 9 月 - 17 年 3 月大四上</h2><p>经常需要上自习，但每天的空教室是在楼下黑板手写公布的，但其实到教务网站是可以查出来的。于是注册了公众号 windliang，实现了一个查询空教室的功能。</p><p><img src="https://picx.zhimg.com/80/v2-49a22f736207e9a1e9664b230860f6cc_1440w.webp?source=1940ef5c" alt="img"></p><p>再接着学习了前端 html、css、js，写了一个棋类对战游戏(从这里开始和前端结缘)，也作为了软件工程的结课作业。</p><p><a href="https://zhuanlan.zhihu.com/p/71165578" target="_blank" rel="noopener">windliang：WebSocket: 从狼吃羊说起</a></p><p><img src="https://picx.zhimg.com/80/v2-b904199fea56f284343ef377625de624_1440w.webp?source=1940ef5c" alt="img"></p><p>由于毕业设计和深度学习有关，也开始总结深度学习的知识。<a href="https://www.zhihu.com/column/deeplearning1024" target="_blank" rel="noopener">零基础入门深度学习</a></p><h2 id="18-年-3-月-18-年-6-月大四下"><a href="#18-年-3-月-18-年-6-月大四下" class="headerlink" title="18 年 3 月 - 18 年 6 月大四下"></a>18 年 3 月 - 18 年 6 月大四下</h2><p>开始陆陆续续刷题，并且总结题解，<a href="https://leetcode.wang" target="_blank" rel="noopener">https://leetcode.wang</a></p><p>除了上边列的，陆陆续续还做过很多小东西，就是那种突然有个想法就去实现，不会就去一点点学。</p><p>之后毕业又读了研，但通过大学四年基本上拥有了基础的编程能力，无论学什么新语言，用什么新框架上手都会很快。</p><p>接着就是毕业后的故事，前段时间刚满三周年：<a href="https://zhuanlan.zhihu.com/p/640990591" target="_blank" rel="noopener">windliang：工作三年后的胡思乱想</a></p><p>总结下来，入门编程最核心的就是去多写代码了，最好先定个目标，想要实现什么，然后基于此去学习相关知识，不断攻破。</p><p>但对于初学者，每当接触一个新知识点的时候还是很痛苦的，只能不停的拆解目标，一步一个脚印来攻克。</p><p>从不会到会，这个过程不断循环，每次有成果出来都会非常开心，随着这个过程不断扩充自己边界，到后来再学新知识就不会那么抗拒了，迁移学习的能力越来越强。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;前段时间在知乎看到这个问题「&lt;a href=&quot;https://www.zhihu.com/question/614706706/answer/3146012068&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;想请教现在的在职程序员第一次编程入门的是怎样的
      
    
    </summary>
    
    
      <category term="随想" scheme="https://windliang.wang/categories/%E9%9A%8F%E6%83%B3/"/>
    
    
      <category term="随想" scheme="https://windliang.wang/tags/%E9%9A%8F%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>【限免】0基础入门前端系列课程</title>
    <link href="https://windliang.wang/2023/08/13/0%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%E5%89%8D%E7%AB%AF%E7%B3%BB%E5%88%97%E8%AF%BE%E7%A8%8B/"/>
    <id>https://windliang.wang/2023/08/13/0%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%E5%89%8D%E7%AB%AF%E7%B3%BB%E5%88%97%E8%AF%BE%E7%A8%8B/</id>
    <published>2023-08-13T02:19:16.000Z</published>
    <updated>2023-09-06T00:21:13.817Z</updated>
    
    <content type="html"><![CDATA[<p>免费学详细规则：<a href="https://mp.weixin.qq.com/s/0X8l9VeEp0VizlUTSgVmqg" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/0X8l9VeEp0VizlUTSgVmqg</a></p><p>前端存在<strong>知识点杂多、技术迭代快</strong>的特点，对于初学者或者非前端开发者往往会一脸懵逼。</p><p>这个系列会逐个介绍前端各个知识点，最后再详细介绍「课程减减」这个网站如何从零开始开发，包含前后端的开发，以及最后部署上线，预览地址 <a href="https://coursesub.top/" target="_blank" rel="noopener">https://coursesub.top/</a></p><h1 id="课程介绍"><a href="#课程介绍" class="headerlink" title="课程介绍"></a>课程介绍</h1><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/1686402092795-4d35181e-ba66-47cb-b46f-f96ecdf3ddbf.png" style="zoom:50%;"></p><p>前端整体结构可以理解为上边的图，底层的硬件、操作系统部分我们不关心，谷歌开源了 V8 引擎，它可以运行 js 语言，基于此又有了 <strong>Chrome</strong> 浏览器和 <strong>Node.js</strong>。</p><ul><li>浏览器可以运行 html/css/js 的代码，渲染网页并且提供交互能力。在原生的 js 的基础上，又诞生了Vue/React，可以提升网页开发效率。</li><li>Node.js 目前有两方面作用，一方面是写脚手架或者一些命令行工具，比如 Webpack。另一方面可以搭建 HTTP 服务器，提供后端接口，比如使用 koa 框架。</li></ul><p>课程会详细介绍各个知识点的来龙去脉，目录如下：</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20230807080036010.png" alt=""></p><h1 id="适合人群"><a href="#适合人群" class="headerlink" title="适合人群"></a>适合人群</h1><p>前端初学者：简单学习了 html、css、js，对其他概念还不太了解，也没有独立开发项目的经验。</p><p>其他开发人员：不管是后端、算法、测开等，只要有过编程经验，都可以轻松地跟上课程。</p><h1 id="收获什么"><a href="#收获什么" class="headerlink" title="收获什么"></a>收获什么</h1><p>会了解前端的整体架构，各个部分的作用，跟着教程可以搭建出「课程减减」这个网站。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/1686401004503-ed8d2a90-1519-47aa-86f9-f2db5623ff1a.png" style="zoom:50%;"></p><p>包含前后端整个开发过程的详细介绍，以及最后通过 nginx 将网站部署上线。</p><p>整个课程下来，<strong>会对前端有一个大体的认知</strong>，未来想写其他的网站也不再迷茫，该干什么， 需要做什么都做到心中有数。</p><h1 id="购买须知"><a href="#购买须知" class="headerlink" title="购买须知"></a>购买须知</h1><ol><li>本系列为图文形式内容服务，文章会由微信公众号文章的形式发布，共计 14 篇(已完结)；</li><li>购买用户可享有永久的阅读权限；</li><li>教程为虚拟内容服务，一经购买成功概不退款；</li><li>版权归本公众号所有，任何机构、媒体、网站或个人未经本网协议授权不得转载、链接、转贴或以其他方式复制发布/发表，违者将依法追究责任；</li></ol><h1 id="购买优惠"><a href="#购买优惠" class="headerlink" title="购买优惠"></a>购买优惠</h1><p>安卓用户进这里 <a href="https://mp.weixin.qq.com/s/xvfdXNSOKyMp--X-h_WE_Q" target="_blank" rel="noopener">安卓用户购买</a> 点击文章下方「合集详情」购买即可，苹果用户看这里 <a href="https://mp.weixin.qq.com/s/oOu--D69edllkoHbpD-3Qg" target="_blank" rel="noopener">ios 用户购买</a> 。</p><p>购买后添加下边微信可以领取返现红包，具体返现红包以 <a href="https://coursesub.top/" target="_blank" rel="noopener">https://coursesub.top/</a> 这里展示的为准，目前返现 20 元</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/640.jpeg" style="zoom:50%;"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;免费学详细规则：&lt;a href=&quot;https://mp.weixin.qq.com/s/0X8l9VeEp0VizlUTSgVmqg&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://mp.weixin.qq.com/s/0X8l9VeEp0V
      
    
    </summary>
    
    
      <category term="前端" scheme="https://windliang.wang/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>关于 TypeScript 的一点点思考</title>
    <link href="https://windliang.wang/2023/08/12/%E5%85%B3%E4%BA%8ETypeScript/"/>
    <id>https://windliang.wang/2023/08/12/%E5%85%B3%E4%BA%8ETypeScript/</id>
    <published>2023-08-12T00:17:13.000Z</published>
    <updated>2023-08-12T00:41:22.148Z</updated>
    
    <content type="html"><![CDATA[<p>平常写 ts 比较少，用了几天时间刷完了阮一峰老师新写的 ts 教程，依旧通俗易懂，对于入门或者查漏补缺还是挺有帮助的。</p><p><a href="https://wangdoc.com/typescript/" target="_blank" rel="noopener">wangdoc.com/typescript/</a></p><p>加深了两点收获：</p><ol><li>ts 是一门独立的语言，利用它的类型推导可以做很多事情。</li><li>ts 又是一门特殊的语言，杂糅到了 js 中去使用。混合使用过程中，一不小心就会被绕进去。</li></ol><p>上次详细看 ts 还是写斐波那契的时候，<a href="https://zhuanlan.zhihu.com/p/427849482" target="_blank" rel="noopener">用 TypeScript 实现斐波那契数列</a></p><p>混了 Anthony Fu ts 类型体操项目的一道题：</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20230812084112082.png" alt=""></p><p><a href="https://github.com/type-challenges/type-challenges" target="_blank" rel="noopener">https://github.com/type-challenges/type-challenges</a> </p><p>正因为 ts 是一门独立的语言，所以可以用 ts 实现菲波那切数列、实现中国象棋，甚至实现编译器，也就有了上边的类型体操项目。</p><p>我 ts 平常用的比较少，猜测有下边的原因：</p><ol><li><p>大家对 ts 的了解深浅不一，ts 说简单也简单，说复杂也复杂，平常快速的业务迭代中很少有时间说专门去刷一遍 ts。</p></li><li><p>第一次开发的时候会多花时间。 定一个接口需要写类型，函数参数需要写类型，如果参数是对象套对象再套对象，那简直要疯掉。</p></li><li><p>未来迭代也花时间。后端接口有变动，除了改逻辑代码，还要再把相应的类型也都改了。</p></li><li><p>写逻辑的时候会被限制，经常遇到动态修改变量的情况，如果有 ts 还需要多考虑下。</p></li><li><p>收益不明显，如果说为了类型提示，编辑器通过插件一定程度上也可以。如果为了减少 bug，但用 js 写也很少因为类型问题出现 bug，基本上都是逻辑问题。</p><p>一般都会通过问号操作符或者 || 操作进行兜底，因为影响范围太广了，一不小心直接影响几千万用户，所以写的时候都会很谨慎，会考虑各种极端情况。比如之前总结的 <a href="https://zhuanlan.zhihu.com/p/561275198" target="_blank" rel="noopener">提升前端开发质量的十点经验沉淀</a>。</p></li></ol><p>当然以上仅我自己的看法，ts 这么火也肯定是有原因的，等未来 ts 写的多了再来补充它的好处。</p><p>现在项目达成的共识是新建文件的时候建成 ts，至于里边代码多少用 ts 就不做太多限制了，anyScript 由此诞生 \狗头。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;平常写 ts 比较少，用了几天时间刷完了阮一峰老师新写的 ts 教程，依旧通俗易懂，对于入门或者查漏补缺还是挺有帮助的。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://wangdoc.com/typescript/&quot; target=&quot;_blank&quot; rel=&quot;noopen
      
    
    </summary>
    
    
      <category term="前端" scheme="https://windliang.wang/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="TypeScript" scheme="https://windliang.wang/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>Vue中props是Object可以直接修改吗</title>
    <link href="https://windliang.wang/2023/07/06/Vue%E4%B8%ADprops%E6%98%AFObject%E5%8F%AF%E4%BB%A5%E7%9B%B4%E6%8E%A5%E4%BF%AE%E6%94%B9%E5%90%97/"/>
    <id>https://windliang.wang/2023/07/06/Vue%E4%B8%ADprops%E6%98%AFObject%E5%8F%AF%E4%BB%A5%E7%9B%B4%E6%8E%A5%E4%BF%AE%E6%94%B9%E5%90%97/</id>
    <published>2023-07-06T00:02:45.000Z</published>
    <updated>2023-07-11T23:16:06.534Z</updated>
    
    <content type="html"><![CDATA[<p>好久没有在知乎上看到好问题了，前几天<a href="https://www.zhihu.com/question/609822540/answer/3099837968" target="_blank" rel="noopener">看到一个</a>，把回答同步过来。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20230706080412256.png" alt=""></p><p>确实是一个很有争议的问题，团队里也经常讨论这个问题，下边分享下我的想法，也不一定是最佳实践。</p><p>首先，不要修改 prop 的值肯定是一条比较好的实践，保证数据的流向明确。</p><p><a href="https://vuejs.org/guide/components/props.html#one-way-data-flow" target="_blank" rel="noopener">官方文档</a>中也有明确指出：</p><h1 id="One-Way-Data-Flow"><a href="#One-Way-Data-Flow" class="headerlink" title="One-Way Data Flow"></a>One-Way Data Flow</h1><p>All props form a <strong>one-way-down binding</strong> between the child property and the parent one: when the parent property updates, it will flow down to the child, but not the other way around. This prevents child components from accidentally mutating the parent’s state, which can make your app’s data flow harder to understand.</p><p>In addition, every time the parent component is updated, all props in the child component will be refreshed with the latest value. This means you should <strong>not</strong> attempt to mutate a prop inside a child component. If you do, Vue will warn you in the console:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  props: [<span class="string">'foo'</span>],</span><br><span class="line">  created() &#123;</span><br><span class="line">    <span class="comment">// ❌ 警告！prop 是只读的！</span></span><br><span class="line">    <span class="keyword">this</span>.foo = <span class="string">'bar'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>There are usually two cases where it’s tempting to mutate a prop:</p><p><strong>1.The prop is used to pass in an initial value; the child component wants to use it as a local data property afterwards.</strong> In this case, it’s best to define a local data property that uses the prop as its initial value:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Vue3</span></span><br><span class="line"><span class="keyword">const</span> props = defineProps([<span class="string">'initialCounter'</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">// counter only uses props.initialCounter as the initial value;</span></span><br><span class="line"><span class="comment">// it is disconnected from future prop updates.</span></span><br><span class="line"><span class="keyword">const</span> counter = ref(props.initialCounter)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Vue2</span></span><br><span class="line">props: [<span class="string">'initialCounter'</span>],</span><br><span class="line">data: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    counter: <span class="keyword">this</span>.initialCounter</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2. The prop is passed in as a raw value that needs to be transformed.</strong> In this case, it’s best to define a computed property using the prop’s value:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Vue3</span></span><br><span class="line"><span class="keyword">const</span> props = defineProps([<span class="string">'size'</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">// computed property that auto-updates when the prop changes</span></span><br><span class="line"><span class="keyword">const</span> normalizedSize = computed(<span class="function"><span class="params">()</span> =&gt;</span> props.size.trim().toLowerCase())</span><br><span class="line"></span><br><span class="line"><span class="comment">// Vue2</span></span><br><span class="line">props: [<span class="string">'size'</span>],</span><br><span class="line">computed: &#123;</span><br><span class="line">  normalizedSize: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.size.trim().toLowerCase()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了避免修改 prop 的值，可以在 data 中初始化为 prop 的值然后再去使用或者定义 computed 属性拿到 prop 值再去使用。</p><p>当然，上边的写法也仅仅对原始值生效，如果 props 定义成一个 Array 或者 Object，如果把 Object 的值直接赋值给 data：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">props: [<span class="string">'initialCounterObj'</span>],</span><br><span class="line">data: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    counterObj: <span class="keyword">this</span>.initialCounterObj</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当去修改 <code>counterObj</code> 中的值，虽然看起来没有修改 props 的值，但因为 Object 传递进来的是引用，修改 <code>counterObj</code> 的值的时候外部的相应的对象也跟着修改了。</p><p>针对这种情况，可以将 Object 摊开，变为一个个原始值。</p><h2 id="通过-sync"><a href="#通过-sync" class="headerlink" title="通过 .sync"></a>通过 .sync</h2><p>父组件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">child</span> <span class="attr">field1.sync</span>=<span class="string">"obj.field1"</span> <span class="attr">field2.sync</span>=<span class="string">"obj.field2"</span>&gt;</span><span class="tag">&lt;/<span class="name">child</span>&gt;</span></span><br></pre></td></tr></table></figure><p>子组件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  props: [<span class="string">'field1'</span>, <span class="string">'field2'</span>],</span><br><span class="line">  methods: &#123;</span><br><span class="line">      updateField1(newVal)&#123;</span><br><span class="line">           <span class="keyword">this</span>.$emit(<span class="string">'update:field1'</span>, newVal)</span><br><span class="line">      &#125;,</span><br><span class="line">      updateField2(newVal)&#123;</span><br><span class="line">           <span class="keyword">this</span>.$emit(<span class="string">'update:field2'</span>, newVal)</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="通过-get-set"><a href="#通过-get-set" class="headerlink" title="通过 get set"></a><a href="https://stackoverflow.com/questions/59992698/vuejs-best-practices-for-passing-form-data-to-child-and-back-to-parent?rq=4" target="_blank" rel="noopener">通过 get set</a></h2><p>父组件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">child</span> <span class="attr">v-model</span>=<span class="string">"obj"</span>&gt;</span><span class="tag">&lt;/<span class="name">child</span>&gt;</span></span><br></pre></td></tr></table></figure><p>子组件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  props: &#123;</span><br><span class="line">    value: &#123;</span><br><span class="line">      type: <span class="built_in">Object</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="function"><span class="params">()</span> =&gt;</span> (&#123;&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  computed: &#123;</span><br><span class="line">    field1: &#123;</span><br><span class="line">      get() &#123; <span class="keyword">return</span> <span class="keyword">this</span>.value.field1 &#125;,</span><br><span class="line">      set(field1) &#123; <span class="keyword">this</span>.$emit(<span class="string">'input'</span>, &#123;...this.value, field1 &#125;)&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    field2: &#123;</span><br><span class="line">      get() &#123; <span class="keyword">return</span> <span class="keyword">this</span>.value.field1 &#125;,</span><br><span class="line">      set(field2) &#123; <span class="keyword">this</span>.$emit(<span class="string">'input'</span>, &#123;...this.value, field2 &#125;)&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另外一种更暴力的写法就是题主讲到的方案三 「<strong>不可变对象型」，</strong>每次修改前都把整个对象（或数组）克隆一遍，修改新的对象，再通过 emit 事件把新的对象（这里最好也再克隆一下）传出去。</p><p>上边的方案都可以保证不去修改 props 的值。</p><p>看下<a href="https://vuejs.org/guide/components/props.html#one-way-data-flow" target="_blank" rel="noopener">官方</a>对于 props 是 Object/Array 的态度：</p><h1 id="Mutating-Object-Array-Props"><a href="#Mutating-Object-Array-Props" class="headerlink" title="Mutating Object / Array Props"></a>Mutating Object / Array Props</h1><p>When objects and arrays are passed as props, while the child component cannot mutate the prop binding, it <strong>will</strong> be able to mutate the object or array’s nested properties. This is because in JavaScript objects and arrays are passed by reference, and it is unreasonably expensive for Vue to prevent such mutations.</p><p>The main drawback of such mutations is that it allows the child component to affect parent state in a way that isn’t obvious to the parent component, potentially making it more difficult to reason about the data flow in the future. As a best practice, you should avoid such mutations unless the parent and child are tightly coupled by design. In most cases, the child should emit an event to let the parent perform the mutation.</p><p>关键句：<strong>you should avoid such mutations unless the parent and child are tightly coupled by design.</strong></p><p>因此对于表单场景，我认为符合 parent and child are tightly coupled by design ，很多时候由于表单越来越大，一个 Vue 文件会变得巨大，此时想要拆部分表单出来成为一个组件，这种情况下采用题主所说的方案一「直接修改型」我认为是更佳的，不然的话不管采用什么方式保证不修改 props 都会增加很多代码，反而增加了很多理解成本。</p><p>更进一步，对于 Object/Array，是否修改 props 取决于当前组件的通用性，如果这个组件专门为了某个父组件使用或者专门服务于某个页面，并且为了不修改 props 会增加很多工作量，这种情况下直接修改 props 我认为是合适的。</p><p>但如果这个组件可能用给其他人，此时修改 props ，如果使用方不清楚的话就可能引发问题。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;好久没有在知乎上看到好问题了，前几天&lt;a href=&quot;https://www.zhihu.com/question/609822540/answer/3099837968&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;看到一个&lt;/a&gt;，把回答同步过来。&lt;/
      
    
    </summary>
    
    
      <category term="前端" scheme="https://windliang.wang/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="Vue" scheme="https://windliang.wang/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>工作三年后的胡思乱想</title>
    <link href="https://windliang.wang/2023/07/02/%E5%B7%A5%E4%BD%9C%E4%B8%89%E5%B9%B4%E5%90%8E%E7%9A%84%E8%83%A1%E6%80%9D%E4%B9%B1%E6%83%B3/"/>
    <id>https://windliang.wang/2023/07/02/%E5%B7%A5%E4%BD%9C%E4%B8%89%E5%B9%B4%E5%90%8E%E7%9A%84%E8%83%A1%E6%80%9D%E4%B9%B1%E6%83%B3/</id>
    <published>2023-07-02T07:44:18.000Z</published>
    <updated>2023-07-02T09:07:17.489Z</updated>
    
    <content type="html"><![CDATA[<p>一眨眼工作已经三年了，前两年的总结 <a href="https://windliang.wang/2021/05/29/%E5%9C%A8%E7%BE%8E%E5%9B%A2%E5%B7%A5%E4%BD%9C%E7%9A%84%E7%AC%AC%E4%B8%80%E5%B9%B4/">工作第一年</a>、<a href="https://windliang.wang/2022/06/30/%E5%9C%A8%E7%BE%8E%E5%9B%A2%E5%B7%A5%E4%BD%9C%E7%9A%84%E7%AC%AC%E4%BA%8C%E5%B9%B4/">工作第二年</a> 基本上把在公司做的事情都介绍了，今年站在「前端已死」、互联网大裁员的环境下，想想未来的路可能更为应景。</p><p>经常说这是最好的时代，也是最坏的时代，互联网便是如此。通过互联网将人与人之间的各种链接都成为了可能，在互联网诞生之前，人与人之间的交流就是现实生活中的圈子，而现在本来这一辈子都不会在现实中产生交集的人在互联网却会相遇。</p><p>各种写书的大佬、开源的大佬，以往可能只是从文字、代码中了解他们，但现在通过社交媒体、微信竟然就产生了互动。当然不好一面就是也会遇到和自己不相投的人，也许会影响自己的心情。</p><p>通过互联网极大的扩宽了我们的视野，看到了别人在怎么生活，也放大了自己的焦虑和欲望。我们需要认清自己的边界，知道自己想要什么，自己能做什么，不需要对本来不可能发生在自己身上的事情而焦虑。</p><p>当迷茫焦虑时，看看宇宙的纪录片，从宇宙的视角去看自己，无论从空间大小还是时间维度，其实自己什么都不是，想那么多干啥。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/milky-way-2695569_1280.jpg" style="zoom: 50%;"></p><p>再想想其他动物，吃饭睡觉喵喵叫，也挺好的。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20230630080510771.png" style="zoom: 25%;"></p><h1 id="前端已死"><a href="#前端已死" class="headerlink" title="前端已死"></a>前端已死</h1><p>互联网已经结束了快速扩张的时期，这是个客观事实，因此招聘的人数相对于之前减少了很多，但远没到一个已死的状态，相对于其他行业，选择互联网依旧是一个不错的选择。</p><p>前端会不会死不知道，互联网肯定会一直存在下去，现在整个社会都是基于互联网，已经变成了像电、水一样的基础设施，没有人可以离开它。因此互联网的相关的岗位一定会一直一直存在。</p><p>至于互联网中具体的职业划分，前端、后端、算法、数据库等，它们各自使用的语言、技术一定会发生变化的，当选择互联网技术行业的时候，就应该抱有持续学习的态度。</p><p>塞班操作系统被安卓、iOS 取代、.Net 岗位的减少、客户端大量岗位转前端，这些也就发生在近十几二十年。当某一个岗位减少的时候，一定又会出现新的岗位，保持开放的心态去学就可以，变化再多肯定也有不变的东西。当掌握一门技术再学习另一门技术的时候，肯定会比小白学习一门新技术快很多很多，很多经验也会迁移过去。</p><p>去年 12 月出来的 chatGPT 为代表的大模型，到现在也就半年多的时间，很多以前完全不敢想的事情就这样发生了。可以预见的是一部分岗位数量肯定也会减少，目前影响最大的应该是  UI 岗，其次一定程度上可以提高程序员的开发以及学习效率，但还没有到取代的程度，但未来会再怎么发展就不得而知了。</p><p>相对于其他行业，虽然互联网相关技术迭代确实很快，但如果是因为热爱而选择这个行业，我觉得去做一辈子是没问题的。</p><h1 id="技术"><a href="#技术" class="headerlink" title="技术"></a>技术</h1><p>底层技术服务于上层技术，上层技术服务于应用，真正赚钱的是应用，它可能提升了用户的效率、也可能提升了用户的生活体验，这样用户才愿意付费。上层技术的人收到了钱，进一步也愿意为底层技术的人付费。</p><p>但对于一个应用，技术并不是最重要的，更多需要的是产品和运营，一个应用在 chatGPT 和各种框架、云服务的加持下做出来变得太简单了，更多的是我们需要思考如何设计产品和如何推广运营产品，和用户产生更亲密的连接，用户才愿意付费。</p><p>极端一点，即使现在所有的应用都停止更新了，其实也并不会产生多大的影响。</p><p>在公司中亦是如此，对于技术开发，没有谁是不可取代的，公司更期望的是那些可以发现问题、分析问题、定义问题的人，至于怎么解决，问题定义清楚以后，解决方案自然可以出来，谁去解决并不重要了。</p><p>但也不用太过悲观，虽然技术不是最重要的，但一定是不可或缺的，在解决问题的过程中也会区分出能力强和能力差的：方案的设定、代码编写的好坏、线上的 bug 数、代码的扩展性等。</p><h1 id="赚钱"><a href="#赚钱" class="headerlink" title="赚钱"></a>赚钱</h1><p>赚钱很大程度又是需要运气的，比如同一个人十年前进入互联网和现在进入互联网差别就会很大，再比如开发一个应用突然爆火，例如「羊了个羊」，这些我们是很难控制的，我们只能「尽人事，听天命」。</p><p>最近几年，除了在公司工作，对于有技术的同学赚钱有下边的方式：</p><ul><li><p>付费课程、出书</p><p>最近几年越来越多的人在极客时间、掘金小册写课程或者直接出书。</p><p>对于写课的人赚到了钱，对于买课的人只要跟着看完了，多多少少都会有很多收获。付费课程会比较系统， 如果没有这些课程，去学东西肯定也是可以学的，但需要花很多时间去网上搜一些零碎的资料，由于没有经验甚至可能走很多弯路。</p></li><li><p>付费社群</p><p>市面上也会有一些付费训练的社群或者知识星球</p><p>对于组织付费社群的人会花费很大的精力，需要持续运营并且照顾到每一个人，不然就等着挨骂吧。因此这类收益也会很高，一些人会辞去工作专职来搞。</p></li><li><p>开源</p><p>大部分开源基本上是用爱发电，更多是收获一些朋友、流量、提升技术。</p><p>比如 <a href="https://www.infoq.cn/article/s8jsfyhxu8vowd1uphkp" target="_blank" rel="noopener">core-js</a> 作者的经历，一个 22.6k star 的项目，几乎各个网站都在用的一个项目，作者却因为钱的问题被很多人谩骂。因此如果是个人专职开源一个项目靠  GitHub Sponsor 会很难很难。</p><p>当然，开源也是能赚到钱的，比如 Vue 开源就赚到了很多钱，但毕竟是很少很少数了。</p><p>依赖纯开源项目赚到钱，还是需要背靠公司。比如阿里云谦的 Umi、通过开源加入 NuxtLab 的 Anthony Fu、在 AFFiNE 的雪碧等等。</p></li><li><p>应用</p><p>身为一个程序员，尤其是前端程序员，当然可以自己维护一个应用来赚钱。</p><p>做得很成功的比如 Livid 的 V2ex 社区，Abner Lee 的 Typora（后来知道作者竟然是国内开发者）。</p><p>也有一些没有那么出名的，比如大鹏的 <a href="https://mdnice.com/" target="_blank" rel="noopener">mdnice</a>，秋风的 <a href="https://www.mujicv.com/index.html" target="_blank" rel="noopener">木及简历</a>。</p><p>当然如果要做一个很大的项目，背靠公司也是一个很好的选择，比如之前阿里玉伯的语雀、之前极客邦池建强的极客时间。</p><p>还有一些小的创业公司会做的，冯大辉的「抽奖助手」、吴鲁加的「知识星球」等。</p><p>做出这些应用不需要很多时间，需要我们善于发现生活中的痛点以及强大的执行力，当然想成功的话需要再加一点运气，在成功前需要不断尝试不同的东西。</p></li><li><p>流量变现</p><p>有流量就会赚钱，不管是接广告、还是带货。互联网上也会有部分人专注于怎么搞流量，知乎怎么获得更多曝光、视频号怎么获得更多流量、怎么批量注册号，各个平台规则可能是什么，怎么对抗规则，这类有技术加持也会更加顺利，很多人也在专职做。</p></li></ul><p>赚钱的方式有很多，对于我来说，我会尽量选择复利的事情，这样才能产生更大的价值。比如一对一咨询，一份时间换一份收入。但如果把东西写成课程，只需要花一份的时间就能获得 N 份的收入。</p><p>另外就是需要保持分享，分享除了能帮助其他人，对自己也会有很大的帮助，写文章的过程中也会不断的有新的认知得到。虽然当下可能没有金钱方面的收入，但时间放宽到几十年，相信一定会有很大的回报。</p><p>人的欲望是无穷的，也不能陷入赚钱的极端，目标应该是关注此刻，体验生活，享受生活，而不是不停的赚钱。之前听播客，有一个恰当的比喻，钱就好比汽油，不停的赚钱相当于不停的加油，但如果汽车停着一直不动，再多的汽油也是无意义的。</p><h1 id="健康"><a href="#健康" class="headerlink" title="健康"></a>健康</h1><p>最近几年总是爆出程序员突然离世的新闻，前段时间耗子叔突然离世的消息听到之后真的很震惊。twitter 经常刷到耗子叔的动态，然后突然一天竟然就戛然而止了，毫无征兆。</p><p>意外是无法避免的，只能尽可能的从饮食、作息、锻炼三方面降低生病的风险。</p><h2 id="饮食"><a href="#饮食" class="headerlink" title="饮食"></a>饮食</h2><p>我是工作第一年体检的时候检查出了中度脂肪肝、尿酸高，当时因为是刚毕业，体重是我的巅峰，140 多斤，脂肪都堆在了肚子上。那段时间就开始跑步加吃沙拉，少吃米饭、面条。降的也快，几个月就回到了 130 斤以下，甚至到 120 多点。</p><p>第二年体检的时候，脂肪肝基本没有了，尿酸也降了许多。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20230702141922024.png" alt="image-20230702141922024" style="zoom:50%;"></p><p>后来就保持少吃米饭，多吃蛋白质、蔬菜的饮食了。</p><h2 id="作息"><a href="#作息" class="headerlink" title="作息"></a>作息</h2><p>有一次得了带状疱疹，那种非常痛的类似于痘痘的东西，后来了解了一下是因为免疫力低导致病毒入侵的。猜测因为晚上坐在电脑前，气温降低了没注意，从而导致了生病。</p><p>病好之后就决心养成早睡早起的习惯。</p><p>之前作息基本上是 1 点到 2 点睡觉，9 点前后起床。现在基本上保持在 11 点前后睡觉，6 点到 7 点间起床了。</p><p>早起的好处就是早上会有大把的时间，而且这段时间是专属于自己的，并且因为大脑刚苏醒，效率也会很高。但如果是工作一天，晚上回家再做自己的事情，此时大脑已经很疲惫了，效率会比较低。</p><h2 id="运动"><a href="#运动" class="headerlink" title="运动"></a>运动</h2><p>最开始是跑步，但确实很难坚持下去，跑步需要换衣服、出门，还依赖于外边的天气，成本很高。后来陆续尝试过 keep、一些付费课程，都做了但没有完全养成习惯。</p><p>后来知道了 switch 的健身环大冒险，然后就一路坚持到了现在，前段时间已经通关了。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20230702143219493.png" alt="image-20230702143219493" style="zoom:50%;"></p><p>目前也一直在坚持，基本上一周会运动三到四次，一次大概花费 50 分钟左右。</p><h1 id="投资"><a href="#投资" class="headerlink" title="投资"></a>投资</h1><p>大学的时候开始接触到理财，知道了基金的概念，看了银行螺丝钉的「指数基金定投指南」，也看了「穷爸爸富爸爸」、「小狗钱钱」这类理财入门的书。当时赚到的一些钱，就跟着银行螺丝钉投了，主要是一些宽基和中概、医疗。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20230702153842246.png" alt="image-20230702153842246" style="zoom:50%;"></p><p>一直到工作的第一年，基金收入确实不错，甚至赚了百分之四五十。当时想着原来股市这么简单，这咋还能亏钱了。</p><p>接着疫情不断发展，还有外部经济的变化，中概、医疗都大跌，当时发了年终奖还不停的补仓中概，到现在亏损也有百分之三四十了。</p><p>但我心态是可以的，一切都是浮亏和浮盈，只要不卖一切都是浮云。</p><p>经历了大起大落后吸取了一些教训，那就是一定要严格执行计划，现金流多不一定要立刻全部投入，而是按计划定投，因为没人知道会跌多久，只有有充足的现金流，才能够把亏损逐步拉平。</p><p>现在国家规定互联网基金这些必须走「投顾」，也就是主理人帮我们买入、卖出，我们只需要交一定的投顾费即可。目前我都是在雪球上投，跟投的有孟岩的「长钱账户」、alex 的「全球精选」、螺丝钉的指数增强和主动优选。</p><p>能设置自动跟投的就自动跟投了，我相信专业的事交给专业的人肯定是没问题的。</p><p>投资肯定是财富自由不了的，但一定比把钱放余额宝强一些，只要耐心持有，尤其是目前这样的熊市投入，相信到下一个牛市会有不错的回报。</p><p>（以上仅个人看法，股市有风险，入市需谨慎）</p><h1 id="保险"><a href="#保险" class="headerlink" title="保险"></a>保险</h1><p>如果开始接触理财，除了投资，一个绕不过去的点就是保险。</p><p>对于保险是什么的比喻，之前听薛兆丰的课时候印象深刻。</p><blockquote><p>我现在还年轻力壮，将来年纪大了可能会生病，为了防止以后生病要花一大笔医药费，今天就开始存钱，每个月拿出 10% 的收入存起来，未雨绸缪。这是一种做法。</p><p>另外一种做法，是我每个月也拿出 10% 的收入去买保险。</p><p>这两种做法有什么区别呢？</p><p>区别在于，如果我是用储蓄来未雨绸缪，那么未来可能就会发生两种不同的情形。</p><p>如果我将来年纪大了也没生病，我存的钱就还是我的钱，我不需要花出去，这时候我还是很幸运的，能够保有我原来的收入，这份储蓄没有被花掉，我赚了。</p><p>但是如果我运气不好，生病了，这份储蓄就会被用掉，甚至需要借很多钱去治病，生活会发生巨大的变化。</p><p>所以通过储蓄来未雨绸缪，它的特点是未来的结局是可变的，是变动的、是带有风险的。要么高、要么低，要么能够保有原来的这份储蓄，要么这份储蓄就被用掉了甚至借更多的钱。</p><p>而对于保险来说，如果你没病，那你的生活该怎么样还是怎么样。如果你病了，那会有保险公司给你支付一大笔钱，你也不用和别人借钱，病好后继续该干啥干啥。</p></blockquote><p>因此存钱去防止生病就有赌的成分了，如果没病就白赚了很多钱，如果病了生活质量可能会发生很大的变化。</p><p>而保险就可以降低风险，未来即使生病了，由于看病不需要花钱了，病好后生活质量也尽可能的维持在原来轨道 。</p><p>我期望未来肯定是尽量稳定的，所以在不影响当前生活质量的条件下我愿意拿出一部分钱来买保险。原计划我可能会 30 岁以后开始买重疾险，之前女朋友的朋友有推荐保险的，然后就跟女朋友一起配置了重疾险。</p><p>选保险一定要慎重，一些看起来很划算的保险， 到理赔的时候可能会推三阻四，甚至理赔前公司破产了，尽量要选择大公司。</p><h1 id="总"><a href="#总" class="headerlink" title="总"></a>总</h1><p>当然生活没有标准答案，每个人看到世界也都是不同的，我也一直在成长，一直在认识新的东西，上边的所想的也不能保证说未来不会再变。</p><p>未来能做的就是多看看书，不限制自己，看看经济学的、哲学的、心理学的、人文的，多出去走走看看，尽可能多的增加人生体验，去认识世界，认识自己，做自己想做的事，爱自己所爱的人，走下去就好了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一眨眼工作已经三年了，前两年的总结 &lt;a href=&quot;https://windliang.wang/2021/05/29/%E5%9C%A8%E7%BE%8E%E5%9B%A2%E5%B7%A5%E4%BD%9C%E7%9A%84%E7%AC%AC%E4%B8%80%E5%
      
    
    </summary>
    
    
      <category term="前端" scheme="https://windliang.wang/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="随想" scheme="https://windliang.wang/tags/%E9%9A%8F%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>css层叠上下文和z-index的使用和思考</title>
    <link href="https://windliang.wang/2023/06/13/css%E5%B1%82%E5%8F%A0%E4%B8%8A%E4%B8%8B%E6%96%87%E5%92%8Cz-index%E7%9A%84%E4%BD%BF%E7%94%A8%E5%92%8C%E6%80%9D%E8%80%83/"/>
    <id>https://windliang.wang/2023/06/13/css%E5%B1%82%E5%8F%A0%E4%B8%8A%E4%B8%8B%E6%96%87%E5%92%8Cz-index%E7%9A%84%E4%BD%BF%E7%94%A8%E5%92%8C%E6%80%9D%E8%80%83/</id>
    <published>2023-06-13T00:00:00.000Z</published>
    <updated>2023-06-22T07:54:26.234Z</updated>
    
    <content type="html"><![CDATA[<p>过去一段时间经常遇到线上的页面元素互相遮盖的问题，索性就总结一下吧。</p><p>正常情况下，页面元素是从左到右和从上到下渲染（x、y 维度），但因为 margin 可以写负值，还有一些定位相关的 css 属性(absolute、relative、fixed、stick)，这就会导致元素之间可能重叠，重叠后就需要判断元素堆叠顺序，这就涉及到层叠上下文（Stacking context）了，相当于增加了 z 轴的维度。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/1*uGPV3qEF7yBq4PD0zua19A.png" alt="z-index"></p><h1 id="无新增层叠上下文的情况"><a href="#无新增层叠上下文的情况" class="headerlink" title="无新增层叠上下文的情况"></a>无新增层叠上下文的情况</h1><p>我们先抛开层叠上下文的概念，看一下没有 z-index 或者其他特殊 css 属性正常情况下元素的堆叠规则。</p><p>按照元素出现的顺序依次堆叠下边的元素：</p><ol><li>非定位的 block 元素，一般就是背景</li><li>float 元素</li><li>非定位的 inline 元素，一般就是文字内容</li><li>定位元素，即 position 设置了 relative 或者 absolute</li></ol><p>一句话总结就是同类型的后出现的覆盖先出现的，定位元素覆盖非定位元素。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">      .relative &#123;</span></span><br><span class="line"><span class="undefined">        height: 50px;</span></span><br><span class="line"><span class="undefined">        position: relative;</span></span><br><span class="line"><span class="undefined">        top: 10px;</span></span><br><span class="line"><span class="undefined">        background: rgba(0, 0, 255);</span></span><br><span class="line"><span class="undefined">        box-shadow: 0 -1px 10px rgba(0, 0, 0, 0.6);</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">      .static1 &#123;</span></span><br><span class="line"><span class="undefined">        background: rgba(255, 0, 0, 0.5);</span></span><br><span class="line"><span class="undefined">        height: 90px;</span></span><br><span class="line"><span class="undefined">        box-shadow: 0 -1px 10px rgba(0, 0, 0, 0.6);</span></span><br><span class="line"><span class="undefined">        overflow: hidden;</span></span><br><span class="line"><span class="undefined">        width: 60vw;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">      .static2 &#123;</span></span><br><span class="line"><span class="undefined">        color: red;</span></span><br><span class="line"><span class="undefined">        background: rgba(0, 255, 0);</span></span><br><span class="line"><span class="undefined">        height: 90px;</span></span><br><span class="line"><span class="undefined">        margin-top: -20px;</span></span><br><span class="line"><span class="undefined">        box-shadow: 0 -1px 10px rgba(0, 0, 0, 0.6);</span></span><br><span class="line"><span class="undefined">        overflow: hidden;</span></span><br><span class="line"><span class="undefined">        width: 80vw;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">      .float &#123;</span></span><br><span class="line"><span class="undefined">        background: rgba(255, 255, 0);</span></span><br><span class="line"><span class="undefined">        height: 100px;</span></span><br><span class="line"><span class="undefined">        margin-top: -20px;</span></span><br><span class="line"><span class="undefined">        box-shadow: 0 -1px 10px rgba(0, 0, 0, 0.6);</span></span><br><span class="line"><span class="undefined">        float: left;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"relative"</span>&gt;</span>我是 relative 元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"static1"</span>&gt;</span></span><br><span class="line">      我是 static1 元素<span class="tag">&lt;<span class="name">br</span> /&gt;</span>我是 static1 元素<span class="tag">&lt;<span class="name">br</span> /&gt;</span>我是 static1 元素<span class="tag">&lt;<span class="name">br</span> /&gt;</span>我是</span><br><span class="line">      static1 元素<span class="tag">&lt;<span class="name">br</span> /&gt;</span>我是 static1 元素<span class="tag">&lt;<span class="name">br</span> /&gt;</span>我是 static1 元素<span class="tag">&lt;<span class="name">br</span> /&gt;</span>我是</span><br><span class="line">      static1 元素<span class="tag">&lt;<span class="name">br</span> /&gt;</span>我是 static1 元素</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"static2"</span>&gt;</span></span><br><span class="line">      我是 static2 元素,margin-top 是负值<span class="tag">&lt;<span class="name">br</span> /&gt;</span>我是 static2 元素,margin-top</span><br><span class="line">      是负值<span class="tag">&lt;<span class="name">br</span> /&gt;</span>我是 static2 元素,margin-top 是负值<span class="tag">&lt;<span class="name">br</span> /&gt;</span>我是 static2</span><br><span class="line">      元素,margin-top 是负值<span class="tag">&lt;<span class="name">br</span> /&gt;</span>我是 static2 元素,margin-top 是负值<span class="tag">&lt;<span class="name">br</span> /&gt;</span>我是</span><br><span class="line">      static2 元素,margin-top 是负值</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"float"</span>&gt;</span>我是float 元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20230622121535164.png" alt="image-20230622121535164"></p><p>static 的背景看成 block 元素，文字看成 inline 元素。先堆叠 block 元素，再堆叠 float 元素，再堆叠 inline 元素，最后堆叠定位元素。</p><p>static2 的背景遮盖了 static1 的背景，但没有遮盖住 static1 的文字。</p><p>float 元素遮盖了 static2 的背景。</p><p>static2 的文字遮挡了 static1 的文字，因为 float 元素在 inline 元素之前进行了堆叠，所以 static2 的文字也遮盖了 float 的文字。</p><p>relative 元素最后堆叠，直接遮盖了 static1 的背景和文字。</p><h1 id="含有新增的层叠上下文-Stacking-context"><a href="#含有新增的层叠上下文-Stacking-context" class="headerlink" title="含有新增的层叠上下文 Stacking context"></a>含有新增的层叠上下文 Stacking context</h1><p>考虑一下有新增的层叠上下文的情况。</p><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>层叠上下文可以理解成一张画布，可以在上边独立地一层一层的刷染料。不同的层叠上下文就是不同的画布，他们之间互相独立。而且层叠上下文中也可以在再形成新的层叠上下文。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/stacking-context-diagram.png" alt="Diagram showing stacked rectangles conveying the three-dimensional, nested nature of stacking contexts"></p><p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_positioned_layout/Understanding_z-index/Stacking_context" target="_blank" rel="noopener">如何生成新的层叠上下文</a>：</p><ul><li>Root element of the document (<code>&lt;html&gt;</code>).</li><li>Element with a <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/position" target="_blank" rel="noopener"><code>position</code></a> value <code>absolute</code> or <code>relative</code> and <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/z-index" target="_blank" rel="noopener"><code>z-index</code></a> value other than <code>auto</code>.</li><li>Element with a <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/position" target="_blank" rel="noopener"><code>position</code></a> value <code>fixed</code> or <code>sticky</code> (sticky for all mobile browsers, but not older desktop browsers).</li><li>Element with a <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/container-type" target="_blank" rel="noopener"><code>container-type</code></a> value <code>size</code> or <code>inline-size</code> set, intended for <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_container_queries" target="_blank" rel="noopener">container queries</a>.</li><li>Element that is a child of a <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_flexible_box_layout/Basic_concepts_of_flexbox" target="_blank" rel="noopener">flex</a> container, with <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/z-index" target="_blank" rel="noopener"><code>z-index</code></a> value other than <code>auto</code>.</li><li>Element that is a child of a <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/grid" target="_blank" rel="noopener"><code>grid</code></a> container, with <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/z-index" target="_blank" rel="noopener"><code>z-index</code></a> value other than <code>auto</code>.</li><li>Element with an <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/opacity" target="_blank" rel="noopener"><code>opacity</code></a> value less than <code>1</code> (See <a href="https://www.w3.org/TR/css-color-3/#transparency" target="_blank" rel="noopener">the specification for opacity</a>).</li><li>Element with a <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/mix-blend-mode" target="_blank" rel="noopener"><code>mix-blend-mode</code></a> value other than <code>normal</code>.</li><li>Element with any of the following properties with value other than <code>none</code> ：<ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/transform" target="_blank" rel="noopener"><code>transform</code></a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/filter" target="_blank" rel="noopener"><code>filter</code></a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/backdrop-filter" target="_blank" rel="noopener"><code>backdrop-filter</code></a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/perspective" target="_blank" rel="noopener"><code>perspective</code></a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/clip-path" target="_blank" rel="noopener"><code>clip-path</code></a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/mask" target="_blank" rel="noopener"><code>mask</code></a> / <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/mask-image" target="_blank" rel="noopener"><code>mask-image</code></a> / <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/mask-border" target="_blank" rel="noopener"><code>mask-border</code></a></li></ul></li><li>Element with an <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/isolation" target="_blank" rel="noopener"><code>isolation</code></a> value <code>isolate</code>.</li><li>Element with a <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/will-change" target="_blank" rel="noopener"><code>will-change</code></a> value specifying any property that would create a stacking context on non-initial value (see <a href="https://dev.opera.com/articles/css-will-change-property/" target="_blank" rel="noopener">this post</a>).</li><li>Element with a <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/contain" target="_blank" rel="noopener"><code>contain</code></a> value of <code>layout</code>, or <code>paint</code>, or a composite value that includes either of them (i.e. <code>contain: strict</code>, <code>contain: content</code>).</li></ul><p>总结下常用的：</p><p>html 元素。</p><p>position 为 absolute 或者 relative，并且 z-index 不是 auto。</p><p>position 为 fixed，<strong>无需设置 z-index 的值</strong>。</p><p>flex 的子项，并且 z-index 不是 auto。</p><p>opacity 设置为小于 1。</p><p>上边的这些情况都会生成一个层叠上下文，在自己的层叠上下文内进行一层一层的渲染。</p><h2 id="堆叠原则"><a href="#堆叠原则" class="headerlink" title="堆叠原则"></a>堆叠原则</h2><p>同一个层叠上下文内元素的堆叠就是之前讨论的无新增层叠上下文的情况（之前的情况其实就是只有一个层叠上下文，即 html 元素自己生成了一个层叠上下文）。</p><p>同一层叠上下文中，层叠上下文之间堆叠顺序如下：</p><ol><li>通过 z-index 加上某些条件生成的层叠上下文，并且 z-index 为负值</li><li>没有生成层叠上下文的元素，即之前讨论的无新增层叠上下文的情况<ol><li>非定位的 block 元素，一般就是背景</li><li>float 元素</li><li>非定位的 inline 元素，一般就是文字内容</li><li>定位元素，即 position 设置了 relative 或者 absolute，但没设置 z-index</li></ol></li><li>通过 z-index 加上某些条件生成的层叠上下文，并且 z-index 为 0 或者其他条件生成的层叠上下文</li><li>通过 z-index 加上某些条件生成的层叠上下文，并且 z-index 为正值，值越大越在上边。</li></ol><p>一个层叠上下文中可以一直嵌套的生成新的层叠上下文，如果要比较不同的层叠上下文下元素的层级关系，<strong>首先需要找到当前元素所在的层叠上下文</strong>（它所在的层叠上下文又在另一个层叠上下文之中，一直向上找，直到找到从它们共同层叠上下（比如 html 元素）中生成的那个层叠上下文），接着按照堆叠规则比较它们所在的层叠上下文关系即可。</p><p>看一个<a href="https://philipwalton.com/articles/what-no-one-told-you-about-z-index/" target="_blank" rel="noopener">经典的例子</a>：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">      .red,</span></span><br><span class="line"><span class="undefined">      .green,</span></span><br><span class="line"><span class="undefined">      .blue &#123;</span></span><br><span class="line"><span class="undefined">        position: absolute;</span></span><br><span class="line"><span class="undefined">        width: 100px;</span></span><br><span class="line"><span class="undefined">        color: white;</span></span><br><span class="line"><span class="undefined">        line-height: 100px;</span></span><br><span class="line"><span class="undefined">        text-align: center;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">      .red &#123;</span></span><br><span class="line"><span class="undefined">        z-index: 1;</span></span><br><span class="line"><span class="undefined">        top: 20px;</span></span><br><span class="line"><span class="undefined">        left: 20px;</span></span><br><span class="line"><span class="undefined">        background: red;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">      .green &#123;</span></span><br><span class="line"><span class="undefined">        top: 60px;</span></span><br><span class="line"><span class="undefined">        left: 60px;</span></span><br><span class="line"><span class="undefined">        background: green;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">      .blue &#123;</span></span><br><span class="line"><span class="undefined">        top: 100px;</span></span><br><span class="line"><span class="undefined">        left: 100px;</span></span><br><span class="line"><span class="undefined">        background: blue;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"red"</span>&gt;</span>Red<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"green"</span>&gt;</span>Green<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"blue"</span>&gt;</span>Blue<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>首先观察除了 html 元素有没有新的层叠上下文。</p><p>有一个新生成的层叠上下文：Red 因为设置了 z-index = 1，并且是 absolute 定位，所以生成了层叠上下文，Red 会高于其他元素。</p><p>green 和 blue 都是非定位元素，按照出现顺序，blue 覆盖 green。</p><p>所以从底层到上边的顺序就是绿色、蓝色、红色。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20230622130720208.png" alt="image-20230622130720208"></p><p>下边思考一下如果修改代码，并且在下边的限制条件下，让红色到最底层：</p><ul><li>不修改任何标签元素的名字，只增加修改 css</li><li>不改变任何元素的 z-index</li><li>不改变任何元素的 position 属性</li></ul><p>如果直接知道答案了，那层叠关系应该是学透了。</p><p>答案就是给 div 加一个透明度：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0.99</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20230622131314901.png" alt="image-20230622131314901"></p><p>我们重新分析一下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">      <span class="selector-class">.red</span>,</span></span><br><span class="line"><span class="css">      <span class="selector-class">.green</span>,</span></span><br><span class="line"><span class="css">      <span class="selector-class">.blue</span> &#123;</span></span><br><span class="line"><span class="undefined">        position: absolute;</span></span><br><span class="line"><span class="undefined">        width: 100px;</span></span><br><span class="line"><span class="undefined">        color: white;</span></span><br><span class="line"><span class="undefined">        line-height: 100px;</span></span><br><span class="line"><span class="undefined">        text-align: center;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">      <span class="selector-class">.red</span> &#123;</span></span><br><span class="line"><span class="undefined">        z-index: 1;</span></span><br><span class="line"><span class="undefined">        top: 20px;</span></span><br><span class="line"><span class="undefined">        left: 20px;</span></span><br><span class="line"><span class="undefined">        background: red;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">      <span class="selector-class">.green</span> &#123;</span></span><br><span class="line"><span class="undefined">        top: 60px;</span></span><br><span class="line"><span class="undefined">        left: 60px;</span></span><br><span class="line"><span class="undefined">        background: green;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">      <span class="selector-class">.blue</span> &#123;</span></span><br><span class="line"><span class="undefined">        top: 100px;</span></span><br><span class="line"><span class="undefined">        left: 100px;</span></span><br><span class="line"><span class="undefined">        background: blue;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">      div &#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">opacity</span>: 0<span class="selector-class">.99</span>;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"red"</span>&gt;</span>Red<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"green"</span>&gt;</span>Green<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"blue"</span>&gt;</span>Blue<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>现在相当于有五个层叠上下文：</p><p>html(初始的一个层叠上下文)</p><ul><li>div(通过 opacity 生成)<ul><li>red(通过 absolute + z-index 生成)</li></ul></li><li>div(通过 opacity 生成)</li><li>div(通过 opacity 生成)</li></ul><p>比较 Red、Green、Blue 的层叠顺序，就是比较三者所在的层叠上下文，即各自所在的 div，三个 div 都是通过 opacity 生成的层叠上下文，所以它们层叠顺序就是出现的顺序，从底部到顶层就是 Red、Green、Blue。</p><p>即使 Green 和 Blue 本身没有生成层叠上下文，但因为它们所在的父元素的层叠上下文比较高，所以就把 Red 覆盖了。</p><p>再举个例子，因为比较的是所在的层叠上下文的顺序，因此平常开发中会遇到设置 z-index = 999（同时是定位元素了），也无法到最上层。原因就是它所在的层叠上下文比较低，类似于下边的情况。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20230622140148429.png" alt="image-20230622140148429" style="zoom:50%;"></p><p>还有一个神奇的现象：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">      <span class="selector-class">.my-element</span> &#123;</span></span><br><span class="line"><span class="undefined">        background: rgb(232 240 254 / 0.5);</span></span><br><span class="line"><span class="undefined">        border: 1px solid lightblue;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        width: 250px;</span></span><br><span class="line"><span class="undefined">        height: 250px;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">      <span class="selector-class">.my-element</span> <span class="selector-class">.child</span> &#123;</span></span><br><span class="line"><span class="undefined">        position: relative;</span></span><br><span class="line"><span class="undefined">        z-index: -1;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        background: pink;</span></span><br><span class="line"><span class="undefined">        border: 1px solid hotpink;</span></span><br><span class="line"><span class="undefined">        padding: 1rem;</span></span><br><span class="line"><span class="undefined">        width: 275px;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"my-element"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child"</span>&gt;</span>I am behind my parent<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>回忆下之前说的堆叠顺序：</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20230622155424571.png" alt="image-20230622155424571"></p><p>因为父元素和子元素都在同一个层叠上下文下，所以会先堆叠 z-index 为负值的元素，所以就形成了子元素穿越到父元素下边的情况。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20230622140741157.png" alt="image-20230622140741157"></p><p>如果我们让父元素也生成一个层叠上下文，上边的情况就不会发生了：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.my-element</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgb</span>(232 240 254 / 0.5);</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid lightblue;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">width</span>: <span class="number">250px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">250px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20230622141026125.png" alt="image-20230622141026125"></p><p>当父元素加了层叠上下文之后，父元素和子元素就不在同一层叠上下文中了。</p><p>父元素在根元素上。</p><p>子元素在父元素上。</p><h1 id="堆叠顺序判断"><a href="#堆叠顺序判断" class="headerlink" title="堆叠顺序判断"></a>堆叠顺序判断</h1><p>总结一下：</p><p>判断元素之间的堆叠顺序，首先判断是否在同一层叠上下文中。</p><p>如果在同一堆叠上下文，就按照下边的顺序：</p><ol><li>非定位的 block 元素，一般就是背景</li><li>float 元素</li><li>非定位的 inline 元素，一般就是文字内容</li><li>定位元素，即 position 设置了 relative 或者 absolute</li></ol><p>如果不在同一堆叠上下文，就找到元素所在的层叠上下文，并且要一直往上找层叠上下文，直到找到从它们共同层叠上下生成的那个层叠上下文：</p><p>按照下边的规则判断层叠上下文的顺序，层叠上下文的顺序就是要比较元素的堆叠顺序了：</p><ol><li>通过 z-index 加上某些条件生成的层叠上下文，并且 z-index 为负值</li><li>没有生成层叠上下文的元素，即之前讨论的无新增层叠上下文的情况<ol><li>非定位的 block 元素，一般就是背景</li><li>float 元素</li><li>非定位的 inline 元素，一般就是文字内容</li><li>定位元素，即 position 设置了 relative 或者 absolute，但没设置 z-index</li></ol></li><li>通过 z-index 加上某些条件生成的层叠上下文，并且 z-index 为 0 或者其他条件生成的层叠上下文</li><li>通过 z-index 加上某些条件生成的层叠上下文，并且 z-index 为正值，值越大越在上边。</li></ol><h1 id="实践经验"><a href="#实践经验" class="headerlink" title="实践经验"></a>实践经验</h1><p><strong>能不设置 z-index 就不要去设置</strong>，设置请三思。</p><h2 id="定位元素天生高于普通元素"><a href="#定位元素天生高于普通元素" class="headerlink" title="定位元素天生高于普通元素"></a>定位元素天生高于普通元素</h2><p>设置了 relative 或者 absolute 的元素会高于其他元素，因此这种情况下完全可以不设置 z-index，如果设置了 z-index 就会生成新的层叠上下文，可能会造成堆叠的混乱。</p><p>另外因为设置了 fixed 即使不设置 z-index 也会生成一个层叠上下文，因此 fixed 元素会高于其他所有的普通元素（定位元素和非定位元素）。但如果页面中有定位元素设置了正的 z-index，就不得不给 fixed 元素加一个更大 z-index 了。</p><h2 id="子元素层级受到父层叠上下文的影响"><a href="#子元素层级受到父层叠上下文的影响" class="headerlink" title="子元素层级受到父层叠上下文的影响"></a>子元素层级受到父层叠上下文的影响</h2><p>当设置了一个 z-index 产生了层叠上下文后，需要考虑当前元素会不会成为别的元素的父元素，如果在多人合作中经常互相改代码或者引用组件，如果某个地方产生了层叠上下文，那子元素的层级就会受到该父元素的影响从而导致达不到想要的层级。</p><p>比如将一个弹窗组件放到了一个父元素中，父元素有层叠上下文，这样就会导致弹窗组件达不到自己想要的高度。</p><h1 id="z-index-管理思考"><a href="#z-index-管理思考" class="headerlink" title="z-index 管理思考"></a>z-index 管理思考</h1><p>团队中一个项目过大之后，层级问题真的是防不胜防，也许可以做下边的事情来降低问题的发生：</p><h2 id="宣导"><a href="#宣导" class="headerlink" title="宣导"></a>宣导</h2><p>因为层级和 z-index 的问题可能没详细去了解过，边开发边调试最后达到效果就好。所以最好可以先宣导一下，把层级的问题团队内完全对齐，降低问题的发生。</p><h2 id="开发前"><a href="#开发前" class="headerlink" title="开发前"></a>开发前</h2><p>设计一套体系来管理 z-index。</p><p>常规的做法就是将所有的 z-index 定义为变量统一管理，并且规定范围，普通元素 1 - 100，弹窗 101 - 999 类似这样。</p><p>当有页面需要 z-index 时就去注册，命名的时候可以按页面、按组件范围进行区分，这样未来想知道某个页面有哪些 z-index 可以一目了然。</p><h2 id="开发中"><a href="#开发中" class="headerlink" title="开发中"></a>开发中</h2><p>规则有了，但不遵守没啥用。</p><p>需要在 commit 以及打包流水线中进行强制卡控，如果发现 z-index 使用了数字就禁止提交 commit，如果强制用 -n 提交了，就在流水线中禁止打包。</p><h2 id="老项目"><a href="#老项目" class="headerlink" title="老项目"></a>老项目</h2><p>对于老项目去推动上边的流程真的太难了，把所有的 z-index 去重新定义变量，对于大项目来说修改、回归工作量会很大很大，因此基本无望。</p><p>可以做点工具来尽量避免出现层级的问题：</p><p>比如页面的层叠上下文进行静态扫描，可以把层叠上下文的关系展示出来，这样如果需要新加层叠上下文，可以直观的知道会不会影响到别人。</p><p>再进一步，如果有全套的 Mock 数据，可以模拟出来所有层叠上下文都渲染时候，真实页面长什么样子，会更加直观。</p><h2 id="ps"><a href="#ps" class="headerlink" title="ps"></a>ps</h2><p>以上思考都是理想情况下可以做的事情，现实状况可能会遇到小团队没必要推，大团队推不动的情况，哈哈。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;过去一段时间经常遇到线上的页面元素互相遮盖的问题，索性就总结一下吧。&lt;/p&gt;
&lt;p&gt;正常情况下，页面元素是从左到右和从上到下渲染（x、y 维度），但因为 margin 可以写负值，还有一些定位相关的 css 属性(absolute、relative、fixed、stick)
      
    
    </summary>
    
    
      <category term="前端" scheme="https://windliang.wang/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="css" scheme="https://windliang.wang/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>js宏任务和微任务执行顺序详解</title>
    <link href="https://windliang.wang/2023/04/08/js%E5%AE%8F%E4%BB%BB%E5%8A%A1%E5%92%8C%E5%BE%AE%E4%BB%BB%E5%8A%A1%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F%E8%AF%A6%E8%A7%A3/"/>
    <id>https://windliang.wang/2023/04/08/js%E5%AE%8F%E4%BB%BB%E5%8A%A1%E5%92%8C%E5%BE%AE%E4%BB%BB%E5%8A%A1%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F%E8%AF%A6%E8%A7%A3/</id>
    <published>2023-04-08T13:04:45.000Z</published>
    <updated>2023-04-09T01:09:31.902Z</updated>
    
    <content type="html"><![CDATA[<p>最近看了死月的 <a href="https://s.juejin.cn/ds/AshEp8U/" target="_blank" rel="noopener">趣学 Node.js</a> 小册，关于宏任务、微任务部分突然意识到所谓的执行顺序其实就是底层 <code>C++</code>  写的各种代码的结果，当了解了 <code>Node.js</code> 代码或者 <code>V8</code> 代码再看这些问题真的就是降维打击（当然我只是有了这个感觉，还没细看过[旺柴]）。</p><p>但如果平常用不到，我们也没必要真的去看底层的代码，即使不了解底层代码，我们也可以根据具体的表现来自己定一些规则进行理解，只要根据这个规则来判断执行顺序是正确的，能指导平常开发也就足够了。</p><blockquote><p>这篇文章只讲基本的概念，不进行深入，能够判断 <code>setTimemout</code>、<code>Promise</code> 的执行顺序即可。</p></blockquote><p>众所周知，<code>JavaScript</code> 单线程执行的，所以对于一些耗时的任务，我们可以将其丢入任务队列当中，这样一来，也就不会阻碍其他同步代码的执行。等到异步任务完成之后，再去进行相关逻辑的操作。</p><p><code>js</code> 在主线程中执行的顺序：宏任务 -&gt; 宏任务 -&gt; 宏任务 … </p><p>在每一个宏任务中又可以产生微任务，当微任务全部执行结束后执行下一个宏任务。<br>【宏任务 [微任务]】 -&gt; 【宏任务 [微任务]】-&gt; 【宏任务 [微任务]】…</p><h1 id="宏任务"><a href="#宏任务" class="headerlink" title="宏任务"></a>宏任务</h1><p>生成方法：</p><ul><li>用户交互：用户在页面上进行交互操作（例如点击、滚动、输入等），会触发浏览器产生宏任务来响应用户操作。</li><li>网络请求：当浏览器发起网络请求（例如通过 <code>Ajax</code>、<code>Fetch</code>、<code>WebSocket</code> 等方式）时，会产生宏任务来处理请求和响应。</li><li><strong>定时器：通过 <code>JavaScript</code> 宿主环境提供的定时器函数（例如 <code>setTimeout</code>、<code>setInterval</code>）可以设置一定的时间后产生宏任务执行对应的回调函数。</strong></li><li><code>DOM</code> 变化：当 <code>DOM</code> 元素发生变化时（例如节点的添加、删除、属性的修改等），会产生宏任务来更新页面。</li><li>跨窗口通信：在浏览器中，跨窗口通信（例如通过 <code>postMessage</code> 实现）会产生宏任务来处理通信消息。</li><li><code>JavaScript</code> 脚本执行事件；比如页面引入的 <code>script</code> 就是一个宏任务。</li></ul><p>重点来看下 <code>setTimeout</code> 。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'setTimeout block'</span>)</span><br><span class="line">&#125;, <span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'end here'</span>)</span><br></pre></td></tr></table></figure><p>以上代码会输出什么？</p><hr><p>什么都不会输出</p><p>上边代码相当于两个宏任务：</p><p>第一个宏任务就是上边的整个脚本</p><p>第二个宏任务是 setTimeout 传入的这个函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">() =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'setTimeout block'</span>)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>第一个宏任务执行到 <code>while true</code> 的时候死循环了，所以自己的 <code>console.log(&#39;end here&#39;)</code> 不会执行。</p><p>第二个宏任务也没有机会执行到。</p><p>因此什么都不会输出。</p><p>再来看一个：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> t1 = <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> t3 = <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'setTimeout block'</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'t3 - t1 ='</span>, t3 - t1)</span><br><span class="line">&#125;, <span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> t2 = <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (t2 - t1 &lt; <span class="number">200</span>) &#123;</span><br><span class="line">    t2 = <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'end here'</span>)</span><br></pre></td></tr></table></figure><p><code>t1</code> 记录开始的时间，设置一个 <code>100</code> 毫秒执行的定时器，定时器中输出执行当前任务的时间。</p><p>那么  <code>console.log(&#39;t3 - t1 =&#39;, t3 - t1)</code> 输出的是多少呢？</p><hr><p>输出答案是 <code>200</code>。</p><p>同样的，上边是两个宏任务。</p><p>整个脚本是第一个宏任务。</p><p>计时器生成了第二个宏任务。</p><p>只有第一个宏任务执行结束后才会执行第二个宏任务。</p><p>所以即使定时器时间到了也不会立刻执行，只有当第一个宏任务执行结束后才会去执行定时器的任务，此时已经过去了 <code>200</code> 毫秒。</p><h1 id="微任务"><a href="#微任务" class="headerlink" title="微任务"></a>微任务</h1><p>生成方法：</p><ul><li><strong><code>Promise</code>：<code>Promise</code> 是一种异步编程的解决方案，它可以将异步操作封装成一个 <code>Promise</code> 对象，通过 <code>then</code> 方法注册回调函数，当 <code>promise</code> 变为 <code>resolve</code> 或者 <code>reject</code> 会将回调函数加入微任务队列中。</strong></li><li><code>MutationObserver</code>：<code>MutationObserver</code> 是一种可以观察 <code>DOM</code> 变化的 <code>API</code>，通过监听 <code>DOM</code> 变化事件并注册回调函数，将回调函数加入微任务队列中。</li><li><code>process.nextTick</code>：<code>process.nextTick</code> 是 <code>Node.js</code> 中的一个 <code>API</code>，它可以将一个回调函数加入微任务队列中。</li></ul><p>重点看 <code>Promise</code> 的使用，关于 <code>Promise</code> 怎么用这里不细说了，重点放到输出顺序上。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> r = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"1"</span>);</span><br><span class="line">    resolve()</span><br><span class="line">&#125;);</span><br><span class="line">r.then(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">"2"</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"3"</span>)</span><br></pre></td></tr></table></figure><p>上边的输出什么：</p><hr><p>比较基础的使用。输出 <code>1 3 2</code> 。</p><p><code>new Promise</code> 接受一个函数，返回一个 <code>Promise</code> 对象。值得注意的一点是<strong>传给 <code>Promise</code> 的那个函数会直接执行</strong>。所以会先输出 <code>1</code> 。</p><p><code>Promise</code> 对象拥有一个 <code>then</code> 方法来注册回调函数，当 <strong><code>promise reslove 或者 reject</code> 后会将注册函数加到微任务队列</strong>。</p><p>上边的代码因为是直接 <code>resolve</code> 了，所以会将 <code>() =&gt; console.log(&quot;2&quot;)</code>  注册到微任务队列中。</p><p>宏任务执行完毕后开始执行微任务，所以最后输出  <code>2</code> 。</p><p>再看下 <code>async</code> 和 <code>await</code> ：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">method</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">await</span> method2();</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">method2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> resolve());</span><br><span class="line">  <span class="keyword">return</span> promise;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  method()</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上边的会输出什么呢？</p><hr><p>先输出 <code>2</code>，再输出 <code>1</code>。</p><p>这里需要明确一点，<code>async</code> 修饰的函数，相当于给当前函数<strong>包了一层 Promise</strong>。</p><p>所以</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  method()</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>相当于</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">new</span> <span class="built_in">Promise</span>((resolve,reject)&#123; resolve(method())&#125;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结合前边说的<strong>传给 Promise 的那个函数会直接执行。</strong></p><p>所以先执行 <code>resolve(method())</code>，进入<code>method</code> 内部：<br>接下来是 <code>await</code> 的作用：遇到 <code>await</code> 会<strong>先执行 <code>await</code> 右边的逻辑</strong>，执行完之后会暂停到这里。跳出当前函数去执行之前的代码。<br>所以 <code>method()</code> 方法中，</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">method</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">await</span> method2();</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">method2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> resolve());</span><br><span class="line">  <span class="keyword">return</span> promise;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先执行了 <code>method2</code>，当 <code>method2</code> 返回了 <code>Promise</code> 后就会暂定执行，跳回 <code>main</code> 函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">new</span> <span class="built_in">Promise</span>((resolve,reject)&#123; resolve(method())&#125;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>main</code> 函数执行完毕后才会再回到 <code>method</code> 方法中。</p><p>所以先输出 <code>2</code>，后输出 <code>1</code>。</p><p>如果想要先输出 1 再输出 2 需要怎么改呢？</p><hr><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">method</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">await</span> method2();</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">method2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> resolve());</span><br><span class="line">  <span class="keyword">return</span> promise;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span>  <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">await</span> method() <span class="comment">// 这里 await 即可</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure><p>再看一个：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">method</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> resolve()).then(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="number">1</span>));</span><br><span class="line">  <span class="keyword">const</span> n = <span class="keyword">await</span> method2();</span><br><span class="line">  <span class="built_in">console</span>.log(n);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">method2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> resolve(<span class="number">2</span>));</span><br><span class="line">  <span class="keyword">return</span> promise;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  method();</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">3</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main();</span><br></pre></td></tr></table></figure><p>上边的会输出什么呢？</p><hr><p>当 <code>main</code> 函数执行结束后，按照之前说的应该是回到 <code>await</code> 那里，所以应该输出<code>3 2 1</code> 吗？</p><p>其实是不对的，<code>await</code> 还有一个特性，它会把后边执行的代码整个<strong>注册为回调函数，相当于放到了 .then 里边</strong>，如果 <code>Promise</code> 直接 <code>resolve</code>，相当于将后边的代码放到了微任务队列中。</p><p>所以</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">method</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> resolve()).then(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="number">1</span>));</span><br><span class="line">  <span class="keyword">const</span> n = <span class="keyword">await</span> method2();</span><br><span class="line">  <span class="built_in">console</span>.log(n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>等价于：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">method</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> resolve()).then(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="number">1</span>));</span><br><span class="line">  <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> resolve(method2())).then(<span class="function">(<span class="params">n</span>) =&gt;</span> <span class="built_in">console</span>.log(n));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 <code>await</code> 之前已经有一个 <code>Promise</code> 把任务加到了微任务队列中。所以正确的输出顺序是 <code>3 1 2</code>。</p><p>所以回到 <strong>await 继续执行其实是表象</strong>，本质上是从微任务队列中把之前要执行的代码取了出来继续执行。</p><p>如果想输出 <code>3 2 1</code> ，该怎么改代码呢？</p><hr><p>可以将 <code>new Promise((resolve) =&gt; resolve()).then(() =&gt; console.log(1));</code> 这句中的 <code>reslove()</code> 函数延迟调用，通过 <code>setTimeout</code> 放到下一个宏任务中执行。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">method</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> setTimeout(resolve, <span class="number">0</span>)).then(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="number">1</span>));</span><br><span class="line">  <span class="keyword">const</span> n = <span class="keyword">await</span> method2();</span><br><span class="line">  <span class="built_in">console</span>.log(n);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">method2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> resolve(<span class="number">2</span>));</span><br><span class="line">  <span class="keyword">return</span> promise;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  method();</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">3</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="综合"><a href="#综合" class="headerlink" title="综合"></a>综合</h1><p>如果理解了上边的，下边的内容就简单了，首先明确几个点：</p><ol><li>【宏任务 [微任务]】 -&gt; 【宏任务 [微任务]】-&gt; 【宏任务 [微任务]】…</li></ol><p>​        当宏任务和当前宏任务产生的微任务全部执行完毕后，才会执行下一个宏任务。每遇到生成的微任务就放到微任务队列中，当前宏任        务代码全部执行后开始执行微任务队列中的任务</p><ol start="2"><li>传给 <code>new Promise</code> 的函数会<strong>直接执行</strong></li><li><code>async</code> 包装的函数相当于包了一层 <code>Promise</code> ，因此返回的一定是一个 <code>Promise</code></li><li>执行到 <code>await</code>，先执行 <code>await</code> 右边的东西，执行完后后会暂停在 <code>await</code> 这里，并且把后边的<strong>内容丢到 <code>then</code> 中</strong>（再结合第 <code>5</code> 点）。跳到外边接着执行。外边都执行完之后开始执行微任务队列</li><li>当 <code>promise</code> 变为 <code>resolve</code> 或者<code>reject</code> 的时候才会将 <code>then</code> 中注册的<strong>回调函数加入微任务队列中 </strong></li><li><code>setTimeout</code> 产生宏任务</li></ol><p>可以多读几遍下边开始正式练习，看代码的时候函数定义直接跳过，从执行函数开始看</p><h1 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h1><p>来一道魔鬼题：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">method</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>); </span><br><span class="line">    <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> resolve()).then(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="number">2</span>)); </span><br><span class="line">    <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">      setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        resolve();</span><br><span class="line">        <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> resolve()).then(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="number">3</span>));</span><br><span class="line">      &#125;, <span class="number">0</span>); </span><br><span class="line">    &#125;).then(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="number">4</span>));</span><br><span class="line">    <span class="keyword">await</span> method3(); </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">5</span>); </span><br><span class="line">    <span class="keyword">const</span> n = <span class="keyword">await</span> method2(); </span><br><span class="line">    <span class="built_in">console</span>.log(n); </span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">method2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="number">6</span>);</span><br><span class="line">      setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">7</span>); </span><br><span class="line">        resolve(<span class="number">8</span>);</span><br><span class="line">      &#125;, <span class="number">0</span>); </span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> promise;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">method3</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="number">9</span>); </span><br><span class="line">      resolve();</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> promise;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    method();</span><br><span class="line">    <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">      resolve();</span><br><span class="line">    &#125;).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="number">10</span>); </span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">11</span>); </span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  main();</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">12</span>);</span><br></pre></td></tr></table></figure><p>上边的代码输出什么？</p><hr><p>分析的时候我们需要明确什么时候产生了宏任务，什么时候产生了微任务，什么时候是直接执行的，结合上边总结 <code>6</code> 句话和注释可以看一下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">method</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">1</span>); <span class="comment">//[1]</span></span><br><span class="line">  <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> resolve()).then(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="number">2</span>)); <span class="comment">// 第 1 个宏任务中注册微任务 1 // [5]</span></span><br><span class="line">  <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      resolve();</span><br><span class="line">      <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> resolve()).then(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="number">3</span>)); <span class="comment">// 第 2 个宏任务中注册微任务 2 // [10]</span></span><br><span class="line">    &#125;, <span class="number">0</span>); <span class="comment">// 注册宏任务 2</span></span><br><span class="line">  &#125;).then(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="number">4</span>)); <span class="comment">// 第 2 个宏任务中注册微任务 1 // [9]</span></span><br><span class="line">  <span class="keyword">await</span> method3(); <span class="comment">// 第 1 个宏任务中注册微任务 2</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">5</span>); <span class="comment">// 第 1 个宏任务中注册微任务 2 // [6]</span></span><br><span class="line">  <span class="keyword">const</span> n = <span class="keyword">await</span> method2(); <span class="comment">// 第 1 个宏任务中注册微任务 2</span></span><br><span class="line">  <span class="built_in">console</span>.log(n); <span class="comment">// 第 1 个宏任务中注册微任务 2 // 第 3 个宏任务中注册微任务 1 // [12]</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">method2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">6</span>); <span class="comment">// [7]</span></span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="number">7</span>); <span class="comment">// [11]</span></span><br><span class="line">      resolve(<span class="number">8</span>);</span><br><span class="line">    &#125;, <span class="number">0</span>); <span class="comment">// 注册宏任务 3</span></span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> promise;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">method3</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">9</span>); <span class="comment">//[2]</span></span><br><span class="line">    resolve();</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> promise;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  method();</span><br><span class="line">  <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    resolve();</span><br><span class="line">  &#125;).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">10</span>); <span class="comment">// 第 1 个宏任务中注册微任务 3 // [8]</span></span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">11</span>); <span class="comment">//[3]</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">12</span>); <span class="comment">//[4]</span></span><br></pre></td></tr></table></figure><h1 id="总"><a href="#总" class="headerlink" title="总"></a>总</h1><p>当然上边的规则也不是黄金原则，归根到底还依赖于我们运行的环境是什么，现在 <code>js</code> 的运行时有 <code>V8</code>、<code>Node.js</code> 等，它们也有各自的版本。</p><p>对于下边的代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="built_in">Promise</span>.resolve();</span><br><span class="line"></span><br><span class="line">(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">await</span> p;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"after:await"</span>);</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line">p.then(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">"tick:a"</span>)).then(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">"tick:b"</span>));</span><br></pre></td></tr></table></figure><p>按照之前规则，先执行 <code>await p</code>  ，因为 <code>p</code>  已经 <code>resolve</code> 了，所以会把后边的代码 <code>console.log(&quot;after:await&quot;);</code> 加入到微任务队列中。</p><p>接着又依次把 <code>() =&gt; console.log(&quot;tick:a&quot;)</code> 、<code>() =&gt; console.log(&quot;tick:b&quot;)</code>  加到微任务队列中。</p><p>所以输出是 <code>after:await，tick:a， tick:b</code> 。</p><p>在浏览器中运行符合我们的想法：</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20230409083903731.png" alt="image-20230409083903731"></p><p>在 <code>Node.js V16</code> 中运行符合我们的想法：</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20230409083940125.png" alt="image-20230409083940125"></p><p>但在 <code>Node.js V10</code> 中运行就些许不一样了：</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20230409084009540.png" alt="image-20230409084009540"></p><p>至于为什么就是文章开头说的了，不管输出什么，其实就是其底层代码所决定的了。再具体的原因就需要去看 <code>Node.js</code> 相应的源码了。</p><p>当底层的逻辑影响到我们的业务逻辑的时候，可能就真的得去看这些源码和解决方案了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近看了死月的 &lt;a href=&quot;https://s.juejin.cn/ds/AshEp8U/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;趣学 Node.js&lt;/a&gt; 小册，关于宏任务、微任务部分突然意识到所谓的执行顺序其实就是底层 &lt;code&gt;C+
      
    
    </summary>
    
    
      <category term="前端" scheme="https://windliang.wang/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="js" scheme="https://windliang.wang/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>https原理及实践</title>
    <link href="https://windliang.wang/2023/01/14/https%E8%AF%81%E4%B9%A6%E5%8E%9F%E7%90%86%E6%8A%93%E5%8C%85%E5%92%8C%E5%AE%9E%E8%B7%B5/"/>
    <id>https://windliang.wang/2023/01/14/https%E8%AF%81%E4%B9%A6%E5%8E%9F%E7%90%86%E6%8A%93%E5%8C%85%E5%92%8C%E5%AE%9E%E8%B7%B5/</id>
    <published>2023-01-14T01:08:21.000Z</published>
    <updated>2023-01-27T02:56:48.584Z</updated>
    
    <content type="html"><![CDATA[<p>网站的证书快要过期了，索性就总结下 <code>HTTPS</code> 相关的东西吧。</p><h1 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h1><p><code>HTTPS</code>  说白了就是加密传输信息，防止信息泄露，需要提前了解几个概念：</p><h2 id="加密"><a href="#加密" class="headerlink" title="加密"></a>加密</h2><p>先说说最简单的加密，替换法，每个字符都对应到一个新的字符：</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20230116081932963.png" alt="image-20230116081932963"></p><p>比如明文是 <code>windliang</code> ，通过上边的映射关系密文就是 <code>pbgwebtgz</code>。</p><p>古代就使用过这种加密算法，但通过词频的分析，暴力枚举很容易被破解，因此现代已经不会用这种算法了。</p><p>不管什么加密算法，都可以分为明文，密文，和密钥、算法三部分。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20230116083309471.png" alt="image-20230116083309471"></p><p>这里的密钥就可以理解为上边的映射表，算法就是直接映射。</p><p>现代的加密算法，密钥一般就是一个字符串，算法就比较复杂了，会进行各种计算，或操作、与操作，分组等，然后再应用各种数学知识，质数、模相等… ，大学的时候有学过，这里也忘光了，下边只介绍简单概念了。</p><h2 id="对称加密"><a href="#对称加密" class="headerlink" title="对称加密"></a>对称加密</h2><p>和古代的加密算法流程是一样的</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20230116083309471.png" alt="image-20230116083309471"></p><p>只是其中的算法相对于简单的替换会更加复杂。常用的有 DES 算法、AES 算法、3DES 算法、TDEA 算法、Blowfish 算法、RC5 算法、IDEA 算法等。其特点是，加密和解密<strong>使用同一密钥</strong>。</p><h2 id="非对称加密"><a href="#非对称加密" class="headerlink" title="非对称加密"></a>非对称加密</h2><p>与之前最大的不同之处是包含了两个密钥，一个称之为公钥，一个称之为私钥。并且算法相对于对称加密会更加复杂。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20230116220615109.png" alt="image-20230116220615109"></p><p>公钥和私钥都能进行加密，用公钥加密后只能用私钥解密，用私钥加密后只能用公钥解密。</p><p>常见非对称加密算法包括 DSA 算法、RSA 算法、Elgamal 算法、背包算法、Rabin 算法、D-H 算法、ECC 算法等。由于算法非常复杂，因此非对称加解密会<strong>非常耗时</strong>。</p><h2 id="哈希算法"><a href="#哈希算法" class="headerlink" title="哈希算法"></a>哈希算法</h2><p>可以看做一种特殊的加密。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20230116221214098.png" alt="image-20230116221214098"></p><p>它是单向的，加密后无法再还原。可以将任意长度的明文串映射为较短的（通常是固定长度的）二进制串（<code>Hash</code> 值），并且不同的明文很难映射为相同的 <code>Hash</code> 值。</p><p>目前常见的 <code>Hash</code> 算法包括国际上的 Message Digest（MD）系列和 Secure Hash Algorithm（SHA）系列算法，以及国内的 <code>SM3</code> 算法。</p><p>利用这个特性，我们就可以快速比对文本是否被篡改，将明文和 <code>hash</code>  值一起传输给对方，收到后将明文重新生成 <code>Hash</code> 值，再和收到的 <code>Hash</code> 值比对，如果 <code>Hash</code> 值不同就说明被篡改过了。</p><h1 id="传纸条"><a href="#传纸条" class="headerlink" title="传纸条"></a>传纸条</h1><p>假设教室中第一排的小明想给最后一排的小红传纸条。</p><h2 id="直接传"><a href="#直接传" class="headerlink" title="直接传"></a>直接传</h2><p>第一种最简单的方法就是想传啥直接写到纸上，然后叠起来，让教室中间的人帮助传递过去即可。</p><p>但存在一个最大的问题，不安全，中间的某一个同学如果突发好奇，直接拆开纸条，内容就一览无余了。</p><h2 id="对称加密-1"><a href="#对称加密-1" class="headerlink" title="对称加密"></a>对称加密</h2><p>小明想了想那我和小红约定一个对称加密算法吧，我先把密钥写到纸上传给小红，之后我都加密后写到纸上传给小红，这样就安全了吧。</p><p>中间传纸条的小刚突发好奇，拆开了纸条但这次好奇心没有得到满足，发现纸上写的由于加密过了已经完全看不懂了。</p><p>但小华拆开纸条却突然笑出了声，因为他读懂了纸条内容，在小明第一次传写有密钥的纸条的时候小华就已经拆开并且偷偷记下来了。所以后续的传递，只要小华想看，拆开以后通过密钥解密一下就可以了。</p><h2 id="非对称加密-1"><a href="#非对称加密-1" class="headerlink" title="非对称加密"></a>非对称加密</h2><p>小明和小红想这可不行啊，于是两个人说干脆我们用非对称加密吧，我们的纸条内容都用对方的公钥加密，拿到纸条后用自己的私钥进行解密。这样纸条被别人看到也无所谓了，因为私钥只有我们自己有。</p><p>于是第一次传纸条的时候，小明把自己的公钥写好传给了小红，小红以后拿着这个公钥加密后再写到纸条上。小红也把自己的公钥写好传给了小明，小明以后拿着这个公钥加密后再写到纸条上。</p><p>小明收到小红写的纸条内容后，因为纸条是用小明的公钥加密过的，小明只需要用自己的私钥解密一下即可正常阅读了。</p><p>小红也是同样的道理。</p><p>小华在小红和小明第一次传纸条的时候同样又把两个公钥记了下来，但后续小红和小明的聊天小华却没办法解密了，因为纸条内容都是经过公钥加密的，如果想要解密必须通过私钥，但私钥在小红和小明各自的手里，其他人都无能为力了。</p><p>但小刚此时却偷偷笑出了声，因为第一次用纸条传公钥的时候，小刚偷偷动了手脚。</p><p>小明将公钥传给小红的时候，小刚偷偷将纸条换成了写有自己公钥的纸条，因此小红拿到的是小刚的公钥。</p><p>小红传公钥给小明的时候，小刚同样的将小红的公钥换成了自己的，因此小明拿到的是小刚的公钥。</p><p>当小明用收到的公钥加密后传递到小刚这里的时候，小刚就用自己的私钥进行了解密，然后用小红的公钥进行了加密发给了小红。小红和小明以为在安全的通信，其实被小刚一览无余了。</p><h2 id="签名证书"><a href="#签名证书" class="headerlink" title="签名证书"></a>签名证书</h2><p>此时小红和小明遇到的问题就是无法确认收到的公钥是否是对方的。</p><p>小亮此时站出说，我来把证书内容用我的私钥签名，公钥我直接写到黑板上，具体过程如下：</p><p>证书上写好你们自己的名字和你们的公钥，我会把证书上的内容做一次 <code>Hash</code>，然后把这个 <code>Hash</code>  用我的私钥加密，将加密后的内容也放到证书上。</p><p>现在证书上有你们的名字和你们的公钥，外加一个加密后的 <code>Hash</code>  值。</p><p>你们拿到别人的证书后，先看下名字是不是你们要的人，然后计算一下证书上的内容得到 <code>Hash</code>  值，再用黑板上的公钥把证书上加密的 <code>Hash</code> 值进行解密，看一下这两个值是否相同，如果相同的话就证明证书没有被篡改过，证书上的公钥可以放心使用。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20230120181352297.png" alt="image-20230120181352297"></p><h2 id="证书链"><a href="#证书链" class="headerlink" title="证书链"></a>证书链</h2><p>自从有了证书，小刚拿到小明传给小红的证书后就无能为力了。</p><p>第一不能修改证书上的任何内容，一修改就会导致最终的 <code>Hash</code> 值不一样，就会被别人发现造假。</p><p>第二他也不能把证书替换成自己的，因为证书写了<strong>自己的名字</strong>，证书传过去以后小红一看这是小刚的证书那直接暴露。</p><p>班上的同学发现这也太棒了 ，再也不会有人读到纸条内容了，但小亮就变的太忙了，越来越多的人跟他要证书。小亮想要不我给小杨发个证书，以后让小杨给别人发证书。</p><p>于是后边的人就找小杨发证书，这样传递纸条的时候，除了自己的证书，也要把小杨的证书写上。收到的人用小杨的证书上的公钥来验证收到的证书是不是真的，而小杨的证书用黑板上的写的小亮的公钥来验证是否是真的。</p><p>未来小杨也觉得太忙了，她可能也授权某个人也能给别人发证书，这样第一次传递纸条的时候就需要把整个链条上的证书都写上，依次确认真假，但最后一次证书一定使用黑板上的公钥来确认，因为这个是大家都能看见的，一定不会是假的。</p><h2 id="非对称加密结合对称加密"><a href="#非对称加密结合对称加密" class="headerlink" title="非对称加密结合对称加密"></a>非对称加密结合对称加密</h2><p>课堂上大家传纸条一段时间后发现过程中用非对称算法加密解密实在是太费时间了，本来原文写了 <code>10</code> 个字，加密加密可能得用一小时，虽然安全但太麻烦了。</p><p>于是小明对小红说：我们是不是能结合下对称加密算法。当我收到你的证书后，并且验证证书是可信的，我就生成一个对称加密的密钥，用证书上你的公钥加密后写到纸条上传给你。你收到后用自己的私钥解密，拿到对称加密算法的密钥后，以后写纸条都通过对称加密进行加密传给我。这样就既保证了传输的安全性，也节省了加解密的时间。</p><p>即使中间有人拿到了加密后的密钥，因为没有你的私钥，他也无能为力。</p><p>小红：赞！就这样搞。</p><h1 id="HTTPS-实际情况"><a href="#HTTPS-实际情况" class="headerlink" title="HTTPS 实际情况"></a>HTTPS 实际情况</h1><h2 id="关于证书"><a href="#关于证书" class="headerlink" title="关于证书"></a>关于证书</h2><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20230120173638956.png" alt="image-20230120173638956"></p><p>实际证书会包含更多的东西，域名信息，有效期，以及之前说的签名等等。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20230120173744353.png" alt="image-20230120173744353"></p><p>以及上边的图里的证书链，会通过证书上公钥依次验证证书的有效性。而根证书就相当于黑板上写的公钥，这个会提前内置到系统中，如下图所示，是系统中所有的根证书。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20230120174128365.png" alt="image-20230120174128365"></p><p>浏览器确认当前域名和证书上的域名一致，并且证书是有效的，就会有一个通过的锁，否则会有一个危险提示。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20230120174301762.png" alt="image-20230120174301762"></p><h2 id="关于对称加密的密钥"><a href="#关于对称加密的密钥" class="headerlink" title="关于对称加密的密钥"></a>关于对称加密的密钥</h2><p>实际过程中对称加密算法的密钥会通过多次传输最终拼接出一个密钥，过程可以参考 <a href="https://juejin.cn/post/6844904046063517704" target="_blank" rel="noopener">SSL / TLS 工作原理和详细握手过程</a></p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20230120183519392.png" alt="image-20230120183519392"></p><p>对称加密的密钥由 <code>client random</code>，<code>server random</code> 和 <code>premaster secret</code> 三部分结合后生成。</p><h1 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h1><p>以阿里云为例，记录下整个过程：</p><p>打开阿里云的 <a href="https://yundun.console.aliyun.com/?spm=5176.12818093.ProductAndResource--ali--widget-product-recent.dre5.56a616d0t5nFY9&amp;p=cas#/certExtend/free" target="_blank" rel="noopener">证书网站</a>，点击创建证书：</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20230115204319376.png" alt="image-20230115204319376"></p><p>每年免费 <code>20</code> 个额度：</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20230115204518817.png" alt="image-20230115204518817"></p><p>点击立即购买，并且完成后续的支付流程。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20230115204632274.png" alt="image-20230115204632274"></p><p>购买结束后，回到控制台，点击「创建证书」，会在页面中多了一条待申请的证书，接着点击证书申请：</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20230115205205575.png" alt="image-20230115205205575"></p><p>填写自己的域名，然后点击「提交审核」。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20230115205413799.png" alt="image-20230115205413799"></p><p>如果是阿里云的域名，<code>DNS</code> 记录里会自动加一条下边的 <code>TXT</code> 记录。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20230115205938916.png" alt="image-20230115205938916"></p><p>可以到自己的 <code>DNS</code>  解析控制台看一眼：</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20230115210039243.png" alt="image-20230115210039243"></p><p>接着只需要等邮箱通知就可以：</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20230115210232162.png" alt="image-20230115210232162"></p><p>刷新一下列表，证书就变为了已签发：</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20230115210337924.png" alt="image-20230115210337924"></p><p>点击右边的下载，会弹出页面选择证书类型，这里我下载 <code>nginx</code> 的：</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20230115210510184.png" alt="image-20230115210510184"></p><p>下来好的两个文件，<code>.pem</code> 就是我们的证书，<code>.key</code> 是我们的私钥。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20230115210823709.png" alt="image-20230115210823709"></p><p>接下来登录自己的服务器，前提是你已经按照 <a href="https://windliang.wang/2020/02/23/%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA%E7%BD%91%E7%AB%99%E5%85%A8%E8%BF%87%E7%A8%8B/">搭建网站</a> 这个教程配置好了网站。</p><p>我们可以先把上边的两个文件重命名，并且通过任意的方式上传到自己的服务器，我是用 <code>FTP</code>  传上去。</p><p>接着通过 <code>ssh</code> 登录自己的服务器，<code>ssh -p22 root@你的服务器 ip</code>，将刚传上来的服务器证书和密钥移动到 <code>nginx</code> 的相应位置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mv -f /var/ftp/pub/windliang.pem /etc/nginx/cert/</span><br><span class="line">mv -f /var/ftp/pub/windliang.key /etc/nginx/cert/</span><br></pre></td></tr></table></figure><p><code>/var/ftp/pub/windliang.pem</code> 和 <code>/var/ftp/pub/windliang.key</code> 需要改成你自己的文件地址。</p><p>还需要在网站的 <code>nginx</code> 的配置文件中加入 <code>https</code> 的配置，监听 <code>443</code> 端口：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen 443 ssl;   #SSL协议访问端口号为443。此处如未添加ssl，可能会造成Nginx无法启动。</span><br><span class="line">        server_name windliang.wang;  #将localhost修改为您证书绑定的域名，例如：www.example.com。</span><br><span class="line">        root html;</span><br><span class="line">        index index.html index.htm;</span><br><span class="line">        ssl_certificate cert/windliang.pem;   #替换成您证书的文件名。</span><br><span class="line">        ssl_certificate_key cert/windliang.key;   #替换成您证书的密钥文件名。</span><br><span class="line">        ssl_session_timeout <span class="number">5</span>m;</span><br><span class="line">        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;  #使用此加密套&gt;</span><br><span class="line">件。</span><br><span class="line">        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;   #使用该协议进行配置。</span><br><span class="line">        ssl_prefer_server_ciphers on;</span><br><span class="line">        location / &#123;</span><br><span class="line">                root /root/myblog;   #站点目录。</span><br><span class="line">                index index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">    listen <span class="number">80</span>;</span><br><span class="line">    server_name www.windliang.wang;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">301</span> $scheme:<span class="comment">//windliang.wang$request_uri;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来重启 <code>nginx</code> 。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure><p>此时重新打开网站证书就设置成功了：</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20230116063503733.png" alt="image-20230116063503733"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;网站的证书快要过期了，索性就总结下 &lt;code&gt;HTTPS&lt;/code&gt; 相关的东西吧。&lt;/p&gt;
&lt;h1 id=&quot;前提&quot;&gt;&lt;a href=&quot;#前提&quot; class=&quot;headerlink&quot; title=&quot;前提&quot;&gt;&lt;/a&gt;前提&lt;/h1&gt;&lt;p&gt;&lt;code&gt;HTTPS&lt;/code&gt;
      
    
    </summary>
    
    
      <category term="前端" scheme="https://windliang.wang/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="https" scheme="https://windliang.wang/tags/https/"/>
    
  </entry>
  
  <entry>
    <title>生日快乐</title>
    <link href="https://windliang.wang/2022/12/31/%E7%94%9F%E6%97%A5%E5%BF%AB%E4%B9%90/"/>
    <id>https://windliang.wang/2022/12/31/%E7%94%9F%E6%97%A5%E5%BF%AB%E4%B9%90/</id>
    <published>2022-12-31T01:31:54.000Z</published>
    <updated>2023-01-01T03:21:40.499Z</updated>
    
    <content type="html"><![CDATA[<p>一直过的农历生日腊月初十，农历的腊月是个比较尴尬的月份：</p><p>– 你属什么？</p><p>– 属猪</p><p>– 那你是 <code>95</code> 年生的咯</p><p>– 我是 <code>96</code> 年生的</p><p>– <code>96</code> 年不是鼠年吗</p><p>– <code>96</code> 年 <code>1</code> 月还没过年，所以是 <code>96</code> 年的🐷</p><p>因为属相是按农历算的，但腊月一般都是第二年的 <code>1</code> 月了，导致每次都得解释下，哈哈。</p><p>今年凑巧和元旦过在了同一天，印象中小时候也有一次赶在了元旦，索性写个小程序来看一下吧。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20221231102025214.png" alt="image-20221231102025214"></p><p>上一次生日在元旦已经是快 <code>20</code> 年前的 <code>04</code> 年了，还看到了一个神奇的年份，下一次农历和公历重合的生日是 <code>2033</code> 年。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20221231103536072.png" alt="image-20221231103536072"></p><p>因为农历不像公历一样有确切的数学规律，只能由天文台测定后提供，所以一般都是采用「查表法」获取农历数据，我这里就偷懒直接使用别人的库了 <a href="https://www.npmjs.com/package/solarlunar" target="_blank" rel="noopener">https://www.npmjs.com/package/solarlunar</a> 哈哈，这也导致目前只能查 <code>1900 - 2100</code> 年的数据。</p><p>感兴趣的同学也可以试试这个小程序 「农历生日转换」。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/%E6%89%AB%E7%A0%81_%E6%90%9C%E7%B4%A2%E8%81%94%E5%90%88%E4%BC%A0%E6%92%AD%E6%A0%B7%E5%BC%8F-%E5%BE%AE%E4%BF%A1%E6%A0%87%E5%87%86%E7%BB%BF%E7%89%88.png" alt="扫码_搜索联合传播样式-微信标准绿版"></p><p>说到生日，<a href="https://windliang.wang/2017/01/07/21%E5%B2%81%E7%9A%84%E4%BD%A0%EF%BC%8C%E7%94%9F%E6%97%A5%E5%BF%AB%E4%B9%90/">我的博客</a> 其实也是 <code>17</code> 年生日那天搭建的，现在回过头再看感觉还是很奇妙的，就像和当前的自己产生了连接一样。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一直过的农历生日腊月初十，农历的腊月是个比较尴尬的月份：&lt;/p&gt;
&lt;p&gt;– 你属什么？&lt;/p&gt;
&lt;p&gt;– 属猪&lt;/p&gt;
&lt;p&gt;– 那你是 &lt;code&gt;95&lt;/code&gt; 年生的咯&lt;/p&gt;
&lt;p&gt;– 我是 &lt;code&gt;96&lt;/code&gt; 年生的&lt;/p&gt;
&lt;p&gt;– &lt;code&gt;
      
    
    </summary>
    
    
      <category term="前端" scheme="https://windliang.wang/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="微信小程序" scheme="https://windliang.wang/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>前端 mock 数据的几种方式</title>
    <link href="https://windliang.wang/2022/12/20/%E5%89%8D%E7%AB%AFmock%E6%95%B0%E6%8D%AE%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
    <id>https://windliang.wang/2022/12/20/%E5%89%8D%E7%AB%AFmock%E6%95%B0%E6%8D%AE%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/</id>
    <published>2022-12-20T00:08:50.000Z</published>
    <updated>2022-12-25T05:08:39.385Z</updated>
    
    <content type="html"><![CDATA[<p>具体需求开发前，后端往往只提供接口文档，对于前端，最简单的方式就是把想要的数据写死在代码里进行开发，但这样的坏处就是和后端联调前还需要再把写死的数据从代码里删除，最好的方式是无侵入的 <code>mock</code> 。下边介绍几种常用的方式，大家可以结合自己的项目来选取。</p><p>大致分为三类，重写 <code>xhr/fetch</code>、<code>node.js</code> 服务中转、系统层面拦截。</p><h1 id="接口demo"><a href="#接口demo" class="headerlink" title="接口demo"></a>接口demo</h1><p>为了后边方便的安装 <code>node</code> 包，可以用 <code>webpack</code> 进行打包，具体配置可以参考 <a href="https://windliang.wang/2021/08/19/2021%E5%B9%B4%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%8F%91%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AE%E6%8C%87%E5%8D%97/">2021年从零开发前端项目指南</a>，看到 <code>React</code> 配置的前一步就够了，只需要配置一个 <code>html</code> 和一个接口请求。 需要注意下 <code>webpack</code> 的版本，不同版本后续的配置会不同，这里我用的是 <code>5.75.0</code> 。</p><p>最终目标是通过 <code>mock</code> 让下边还没有开发好的接口正常返回数据：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">fetch(<span class="string">"/api/data"</span>, &#123;</span><br><span class="line">  body: <span class="built_in">JSON</span>.stringify(&#123; <span class="attr">id</span>: <span class="number">10</span> &#125;),</span><br><span class="line">  method: <span class="string">"POST"</span>,</span><br><span class="line">&#125;)</span><br><span class="line">  .then(<span class="function">(<span class="params">response</span>) =&gt;</span> response.json())</span><br><span class="line">  .then(<span class="function">(<span class="params">json</span>) =&gt;</span> <span class="built_in">console</span>.log(json));</span><br></pre></td></tr></table></figure><p>现在肯定是 <code>404</code> 。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20221223093023287.png" alt="image-20221223093023287"></p><h1 id="Better-mock"><a href="#Better-mock" class="headerlink" title="Better-mock"></a>Better-mock</h1><p><strong>better-mock</strong> <code>fork</code> 自 <a href="https://github.com/nuysoft/Mock" target="_blank" rel="noopener">Mock.js</a>，使用方法和 <code>Mock.js</code> 一致，用于 <code>javascript</code> <code>mock</code> 数据生成，它可以拦截 <code>XHR</code> 和 <code>fetch</code> 请求，并返回自定义的数据类型。</p><p>只需要在调用接口前，引入 <code>better-mock</code> 。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Mock <span class="keyword">from</span> <span class="string">"better-mock"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// mock list 返回数组，大小是 1 到 10，对象中的 id 自动加 1</span></span><br><span class="line">Mock.mock(<span class="string">"/api/data"</span>, &#123;</span><br><span class="line">  <span class="string">"list|1-10"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"id|+1"</span>: <span class="number">1</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">fetch(<span class="string">"/api/data"</span>, &#123;</span><br><span class="line">  body: <span class="built_in">JSON</span>.stringify(&#123; <span class="attr">id</span>: <span class="number">10</span> &#125;),</span><br><span class="line">  method: <span class="string">"POST"</span>,</span><br><span class="line">&#125;)</span><br><span class="line">  .then(<span class="function">(<span class="params">response</span>) =&gt;</span> response.json())</span><br><span class="line">  .then(<span class="function">(<span class="params">json</span>) =&gt;</span> <span class="built_in">console</span>.log(json));</span><br></pre></td></tr></table></figure><p>控制台此时就会输出数据了。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20221224203508017.png" alt="image-20221224203508017"></p><p> <code>better-mock</code> 一个好处就是可以通过它既有的语法来生成一些随机的数据，每次请求都会返回不同的数据。</p><p>坏处是会在请求发送前就拦截，导致在 <code>Chrome</code> 控制台就看不见请求了。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20221224203741121.png" alt="image-20221224203741121"></p><h1 id="just-mock"><a href="#just-mock" class="headerlink" title="just mock"></a>just mock</h1><p><a href="https://just-mock.vercel.app/" target="_blank" rel="noopener">just mock</a> 是一个浏览器插件，在代码中什么都不需要更改，只需要添加相应的接口和数据即可实现拦截。</p><p>插件安装好后添加相应的域名就可以拦截到相应的请求。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20221224212934829.png" alt="image-20221224212934829"></p><p>接着进行相应的编辑添加对应的 <code>mock</code> 数据就好。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20221224221427974.png" alt="image-20221224221427974"> </p><p>这样接口就会被拦截，控制台输出预设的数据：</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20221224223523797.png" alt="image-20221224223523797"></p><p>浏览器插件原理和 <code>Better-mock</code> 是一样的，但会更加轻便，无需融入到代码中。两者的原理是一样的，都是在网络请求前重写了全局的 <code>xhr</code> 和 <code>fetch</code> ，具体可以参考 <a href="https://windliang.wang/2022/08/23/%E6%B2%B9%E7%8C%B4%E8%84%9A%E6%9C%AC%E9%87%8D%E6%96%B0fetch%E5%92%8Cxhr%E8%AF%B7%E6%B1%82/">油猴脚本重写fetch和xhr请求</a>。</p><h1 id="koa"><a href="#koa" class="headerlink" title="koa"></a>koa</h1><p>本地通过 <code>koa</code> 开启一个接口服务。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// serve.js</span></span><br><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">"koa"</span>);</span><br><span class="line"><span class="keyword">const</span> router = <span class="built_in">require</span>(<span class="string">"koa-router"</span>)();</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa();</span><br><span class="line"></span><br><span class="line">router.post(<span class="string">"/api/data"</span>, <span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">  ctx.response.body = &#123;</span><br><span class="line">    status: <span class="literal">true</span>,</span><br><span class="line">    data: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">    msg: <span class="string">"获取数据成功"</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// add router middleware:</span></span><br><span class="line">app.use(router.routes());</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure><p>本地开启运行：<code>node server.js</code>，接口提供的地址是 <code>localhost:3000</code>，但是请求的地址是 <code>loacalhost:8080</code> ，当然可以直接修改代码里的地址为 <code>localhost:3000</code> ，但还可以通过 <code>webpack</code>  的配置，将请求转发到 <code>localhost:3000</code> 。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">"path"</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="string">"./src/main.js"</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">"./dist"</span>),</span><br><span class="line">    filename: <span class="string">"bundle.js"</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    <span class="keyword">static</span>: path.resolve(__dirname, <span class="string">"./dist"</span>),</span><br><span class="line">    proxy: &#123;</span><br><span class="line">      <span class="comment">// 将 /api 开头的 http 请求，都代理到 localhost:3000 上，由 koa 提供 mock 数据</span></span><br><span class="line">      <span class="string">"/api"</span>: &#123;</span><br><span class="line">        target: <span class="string">"http://localhost:3000"</span>,</span><br><span class="line">        secure: <span class="literal">false</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这样就可以看到控制台输出了：</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20221225101033687.png" alt="image-20221225101033687"></p><p>此外，<code>Chrome</code> 的 <code>Network</code> 也可以正常看到这个请求：</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20221225101326328.png" alt="image-20221225101326328"></p><p>这种方法也可以用来解决跨域问题，举个例子：</p><p>如果本地想访问一个具体域名的接口，比如请求知乎的热榜接口：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">fetch(</span><br><span class="line">  <span class="string">"https://www.zhihu.com/api/v3/feed/topstory/hot-lists/total?limit=50&amp;desktop=true"</span>,</span><br><span class="line">  &#123;</span><br><span class="line">    headers: &#123;</span><br><span class="line">      accept: <span class="string">"*/*"</span>,</span><br><span class="line">      <span class="string">"accept-language"</span>: <span class="string">"zh-CN,zh;q=0.9,en;q=0.8"</span>,</span><br><span class="line">      <span class="string">"sec-ch-ua"</span>:</span><br><span class="line">        <span class="string">'"Not?A_Brand";v="8", "Chromium";v="108", "Google Chrome";v="108"'</span>,</span><br><span class="line">      <span class="string">"sec-ch-ua-mobile"</span>: <span class="string">"?0"</span>,</span><br><span class="line">      <span class="string">"sec-ch-ua-platform"</span>: <span class="string">'"macOS"'</span>,</span><br><span class="line">      <span class="string">"sec-fetch-dest"</span>: <span class="string">"empty"</span>,</span><br><span class="line">      <span class="string">"sec-fetch-mode"</span>: <span class="string">"cors"</span>,</span><br><span class="line">      <span class="string">"sec-fetch-site"</span>: <span class="string">"same-origin"</span>,</span><br><span class="line">      <span class="string">"x-ab-param"</span>: <span class="string">""</span>,</span><br><span class="line">      <span class="string">"x-ab-pb"</span>:</span><br><span class="line">        <span class="string">"CpoBCAAbAD8ARwC0AGkBagF0ATsCzALXAtgCoAOhA6IDtwOmBNYEEQVRBYsFjAWeBTAGMQbrBicHdAh2CHkI2gg/CWAJwwnECcUJxgnHCcgJyQnKCcsJzAnRCfQJBApJCmUKawqYCqUKqQq+CsQK1ArdCu0K/go7CzwLQwtGC3ELhwuNC9cL4AvlC+YLLAw4DHEMjwysDMMMyQz4DBJNAQAAAAAAAAAAAAAAAAAAAAAEAAEAAAEAAAEAAAIGAAABAAAAAAAAAAAAAAADAAAAAAEAAAABAQAAAAEAAQAAAAUCAQAABgIEAAACAAA="</span>,</span><br><span class="line">      <span class="string">"x-api-version"</span>: <span class="string">"3.0.76"</span>,</span><br><span class="line">      <span class="string">"x-requested-with"</span>: <span class="string">"fetch"</span>,</span><br><span class="line">      <span class="string">"x-zse-93"</span>: <span class="string">"101_3_3.0"</span>,</span><br><span class="line">      <span class="string">"x-zse-96"</span>:</span><br><span class="line">        <span class="string">"2.0_LYJSVCX+9b1YXp/sG1Azyi5tC5RpabLbkXb3w5s6rv=Gxy9uMXqMXm4LjYWRdoIz"</span>,</span><br><span class="line">      <span class="string">"x-zst-81"</span>:</span><br><span class="line">        <span class="string">"3_2.0aR_sn77yn6O92wOB8hPZnQr0EMYxc4f18wNBUgpTQ6nxERFZfRY0-4Lm-h3_tufIwJS8gcxTgJS_AuPZNcXCTwxI78YxEM20s4PGDwN8gGcYAupMWufIoLVqr4gxrRPOI0cY7HL8qun9g93mFukyigcmebS_FwOYPRP0E4rZUrN9DDom3hnynAUMnAVPF_PhaueTF4C8IhwVIDO_8ioC0JXfW9CKpCwCs4OBQAc0uBefagCKGMo1yroBh9CKe_STVHC1IqLKHJL_chSflqHCOqgYPhYKVwH8M4Lqqq9y1wH967NC7vH80UC8wCHswgHBDgY_ovg9r0wBcJO8s9OCzcLMNgLfkgNByqCLhhUf_veOQRY_dvxmCg_zugS8iBtBFgOZkwNLDw2skTX18XSYuJLqpCYBo_pMWbS8Pv3YtGFBaqL9AwCYhbL9eGVV2rNClDL1wJLmxCgKagNBUwSqYrHBbGp8e8HGggSMQ7xC3rOs"</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    referrer: <span class="string">"https://www.zhihu.com/hot"</span>,</span><br><span class="line">    referrerPolicy: <span class="string">"no-referrer-when-downgrade"</span>,</span><br><span class="line">    body: <span class="literal">null</span>,</span><br><span class="line">    method: <span class="string">"GET"</span>,</span><br><span class="line">    mode: <span class="string">"cors"</span>,</span><br><span class="line">    credentials: <span class="string">"include"</span>,</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>由于本地域名是 <code>http://localhost:8080/</code> ，此时浏览器就会报跨域的错了。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20221225102517407.png" alt="image-20221225102517407"></p><p>此时后端可以通过 <code>CORS</code> 策略解决跨域的问题，但因为是测试环境，后端可能会说你自己解决吧，此时就可以通过 <code>Koa</code> 进行中转。</p><p>改写一下 <code>Koa</code> 的代码，先请求后端的接口，接着将收到的数据拿到后返回。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Koa <span class="keyword">from</span> <span class="string">"koa"</span>;</span><br><span class="line"><span class="keyword">import</span> fetch <span class="keyword">from</span> <span class="string">"node-fetch"</span>;</span><br><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">"koa-router"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa();</span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> Router();</span><br><span class="line">router.post(<span class="string">"/api/data"</span>, <span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> res = <span class="keyword">await</span> fetch(</span><br><span class="line">    <span class="string">"https://www.zhihu.com/api/v3/feed/topstory/hot-lists/total?limit=50&amp;desktop=true"</span>,</span><br><span class="line">    &#123;</span><br><span class="line">      headers: &#123;</span><br><span class="line">        accept: <span class="string">"*/*"</span>,</span><br><span class="line">        <span class="string">"accept-language"</span>: <span class="string">"zh-CN,zh;q=0.9,en;q=0.8"</span>,</span><br><span class="line">        <span class="string">"sec-ch-ua"</span>:</span><br><span class="line">          <span class="string">'"Not?A_Brand";v="8", "Chromium";v="108", "Google Chrome";v="108"'</span>,</span><br><span class="line">        <span class="string">"sec-ch-ua-mobile"</span>: <span class="string">"?0"</span>,</span><br><span class="line">        <span class="string">"sec-ch-ua-platform"</span>: <span class="string">'"macOS"'</span>,</span><br><span class="line">        <span class="string">"sec-fetch-dest"</span>: <span class="string">"empty"</span>,</span><br><span class="line">        <span class="string">"sec-fetch-mode"</span>: <span class="string">"cors"</span>,</span><br><span class="line">        <span class="string">"sec-fetch-site"</span>: <span class="string">"same-origin"</span>,</span><br><span class="line">        <span class="string">"x-ab-param"</span>: <span class="string">""</span>,</span><br><span class="line">        <span class="string">"x-ab-pb"</span>:</span><br><span class="line">          <span class="string">"CpoBCAAbAD8ARwC0AGkBagF0ATsCzALXAtgCoAOhA6IDtwOmBNYEEQVRBYsFjAWeBTAGMQbrBicHdAh2CHkI2gg/CWAJwwnECcUJxgnHCcgJyQnKCcsJzAnRCfQJBApJCmUKawqYCqUKqQq+CsQK1ArdCu0K/go7CzwLQwtGC3ELhwuNC9cL4AvlC+YLLAw4DHEMjwysDMMMyQz4DBJNAQAAAAAAAAAAAAAAAAAAAAAEAAEAAAEAAAEAAAIGAAABAAAAAAAAAAAAAAADAAAAAAEAAAABAQAAAAEAAQAAAAUCAQAABgIEAAACAAA="</span>,</span><br><span class="line">        <span class="string">"x-api-version"</span>: <span class="string">"3.0.76"</span>,</span><br><span class="line">        <span class="string">"x-requested-with"</span>: <span class="string">"fetch"</span>,</span><br><span class="line">        <span class="string">"x-zse-93"</span>: <span class="string">"101_3_3.0"</span>,</span><br><span class="line">        <span class="string">"x-zse-96"</span>:</span><br><span class="line">          <span class="string">"2.0_LYJSVCX+9b1YXp/sG1Azyi5tC5RpabLbkXb3w5s6rv=Gxy9uMXqMXm4LjYWRdoIz"</span>,</span><br><span class="line">        <span class="string">"x-zst-81"</span>:</span><br><span class="line">          <span class="string">"3_2.0aR_sn77yn6O92wOB8hPZnQr0EMYxc4f18wNBUgpTQ6nxERFZfRY0-4Lm-h3_tufIwJS8gcxTgJS_AuPZNcXCTwxI78YxEM20s4PGDwN8gGcYAupMWufIoLVqr4gxrRPOI0cY7HL8qun9g93mFukyigcmebS_FwOYPRP0E4rZUrN9DDom3hnynAUMnAVPF_PhaueTF4C8IhwVIDO_8ioC0JXfW9CKpCwCs4OBQAc0uBefagCKGMo1yroBh9CKe_STVHC1IqLKHJL_chSflqHCOqgYPhYKVwH8M4Lqqq9y1wH967NC7vH80UC8wCHswgHBDgY_ovg9r0wBcJO8s9OCzcLMNgLfkgNByqCLhhUf_veOQRY_dvxmCg_zugS8iBtBFgOZkwNLDw2skTX18XSYuJLqpCYBo_pMWbS8Pv3YtGFBaqL9AwCYhbL9eGVV2rNClDL1wJLmxCgKagNBUwSqYrHBbGp8e8HGggSMQ7xC3rOs"</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      referrer: <span class="string">"https://www.zhihu.com/hot"</span>,</span><br><span class="line">      referrerPolicy: <span class="string">"no-referrer-when-downgrade"</span>,</span><br><span class="line">      body: <span class="literal">null</span>,</span><br><span class="line">      method: <span class="string">"GET"</span>,</span><br><span class="line">      mode: <span class="string">"cors"</span>,</span><br><span class="line">      credentials: <span class="string">"include"</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  );</span><br><span class="line">  <span class="keyword">const</span> data = <span class="keyword">await</span> res.json();</span><br><span class="line">  ctx.response.body = &#123;</span><br><span class="line">    status: <span class="literal">true</span>,</span><br><span class="line">    data,</span><br><span class="line">    msg: <span class="string">"获取数据成功"</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;);</span><br><span class="line">app.use(router.routes());</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure><p>此时还是请求 <code>/api/data</code> 。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">fetch(<span class="string">"/api/data"</span>, &#123;</span><br><span class="line">  body: <span class="built_in">JSON</span>.stringify(&#123; <span class="attr">id</span>: <span class="number">10</span> &#125;),</span><br><span class="line">  method: <span class="string">"POST"</span>,</span><br><span class="line">&#125;)</span><br><span class="line">  .then(<span class="function">(<span class="params">response</span>) =&gt;</span> response.json())</span><br><span class="line">  .then(<span class="function">(<span class="params">json</span>) =&gt;</span> <span class="built_in">console</span>.log(json));</span><br></pre></td></tr></table></figure><p>依旧让 <code>Webpack</code> 将数据转发到 <code>Koa</code> 。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">devServer: &#123;</span><br><span class="line">    <span class="keyword">static</span>: path.resolve(__dirname, <span class="string">"./dist"</span>),</span><br><span class="line">    proxy: &#123;</span><br><span class="line">      <span class="comment">// 将 `/api` 开头的 http 请求，都代理到 `localhost:3000` 上，由 koa 提供 mock 数据</span></span><br><span class="line">      <span class="string">"/api"</span>: &#123;</span><br><span class="line">        target: <span class="string">"http://localhost:3000"</span>,</span><br><span class="line">        secure: <span class="literal">false</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p>现在控制台输出的就是知乎返回的数据了，跨域问题也消失了：</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20221225104513837.png" alt="image-20221225104513837"></p><p>当然上边解决跨域只是一个思路，具体的封装还需要结合项目来进行。</p><h1 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h1><p>上边可以通过 <code>webpack</code> 进行转发数据，是因为 <code>webpack</code> 也启动了一个 <code>HTTP</code> 服务器，只不过用的不是 <code>Koa</code> ，是更早的一个框架 <code>Express</code> ，而且它们是同一个团队开发的。</p><p>既然已经有了一个 <code>HTTP</code> 服务器，所以也没必要再开启另一个 <code>Koa</code> 的了，通过给 <code>webpack</code> 传递一个函数，重写 <code>Koa</code> 返回的数据即可。</p><p>只需要通过 <code>setupMiddlewares</code> 重写数据即可。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">"path"</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="string">"./src/main.js"</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">"./dist"</span>),</span><br><span class="line">    filename: <span class="string">"bundle.js"</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    <span class="keyword">static</span>: path.resolve(__dirname, <span class="string">"./dist"</span>),</span><br><span class="line">    setupMiddlewares: <span class="function">(<span class="params">middlewares, devServer</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (!devServer) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"webpack-dev-server is not defined"</span>);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      middlewares.unshift(&#123;</span><br><span class="line">        path: <span class="string">"/api/data"</span>,</span><br><span class="line">        middleware: <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="comment">// mock 数据模拟接口数据</span></span><br><span class="line">          res.send(&#123; <span class="attr">list</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="attr">msg</span>: <span class="string">"webpack mock"</span> &#125;);</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> middlewares;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>此时控制台也可以看到输出的内容：</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20221225111041070.png" alt="image-20221225111041070"></p><p>同时 <code>Network</code> 也是可以看到网络请求的。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20221225111123332.png" alt="image-20221225111123332"></p><h1 id="Charles"><a href="#Charles" class="headerlink" title="Charles"></a>Charles</h1><p>终极必杀 <code>mock</code> 方法，因为它除了可以拦截浏览器中的请求，也可以拦截任意 <code>App</code> 的数据，甚至还可以拦截手机中的 <code>HTTPS</code> 请求，前段时间很火的羊了个羊就可以通过 <code>Charles</code> 抓取请求然后迅速通关。</p><p>需要注意的是 <code>Charles</code> 抓不到 <code>localhost</code> 的请求，访问的时候需要将 <code>localhost</code> 改为 <code>localhost.charlesproxy.com</code>。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20221225122855681.png" alt="image-20221225122855681"></p><p><code>webpack</code> 需要加一个 <code>allowedHosts</code> 的配置，不然会返回 <code>Invalid Host header</code> 。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">devServer: &#123;</span><br><span class="line">  <span class="keyword">static</span>: path.resolve(__dirname, <span class="string">"./dist"</span>),</span><br><span class="line">    allowedHosts: <span class="string">"all"</span>,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>全部配置好后就可以看到 <code>Charles</code> 抓到的请求了。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20221225115539515.png" alt="image-20221225115539515"></p><p>此时只需要提前写好一个 <code>json</code> 文件，然后将右键选择 <code>Map Local</code> 对应的文件即可。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20221225115824423.png" alt="image-20221225115824423"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"data"</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">  <span class="string">"msg"</span>: <span class="string">"from charles"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来就可以在控制台看到 <code>mock</code> 成功了。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20221225120440472.png" alt="image-20221225120440472"></p><h1 id="总"><a href="#总" class="headerlink" title="总"></a>总</h1><p>几种 <code>mock</code> 方式各有优缺点，上边只是提供一个思路，具体的 <code>mock</code> 方案就需要结合项目进行一定的封装了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;具体需求开发前，后端往往只提供接口文档，对于前端，最简单的方式就是把想要的数据写死在代码里进行开发，但这样的坏处就是和后端联调前还需要再把写死的数据从代码里删除，最好的方式是无侵入的 &lt;code&gt;mock&lt;/code&gt; 。下边介绍几种常用的方式，大家可以结合自己的项目来选取
      
    
    </summary>
    
    
      <category term="前端" scheme="https://windliang.wang/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="https://windliang.wang/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>前端er开发cocos小游戏快速入门</title>
    <link href="https://windliang.wang/2022/11/07/%E5%89%8D%E7%AB%AFer%E5%BC%80%E5%8F%91cocos%E5%B0%8F%E6%B8%B8%E6%88%8F%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"/>
    <id>https://windliang.wang/2022/11/07/%E5%89%8D%E7%AB%AFer%E5%BC%80%E5%8F%91cocos%E5%B0%8F%E6%B8%B8%E6%88%8F%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</id>
    <published>2022-11-07T00:56:38.000Z</published>
    <updated>2022-11-30T00:45:21.369Z</updated>
    
    <content type="html"><![CDATA[<p>前段时间一直在更 <a href="https://vue.windliang.wang/" target="_blank" rel="noopener">vue2的源码系列</a>，最近换了换口味，学了一下 <code>cocos</code> ，照猫画虎的写了一个「挑战1024」小游戏。</p><p>学习一门新语言或者新框架其实就是一个堆时间的过程了，整个过程就是结合已有经验进行不同的猜测，然后验证，搞不定就去官网或者搜索引擎找答案，<code>99.9%</code> 的问题应该都能找到。</p><p><code>cocos</code> 网上很多是视频教程，虽然对新手友好，但是信息密度太低了，这里我总结一下 <code>cocos</code> 专有的或者不太符合直觉的一些点，前端的同学看完以后能更快的进入 <code>cocos</code> 的开发中。</p><p>建议先跟着官方的 <a href="https://docs.cocos.com/creator/manual/zh/getting-started/first-game/" target="_blank" rel="noopener">快速上手</a> 先一步一步实现一个小游戏，再读下边的文章效果会更佳。</p><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p><code>cocos</code> 提供了游戏引擎，一些常用的操作，碰撞检测、重力模拟、变换位置、旋转、缩放、粒子系统等都可以通过配置一键实现，游戏引擎最终会帮我们把界面渲染到 <code>canvas</code> 节点上。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20221113101837574.png" alt="image-20221113101837574"></p><p>因为是渲染至 <code>canvas</code> ，当然很自然的可以支持跨端，一套代码可以编译至 <code>h5</code>、微信小游戏等平台。</p><p>同一个功能不同平台之间有不同的 <code>api</code> ，比如 <code>localstorage</code> 的使用会有所不同，<code>cocos</code> 会帮我们在上层抹平，只需要按照 <code>cocos</code> 的语法编写，编译的时候选择相应的平台就会转成对应平台的 <code>api</code>。</p><h1 id="编辑器"><a href="#编辑器" class="headerlink" title="编辑器"></a>编辑器</h1><p><code>cocos</code> 开发和平常的前端开发不太一样，它是代码结合 <code>UI</code> 拖拽来实现的，通过拖拽我们可以快速的布局、添加组件、设置属性等。</p><p>基于此，项目和编辑器就有了强绑定的关系，如果下载别人的项目，还需要下载相应的编辑器。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20221113104527992.png" alt="image-20221113104527992"></p><p>打开项目的时候需要选择相应的编辑器。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20221113104543991.png" alt="image-20221113104543991"></p><p>当然，如果编辑器差的版本比较小，<code>Cocos</code> 也可以帮我们自动升级项目的编辑器版本。如果是 <code>2.x</code> 升到 <code>3.x</code> 就会有 <code>break changes</code> ，需要手动进行一些代码的兼容。</p><p><code>ps</code>：<code>MAC</code> <code>M1</code> 版本不支持 <code>2.4.5</code> 以下的版本。</p><h1 id="场景-Scene"><a href="#场景-Scene" class="headerlink" title="场景/Scene"></a>场景/Scene</h1><p>游戏的 <code>ui</code> 、逻辑都挂载在某个场景（<code>Scene</code>）下，可以在资源管理器右键创建场景，然后双击打开。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20221113110410892.png" alt="image-20221113110410892"></p><p>接下来我们就可以在当前 <code>Canvas</code> 添加各种节点和代码逻辑了。</p><p>游戏如果有多个页面，可以新建多个场景各自维护。</p><p>ps：如果从导入网上下载的 <code>cocos</code> 项目，场景不会自动加载，需要双击一下场景然后再预览。</p><h1 id="节点-Node"><a href="#节点-Node" class="headerlink" title="节点/Node"></a>节点/Node</h1><p>我们可以通过右键创建节点，除了空结点，还帮我们预设了其他的很多节点，比如 <code>Label</code> 、<code>Button</code> 等。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20221113112755384.png" alt="image-20221113112755384"></p><p>节点是树状关系，每个节点可以得到它的父节点，也可以得到它的子节点。</p><p>比如我们可以通过 <code>getChildByName</code> 得到它的子节点。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.node.getChildByName(<span class="string">"message"</span>); <span class="comment">// 得到相应的 Node 节点</span></span><br></pre></td></tr></table></figure><p>通过 <code>this.node.parent</code> 拿到它的父节点。</p><h1 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h1><p>一个空结点只有一些位置、大小属性。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20221113153540396.png" alt="image-20221113153540396"></p><p>我们可以在 <code>Node</code> 节点上挂载一些组件让 <code>Node</code> 拥有样式和功能。</p><h2 id="Label-组件"><a href="#Label-组件" class="headerlink" title="Label 组件"></a>Label 组件</h2><p>如果我们创建一个 <code>Label</code> 节点，会自动挂一个 <code>Label</code> 组件。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20221113153748303.png" alt="image-20221113153748303"></p><p>通过 <code>Label</code> 组件我们可以设置文案 、字体大小等，展示到场景中的就是一个普通的 <code>Label</code>。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20221113153900887.png" alt="image-20221113153900887"></p><h2 id="图片组件"><a href="#图片组件" class="headerlink" title="图片组件"></a>图片组件</h2><p>我们可以通过将「资源管理器」中的图片拖动到「层级管理器」中生成一个带背景的 <code>Node</code> 节点。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20221113154522620.png" alt="image-20221113154522620"></p><p>拖过去之后会生成一个带有 <code>Sprite</code> 组件的节点，并将该图片设置为 <code>Sprite Frame</code> 属性的值，这样这张图片就会展示到场景中了。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20221113154930782.png" alt="image-20221113154930782"></p><p>如果想要更改图片，只要把 <code>Sprite Frame</code> 属性清空，重新拖一个图片上去即可。</p><h2 id="脚本组件"><a href="#脚本组件" class="headerlink" title="脚本组件"></a>脚本组件</h2><p>这个是最重要的，我们可以编写游戏逻辑，设置一些点击监听、节点之间联动等逻辑，然后挂到 <code>Node</code> 节点上。</p><p>先新建一个 <code>js</code> 文件，会自动帮我们生成带有生命周期的一些代码。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20221113160458554.png" alt="image-20221113160458554"></p><p>双击打开新建的 <code>js</code> 文件，我们可以把文件和 <code>VSCode</code> 关联，用 <code>VSCode</code> 进行代码的编辑。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Learn cc.Class:</span></span><br><span class="line"><span class="comment">//  - https://docs.cocos.com/creator/manual/en/scripting/class.html</span></span><br><span class="line"><span class="comment">// Learn Attribute:</span></span><br><span class="line"><span class="comment">//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html</span></span><br><span class="line"><span class="comment">// Learn life-cycle callbacks:</span></span><br><span class="line"><span class="comment">//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html</span></span><br><span class="line"></span><br><span class="line">cc.Class(&#123;</span><br><span class="line">    extends: cc.Component,</span><br><span class="line"></span><br><span class="line">    properties: &#123;</span><br><span class="line">        <span class="comment">// foo: &#123;</span></span><br><span class="line">        <span class="comment">//     // ATTRIBUTES:</span></span><br><span class="line">        <span class="comment">//     default: null,        // The default value will be used only when the component attaching</span></span><br><span class="line">        <span class="comment">//                           // to a node for the first time</span></span><br><span class="line">        <span class="comment">//     type: cc.SpriteFrame, // optional, default is typeof default</span></span><br><span class="line">        <span class="comment">//     serializable: true,   // optional, default is true</span></span><br><span class="line">        <span class="comment">// &#125;,</span></span><br><span class="line">        <span class="comment">// bar: &#123;</span></span><br><span class="line">        <span class="comment">//     get () &#123;</span></span><br><span class="line">        <span class="comment">//         return this._bar;</span></span><br><span class="line">        <span class="comment">//     &#125;,</span></span><br><span class="line">        <span class="comment">//     set (value) &#123;</span></span><br><span class="line">        <span class="comment">//         this._bar = value;</span></span><br><span class="line">        <span class="comment">//     &#125;</span></span><br><span class="line">        <span class="comment">// &#125;,</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// LIFE-CYCLE CALLBACKS:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// onLoad () &#123;&#125;,</span></span><br><span class="line"></span><br><span class="line">    start () &#123;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// update (dt) &#123;&#125;,</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>properties</code> 是脚本组件的属性，写在这里的属性可以在 <code>Cocos</code> 的界面上看到。</p><p>比较重要是 <code>OnLoad</code> 和 <code>update</code> 两个生命周期，<code>OnLoad</code> 会在组件渲染前进行执行，这里我们可以进行一些初始化的操作，<code>update</code> 生命周期会在每一帧渲染前执行，这里我们就可以更新节点的位置让一些节点动起来。</p><p>文件编写好以后，我们可以以组件的形式逻辑挂载到相应的 <code>Node</code> 节点上。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20221113161547263.png" alt="image-20221113161547263"></p><h2 id="Widget-组件"><a href="#Widget-组件" class="headerlink" title="Widget 组件"></a>Widget 组件</h2><p>这个比较简单，它可以设置和边界的相对距离。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20221113173512981.png" alt="image-20221113173512981"></p><h2 id="碰撞组件"><a href="#碰撞组件" class="headerlink" title="碰撞组件"></a>碰撞组件</h2><p>两个 <code>Node</code> 节点相撞，我们可以根据它们的坐标手动进行判断，也可以在 <code>Node</code> 节点上挂载碰撞组件，设置它们的分组，然后在脚本组件中增加 <code>onCollisionEnter</code> 回调函数即可。</p><p>添加 <code>BoxCollider</code> 组件。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20221113162101123.png" alt="image-20221113162101123"></p><p>设置 <code>Node</code> 中的 <code>Group</code> 属性。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20221113162143563.png" alt="image-20221113162143563"></p><p><code>Group</code> 我们可以手动进行管理，并且设置哪些 <code>Group</code> 产生碰撞。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20221113162918517.png" alt="image-20221113162918517"></p><p>接下来还需要在游戏最开始的时候开始碰撞检测，可以给层级节点中的 <code>Canvas</code> 节点添加一个用户脚本组件 <code>game.js</code> ，然后修改脚本组件的 <code>OnLoad</code> 中调用下边的方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> collisionManager = cc.director.getCollisionManager();</span><br><span class="line">collisionManager.enabled = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure><p>最后在相应的 <code>Node</code> 节点的用户脚本中添加 <code>onCollisionEnter</code> 回调函数进行碰撞后的逻辑即可。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">onCollisionEnter(other) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.game.continueIng &amp;&amp; other.node.name !== <span class="string">"ground"</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">switch</span> (other.node.name) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"star"</span>:</span><br><span class="line">      <span class="keyword">this</span>.handleStar(other);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"meteorites"</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"ground"</span>:</span><br><span class="line">      <span class="keyword">this</span>.game.endGame();</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>通过回调参数 <code>other</code> 可以拿到碰撞的节点。</p><h2 id="刚体组件"><a href="#刚体组件" class="headerlink" title="刚体组件"></a>刚体组件</h2><p>这里通过刚体组件我们可以实现物体受到重力的效果。</p><p>首先给节点添加一个 <code>RightBody</code> 组件，并且将类型设置为 <code>Dynamic</code> 。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20221113165834371.png" alt="image-20221113165834371"></p><p>和碰撞组件一样，我们在 <code>Canvas</code> 对应的用户脚本组件的 <code>OnLoad</code> 中调用下边的方法开启重力模拟即可。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> instance = cc.director.getPhysicsManager();</span><br><span class="line">instance.enabled = <span class="literal">true</span>;</span><br><span class="line">instance.gravity = cc.v2(<span class="number">0</span>, <span class="number">-980</span> * <span class="number">2</span>);</span><br></pre></td></tr></table></figure><p>这样相应的节点就会受到重力的作用了。</p><h2 id="动画组件"><a href="#动画组件" class="headerlink" title="动画组件"></a>动画组件</h2><p>在层级管理器选中相应的节点，点击「动画编辑器」，然后添加一个 <code>Animation</code> 组件</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20221113165636129.png" alt="image-20221113165636129"></p><p>接着添加一个 <code>Clip</code>，并进行编辑，设置动画的关键帧等，有点像 <code>photoShop</code> 里的动画编辑器。</p><p>保存后将新建的 <code>Clip</code> 拖到到对应的属性上即可。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20221113170821916.png" alt="image-20221113170821916"></p><h2 id="防穿透组件"><a href="#防穿透组件" class="headerlink" title="防穿透组件"></a>防穿透组件</h2><p><code>button</code> 被弹窗盖住，此时 <code>button</code> 依旧会响应到点击时间，此时可以通过给弹窗增加 <code>BlockInputEvents</code> 防止点击穿透。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20221119205327720.png" alt="image-20221119205327720"></p><p>需要点击的时候激活，关闭的时候取消激活。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.node.getComponent(cc.BlockInputEvents).enabled = <span class="literal">true</span>; <span class="comment">// 点击的时候激活</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.node.getComponent(cc.BlockInputEvents).enabled = <span class="literal">false</span>;  <span class="comment">// 关闭的时候取消激活</span></span><br></pre></td></tr></table></figure><h1 id="坐标系"><a href="#坐标系" class="headerlink" title="坐标系"></a>坐标系</h1><p>设置的 <code>positon</code> 是在父节点坐标系下的位置。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20221113173906330.png" alt=""></p><p>如果它有子节点，它的子节点设置的 <code>positon</code> 就是基于上边的红线和绿线为坐标轴进行排布。</p><h1 id="脚本组件属性"><a href="#脚本组件属性" class="headerlink" title="脚本组件属性"></a>脚本组件属性</h1><p>我们可以脚本组件中添加一些属性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">properties: &#123;</span><br><span class="line">       bird: &#123;</span><br><span class="line">           <span class="keyword">default</span>: <span class="literal">null</span>,</span><br><span class="line">           type: Bird,</span><br><span class="line">       &#125;,</span><br><span class="line">       gravity: cc.v2(<span class="number">0</span>, <span class="number">-980</span> * <span class="number">2</span>),</span><br><span class="line">       starPool: &#123;</span><br><span class="line">           <span class="keyword">default</span>: <span class="literal">null</span>,</span><br><span class="line">           type: StarPool,</span><br><span class="line">       &#125;,</span><br><span class="line">       scoreDisplay: &#123;</span><br><span class="line">           <span class="keyword">default</span>: <span class="literal">null</span>,</span><br><span class="line">           type: cc.Label,</span><br><span class="line">       &#125;,</span><br><span class="line">       scoreResult: &#123;</span><br><span class="line">           <span class="keyword">default</span>: <span class="literal">null</span>,</span><br><span class="line">           type: cc.Node,</span><br><span class="line">       &#125;,</span><br><span class="line">       successAudio: &#123;</span><br><span class="line">           <span class="keyword">default</span>: <span class="literal">null</span>,</span><br><span class="line">           type: cc.AudioClip,</span><br><span class="line">       &#125;,</span><br><span class="line">       failAudio: &#123;</span><br><span class="line">           <span class="keyword">default</span>: <span class="literal">null</span>,</span><br><span class="line">           type: cc.AudioClip,</span><br><span class="line">       &#125;,</span><br><span class="line">   &#125;,</span><br></pre></td></tr></table></figure><p>这样在 <code>cocos</code> 编辑器中我们可以通过拖动进行属性的初始化。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20221113172140746.png" alt="image-20221113172140746"></p><p>值的注意的是，如果我们在 <code>properties</code> 外边写属性，比如下边的 <code>num</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">cc.Class(&#123;</span><br><span class="line">    extends: cc.Component,</span><br><span class="line"></span><br><span class="line">    properties: &#123;</span><br><span class="line">        <span class="comment">// foo: &#123;</span></span><br><span class="line">        <span class="comment">//     // ATTRIBUTES:</span></span><br><span class="line">        <span class="comment">//     default: null,        // The default value will be used only when the component attaching</span></span><br><span class="line">        <span class="comment">//                           // to a node for the first time</span></span><br><span class="line">        <span class="comment">//     type: cc.SpriteFrame, // optional, default is typeof default</span></span><br><span class="line">        <span class="comment">//     serializable: true,   // optional, default is true</span></span><br><span class="line">        <span class="comment">// &#125;,</span></span><br><span class="line">        <span class="comment">// bar: &#123;</span></span><br><span class="line">        <span class="comment">//     get () &#123;</span></span><br><span class="line">        <span class="comment">//         return this._bar;</span></span><br><span class="line">        <span class="comment">//     &#125;,</span></span><br><span class="line">        <span class="comment">//     set (value) &#123;</span></span><br><span class="line">        <span class="comment">//         this._bar = value;</span></span><br><span class="line">        <span class="comment">//     &#125;</span></span><br><span class="line">        <span class="comment">// &#125;,</span></span><br><span class="line">    &#125;,</span><br><span class="line">  </span><br><span class="line">  num: <span class="number">0</span>, <span class="comment">// 自定义属性</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// LIFE-CYCLE CALLBACKS:</span></span><br><span class="line"></span><br><span class="line">    onLoad () &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.num)</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    start () &#123;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// update (dt) &#123;&#125;,</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>此时我们在 <code>onLoad</code> 打印该值只会是 <code>undefind</code> ，如果想在当前实例上挂载属性，我们可以选择在 <code>onLoad</code> 中进行值的初始化。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">onLoad () &#123;</span><br><span class="line">  <span class="keyword">this</span>.num = <span class="number">2</span>; <span class="comment">// 自定义属性</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>这里需要注意的是如果改变脚本代码，保存后我们需要重新切到 <code>Cocos</code> 的编辑页面 才会重新进行编译。</p><h1 id="Prelab"><a href="#Prelab" class="headerlink" title="Prelab"></a>Prelab</h1><p>节点可以在编辑器生成，当然也可以通过代码动态生成。对于需要重复生成的节点，我们可以将它保存成 <code>Prefab</code>（预制）资源，作为我们动态生成节点时使用的模板。</p><p>做法就是在「层级管理器」随便新建一个 <code>Node</code> 节点，并且添加所需要的组件和自定义的脚本组件，最后将该 <code>node</code> 节点拖动到「资源管理器」即可。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20221114064750298.png" alt="image-20221114064750298"></p><p>之后我们就可以层级管理器中刚新建的节点删除。当然，为了后续方便编辑，该 <code>Node</code> 节点也可以保留，但需要将其放到画面外，并且将脚本组件取消勾选一下，不执行逻辑。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20221114065217375.png" alt="image-20221114065217375"></p><p>有了预制资源后，我们可以通过下边的代码来动态生成 <code>Node</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> newStar = cc.instantiate(<span class="keyword">this</span>.starPrefab); <span class="comment">// 根据预置资源生成 node 节点</span></span><br><span class="line">newStar.getComponent(<span class="string">"Star"</span>).init(<span class="keyword">this</span>, <span class="keyword">this</span>.game); <span class="comment">// 根据 node 节点的脚本组件进行初始化</span></span><br><span class="line"><span class="keyword">this</span>.node.addChild(newStar); <span class="comment">// 加到当前 node 节点的下面</span></span><br></pre></td></tr></table></figure><p>对于画面中移动的 <code>node</code> ，当移出画面后我们可以进行重复利用，这里可以引入 <code>NodePool</code> ，出画面后加入节点池，需要的时候再从里边拿。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.pool = <span class="keyword">new</span> cc.NodePool();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 放入节点池</span></span><br><span class="line"><span class="keyword">this</span>.pool.put(star);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 需要的时候从里边拿</span></span><br><span class="line"><span class="keyword">const</span> newStar = <span class="keyword">this</span>.pool.get();</span><br></pre></td></tr></table></figure><p>通过节点池我们可以节省内存的开销。</p><h1 id="Node-和-组件"><a href="#Node-和-组件" class="headerlink" title="Node 和 组件"></a>Node 和 组件</h1><p><code>Node</code> 和组件的关系最开始的时候有点懵逼，慢慢的调试后大致了解了，下边讲一下我的理解。</p><p>在定义 <code>properties</code> 的时候我们需要定义对象的属性，它可以是 <code>type: cc.Node,</code> ，也可以是自带的组件类型 <code>type: cc.Label</code> ，也可以是我们定义的脚本组件类型，可以先将编写的脚本代码引入 <code>const Bird = require(&quot;Bird&quot;);</code> ，然后将其作为一种类型  <code>type: Bird</code>。</p><p>一个节点属于复合类型，它既是本身的 <code>cc.Node</code> 类型，如果添加了相应的组件，它也是相应的组件类型。</p><p>以下图为例，它既是 <code>cc.Node</code> 类型，也是 <code>cc.Label</code> 类型，还是 <code>test</code> 类型。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20221113174535576.png" alt="image-20221113174535576"></p><p>下边以动态修改 <code>Label</code> 的值，讲一下 <code>Node</code> 和组件之间的关系。</p><p>首先新建一个 <code>canvas</code> 的脚本组件 <code>game.js</code> ，将该组件挂载到 <code>canvas</code> 节点中。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20221113182122357.png" alt="image-20221113182122357"></p><p><code>game.js</code> 中添加一个 <code>label</code> 属性，类型为 <code>cc.Node</code> 。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">cc.Class(&#123;</span><br><span class="line">    extends: cc.Component,</span><br><span class="line">    properties: &#123;</span><br><span class="line">        label: &#123;</span><br><span class="line">            <span class="keyword">default</span>: <span class="literal">null</span>,</span><br><span class="line">            type: cc.Node,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    onLoad() &#123;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    start() &#123;&#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// update (dt) &#123;&#125;,</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>选中 <code>Canvas</code> 节点，将 <code>FirstLabel</code> 节点拖动添加的属性中。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20221113174930670.png" alt="image-20221113174930670"></p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20221113175131343.png" alt="image-20221113175131343"></p><p>虽然 <code>firstLabel</code> 属于三种类型，但因为我们定义的类型是 <code>cc.Node</code> ，因此拿到的是一个 <code>Node</code> 对象，我们打印看一下。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">onLoad() &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.label);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20221113175207934.png" alt="image-20221113175207934"></p><p>如果想要在运行的时候改变当前节点的位置，调用 <code>setPositon</code> 即可。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">cc.Class(&#123;</span><br><span class="line">    extends: cc.Component,</span><br><span class="line"></span><br><span class="line">    properties: &#123;</span><br><span class="line">        label: &#123;</span><br><span class="line">            <span class="keyword">default</span>: <span class="literal">null</span>,</span><br><span class="line">            type: cc.Node,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    onLoad() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.label);</span><br><span class="line">        <span class="keyword">this</span>.label.setPosition(cc.v2(<span class="number">0</span>, <span class="number">-200</span>));</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    start() &#123;&#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// update (dt) &#123;&#125;,</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>如果我们想改变组件的文案，我们需要先通过 <code>getComponent</code> 拿到 <code>Label</code> 组件的实例对象，然后更新 <code>string</code> 属性即可。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">onLoad() &#123;</span><br><span class="line">       <span class="built_in">console</span>.log(<span class="keyword">this</span>.label);</span><br><span class="line">       <span class="keyword">this</span>.label.setPosition(cc.v2(<span class="number">0</span>, <span class="number">-200</span>));</span><br><span class="line">       <span class="keyword">this</span>.label.getComponent(cc.Label).string = <span class="string">"我改变了"</span>;</span><br><span class="line">   &#125;,</span><br></pre></td></tr></table></figure><p>初值设置的是 <code>设置文案</code>。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20221113175852560.png" alt="image-20221113175852560"></p><p>运行起来会发现是我们在 <code>onLoad</code> 中设置的值。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20221113180058709.png" alt="image-20221113180058709"></p><p>当然，我们也可以在开始的时候将组件类型设置为 <code>cc.Label</code> ，这样我们开始拿到的就是 <code>Label</code> 实例对象，就不需要再通过 <code>getComponent</code>  方法了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">cc.Class(&#123;</span><br><span class="line">    extends: cc.Component,</span><br><span class="line"></span><br><span class="line">    properties: &#123;</span><br><span class="line">        label: &#123;</span><br><span class="line">            <span class="keyword">default</span>: <span class="literal">null</span>,</span><br><span class="line">            type: cc.Label,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    onLoad() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.label);</span><br><span class="line">        <span class="keyword">this</span>.label.string = <span class="string">"我改变了"</span>;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    start() &#123;&#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// update (dt) &#123;&#125;,</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>改为代码后我们重新拖动，更新下属性的值。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20221113180445655.png" alt="image-20221113180445655"></p><p>那么如果我们想改变 <code>node</code> 位置该怎么办呢？</p><p>获得的组件实例中有一个 <code>node</code> 属性，我们可以直接拿到当前的 <code>node</code> 对象实例，然后继续调用 <code>setPosition</code> 就可以了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">cc.Class(&#123;</span><br><span class="line">    extends: cc.Component,</span><br><span class="line"></span><br><span class="line">    properties: &#123;</span><br><span class="line">        label: &#123;</span><br><span class="line">            <span class="keyword">default</span>: <span class="literal">null</span>,</span><br><span class="line">            type: cc.Label,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    onLoad() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.label);</span><br><span class="line">        <span class="keyword">this</span>.label.string = <span class="string">"我改变了"</span>;</span><br><span class="line">        <span class="keyword">this</span>.label.node.setPosition(cc.v2(<span class="number">0</span>, <span class="number">-300</span>));</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    start() &#123;&#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// update (dt) &#123;&#125;,</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>为了更深刻的理解，我们再绕一下，实现通过当前节点的 <code>Node</code> ，调用自定义脚本组件的方法，来动态修改 <code>Label</code> 的值。</p><p>首先编写自定义组件的代码，提供一个方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// test.js</span></span><br><span class="line">cc.Class(&#123;</span><br><span class="line">    extends: cc.Component,</span><br><span class="line"></span><br><span class="line">    properties: &#123;&#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// LIFE-CYCLE CALLBACKS:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// onLoad () &#123;&#125;,</span></span><br><span class="line"></span><br><span class="line">    start() &#123;&#125;,</span><br><span class="line"></span><br><span class="line">    setLabelValue() &#123;</span><br><span class="line">        <span class="keyword">this</span>.getComponent(cc.Label).string = <span class="string">"我被 test 改变了"</span>;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// update (dt) &#123;&#125;,</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>当前脚本添加到相应的属性中。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20221113181717593.png" alt="image-20221113181717593"></p><p>接着我们只需要在 <code>canvas</code> 的脚本组件中调用 <code>getComponent(&quot;test&quot;)</code> 拿到上边的脚本对象实例，调用 <code>setLabelValue</code> 方法即可。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">cc.Class(&#123;</span><br><span class="line">    extends: cc.Component,</span><br><span class="line"></span><br><span class="line">    properties: &#123;</span><br><span class="line">        label: &#123;</span><br><span class="line">            <span class="keyword">default</span>: <span class="literal">null</span>,</span><br><span class="line">            type: cc.Node,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    onLoad() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.label);</span><br><span class="line">        <span class="keyword">this</span>.label.getComponent(<span class="string">"test"</span>).setLabelValue();</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    start() &#123;&#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// update (dt) &#123;&#125;,</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>小结一下，使用对象的时候，我们需要明确当前是 <code>cc.Node</code> 类型，还是某种组件类型，每一个种类型都有自己的方法。</p><p>如果想从 <code>cc.Node</code> 对象中拿到相应的组件，调用 <code>getComponent</code> 方法即可。</p><p>如果想从组件中拿到 <code>cc.Node</code> 类型，不管是自带的组件，还是自定义的脚本组件，可以直接通过 <code>this.node</code> 拿到当前的 <code>node</code> 实例对象。</p><h1 id="显示隐藏"><a href="#显示隐藏" class="headerlink" title="显示隐藏"></a>显示隐藏</h1><p>最直接就是设置 <code>node</code> 对象的 <code>active</code> 属性即可。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">cc.Class(&#123;</span><br><span class="line">    extends: cc.Component,</span><br><span class="line"></span><br><span class="line">    properties: &#123;</span><br><span class="line">        label: &#123;</span><br><span class="line">            <span class="keyword">default</span>: <span class="literal">null</span>,</span><br><span class="line">            type: cc.Node,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    onLoad() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.label);</span><br><span class="line">        <span class="keyword">this</span>.label.active = <span class="literal">false</span>;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    start() &#123;&#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// update (dt) &#123;&#125;,</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>上边的方式类似于 <code>vue</code> 的 <code>v-if</code> ，会直接把节点销毁掉。</p><p>如果想保留节点，实现 <code>vue</code> 的 <code>v-show</code> ，我们可以设置 <code>opacity</code> 透明度属性弯道实现，只需要将值设置为 <code>0</code> 实现隐藏。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">cc.Class(&#123;</span><br><span class="line">    extends: cc.Component,</span><br><span class="line"></span><br><span class="line">    properties: &#123;</span><br><span class="line">        label: &#123;</span><br><span class="line">            <span class="keyword">default</span>: <span class="literal">null</span>,</span><br><span class="line">            type: cc.Node,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    onLoad() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.label);</span><br><span class="line">        <span class="keyword">this</span>.label.opacity = <span class="number">0</span>;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    start() &#123;&#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// update (dt) &#123;&#125;,</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这里需要注意的是，虽然通过透明度可以隐藏组件，但是此时的点击事件还是存在的，需要处理一下。</p><h1 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h1><p>编译的时候我们选择微信小游戏，填写 <code>appId</code> ，编译完成后通过微信开发者工具导入 <code>build</code> 出来的文件就可以了。</p><p>菜单 -&gt;项目 -&gt; 构建发布：</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20221113183809044.png" alt="image-20221113183809044"></p><p>我们可以设置初始场景、设备方向等。</p><p>需要注意的是，微信主包有 <code>2M</code> 大小的限制，如果预览的微信小游戏遇到超包的情况，我们可以将没用到的组件在编译设置中去除。</p><p>菜单 -&gt; 项目 -&gt; 项目设置 -&gt; 模块设置：</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20221113184029466.png" alt="image-20221113184029466"></p><h1 id="微信小游戏排行榜"><a href="#微信小游戏排行榜" class="headerlink" title="微信小游戏排行榜"></a>微信小游戏排行榜</h1><p>微信为了防止好友的关系链泄露，提出了一个子域的概念，在子域中可以调用 <code>wx.getFriendCloudStorage</code> 方法拿到好友数据。</p><p>为了实现排行榜，我们需要再创建一个空项目，实现排行榜的显示逻辑，和正常项目开发是一致的。</p><p>添加 <code>message</code> 回调函数，供主项目调用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">private onMessage(msg: any) &#123;</span><br><span class="line">        <span class="keyword">switch</span> (msg.event) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"setScore"</span>:</span><br><span class="line">                <span class="keyword">this</span>.setScore(msg.score);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"showRank"</span>:</span><br><span class="line">                <span class="keyword">this</span>.getRank();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>编译的时候需要选择 <code>微信小游戏开发数据域</code>，名称自己定义，我写的是<code>wxSubContext</code>，路径选择之前项目编译的文件夹。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20221113184927037.png" alt="image-20221113184927037"></p><p>然后在主项目中我们需要添加一个空节点，并且添加一个 <code>SubContextView</code> 组件，将这个节点作为排行榜项目的容器节点。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20221113184416196.png" alt="image-20221113184416196"></p><p>如果想要调用排行榜的方法通过 <code>postMessage</code> 。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wx.postMessage(&#123;</span><br><span class="line">  event: <span class="string">"showRank"</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>编译的时候指定一下排行榜项目之前设置的名称 <code>wxSubContext</code>    。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20221113184628466.png" alt="image-20221113184628466"></p><p>上边就是实现排行榜的整个逻辑了，详细的可以参考 <a href="https://developers.weixin.qq.com/community/minigame/article/doc/00028ce147c270ac955a031b057813" target="_blank" rel="noopener">这篇文章</a>，相应的 <a href="https://gitee.com/ichenpipi/cocos-case-wxsubcontext" target="_blank" rel="noopener">代码仓库</a>，<code>clone</code> 下来可以直接用。这个项目的 <code>cocos</code> 编辑器是 <code>2.3.3</code> ，如果升级到 <code>2.4.5</code> 会出现无法滚动的情况，谨慎升级。</p><p>需要注意的一点是，当子项目的容器节点显示的时候，子项目才开始初始化，这就会导致主项目 <code>postMessage</code> 先调用，排行榜项目的<code>onMessage</code> 后调用，导致错失了消息。</p><p>解决这个问题的话，我们的显藏可以通过设置透明度的方式实现，让子项目提前加载。</p><h1 id="发布到微信"><a href="#发布到微信" class="headerlink" title="发布到微信"></a>发布到微信</h1><p>个人开发者提交的资料基本不用啥，有个自审资料网上找个模版在 <code>word</code> 填完截图就可以。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/%E8%87%AA%E6%9F%A5.jpg" alt="自查"></p><p>但提交审核的道路比较坎坷，除了慢以外，甚至被拒了两次。</p><p>第一次周日提交，周三还没有结果在微信社区平台催了一下审核，下午收到结果审核失败。</p><blockquote><p>小游戏涉嫌侵权，请参考示例截图标记点全面自查游戏内容，请于下个版本有效整改或举证，在微信公众平台-版本管理-提交审核-授权书/版本更新说明提交，包括但不限于游戏内容说明及对应截图、原创证明或有效授权书 主体信用分扣除-3分</p></blockquote><p>原因是一开始是准备仿 <code>Flappy bird</code> 的，直接用了相应的素材，就被驳回了，客服截图如下：</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20221119103132834.png" alt="image-20221119103132834"></p><p>第二次周三早上提交，周五晚上收到结果，又被拒了，这次就无法理解了：</p><blockquote><p>开发者你好，经平台审核，你的小游戏《挑战1024》未通过审核，具体原因如下：</p><p>1、小游戏需具有完整的游戏玩法，不能为简单的素材堆砌</p></blockquote><p>网上搜了搜，可能是因为我的游戏只有一个界面，点击就开始了。据说加个菜单就会好，于是又改了改，不同场景也换了换背景。</p><p>第三次周六晚上提交，周二晚上收到结果，同上次，审核被拒，原因为「小游戏需具有完整的游戏玩法，不能为简单的素材堆砌」。</p><p>已经不知道该怎么改了，周三早上点了审核失败那里的提交反馈，写了一段感人肺腑的话（* 的内容这里就省略了）。</p><blockquote><p>本游戏为益智类游戏，需要分数吃到 1024 才能获得胜利。<br>游戏场景分为菜单、第一关、最终关、好友排行，不同关卡也会通过背景色来区分。<br>菜单提供了分享好友、查看排行的功能。<br>第一关主要是为了体验游戏流程，星星的分数都是×2，因此只需要不停的吃分即可取得胜利。<br>最终关需要通过自己的策略，除了躲避陨石，还需要吃到星星上不同的分数，才能获得胜利。<br>游戏过程中，星星的速度、分数的出现会实时通过当前的状态进行变化，主要涉及到一些算法，也是本游戏的核心。<br>虽然素材都是星星，但结合算法上边的分数会一直变化，同时星星和陨石的比例也在不断变化。<br>除此之外玩家还需要躲避陨石，同时设定了策略，如果******。<br>在用户挑战失败的时候，增设了复活功能、重开功能。<br>游戏名为「挑战1024」，属于*******，来最终取得胜利。<br>希望审核大大可以再看一下，设计整个流程和算法确实花了很多心思。</p></blockquote><p>周四早上显示反馈成功。</p><blockquote><p>开发者你好，感谢你向小游戏审核团队反馈异议，经平台评估：我们已更正你的历史审核记录，如有需求，可重新提交审核</p></blockquote><p>周五早上进行了重新提审，周二下午终于通过了。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20221130083045661.png" alt="image-20221130083045661"></p><p>小游戏相比于小程序审核严格好多，前前后后花了有半个多月了，简单游戏竟然不让上线，这是我想不通的。</p><h1 id="总"><a href="#总" class="headerlink" title="总"></a>总</h1><p>整体就是这样了，整个 <code>cocos</code> 项目可以理解为一棵树，整个树就是一个场景，根节点是一个包含 <code>Canvas</code> 组件的 <code>node</code> ，接下来可以创建自己的 <code>node</code> ，每个 <code>node</code> 又可以挂载想要的自带组件和用户脚本组件。</p><p>希望对大家有帮助，如果错误也欢迎指出，也可以体验一下我这次开发的小游戏，哈哈：</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/gh_dc7db84e6a20_258.jpg" alt="gh_dc7db84e6a20_258"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;前段时间一直在更 &lt;a href=&quot;https://vue.windliang.wang/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;vue2的源码系列&lt;/a&gt;，最近换了换口味，学了一下 &lt;code&gt;cocos&lt;/code&gt; ，照猫画虎的写了一个「挑战
      
    
    </summary>
    
    
      <category term="前端" scheme="https://windliang.wang/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="cocos" scheme="https://windliang.wang/tags/cocos/"/>
    
  </entry>
  
  <entry>
    <title>中后台系统提升质量和效率的一个思路</title>
    <link href="https://windliang.wang/2022/10/27/%E4%B8%AD%E5%90%8E%E5%8F%B0%E7%B3%BB%E7%BB%9F%E6%8F%90%E5%8D%87%E8%B4%A8%E9%87%8F%E5%92%8C%E6%95%88%E7%8E%87%E7%9A%84%E4%B8%80%E4%B8%AA%E6%80%9D%E8%B7%AF/"/>
    <id>https://windliang.wang/2022/10/27/%E4%B8%AD%E5%90%8E%E5%8F%B0%E7%B3%BB%E7%BB%9F%E6%8F%90%E5%8D%87%E8%B4%A8%E9%87%8F%E5%92%8C%E6%95%88%E7%8E%87%E7%9A%84%E4%B8%80%E4%B8%AA%E6%80%9D%E8%B7%AF/</id>
    <published>2022-10-26T22:04:20.000Z</published>
    <updated>2022-11-17T00:01:23.938Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>中后台项目中会存在一些配置页面需求的开发，这些需求高度相似，迭代频率低，基本结构为「搜索区域」、「表格区域」、「包含表单的弹窗」三部分组成。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20221027060647741.png" alt="image-20221027060647741"></p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20221027060711024.png" alt="image-20221027060711024"></p><p>其中「搜索区域」和「表格区域」的操作区交互固化，比如查询、添加、查看、删除、上线、下线。</p><p>当前开发时大都采用复制类似需求页面继而修改的方式，如下图所示。每个人都形成了自己的代码组织结构，导致虽属同一团队，但代码风格、交互实现逻辑变为了多条平行线。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20221027060727389.png" alt="image-20221027060727389"></p><p>这种迭代方式存在两点坏处：</p><p>a. 重复劳动较多，同时存在漏改的风险。易变的地方分布在页面中各个部分，修改起来不够方便，改动后存在影响到正常逻辑的风险。</p><p>b. 团队内各自抽离的不同交互方式，接手他人页面的时候需要耗费一定的理解成本，同时 <code>code review</code> 时无法快速的理清逻辑。</p><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>中后台项目提效一个直接的想法就是低代码的思路：</p><p>a. 初态：抽离各个组件，定义 <code>json</code> 的格式，通过 <code>json</code> 渲染出页面。</p><p>b. 终态：开发搭建平台，通过拖拽生成 <code>json</code> 并且实时预览页面，开发者也可以通过预定的协议接入自己的组件。</p><p>上述两种方案除去搭建成本大之外，最大的问题就是业务开发灵活性将大大降低。</p><p>开发者将在新的规范下进行开发，不管是通过 <code>json</code> 配置还是配置平台生成页面，上手难度大大增加，不亚于去学习一个新的前端框架。如果新需求的交互框架没有考虑到，将花费大量的时间进行适配， 甚至超过了从零开发需求的时间。极端情况下，如果无法满足需求的交互，还存在推倒重来的风险。</p><p>基于以上考虑，我们采取一个更轻便的方案，以模版代码为基础进行后续开发，并通过脚手架进行模版的配置、拉取。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20221027060745695.png" alt="image-20221027060745695"></p><p>如上图，大家的开发流程从之前的平行线变为了网状，未来的页面的目录格式和交互方式都会统一。</p><p>由于是生成的模版代码页面而且不强依赖于模版，未来需求有大的变化也可以正常迭代。</p><h1 id="方案设计"><a href="#方案设计" class="headerlink" title="方案设计"></a>方案设计</h1><h2 id="1-模板设计"><a href="#1-模板设计" class="headerlink" title="1.模板设计"></a>1.模板设计</h2><p>考虑到今后有可能增加其他场景模版，设计模版要考虑到未来可以进行无缝扩展，有两种方案：</p><p>a. 按分支来保存不同场景下的模版：</p><p>优点：不同场景下通过分支来拉取不同模版，模版之间完全隔离。</p><p>缺点：缺少了 <code>master</code> 分支，各模版都需要自己的 <code>master</code> 分支进行迭代。分支之间差异较大，完全违背了 <code>git</code> 的迭代初心。</p><p>b. 按文件夹来保存不同场景下的模版：</p><p>优点：所有模版都存在于 <code>master</code> 分支，和普通项目的方式一样从 <code>master</code> 切出分支进行迭代。</p><p>缺点：脚手架需要一次性拉取所有模版，然后复制自己需要的模版。</p><p>考虑到拉取文件速度较快，最终选取了方案 <code>b</code>。</p><p>各个配置页面之间虽然相似，但也会因实际情况存在细微差异，所以模版不能完全写死，需要支持动态编译，这里采用 <code>EJS</code> 进行编译。</p><p><code>EJS</code> 是一套简单的模板语言，它没有再造一套迭代和控制流语法，只需正常的 <code>JavaScript</code> 语法即可实现一些条件编译、变量替换等，因此可以快速上手。</p><p>关于模版内容，核心思想是将<strong>变化与不变的内容进行抽离</strong>。</p><p>我们可以将后端的接口、权限的配置、搜索框的配置、常量抽离出配置文件，将表格、搜索框、表单之间的联动方式预先写好，目录格式如下。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20221027060919512.png" alt="image-20221027060919512"></p><p>开发者只需进行后端接口的配置、搜索框的配置、表单的开发即可快速完成整个需求。</p><h2 id="2-架构设计"><a href="#2-架构设计" class="headerlink" title="2. 架构设计"></a>2. 架构设计</h2><p>考虑到一方面脚手架整体架构和功能实现后迭代频率会逐渐降低，另一方面更新脚手架需要走 <code>npm</code> 包的发布流程，如果将模版内容耦合到脚手架中，每次更新都重新进行发包较为繁琐。</p><p>因此将模版单独放一个仓库，从脚手架中解耦出来，实现脚手架仓库和模版仓库分离，独立迭代，降低更新成本。</p><p>使用者通过输入命令和参数即可生成模版页面代码，脚手架内部实现拉取模版和编译，生成最终页面，架构如下：</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20221027060851382.png" alt="image-20221027060851382"></p><h2 id="3-脚手架实现"><a href="#3-脚手架实现" class="headerlink" title="3. 脚手架实现"></a>3. 脚手架实现</h2><p>提供 <code>ce-cli</code> 命令，结合用户的参数进行进行模版的编译生成，同时提供交互式的形式选择参数，降低使用者的上手难度，交互形式如下：</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20221027060958575.png" alt="image-20221027060958575"></p><p>考虑到模版和脚手架存在强绑定关系，即如果模版更新了，但脚手架没有更新会造成一些模版逻辑未被编译的情况。因此执行命令时需要检查脚手架是否为最新版本，如果版本较低必须强制升级，中断程序的执行。（对于团队内部工具来说，始终保持最新版本才可以及时用到最新功能，这也是强制升级的原因之一）</p><p>为提高命令的执行速度，执行命令时将拉取的模版缓存到本地，并且将最新的 <code>commit</code> 名保存起来。第二次执行命令的时候将目前最新的 <code>commit</code> 和此前保存的 <code>commit</code> 进行比对，如果不相等则覆盖原来的模版，否则使用原来的模版即可，减少一次网络请求耗时。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>经过一段时间的迭代，后续有近 <code>20</code> 个页面用到脚手架，每需求可降低 <code>0.5pd</code> 的时间，更重要的是团队内相关需求的代码结构、交互实现均已统一，提升了代码质量 和 <code>code review</code> 的效率，团队间交替开发需求时的代码认知难度将大大降低。</p><p>在 <code>code review</code> 过程中，团队内提供相关建议，<a href="https://zhuanlan.zhihu.com/p/561275198" target="_blank" rel="noopener">沉淀最佳实践</a>，例如默认对象通过函数返回、公共方法的使用、项目框架一些特有操作都内置到模版中，不断提升代码质量，磨平大家之间的认知差异。</p><p>未来有新同学加入，可以在模版的基础上更快的进入开发，极大的降低对系统框架一些特有操作的认知时间，同时保证代码质量。</p><p>脚手架中的模版对主要对表格和搜索区域固化了代码逻辑，对于表单的使用我们还是通过原始的 <code>element</code> 表单进行开发，一些常用的规则校验、表单的逻辑每次都需要重复进行开发，经过调研目前公司内已经有多种封装好的表单，未来可以进行详细了解，最终引进到模版代码中，进一步提升开发效率。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;中后台项目中会存在一些配置页面需求的开发，这些需求高度相似，迭代频率低，基本结构为「搜索区域」、「表格区域」、「包含表单的弹窗」三部分组成。
      
    
    </summary>
    
    
      <category term="前端" scheme="https://windliang.wang/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="https://windliang.wang/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>前端老项目接入eslint从配置到上线的一些思考</title>
    <link href="https://windliang.wang/2022/09/21/%E5%89%8D%E7%AB%AF%E8%80%81%E9%A1%B9%E7%9B%AE%E6%8E%A5%E5%85%A5eslint%E5%85%A8%E8%BF%87%E7%A8%8B/"/>
    <id>https://windliang.wang/2022/09/21/%E5%89%8D%E7%AB%AF%E8%80%81%E9%A1%B9%E7%9B%AE%E6%8E%A5%E5%85%A5eslint%E5%85%A8%E8%BF%87%E7%A8%8B/</id>
    <published>2022-09-21T00:42:15.000Z</published>
    <updated>2022-11-17T00:01:23.942Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>在日常需求迭代中，代码的规范与质量是编码的重要一环。<code>Eslint</code> 作为规则扫描器，能够对前端代码进行有效管控，避免出现低级错误，对于前端项目或多或少肯定都会看到 <code>eslint</code> 的相关配置。</p><p>但目前存在一些老项目， <code>eslint</code> 的配置仅仅停留在了多年前加的一些 <code>eslint</code> 规则上，没有任何其他动作，导致平常开发中有如下痛点：</p><ol><li>本地不方便开启保存自动格式化，因为对于老页面，如果开启的话会造成大量的无关 <code>diff</code>。</li><li>提交代码的时候会受到莫名其妙的卡控。</li><li>过 <code>pr</code> 的时候分号、空格、换行各个地方不对齐，逼死强迫症系列。</li></ol><p>基于此，前段时间对老项目的 <code>eslint</code> 进行了一次完善，分享一下整个配置和思考的过程。</p><h1 id="选取规则"><a href="#选取规则" class="headerlink" title="选取规则"></a>选取规则</h1><h2 id="eslint"><a href="#eslint" class="headerlink" title="eslint"></a>eslint</h2><p><code>eslint</code> 规则可以单独一条条配置，也有一些规则的集合比如官方推荐的 <code>eslint:recommended</code>，框架相关的 <a href="https://eslint.vuejs.org/user-guide/#installation" target="_blank" rel="noopener">plugin:vue/recommended</a>，还有公司开源出来的整套规则比如 <code>Airbnb</code> 的 <a href="https://github.com/airbnb/javascript/tree/master/packages/eslint-config-airbnb" target="_blank" rel="noopener">eslint-config-airbnb</a>，腾讯的 <a href="https://github.com/AlloyTeam/eslint-config-alloy" target="_blank" rel="noopener">eslint-config-alloy</a>。</p><p>选取什么规则不是非常重要，大部分规则集也是类似的，此外本地也可以定义相同的规则名对规则集进行覆盖。</p><p>以 <code>alloy</code> 的规则为例，按照 <a href="https://github.com/AlloyTeam/eslint-config-alloy" target="_blank" rel="noopener">eslint-config-alloy</a> 中的文档安装完相应的 <code>node</code> 包以后，在本地根目录中新建 <code>.eslintrc.js</code> 文件引入相应的规则。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    extends: [<span class="string">'alloy'</span>, <span class="string">'alloy/vue'</span>],</span><br><span class="line">    env: &#123;</span><br><span class="line">        <span class="comment">// 你的环境变量（包含多个预定义的全局变量）</span></span><br><span class="line">    &#125;,</span><br><span class="line">    globals: &#123;</span><br><span class="line">        <span class="comment">// 全局变量</span></span><br><span class="line">        moment: <span class="string">'readonly'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    rules: &#123;</span><br><span class="line">        <span class="comment">// 自定义你的规则 0-关闭，1-warn，2-error</span></span><br><span class="line">        <span class="string">'vue/component-tags-order'</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="string">'vue/no-deprecated-slot-attribute'</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="string">'vue/no-deprecated-slot-scope-attribute'</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="string">'vue/no-duplicate-attributes'</span>: [</span><br><span class="line">            <span class="string">'error'</span>,</span><br><span class="line">            &#123;</span><br><span class="line">                allowCoexistClass: <span class="literal">true</span>,</span><br><span class="line">                allowCoexistStyle: <span class="literal">true</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">        ],</span><br><span class="line">        <span class="string">'no-param-reassign'</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="string">'no-console'</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="string">'no-magic-numbers'</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="string">'default-case'</span>: <span class="number">2</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>如上所示，我们可以在 <code>rules</code> 中定义或者覆盖一些规则。</p><h2 id="Prettier"><a href="#Prettier" class="headerlink" title="Prettier"></a>Prettier</h2><p><code>Prettier</code> 是一个代码格式化工具，相比于 <code>eslint</code> 中的代码格式规则，它提供了更少的选项，却更加专业。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220923090302423.png" alt="image-20220923090302423"></p><p>相比于 <code>eslint</code>， <code>Prettier</code>  主要格式样式相关的，比如有没有分号、空格数、一行最大字符数等等，而 <code>eslint</code> 通过解析出代码的 <code>AST</code> ，可以自动格式化或者检测出一些潜在的问题，比如是否允许使用 <code>console</code>、变量声明但未使用、<code>switch</code> 缺少 <code>defaut</code> 等。</p><p>当然 <code>eslint</code> 也可以配置样式相关的规则，但存在一些情况 <code>eslint</code> 无法胜任，因此格式化相关的我们都交给更专业的 <code>Prettier</code> ，安装 <code>Prettier</code> 的 <code>node</code> 包，并且根目录增加配置文件 <code>.prettierrc.js</code> 。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// .prettierrc.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="comment">// 一行最多 120 字符</span></span><br><span class="line">    printWidth: <span class="number">120</span>,</span><br><span class="line">    <span class="comment">// 使用 4 个空格缩进</span></span><br><span class="line">    tabWidth: <span class="number">4</span>,</span><br><span class="line">    <span class="comment">// 不使用缩进符，而使用空格</span></span><br><span class="line">    useTabs: <span class="literal">false</span>,</span><br><span class="line">    <span class="comment">// 行尾需要有分号</span></span><br><span class="line">    semi: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// 使用单引号</span></span><br><span class="line">    singleQuote: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// 对象的 key 仅在必要时用引号</span></span><br><span class="line">    quoteProps: <span class="string">'as-needed'</span>,</span><br><span class="line">    <span class="comment">// jsx 不使用单引号，而使用双引号</span></span><br><span class="line">    jsxSingleQuote: <span class="literal">false</span>,</span><br><span class="line">    <span class="comment">// 末尾需要有逗号</span></span><br><span class="line">    trailingComma: <span class="string">'all'</span>,</span><br><span class="line">    <span class="comment">// 大括号内的首尾需要空格</span></span><br><span class="line">    bracketSpacing: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// jsx 标签的反尖括号需要换行</span></span><br><span class="line">    bracketSameLine: <span class="literal">false</span>,</span><br><span class="line">    <span class="comment">// 箭头函数，只有一个参数的时候，也需要括号</span></span><br><span class="line">    arrowParens: <span class="string">'always'</span>,</span><br><span class="line">    <span class="comment">// 每个文件格式化的范围是文件的全部内容</span></span><br><span class="line">    rangeStart: <span class="number">0</span>,</span><br><span class="line">    rangeEnd: <span class="literal">Infinity</span>,</span><br><span class="line">    <span class="comment">// 不需要写文件开头的 @prettier</span></span><br><span class="line">    requirePragma: <span class="literal">false</span>,</span><br><span class="line">    <span class="comment">// 不需要自动在文件开头插入 @prettier</span></span><br><span class="line">    insertPragma: <span class="literal">false</span>,</span><br><span class="line">    <span class="comment">// 使用默认的折行标准</span></span><br><span class="line">    proseWrap: <span class="string">'preserve'</span>,</span><br><span class="line">    <span class="comment">// 根据显示样式决定 html 要不要折行</span></span><br><span class="line">    htmlWhitespaceSensitivity: <span class="string">'css'</span>,</span><br><span class="line">    <span class="comment">// vue 文件中的 script 和 style 内不用缩进</span></span><br><span class="line">    vueIndentScriptAndStyle: <span class="literal">false</span>,</span><br><span class="line">    <span class="comment">// 换行符使用 lf</span></span><br><span class="line">    endOfLine: <span class="string">'lf'</span>,</span><br><span class="line">    <span class="comment">// 格式化内嵌代码</span></span><br><span class="line">    embeddedLanguageFormatting: <span class="string">'auto'</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="编辑器自动修复"><a href="#编辑器自动修复" class="headerlink" title="编辑器自动修复"></a>编辑器自动修复</h1><p><strong>这一步我认为是推动 <code>eslint</code> 最重要的一步</strong>，大家抗拒项目添加 <code>eslint</code> 一个很大的原因就是本地没有开启实时检查和自动修复，当提交 <code>commit</code> 的时候遇到 <code>eslint</code> 规则卡控就很难受了。</p><p>团队内都使用的 <code>VSCode</code> 进行开发，可以安装 <code>Eslint</code> 和 <code>Prettier</code> 插件。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220925113210716.png" alt="image-20220925113210716"></p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220925113256543.png" alt="image-20220925113256543"></p><p>在本地新增 <code>.vscode/settings.json</code> 文件进行插件的配置，并且该文件不忽略 <code>git</code> ，所有人共享。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"editor.defaultFormatter"</span>: <span class="string">"esbenp.prettier-vscode"</span>, <span class="comment">// 用 Prettier 格式化</span></span><br><span class="line">    <span class="string">"editor.codeActionsOnSave"</span>: &#123;</span><br><span class="line">        <span class="string">"source.fixAll.eslint"</span>: <span class="literal">true</span> <span class="comment">// 保存时自动进行 eslint 的修复</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"editor.formatOnSave"</span>: <span class="literal">true</span> <span class="comment">// 保存时自动格式化</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个文件是 <code>VSCode</code> 针对当前工程的配置，配置后保存文件的时候插件会自动帮助我们格式化，同时有实时的错误提示。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comKapture%202022-09-25%20at%2015.41.13.gif" alt="Kapture 2022-09-25 at 15.41.13"></p><p>这里需要注意的一点是，保存的时候会同时进行 <code>prettier</code> 和 <code>eslint</code> 的修复，如果 <code>eslint</code> 也配置了样式相关的规则，此时可能发生冲突，导致自动格式化后会有 <code>eslint</code> 的报错，此时可以将相应的 <code>eslint</code> 规则手动关闭，也可以引入 <a href="https://github.com/prettier/eslint-config-prettier" target="_blank" rel="noopener">eslint-config-prettier</a> 这个规则集批量关闭。</p><h1 id="commit-卡控"><a href="#commit-卡控" class="headerlink" title="commit 卡控"></a>commit 卡控</h1><p>为了保证 <code>eslint</code> 规则的有效，需要在提交 <code>commit</code> 的时候进行检查，如果存在没有修复的 <code>eslint</code> 问题直接终止提交。</p><p>直接使用 <code>&quot;husky&quot;: &quot;^1.3.1&quot;</code> 和 <code>&quot;lint-staged&quot;: &quot;^8.1.5&quot;</code>  两个 <code>node</code> 包，需要注意下版本号，最新的配置有些不同了，下边是该版本下的配置。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"husky"</span>: &#123;</span><br><span class="line">  <span class="string">"hooks"</span>: &#123;</span><br><span class="line">    <span class="string">"pre-commit"</span>: <span class="string">"lint-staged"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line">  <span class="string">"lint-staged"</span>: &#123;</span><br><span class="line">    <span class="string">"linters"</span>: &#123;</span><br><span class="line">      <span class="string">"src/**/*.&#123;js,vue&#125;"</span>: [</span><br><span class="line">        <span class="string">"eslint --fix"</span>,</span><br><span class="line">        <span class="string">"git add"</span></span><br><span class="line">      ],</span><br><span class="line">        <span class="string">"src/**/*.&#123;js,vue,html,css,scss,sass&#125;"</span>: [</span><br><span class="line">          <span class="string">"prettier --write"</span>,</span><br><span class="line">          <span class="string">"git add"</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p><code>husky</code> 提供了 <code>pre-commit</code> 的钩子，然后 <code>lint-staged</code> 对暂存区代码自动进行格式化，如果出错的话会直接退出。</p><p>这样当我们提交 <code>commit</code> 的时候就会运行 <code>eslint</code> 和 <code>prettier</code> 进行代码的格式化。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220925162909689.png" alt="image-20220925162909689"></p><h1 id="流水线卡控"><a href="#流水线卡控" class="headerlink" title="流水线卡控"></a>流水线卡控</h1><p>虽然上一步对 <code>commit</code> 进行了卡控，但如果 <code>git commit</code> 的时候添加了 <code>-n</code> 参数，卡控检查也就直接跳过了。</p><p>如果想彻底的卡控，我们可以在打包流水线上增加一个 <code>lint</code> 的插件进行检查。</p><p>这里实现卡控有两种思路：</p><ol><li><p>发布分支和 <code>master</code> 做 <code>diff</code>，仅仅对 <code>diff</code> 出的 <code>commit</code> 进行 <code>eslint</code> 的检查。</p><p>但这里可能存在两个问题需要注意：</p><p>如果本地合并 <code>master</code> 的时候产生了冲突，然后解决冲突会新提交一个 <code>commit</code> 。 此时 <code>diff</code> 出来的 <code>commit</code> 可能会包含其他人的代码，如果之前的代码没有 <code>lint</code> ，此时就需要自己 <code>lint</code> 了。</p><p>如果上线流程是先合并 <code>master</code> ，那么上线的时候 <code>master</code> 已经有了自己的代码，此时上线分支和 <code>master</code> 就没有任何 <code>diff</code> 了，所以也就起不到卡控的作用了。</p></li><li><p>卡控分支前 <code>n</code> 天的 <code>commit</code> 。</p><p>理想情况下，前 <code>n</code> 天只包含自己的 <code>commit</code> 和已经 <code>lint</code> 过的 <code>commit</code> ， <code>merge master</code> 的 <code>commit</code> 可以自动过滤掉，因此可以很好的对新加的代码进行卡控。</p><p>当然还是无法完全避免遇到别人没有 <code>lint</code> 过的代码，此时还是需要自己进行修复了。</p><p>具体逻辑可以参考这个 <a href="https://github.com/wyntau/lint-recently#readme" target="_blank" rel="noopener">node 包</a>。</p></li></ol><p>不管是哪种方法，因为是在老项目引入的 <code>lint</code> ，前期如果在流水线加 <code>lint</code> 卡控的话一定会遇到明明不是自己代码，却被 <code>lint</code> 卡控拦截的情况。</p><p>我个人看法是流水线 <code>lint</code> 其实不加也可以，如果编辑器自动修复添加了、<code>commit</code> 卡控也添加了，这已经足够了，如果真有人通过 <code>-n</code> 绕过卡控，那肯定是有理由的，也没必要走流水线再卡控。</p><h1 id="上线"><a href="#上线" class="headerlink" title="上线"></a>上线</h1><p>因为老项目中会有大量的不符合 <code>eslint</code> 规则的代码，因此上线有两种方案。</p><ol><li><p>本地进行全量文件的 <code>eslint --fix</code> 后上线：</p><p>优点：未来开发时原有文件的 <code>lint</code> 问题不用关心，开发者只需关注原有 <code>error</code> 和自己当前的 <code>lint</code> 问题即可。</p><p>缺点：由于改动文件数较多，<code>eslint</code> 不可完全信任，贸然上线可能会造成线上问题。</p></li><li><p>仅仅上线 <code>eslint</code> 的卡控和保存时自动 <code>lint</code> 的配置：</p><p>优点：未改动代码逻辑，不会存在引发线上问题的隐患。</p><p>缺点：当开发者修改、保存老文件后，会自动触发 <code>lint</code> 修复，从而污染混淆本身的修改，增加后续 <code>code review</code> 工作负担。</p></li></ol><p>我是偏向于第 <code>2</code> 个方案的，虽然 <code>eslint</code> 自动修复一般不会引起问题，但程序肯定是不能 <code>100%</code> 相信的，如果造成了线上问题反而得不偿失。</p><p>如果采用第 <code>2</code> 个方案，后续开发老页面保存的时候一定会出现大面积的自动 <code>lint</code>，我们可以在添加新代码前先保存一下触发 <code>lint</code> 并且提交一个 <code>msg</code> 为 <code>lint auto fix</code> 的  <code>commit</code> 。这样做有两个好处：</p><ol><li>后续其他人遇到问题代码排查的时候看到 <code>lint fix</code> 就知道了这行代码不是你写的，他需要再往前找一个 <code>commit</code> 的提交人。</li><li>过 <code>pr</code> 的时候我们可以按 <code>commit</code> 看，第一个 <code>lint</code> 的 <code>commit</code> 如果没什么问题可以直接跳过，减轻 <code>cr</code> 的负担。</li></ol><h1 id="总"><a href="#总" class="headerlink" title="总"></a>总</h1><p>在业务迭代繁忙的时候，想在老项目中引入 <code>eslint</code> 其实还挺难的，毕竟业务价值很难讲清楚，一个反向逻辑就是现在项目没有 <code>eslint</code> 也运行的好好的，但加入 <code>eslint</code> 有什么收益呢？</p><p>另一方面，当有人推动项目 <code>eslint</code> 的规则的时候仅仅添加规则和卡控，其他的步骤不去推动，当越来越多人遇到需要手动修复 <code>eslint</code> 或者因为 <code>eslint</code> 的问题被卡控提交，内心就会不断地增加对 <code>eslint</code> 的抗拒。</p><p>在安装相关插件、<code>node</code> 包的时候<strong>需要注意下版本号</strong>，找到匹配自己包的版本号的配置，不然可能会遇到配置了但不生效的问题。</p><p>当有新项目开发的时候，一定要把 <code>eslint</code> 的自动修复、相关配置都搞好，这样开发的时候也舒服，未来也不用再进行 <code>eslint</code> 的治理了。</p><p>未来也可以结合平时开发的经验和发生的线上问题，逐步完善 <code>eslint</code> 中的 <code>rules</code> 规则，使得项目代码质量越来越高。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;在日常需求迭代中，代码的规范与质量是编码的重要一环。&lt;code&gt;Eslint&lt;/code&gt; 作为规则扫描器，能够对前端代码进行有效管控，避免
      
    
    </summary>
    
    
      <category term="前端" scheme="https://windliang.wang/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="eslint" scheme="https://windliang.wang/tags/eslint/"/>
    
  </entry>
  
  <entry>
    <title>提升前端开发质量的十点经验沉淀</title>
    <link href="https://windliang.wang/2022/09/05/%E5%89%8D%E7%AB%AF%E5%AE%9E%E9%99%85%E5%BC%80%E5%8F%91%E7%9A%84%E4%B8%80%E4%BA%9B%E7%BB%8F%E9%AA%8C%E6%B2%89%E6%B7%80/"/>
    <id>https://windliang.wang/2022/09/05/%E5%89%8D%E7%AB%AF%E5%AE%9E%E9%99%85%E5%BC%80%E5%8F%91%E7%9A%84%E4%B8%80%E4%BA%9B%E7%BB%8F%E9%AA%8C%E6%B2%89%E6%B7%80/</id>
    <published>2022-09-04T23:50:41.000Z</published>
    <updated>2022-11-17T00:01:23.941Z</updated>
    
    <content type="html"><![CDATA[<p>分享一下平常开发经常出现问题，增加代码质量的十个小点：</p><h1 id="记得错误处理"><a href="#记得错误处理" class="headerlink" title="记得错误处理"></a>记得错误处理</h1><p>特别是网络请求或者其他异步操作中，<code>await</code> 记得包裹 <code>try catch</code>，可以给用户一个友好提示，同时可以考虑 <code>catch</code> 中需要做什么兜底处理，必要时进行上传日志。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="keyword">this</span>.loading = <span class="keyword">this</span>.$loading(&#123;</span><br><span class="line">    lock: <span class="literal">true</span>,</span><br><span class="line">    text: <span class="string">'加载中...'</span>,</span><br><span class="line">    spinner: <span class="string">'el-icon-loading'</span>,</span><br><span class="line">    background: <span class="string">'rgba(0, 0, 0, 0.7)'</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">const</span> info = <span class="keyword">await</span> resDistributeService(&#123; <span class="attr">taskTicketId</span>: <span class="keyword">this</span>.id &#125;);</span><br><span class="line">  ...</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">  <span class="keyword">this</span>.$message(&#123;</span><br><span class="line">    type: <span class="string">'error'</span>,</span><br><span class="line">    message: e.msg || e.message || <span class="string">'失败'</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">  <span class="keyword">this</span>.loading.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以结合 <code>finally</code>，处理 <code>loading</code> 等。</p><h1 id="数字-0-的校验"><a href="#数字-0-的校验" class="headerlink" title="数字 0 的校验"></a>数字 0 的校验</h1><p>前端经常使用 <code>!v</code> ，来判断 <code>v</code> 是不是有值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(!v)&#123;</span><br><span class="line">  <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">doSomething()</span><br></pre></td></tr></table></figure><p>但如果 <code>0</code> 是 <code>v</code> 的有效值 ，此时本该处理，但会提前结束，最终引发错误。此时需要显示的判断是否是 <code>null</code> 或者 <code>undefined</code> 。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(v === <span class="literal">null</span> || v=== <span class="literal">undefined</span>)&#123;</span><br><span class="line">  <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">doSomething()</span><br></pre></td></tr></table></figure><h1 id="默认对象采用函数返回"><a href="#默认对象采用函数返回" class="headerlink" title="默认对象采用函数返回"></a>默认对象采用函数返回</h1><p>由于 <code>js</code> 中的对象是引用，因此赋默认值的时候最好通过函数，每次都返回一个新对象。</p><p>bad:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> defaultCondition = &#123;</span><br><span class="line">  name: <span class="string">''</span>,</span><br><span class="line">  conditionList: [</span><br><span class="line">    &#123;</span><br><span class="line">      conditionCode: <span class="string">''</span>,</span><br><span class="line">      conditionValue: <span class="literal">null</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            condition: &#123;...defaultCondition&#125;,</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        closeDialog() &#123;</span><br><span class="line">            <span class="keyword">this</span>.condition =  &#123;...defaultCondition&#125;;</span><br><span class="line">            <span class="keyword">this</span>.configId = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">this</span>.$refs.form.resetFields();</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>good:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> getDefaultCondition = <span class="function"><span class="params">()</span> =&gt;</span> (&#123;</span><br><span class="line">  name: <span class="string">''</span>,</span><br><span class="line">  conditionList: [</span><br><span class="line">    &#123;</span><br><span class="line">      conditionCode: <span class="string">''</span>,</span><br><span class="line">      conditionValue: <span class="literal">null</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            condition: getDefaultCondition(),</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        closeDialog() &#123;</span><br><span class="line">            <span class="keyword">this</span>.condition = getDefaultCondition();</span><br><span class="line">            <span class="keyword">this</span>.configId = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">this</span>.$refs.form.resetFields();</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="接口地址单独存放"><a href="#接口地址单独存放" class="headerlink" title="接口地址单独存放"></a>接口地址单独存放</h1><p>将接口的定义放到统一文件中，未来变动改动起来会比较方便，如果各个 <code>url</code> 都写死在页面中以后就很麻烦了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// service.js</span></span><br><span class="line"><span class="keyword">import</span> request <span class="keyword">from</span> <span class="string">'utils/request'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> service = <span class="keyword">new</span> (request(<span class="string">'/api/m/mallorder/exp/compensation/customer'</span>))();</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> listService = <span class="function">(<span class="params">params</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> service.post(<span class="string">'/queryRuleList'</span>, params);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> listDataKey = <span class="string">'ruleVOList'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> idKey = <span class="string">'ruleId'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> dialogEnumService = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> service.get(<span class="string">'/info'</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> saveService = <span class="function">(<span class="params">params</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> service.post(<span class="string">'/saveRule'</span>, params);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> detailService = <span class="function">(<span class="params">params</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> service.get(<span class="string">'/detail'</span>, params);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>此外，网络请求一般都会在 <code>npm</code> 包的基础上自己再包一层，一方面可以注入共用参数，另一方面可以对返回数据进行统一的错误处理。</p><h1 id="函数多参数采用对象"><a href="#函数多参数采用对象" class="headerlink" title="函数多参数采用对象"></a>函数多参数采用对象</h1><p>如果定义一个函数需要 3 个以上的参数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params">a,b,c,d</span>)</span>&#123;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时可以考虑采用对象解构，改为</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params">&#123;a=<span class="number">1</span>,b,c,d&#125;=&#123;&#125;</span>)</span>&#123;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好处是未来需要扩展参数的时候，不需要太担心其他地方调用时候传参是否会引起问题。</p><p>当然，如果参数过多也需要思考一下当前函数是否承载了太多的功能，进行一下功能上的拆分。</p><h1 id="函数单一职责"><a href="#函数单一职责" class="headerlink" title="函数单一职责"></a>函数单一职责</h1><p>当我们已经定义了一个函数，比如去初始一些变量。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initOptions</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  a = xxx</span><br><span class="line">  b = xxx</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时我们需要做另一件无关的事 【A】，虽然它和 <code>initOptions</code> 调用的时机一致，但最好不要直接放到 <code>initOptions</code> 中，而是新建一个函数单独调用。</p><p>不然未来如果其他地方也要调 <code>initOptions</code>，但此时可能并不需要做【A】这件事情就会引起 <code>bug</code>。</p><h1 id="参数合法性判断"><a href="#参数合法性判断" class="headerlink" title="参数合法性判断"></a>参数合法性判断</h1><p>由于 <code>js</code> 语言的灵活性，函数传入的参数很可能不符合预期，必要时我们需要进行判断并且进行兜底处理，不可完全信任调用方。</p><p>团队合作中，该函数在未来极大可能会被其他人调用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doSomeThing</span>(<span class="params">params1, params2</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(params1 === <span class="literal">null</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(params2)&#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 再去做我们的事情</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果后边的流程强依赖于 <code>params</code>，我们可以直接 <code>return</code>，必要时也可以上报日志或者 <code>throw Error</code>。</p><h1 id="整数的处理"><a href="#整数的处理" class="headerlink" title="整数的处理"></a>整数的处理</h1><p><code>js</code> 中没有整数类型，即 <code>java</code> 中的 <code>int</code>、<code>long</code> 这些，所有数字都遵循 <code>IEEE 754</code> 标准，即 <code>java</code> 中的 <code>double</code> 类型，详细的可参考 <a href="https://zhuanlan.zhihu.com/p/75581822" target="_blank" rel="noopener">浮点数详解。</a></p><p>可以精确表示的最大整数是 <code>9007199254740991</code>，共 <code>16</code> 位，超过这个数精度可能会丢失，对于新接口，可以问一下后端相应数字字段的最大值会是多少。</p><p>对于浮点数的处理，除了众所周知的 <code>0.1 + 0.2 === 0.3</code> 的值为<code>false</code> 外，当我们对数字进行运算的时候也需要注意。</p><p>常见的将 <code>9.04</code> 元转为 <code>904</code> 分：</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.com1661472877631-d41092fa-913c-40f8-89a0-154c7fd2fcc8.png" alt="img"></p><p>我们需要对结果进行取整处理。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.com1661472888799-0efa6ca3-5337-42ef-b623-1f999757f209.png" alt="img"></p><h1 id="可选链"><a href="#可选链" class="headerlink" title="可选链"></a>可选链</h1><p>可选链操作符，参考 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Optional_chaining" target="_blank" rel="noopener">MDN</a> ，用的比较多。</p><p>和后端定的数组或者对象，后端有时候返回来的很可能是 <code>null</code> 甚至没有该字段，因此前端可以用可选链操作符用于数组、对象、函数，防止出现错误直接阻断后续流程。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> nestedProp = obj.first?.second; <span class="comment">// 等效于 obj.first &amp;&amp; obj.fisrt.second</span></span><br><span class="line"><span class="comment">//后续流程</span></span><br></pre></td></tr></table></figure><p>但不要过度使用可选链，如果某些地方理论上不会出问题，比如 <code>let test = obj.first?.second</code>，如果 <code>second</code> 一定能取到，我们直接 <code>let test = obj.first.second</code> 即可。</p><p>不然未来如果这里由于某种原因出了问题导致 <code>obj.first</code> 是 <code>null</code>，但我们使用了可选链，所以 <code>obj.first?.second</code> 也不会报错，我们就永远不会知道这里出现问题了。</p><p>当然也需要权衡下，不加可选链造成<code>js Error</code> 会不会影响业务逻辑。</p><h1 id="对象or数组引用"><a href="#对象or数组引用" class="headerlink" title="对象or数组引用"></a>对象or数组引用</h1><p>修改或者使用对象、数组时，时刻切记它们为引用，一处修改会造成处处修改。</p><h1 id="总"><a href="#总" class="headerlink" title="总"></a>总</h1><p>以上的点应该算已经融入血液中了，平常开发和帮同事过 <code>pr</code> 的时候会格外注意，和业务逻辑没有关系，但可以提升代码质量。还有 <code>Vue</code> 一些常见的点也总结了一下，在语雀建了一个文档，未来有其他想法也会再更新一下，感兴趣的同学可以收藏一下，<a href="https://www.yuque.com/books/share/4946f854-2cac-4918-b70f-223fb173b7c2" target="_blank" rel="noopener">前端实践沉淀</a>。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220905081810640.png" alt="image-20220905081810640"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;分享一下平常开发经常出现问题，增加代码质量的十个小点：&lt;/p&gt;
&lt;h1 id=&quot;记得错误处理&quot;&gt;&lt;a href=&quot;#记得错误处理&quot; class=&quot;headerlink&quot; title=&quot;记得错误处理&quot;&gt;&lt;/a&gt;记得错误处理&lt;/h1&gt;&lt;p&gt;特别是网络请求或者其他异步操作中，&lt;c
      
    
    </summary>
    
    
      <category term="前端" scheme="https://windliang.wang/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>油猴脚本重写fetch和xhr请求</title>
    <link href="https://windliang.wang/2022/08/23/%E6%B2%B9%E7%8C%B4%E8%84%9A%E6%9C%AC%E9%87%8D%E6%96%B0fetch%E5%92%8Cxhr%E8%AF%B7%E6%B1%82/"/>
    <id>https://windliang.wang/2022/08/23/%E6%B2%B9%E7%8C%B4%E8%84%9A%E6%9C%AC%E9%87%8D%E6%96%B0fetch%E5%92%8Cxhr%E8%AF%B7%E6%B1%82/</id>
    <published>2022-08-22T23:35:02.000Z</published>
    <updated>2022-11-17T00:01:23.988Z</updated>
    
    <content type="html"><![CDATA[<p>写过几个油猴脚本，经常对页面请求返回的数据进行拦截或者覆盖，这篇文章就做个总结，涉及到 <code>fetch</code> 和 <code>xhr</code> 两种类型的请求。</p><h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><p>先简单写个 <code>html</code> 页面，搭一个 <code>koa</code> 服务进行测试。</p><p><code>html</code> 页面提供一个 <code>id=json</code> 的 <code>dom</code> 用来加数据，后边我们补充 <code>test.js</code> 文件来请求接口。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        我运行了</span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"json"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"test.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>将 <code>html</code> 通过 <code>VSCode</code> 的 <code>live-server</code> 插件运行在 <code>http://127.0.0.1:5500/</code> 上。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220823080047006.png" alt="image-20220823080047006"></p><p>安装 <code>koa</code> 和 <code>koa-route</code> 的 <code>node</code> 包，提供一个接口。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> koa = <span class="built_in">require</span>(<span class="string">"koa"</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> koa();</span><br><span class="line"><span class="keyword">const</span> router = <span class="built_in">require</span>(<span class="string">"koa-router"</span>)();</span><br><span class="line">router.get(<span class="string">"/api/query"</span>, <span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">    ctx.body = &#123;</span><br><span class="line">        data: [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],</span><br><span class="line">        code: <span class="number">0</span>,</span><br><span class="line">        msg: <span class="string">"成功"</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 跨域</span></span><br><span class="line">app.use(<span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">    ctx.set(<span class="string">"Access-Control-Allow-Origin"</span>, <span class="string">"http://127.0.0.1:5500"</span>);</span><br><span class="line">    ctx.set(</span><br><span class="line">        <span class="string">"Access-Control-Allow-Headers"</span>,</span><br><span class="line">        <span class="string">"Content-Type, Content-Length, Authorization, Accept, X-Requested-With"</span></span><br><span class="line">    );</span><br><span class="line">    ctx.set(<span class="string">"Access-Control-Allow-Methods"</span>, <span class="string">"PUT, POST, GET, DELETE, OPTIONS"</span>);</span><br><span class="line">    <span class="keyword">if</span> (ctx.method === <span class="string">"OPTIONS"</span>) &#123;</span><br><span class="line">        ctx.body = <span class="number">200</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">await</span> next();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 启动路由</span></span><br><span class="line">app.use(router.routes());</span><br><span class="line"><span class="comment">// 设置响应头</span></span><br><span class="line">app.use(router.allowedMethods());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听端口</span></span><br><span class="line">app.listen(<span class="number">3002</span>);</span><br></pre></td></tr></table></figure><p>提供了 <code>/api/query</code> 接口，返回 <code>data: [1,2,3],</code> 。运行在本地的 <code>3002</code> 端口上，并且设置跨域，允许从 <code>http://127.0.0.1:5500</code> 访问。</p><h1 id="油猴脚本"><a href="#油猴脚本" class="headerlink" title="油猴脚本"></a>油猴脚本</h1><p>先简单写一个插入 <code>我是油猴脚本的文本</code> 的脚本，后边再进行修改。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ==UserScript==</span></span><br><span class="line"><span class="comment">// @name         网络拦截测试</span></span><br><span class="line"><span class="comment">// @namespace    https://windliang.wang/</span></span><br><span class="line"><span class="comment">// @version      0.1</span></span><br><span class="line"><span class="comment">// @description  测试</span></span><br><span class="line"><span class="comment">// @author       windliang</span></span><br><span class="line"><span class="comment">// @match        http://127.0.0.1:5500/index.html</span></span><br><span class="line"><span class="comment">// @run-at       document-start</span></span><br><span class="line"><span class="comment">// @grant        unsafeWindow</span></span><br><span class="line"><span class="comment">// ==/UserScript==</span></span><br><span class="line"></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">window</span>.unsafeWindow)</span><br><span class="line">    <span class="keyword">const</span> dom = <span class="built_in">document</span>.createElement(<span class="string">"div"</span>);</span><br><span class="line">    dom.innerText = <span class="string">'我是油猴脚本的文本'</span></span><br><span class="line">    <span class="built_in">document</span>.getElementsByTagName(<span class="string">"body"</span>)[<span class="number">0</span>].append(dom);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>此时页面已经被成功拦截：</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220823101447976.png" alt="image-20220823101447976"></p><p>这里提一句，油猴脚本如果使用 <code>@grant</code> 申请了权限，此时脚本会运行在一个沙箱环境中，如果想访问原始的 <code>window</code> 对象，可以通过 <code>window.unsafeWindow</code> 。</p><p>并且我们加了 <code>@run-at</code> ，让脚本尽快执行。</p><h1 id="fetch-请求"><a href="#fetch-请求" class="headerlink" title="fetch 请求"></a>fetch 请求</h1><p>在 <code>html</code> 请求的 <code>test.js</code> 中添加 <code>fetch</code> 的代码。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">fetch(<span class="string">"http://localhost:3002/api/query"</span>)</span><br><span class="line">  .then(<span class="function">(<span class="params">response</span>) =&gt;</span> response.json())</span><br><span class="line">  .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> dom = <span class="built_in">document</span>.getElementById(<span class="string">"json"</span>); </span><br><span class="line">  dom.innerText = res.data;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>看下页面，此时就会把 <code>data</code> 显示出来。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220823102924464.png" alt="image-20220823102924464"></p><p>如果想更改返回的数据，我们只需要在油猴脚本中重写 <code>fetch</code> 方法，将原数据拿到以后再返回即可。 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ==UserScript==</span></span><br><span class="line"><span class="comment">// @name         网络拦截测试</span></span><br><span class="line"><span class="comment">// @namespace    https://windliang.wang/</span></span><br><span class="line"><span class="comment">// @version      0.1</span></span><br><span class="line"><span class="comment">// @description  测试</span></span><br><span class="line"><span class="comment">// @author       windliang</span></span><br><span class="line"><span class="comment">// @match        http://127.0.0.1:5500/index.html</span></span><br><span class="line"><span class="comment">// @run-at       document-start</span></span><br><span class="line"><span class="comment">// @grant        unsafeWindow</span></span><br><span class="line"><span class="comment">// ==/UserScript==</span></span><br><span class="line"></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">window</span>.unsafeWindow)</span><br><span class="line">    <span class="keyword">const</span> dom = <span class="built_in">document</span>.createElement(<span class="string">"div"</span>);</span><br><span class="line">    dom.innerText = <span class="string">'我是油猴脚本的文本'</span></span><br><span class="line">    <span class="built_in">document</span>.getElementsByTagName(<span class="string">"body"</span>)[<span class="number">0</span>].append(dom);</span><br><span class="line">    <span class="keyword">const</span> originFetch = fetch;</span><br><span class="line">    <span class="built_in">console</span>.log(originFetch)</span><br><span class="line">    <span class="built_in">window</span>.unsafeWindow.fetch = <span class="function">(<span class="params">url, options</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> originFetch(url, options).then(<span class="keyword">async</span> (response) =&gt; &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(url)</span><br><span class="line">            <span class="keyword">if</span>(url === <span class="string">'http://localhost:3002/api/query'</span>)&#123;</span><br><span class="line">                <span class="keyword">const</span> responseClone = response.clone();</span><br><span class="line">                <span class="keyword">let</span> res = <span class="keyword">await</span> responseClone.json();</span><br><span class="line">                res.data.push(<span class="string">'油猴脚本修改数据'</span>)</span><br><span class="line">                <span class="keyword">const</span> responseNew = <span class="keyword">new</span> Response(<span class="built_in">JSON</span>.stringify(res), response);</span><br><span class="line">                <span class="keyword">return</span> responseNew;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> response;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>对 <code>response</code> 的处理有点绕，当时也是试了好多次才试出了这种方案。</p><p>做的事情就是把原来返回的 <code>respones</code> 复制，通过 <code>json</code> 方法拿到数据，进行修改数据，最后新生成一个 <code>Response</code> 进行返回。</p><p>看下效果：</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220823173813341.png" alt="image-20220823173813341"></p><p>成功修改了返回的数据。</p><h1 id="xhr"><a href="#xhr" class="headerlink" title="xhr"></a>xhr</h1><p>我们将 <code>fetch</code> 改为用 <code>xhr</code> 发送请求，因为页面简单所以请求可能在油猴脚本重写之前就发送了，正常网站不会这么快，所以这里加一个 <code>setTimeout</code> 进行延时。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">    xhr.open(<span class="string">'GET'</span>, <span class="string">'http://localhost:3002/api/query'</span>);</span><br><span class="line">    xhr.send();</span><br><span class="line">    xhr.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">const</span> res = <span class="built_in">JSON</span>.parse(<span class="keyword">this</span>.responseText);</span><br><span class="line">        <span class="keyword">const</span> dom = <span class="built_in">document</span>.getElementById(<span class="string">"json"</span>);</span><br><span class="line">        dom.innerText = res.data;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>和 <code>fetch</code> 的思路一样，我们可以在返回前更改 <code>responseText</code> 。</p><p>重写 <code>XMLHttpRequest</code> 原型对象的 <code>open</code> 或者 <code>send</code> 方法，在函数内拿到用户当前的 <code>xhr</code> 实例，监听 <code>readystatechange</code> 事件，然后重写 <code>responseText</code> 。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> originOpen = XMLHttpRequest.prototype.open;</span><br><span class="line">XMLHttpRequest.prototype.open = <span class="function"><span class="keyword">function</span> (<span class="params">_, url</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (url === <span class="string">"http://localhost:3002/api/query"</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.addEventListener(<span class="string">"readystatechange"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.readyState === <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> res = <span class="built_in">JSON</span>.parse(<span class="keyword">this</span>.responseText);</span><br><span class="line">        res.data.push(<span class="string">"油猴脚本修改数据"</span>);</span><br><span class="line">        <span class="keyword">this</span>.responseText = <span class="built_in">JSON</span>.stringify(res);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  originOpen.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>运行一下：</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220824084014585.png" alt="image-20220824084014585"></p><p>拦截失败了，网上搜寻下答案，原因是  <code>responseText</code> 不是可写的，我们将原型对象上的 <code>responseText</code> 属性描述符打印一下。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220824084726967.png" alt="image-20220824084726967"></p><p>可以看到 <code>set</code> 属性是 <code>undefined</code> ，因此我们重写 <code>responseText</code> 失败了。</p><p>我们无法修改原型对象上的 <code>responseText</code> ，我们可以在当前 <code>xhr</code> 对象，也就是 <code>this</code> 上边定义一个同名的 <code>responseText</code> 属性，赋值的话有两种思路。</p><h2 id="1、直接赋值"><a href="#1、直接赋值" class="headerlink" title="1、直接赋值"></a>1、直接赋值</h2><p>我们定义一个 <code>writable: true,</code> 的属性，然后直接赋值为我们修改后的数据。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> originOpen = XMLHttpRequest.prototype.open;</span><br><span class="line">XMLHttpRequest.prototype.open = <span class="function"><span class="keyword">function</span> (<span class="params">_, url</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (url === <span class="string">"http://localhost:3002/api/query"</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.addEventListener(<span class="string">"readystatechange"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.readyState === <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> res = <span class="built_in">JSON</span>.parse(<span class="keyword">this</span>.responseText);</span><br><span class="line">        <span class="comment">// 当前 xhr 对象上定义 responseText</span></span><br><span class="line">        <span class="built_in">Object</span>.defineProperty(<span class="keyword">this</span>, <span class="string">"responseText"</span>, &#123; </span><br><span class="line">          writable: <span class="literal">true</span>,</span><br><span class="line">        &#125;);</span><br><span class="line">        res.data.push(<span class="string">"油猴脚本修改数据"</span>);</span><br><span class="line">        <span class="keyword">this</span>.responseText = <span class="built_in">JSON</span>.stringify(res);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  originOpen.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>看下页面会发现成功拦截了：</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220824085203088.png" alt="image-20220824085203088"></p><h2 id="2、重写-get"><a href="#2、重写-get" class="headerlink" title="2、重写 get"></a>2、重写 get</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> originOpen = XMLHttpRequest.prototype.open;</span><br><span class="line">XMLHttpRequest.prototype.open = <span class="function"><span class="keyword">function</span> (<span class="params">_, url</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (url === <span class="string">"http://localhost:3002/api/query"</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> xhr = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">const</span> getter = <span class="built_in">Object</span>.getOwnPropertyDescriptor(</span><br><span class="line">      XMLHttpRequest.prototype,</span><br><span class="line">      <span class="string">"response"</span></span><br><span class="line">    ).get;</span><br><span class="line">    <span class="built_in">Object</span>.defineProperty(xhr, <span class="string">"responseText"</span>, &#123;</span><br><span class="line">      get: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> result = getter.call(xhr);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="keyword">const</span> res = <span class="built_in">JSON</span>.parse(result);</span><br><span class="line">          res.data.push(<span class="string">'油猴脚本修改数据'</span>)</span><br><span class="line">          <span class="keyword">return</span> <span class="built_in">JSON</span>.stringify(res);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">          <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  originOpen.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>我们拿到原型对象的 <code>get</code> ，然后在当前对象上定义 <code>responseText</code> 的 <code>get</code>属性，修改数据后返回即可。</p><p>相比于第一种方案，这种方案无需等待  <code>readystatechange</code> ，在开始的时候重写即可。</p><p>需要注意的是，上边方案都只是重写了 <code>responseText</code> 字段，不排除有的网站读取的是 <code>response</code> 字段，但修改的话和上边是一样的，这里就不写了。</p><h1 id="总"><a href="#总" class="headerlink" title="总"></a>总</h1><p>通过对 <code>fetch</code> 和 <code>xhr</code> 的重写，我们基本上可以对网页「为所欲为」了，发挥想象力通过油猴脚本应该可以做很多有意思的事情。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;写过几个油猴脚本，经常对页面请求返回的数据进行拦截或者覆盖，这篇文章就做个总结，涉及到 &lt;code&gt;fetch&lt;/code&gt; 和 &lt;code&gt;xhr&lt;/code&gt; 两种类型的请求。&lt;/p&gt;
&lt;h1 id=&quot;环境搭建&quot;&gt;&lt;a href=&quot;#环境搭建&quot; class=&quot;heade
      
    
    </summary>
    
    
      <category term="前端" scheme="https://windliang.wang/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="油猴" scheme="https://windliang.wang/tags/%E6%B2%B9%E7%8C%B4/"/>
    
  </entry>
  
  <entry>
    <title>elementUI中el-tabs或者说Vue现存的一个bug排查</title>
    <link href="https://windliang.wang/2022/08/14/elementUI%E4%B8%ADel-tabs%E7%9A%84%E4%B8%80%E4%B8%AAbug%E5%88%86%E6%9E%90/"/>
    <id>https://windliang.wang/2022/08/14/elementUI%E4%B8%ADel-tabs%E7%9A%84%E4%B8%80%E4%B8%AAbug%E5%88%86%E6%9E%90/</id>
    <published>2022-08-13T23:26:13.000Z</published>
    <updated>2022-11-17T00:01:23.933Z</updated>
    
    <content type="html"><![CDATA[<h1 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象</h1><p> <code>element-ui</code> 版本是 <code>2.15.9</code>，<code>vue</code> 版本是 <code>2.7.8</code> 。</p><p>在 <code>el-dialog</code> 中使用 <code>el-tabs</code> ，并且 <code>el-dialog</code> 添加 <code>destroy-on-close</code> 属性，当关闭弹窗的时候页面就直接无响应了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">        &lt;el-dialog</span><br><span class="line">            title=<span class="string">"提示"</span></span><br><span class="line">            :visible.sync=<span class="string">"dialogVisible"</span></span><br><span class="line">            width=<span class="string">"30%"</span></span><br><span class="line">            destroy-on-close</span><br><span class="line">        &gt;</span><br><span class="line">            &lt;el-tabs type=<span class="string">"border-card"</span>&gt;</span><br><span class="line">                &lt;el-tab-pane label=<span class="string">"用户管理"</span>&gt;用户管理&lt;<span class="regexp">/el-tab-pane&gt;</span></span><br><span class="line"><span class="regexp">                &lt;el-tab-pane label="配置管理"&gt;配置管理&lt;/</span>el-tab-pane&gt;</span><br><span class="line">                &lt;el-tab-pane label=<span class="string">"角色管理"</span>&gt;角色管理&lt;<span class="regexp">/el-tab-pane&gt;</span></span><br><span class="line"><span class="regexp">                &lt;el-tab-pane label="定时任务补偿"&gt;定时任务补偿&lt;/</span>el-tab-pane&gt;</span><br><span class="line">            &lt;<span class="regexp">/el-tabs&gt;</span></span><br><span class="line"><span class="regexp">            &lt;span slot="footer" class="dialog-footer"&gt;</span></span><br><span class="line"><span class="regexp">                &lt;el-button @click="dialogVisible = false"&gt;取 消&lt;/</span>el-button&gt;</span><br><span class="line">                &lt;el-button type=<span class="string">"primary"</span> @click=<span class="string">"dialogVisible = false"</span></span><br><span class="line">                    &gt;确 定&lt;<span class="regexp">/el-button</span></span><br><span class="line"><span class="regexp">                &gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>span&gt;</span><br><span class="line">        &lt;<span class="regexp">/el-dialog&gt;</span></span><br><span class="line"><span class="regexp">        &lt;el-button @click="dialogVisible = true"&gt;打开弹窗&lt;/</span>el-button&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    name: <span class="string">"App"</span>,</span><br><span class="line">    data() &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            dialogVisible: <span class="literal">false</span>,</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.com11.gif" alt="11"></p><p>再等一会儿 <code>Chrome</code> 就直接抛错了：</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220814073751320.png" alt="image-20220814073751320"></p><p>操作过程中控制台也没有任何报错，去 <code>github</code> 的 <code>issues</code> 看一眼发现已经有 <code>3</code> 个人遇到过这个问题了：</p><p><a href="https://github.com/ElemeFE/element/issues/21114" target="_blank" rel="noopener">[bug report] El dialog [destroy on close] El tabs page crashes #21114</a></p><p><a href="https://github.com/ElemeFE/element/issues/20974" target="_blank" rel="noopener">[Bug Report] When set a attribute “destory-on-close=’true’” on a el-dialog which has a child el-tabs component will cause the browser crash #20974</a></p><p><a href="https://github.com/ElemeFE/element/issues/20947" target="_blank" rel="noopener">[Bug Report] el-tabs in el-dialog with destroy-on-close=‘true’ ,dialog can’t be closed</a></p><p>看表现应该是哪里陷入了死循环，猜测是 <code>el-tabs</code> 的 <code>render</code> 函数在无限执行。</p><p>为了证实这个猜测，我们直接在 <code>node_modules</code> 中 <code>el-tabs</code> 的 <code>render</code> 函数添加 <code>console</code> 。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220814080300663.png" alt="image-20220814080300663"></p><p>打开控制台观察一下是否有输出：</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comKapture%202022-08-14%20at%2008.05.56.gif" alt="Kapture 2022-08-14 at 08.05.56"></p><p>直接原因找到了，下边需要排查一下 <code>render</code> 进入死循环的原因。</p><h1 id="问题排查"><a href="#问题排查" class="headerlink" title="问题排查"></a>问题排查</h1><p>可能出现问题的点，<code>el-dialog</code>、<code>el-tabs</code>、<code>el-tab-pane</code>，当然如果上述都没问题的话，也不排除 <code>Vue</code> 的问题，虽然可能性很低。</p><h2 id="el-dialog"><a href="#el-dialog" class="headerlink" title="el-dialog"></a>el-dialog</h2><p>如果我们把 <code>destroy-on-close</code> 属性去掉，然后一切就恢复正常了。所以我们先看一下 <code>destroy-on-close</code>  做了什么。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;transition</span><br><span class="line">    name=<span class="string">"dialog-fade"</span></span><br><span class="line">    @after-enter=<span class="string">"afterEnter"</span></span><br><span class="line">    @after-leave=<span class="string">"afterLeave"</span>&gt;</span><br><span class="line">    &lt;div</span><br><span class="line">      v-show=<span class="string">"visible"</span></span><br><span class="line">      <span class="class"><span class="keyword">class</span></span>=<span class="string">"el-dialog__wrapper"</span></span><br><span class="line">      @click.self=<span class="string">"handleWrapperClick"</span>&gt;</span><br><span class="line">      &lt;div</span><br><span class="line">        role=<span class="string">"dialog"</span></span><br><span class="line">        :key=<span class="string">"key"</span></span><br><span class="line">        :style=<span class="string">"style"</span>&gt;</span><br><span class="line">        ...</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"el-dialog__body"</span> v-<span class="keyword">if</span>=<span class="string">"rendered"</span>&gt;<span class="xml"><span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        ...</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">  &lt;<span class="regexp">/transition&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br></pre></td></tr></table></figure><p>最关键的的是 <code>&lt;el-dialog__body&gt;</code> 的外层 <code>div</code> 中设置了一个 <code>key</code> 。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">watch: &#123;</span><br><span class="line">  visible(val) &#123;</span><br><span class="line">    <span class="keyword">if</span> (val) &#123;</span><br><span class="line">      ...</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.$el.removeEventListener(<span class="string">'scroll'</span>, <span class="keyword">this</span>.updatePopper);</span><br><span class="line">      <span class="keyword">if</span> (!<span class="keyword">this</span>.closed) <span class="keyword">this</span>.$emit(<span class="string">'close'</span>);</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.destroyOnClose) &#123;</span><br><span class="line">        <span class="keyword">this</span>.$nextTick(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">this</span>.key++;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>当我们把 <code>dialog</code> 的 <code>visible</code> 置为 <code>false</code> 的时候，会判断 <code>this.destroyOnClose</code> 的值，然后修改 <code>key</code> 的值。</p><p>当 <code>key</code> 值修改以后，<code>div</code> 中的元素就会整个重新渲染了，这就是官网中所说明 <code>this.destroyOnClose</code> 的作用。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220814095416654.png" alt="image-20220814095416654"></p><p>为了排除 <code>el-dialog</code> 的问题，我们写一个自定义组件来替代 <code>el-dialog</code> 。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div v-show=<span class="string">"showDialog"</span> :key=<span class="string">"key"</span>&gt;</span><br><span class="line">        &lt;slot&gt;<span class="xml"><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    components: &#123;&#125;,</span><br><span class="line">    data() &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            key: <span class="number">1</span>,</span><br><span class="line">            showDialog: <span class="literal">false</span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        open() &#123;</span><br><span class="line">            <span class="keyword">this</span>.showDialog = <span class="literal">true</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">        close() &#123;</span><br><span class="line">            <span class="keyword">this</span>.key += <span class="number">1</span></span><br><span class="line">            <span class="keyword">this</span>.showDialog = <span class="literal">false</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;style scoped&gt;&lt;/</span>style&gt;</span><br></pre></td></tr></table></figure><p>接着我们将 <code>el-dialog</code>  换为上边的组件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">        &lt;wrap ref=<span class="string">"wrap"</span>&gt;</span><br><span class="line">            &lt;el-tabs type=<span class="string">"border-card"</span>&gt;</span><br><span class="line">                &lt;el-tab-pane label=<span class="string">"用户管理"</span>&gt;用户管理&lt;<span class="regexp">/el-tab-pane&gt;</span></span><br><span class="line"><span class="regexp">                &lt;el-tab-pane label="配置管理"&gt;配置管理&lt;/</span>el-tab-pane&gt;</span><br><span class="line">                &lt;el-tab-pane label=<span class="string">"角色管理"</span>&gt;角色管理&lt;<span class="regexp">/el-tab-pane&gt;</span></span><br><span class="line"><span class="regexp">                &lt;el-tab-pane label="定时任务补偿"&gt;定时任务补偿&lt;/</span>el-tab-pane&gt;</span><br><span class="line">            &lt;<span class="regexp">/el-tabs&gt;</span></span><br><span class="line"><span class="regexp">            &lt;el-button @click="close"&gt;关闭&lt;/</span>el-button&gt;</span><br><span class="line">        &lt;<span class="regexp">/wrap&gt;</span></span><br><span class="line"><span class="regexp">        &lt;el-button @click="open"&gt;打开弹窗&lt;/</span>el-button&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> Wrap <span class="keyword">from</span> <span class="string">"./Wrap.vue"</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    name: <span class="string">"App"</span>,</span><br><span class="line">    components: &#123;</span><br><span class="line">        Wrap,</span><br><span class="line">    &#125;,</span><br><span class="line">    data() &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        open() &#123;</span><br><span class="line">            <span class="keyword">this</span>.$refs.wrap.open();</span><br><span class="line">        &#125;,</span><br><span class="line">        close() &#123;</span><br><span class="line">            <span class="keyword">this</span>.$refs.wrap.close();</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;style&gt;</span></span><br><span class="line"><span class="regexp">#app &#123;</span></span><br><span class="line"><span class="regexp">    font-family: Avenir, Helvetica, Arial, sans-serif;</span></span><br><span class="line"><span class="regexp">    -webkit-font-smoothing: antialiased;</span></span><br><span class="line"><span class="regexp">    -moz-osx-font-smoothing: grayscale;</span></span><br><span class="line"><span class="regexp">    text-align: center;</span></span><br><span class="line"><span class="regexp">    color: #2c3e50;</span></span><br><span class="line"><span class="regexp">    margin-top: 60px;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>style&gt;</span><br></pre></td></tr></table></figure><p>运行之后发现问题依旧存在，因此我们可以排除是 <code>el-dialog</code> 的问题了。</p><h2 id="el-tabs-el-tab-pane"><a href="#el-tabs-el-tab-pane" class="headerlink" title="el-tabs el-tab-pane"></a>el-tabs el-tab-pane</h2><p>接下来就是一个二选一问题了，问题代码是在 <code>el-tabs</code> 还是 <code>el-tab-pane</code> 中。</p><p>我们把 <code>el-tab-pane</code> 从 <code>el-tabs</code> 去掉再来看一下还有没有问题。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">wrap</span> <span class="attr">ref</span>=<span class="string">"wrap"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-tabs</span> <span class="attr">type</span>=<span class="string">"border-card"</span>&gt;</span></span><br><span class="line">                hello World</span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-tabs</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-button</span> @<span class="attr">click</span>=<span class="string">"close"</span>&gt;</span>关闭<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">wrap</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-button</span> @<span class="attr">click</span>=<span class="string">"open"</span>&gt;</span>打开弹窗<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>运行一下发现一切正常了：</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comKapture%202022-08-14%20at%2010.07.33.gif" alt="Kapture 2022-08-14 at 10.07.33"></p><p>至此，可以基本确认是 <code>el-tab-pane</code> 问题了。</p><h1 id="直接原因"><a href="#直接原因" class="headerlink" title="直接原因"></a>直接原因</h1><p>我们来定位是哪行代码出现了问题，看一下 <code>el-tab-pane</code> 的整个代码。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div</span><br><span class="line">    <span class="class"><span class="keyword">class</span></span>=<span class="string">"el-tab-pane"</span></span><br><span class="line">    v-<span class="keyword">if</span>=<span class="string">"(!lazy || loaded) || active"</span></span><br><span class="line">    v-show=<span class="string">"active"</span></span><br><span class="line">    role=<span class="string">"tabpanel"</span></span><br><span class="line">    :aria-hidden=<span class="string">"!active"</span></span><br><span class="line">    :id=<span class="string">"`pane-$&#123;paneName&#125;`"</span></span><br><span class="line">    :aria-labelledby=<span class="string">"`tab-$&#123;paneName&#125;`"</span></span><br><span class="line">  &gt;</span><br><span class="line">    &lt;slot&gt;<span class="xml"><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    name: <span class="string">'ElTabPane'</span>,</span><br><span class="line"></span><br><span class="line">    componentName: <span class="string">'ElTabPane'</span>,</span><br><span class="line"></span><br><span class="line">    props: &#123;</span><br><span class="line">      label: <span class="built_in">String</span>,</span><br><span class="line">      labelContent: <span class="built_in">Function</span>,</span><br><span class="line">      name: <span class="built_in">String</span>,</span><br><span class="line">      closable: <span class="built_in">Boolean</span>,</span><br><span class="line">      disabled: <span class="built_in">Boolean</span>,</span><br><span class="line">      lazy: <span class="built_in">Boolean</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    data() &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        index: <span class="literal">null</span>,</span><br><span class="line">        loaded: <span class="literal">false</span></span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    computed: &#123;</span><br><span class="line">      isClosable() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.closable || <span class="keyword">this</span>.$parent.closable;</span><br><span class="line">      &#125;,</span><br><span class="line">      active() &#123;</span><br><span class="line">        <span class="keyword">const</span> active = <span class="keyword">this</span>.$parent.currentName === (<span class="keyword">this</span>.name || <span class="keyword">this</span>.index);</span><br><span class="line">        <span class="keyword">if</span> (active) &#123;</span><br><span class="line">          <span class="keyword">this</span>.loaded = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> active;</span><br><span class="line">      &#125;,</span><br><span class="line">      paneName() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name || <span class="keyword">this</span>.index;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    updated() &#123;</span><br><span class="line">      <span class="keyword">this</span>.$parent.$emit(<span class="string">'tab-nav-update'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>定位 <code>bug</code> 所在行数一般无脑采取二分注释法很快就出来了，经过两次尝试，我们只需要把 <code>updated</code> 中的代码注释掉就一切正常了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">updated() &#123;</span><br><span class="line">  <span class="comment">// this.$parent.$emit('tab-nav-update');</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="根本原因"><a href="#根本原因" class="headerlink" title="根本原因"></a>根本原因</h1><p>子组件发送了 <code>tab-nav-update</code> 事件，看一下父组件 <code>el-tabs</code> 接收  <code>tab-nav-update</code> 事件的代码。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">created() &#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="keyword">this</span>.currentName) &#123;</span><br><span class="line">    <span class="keyword">this</span>.setCurrentName(<span class="string">'0'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.$on(<span class="string">'tab-nav-update'</span>, <span class="keyword">this</span>.calcPaneInstances.bind(<span class="literal">null</span>, <span class="literal">true</span>));</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>这里会执行 <code>calcPaneInstances</code> 方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">calcPaneInstances(isForceUpdate = <span class="literal">false</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.$slots.default) &#123;</span><br><span class="line">    <span class="keyword">const</span> paneSlots = <span class="keyword">this</span>.$slots.default.filter(<span class="function"><span class="params">vnode</span> =&gt;</span> vnode.tag &amp;&amp;</span><br><span class="line">                                                 vnode.componentOptions &amp;&amp; vnode.componentOptions.Ctor.options.name === <span class="string">'ElTabPane'</span>);</span><br><span class="line">    <span class="comment">// update indeed</span></span><br><span class="line">    <span class="keyword">const</span> panes = paneSlots.map(<span class="function">(<span class="params">&#123; componentInstance &#125;</span>) =&gt;</span> componentInstance);</span><br><span class="line">    <span class="keyword">const</span> panesChanged = !<span class="function">(<span class="params">panes.length === <span class="keyword">this</span>.panes.length &amp;&amp; panes.every((pane, index</span>) =&gt;</span> pane === <span class="keyword">this</span>.panes[index]));</span><br><span class="line">    <span class="keyword">if</span> (isForceUpdate || panesChanged) &#123;</span><br><span class="line">      <span class="keyword">this</span>.panes = panes;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.panes.length !== <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.panes = [];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>主要是比较前后的 <code>panes</code> 是否一致，如果不一致就直接用新的覆盖旧的 <code>this.panes</code> 。</p><p>由于 <code>render</code> 函数中使用了 <code>panes</code> ，当修改 <code>panes</code> 的值的时候就会触发 <code>el-tabs</code> 的 <code>render</code> 。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">render(h) &#123;</span><br><span class="line">      <span class="keyword">let</span> &#123;</span><br><span class="line">        type,</span><br><span class="line">        handleTabClick,</span><br><span class="line">        handleTabRemove,</span><br><span class="line">        handleTabAdd,</span><br><span class="line">        currentName,</span><br><span class="line">        panes, <span class="comment">// 这里用到了</span></span><br><span class="line">        editable,</span><br><span class="line">        addable,</span><br><span class="line">        tabPosition,</span><br><span class="line">        stretch</span><br><span class="line">      &#125; = <span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line">      ...</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><p>打印一下关闭弹窗的时候发生了什么：</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220816063309490.png" alt="image-20220816063309490"></p><p>当关闭弹窗的时候，触发了 <code>el-tabs</code> 的 <code>render</code> ，但此时除了触发了 <code>el-tabs</code> 的 <code>updated</code> ，同时也触发到了 <code>el-tabs-pane</code> 的 <code>updated</code> 。</p><p>在 <code>el-tab-pane</code> 的 <code>updated</code> 中我们发送 <code>tab-nav-update</code> 事件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">updated() &#123;</span><br><span class="line">  <span class="keyword">this</span>.$parent.$emit(<span class="string">'tab-nav-update'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>tab-nav-update</code> 事件的回调是 <code>calcPaneInstances</code> ，除了改变 <code>this</code> 指向，同时传了一个默认参数 <code>true</code> 。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.$on(<span class="string">'tab-nav-update'</span>, <span class="keyword">this</span>.calcPaneInstances.bind(<span class="literal">null</span>, <span class="literal">true</span>));</span><br></pre></td></tr></table></figure><p>对于 <code>calcPaneInstances</code> 第一个参数的含义是 <code>isForceUpdate</code> 。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">calcPaneInstances(isForceUpdate = <span class="literal">false</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.$slots.default) &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">if</span> (isForceUpdate || panesChanged) &#123;</span><br><span class="line">      <span class="keyword">this</span>.panes = panes;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.panes.length !== <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.panes = [];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>如果 <code>isForceUpdate</code> 为 <code>true</code> 就会更新 <code>panes</code> 的值，接着又触发 <code>el-tabs</code> 的 <code>render</code> 函数，又一次引发 <code>el-tab-pane</code> 的 <code>updated</code> ，最终造成了 <code>render</code> 的死循环，使得浏览器卡死。</p><h1 id="bug-最小说明"><a href="#bug-最小说明" class="headerlink" title="bug 最小说明"></a>bug 最小说明</h1><p>一句话总结：某些场景下如果父组件重新 <code>render</code>，即使子组件没有变化，但子组件传递了 <code>slot</code> ，此时就会触发子组件的 <code>updated</code> 函数。</p><p>上边的逻辑确实不符合直觉，我们将代码完全从 <code>Element</code> 中抽离，举一个简单的例子来复现这个问题：</p><p><code>App.vue</code> 代码，依旧用 <code>wrap</code> 包裹。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">        &lt;wrap ref=<span class="string">"wrap"</span>&gt;</span><br><span class="line">            &lt;tabs&gt;</span><br><span class="line">                &lt;pane&gt;我来自pane的slot&lt;<span class="regexp">/pane&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>tabs&gt;</span><br><span class="line">            &lt;el-button @click=<span class="string">"close"</span>&gt;关闭&lt;<span class="regexp">/el-button&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>wrap&gt;</span><br><span class="line">        &lt;el-button @click=<span class="string">"open"</span>&gt;打开弹窗&lt;<span class="regexp">/el-button&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">import Wrap from "./</span>Wrap.vue<span class="string">";</span></span><br><span class="line"><span class="string">import Pane from "</span>./Pane.vue<span class="string">";</span></span><br><span class="line"><span class="string">import Tabs from "</span>./Tabs.vue<span class="string">";</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">export default &#123;</span></span><br><span class="line"><span class="string">    name: "</span>App<span class="string">",</span></span><br><span class="line"><span class="string">    components: &#123;</span></span><br><span class="line"><span class="string">        Wrap,</span></span><br><span class="line"><span class="string">        Pane,</span></span><br><span class="line"><span class="string">        Tabs,</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">    data() &#123;</span></span><br><span class="line"><span class="string">        return &#123;</span></span><br><span class="line"><span class="string">            show: false,</span></span><br><span class="line"><span class="string">        &#125;;</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">    methods: &#123;</span></span><br><span class="line"><span class="string">        open() &#123;</span></span><br><span class="line"><span class="string">            this.$refs.wrap.open();</span></span><br><span class="line"><span class="string">            this.show = true;</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        close() &#123;</span></span><br><span class="line"><span class="string">            this.$refs.wrap.close();</span></span><br><span class="line"><span class="string">            this.show = false;</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">&#125;;</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;style&gt;</span></span><br><span class="line"><span class="string">#app &#123;</span></span><br><span class="line"><span class="string">    font-family: Avenir, Helvetica, Arial, sans-serif;</span></span><br><span class="line"><span class="string">    -webkit-font-smoothing: antialiased;</span></span><br><span class="line"><span class="string">    -moz-osx-font-smoothing: grayscale;</span></span><br><span class="line"><span class="string">    text-align: center;</span></span><br><span class="line"><span class="string">    color: #2c3e50;</span></span><br><span class="line"><span class="string">    margin-top: 60px;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&lt;/style&gt;</span></span><br></pre></td></tr></table></figure><p><code>Tabs.vue</code> ，提供一个 <code>slot</code> ，并且提供一个方法更新自己包含的 <code>data</code> 属性 <code>i</code> 。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;div&gt;我是 Tabs，第 &#123;&#123; i &#125;&#125; 次渲染&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        &lt;slot&gt;&lt;/</span>slot&gt;</span><br><span class="line">        &lt;el-button @click=<span class="string">"change"</span>&gt;触发 Tabs 重新渲染&lt;<span class="regexp">/el-button&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">export default &#123;</span></span><br><span class="line"><span class="regexp">    data() &#123;</span></span><br><span class="line"><span class="regexp">        return &#123;</span></span><br><span class="line"><span class="regexp">            i: 0,</span></span><br><span class="line"><span class="regexp">        &#125;;</span></span><br><span class="line"><span class="regexp">    &#125;,</span></span><br><span class="line"><span class="regexp">    methods: &#123;</span></span><br><span class="line"><span class="regexp">        change() &#123;</span></span><br><span class="line"><span class="regexp">            this.i++;</span></span><br><span class="line"><span class="regexp">        &#125;,</span></span><br><span class="line"><span class="regexp">    &#125;,</span></span><br><span class="line"><span class="regexp">    updated() &#123;</span></span><br><span class="line"><span class="regexp">        console.log("Tabs:updated");</span></span><br><span class="line"><span class="regexp">    &#125;,</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    mounted() &#123;</span></span><br><span class="line"><span class="regexp">        console.log("Tabs:mounted");</span></span><br><span class="line"><span class="regexp">    &#125;,</span></span><br><span class="line"><span class="regexp">&#125;;</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;<span class="xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><code>Pane.vue</code> ，提供一个 <code>slot</code> 。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;<span class="xml"><span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">    export default &#123;</span></span><br><span class="line"><span class="regexp">mounted() &#123;</span></span><br><span class="line"><span class="regexp">  console.log("Pane:mounted");</span></span><br><span class="line"><span class="regexp">&#125;,</span></span><br><span class="line"><span class="regexp">  updated() &#123;</span></span><br><span class="line"><span class="regexp">    console.log("Pane:updated");</span></span><br><span class="line"><span class="regexp">  &#125;,</span></span><br><span class="line"><span class="regexp">&#125;;</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;<span class="xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>操作路径：</p><p>打开弹窗 -&gt; 关闭弹窗 -&gt; 再打开弹窗（此时 <code>pane</code> 就会触发 <code>updated</code> ） -&gt; 更新 <code>Tabs</code> 的值，会发现 <code>pane</code> 一直触发 <code>updated</code> 。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.com3.gif" alt="3"></p><p>如果我们在 <code>Pane</code> 的 <code>updated</code> 中引发 <code>Tabs</code> 的 <code>render</code> ，就会造成死循环了。</p><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>关于这个问题网上前几年已经讨论过了：</p><p><a href="https://segmentfault.com/q/1010000040171066" target="_blank" rel="noopener">https://segmentfault.com/q/1010000040171066</a></p><p><a href="https://github.com/vuejs/vue/issues/8342" target="_blank" rel="noopener">https://github.com/vuejs/vue/issues/8342</a></p><p><a href="https://stackoverflow.com/questions/57536067/why-vue-need-to-forceupdate-components-when-they-include-static-slot" target="_blank" rel="noopener">https://stackoverflow.com/questions/57536067/why-vue-need-to-forceupdate-components-when-they-include-static-slot</a></p><p>但是上边网站的例子试了下已经不能复现了，看起来这个问题被修过一次了，但没有完全解决，可能是当做 <code>feature</code> 了。</p><h2 id="Vue-2-6"><a href="#Vue-2-6" class="headerlink" title="Vue 2.6+"></a>Vue 2.6+</h2><p>如果你的版本是 <code>Vue 2.6</code> 以上，当时尤大提过了一个<a href="https://github.com/vuejs/vue/pull/9371" target="_blank" rel="noopener">解决方案</a>：</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220816085852972.png" alt="image-20220816085852972"></p><p>指明 <code>slot</code> 的名字，这里就是 <code>default</code> 。</p><p>代码中我们在 <code>Pane</code> 中包裹一层 <code>template</code> 指明 <code>default</code> 。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">        &lt;wrap ref=<span class="string">"wrap"</span>&gt;</span><br><span class="line">            &lt;tabs&gt;</span><br><span class="line">                &lt;pane&gt;</span><br><span class="line">                    &lt;template v-slot:<span class="keyword">default</span>&gt; 我来自pane的slot &lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp">                &lt;/</span>pane&gt;</span><br><span class="line">            &lt;<span class="regexp">/tabs&gt;</span></span><br><span class="line"><span class="regexp">            &lt;el-button @click="close"&gt;关闭&lt;/</span>el-button&gt;</span><br><span class="line">        &lt;<span class="regexp">/wrap&gt;</span></span><br><span class="line"><span class="regexp">        &lt;el-button @click="open"&gt;打开弹窗&lt;/</span>el-button&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br></pre></td></tr></table></figure><p>再运行一下会发现 <code>pane</code> 的 <code>updated</code> 就不会触发了。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220816082327739.png" alt="image-20220816082327739"></p><h2 id="Vue-2-6-以下"><a href="#Vue-2-6-以下" class="headerlink" title="Vue 2.6 以下"></a>Vue 2.6 以下</h2><p>仔细想一下，我们第一次渲染的时候并不会出现问题，因此我们干脆在关闭弹窗的时候把 <code>Pane</code> 销毁掉（<code>Pane</code> 添加 <code>v-if</code> ），再打开弹窗的时候现场就和第一次保持一致，就不会引起 <code>Element</code> 的死循环了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">        &lt;wrap ref=<span class="string">"wrap"</span>&gt;</span><br><span class="line">            &lt;tabs&gt;</span><br><span class="line">                &lt;pane v-<span class="keyword">if</span>=<span class="string">"show"</span>&gt; 我来自pane的slot &lt;<span class="regexp">/pane&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>tabs&gt;</span><br><span class="line">            &lt;el-button @click=<span class="string">"close"</span>&gt;关闭&lt;<span class="regexp">/el-button&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>wrap&gt;</span><br><span class="line">        &lt;el-button @click=<span class="string">"open"</span>&gt;打开弹窗&lt;<span class="regexp">/el-button&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">import Wrap from "./</span>Wrap.vue<span class="string">";</span></span><br><span class="line"><span class="string">import Pane from "</span>./Pane.vue<span class="string">";</span></span><br><span class="line"><span class="string">import Tabs from "</span>./Tabs.vue<span class="string">";</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">export default &#123;</span></span><br><span class="line"><span class="string">    name: "</span>App<span class="string">",</span></span><br><span class="line"><span class="string">    components: &#123;</span></span><br><span class="line"><span class="string">        Wrap,</span></span><br><span class="line"><span class="string">        Pane,</span></span><br><span class="line"><span class="string">        Tabs,</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">    data() &#123;</span></span><br><span class="line"><span class="string">        return &#123;</span></span><br><span class="line"><span class="string">            show: false,</span></span><br><span class="line"><span class="string">        &#125;;</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">    methods: &#123;</span></span><br><span class="line"><span class="string">        open() &#123;</span></span><br><span class="line"><span class="string">            this.$refs.wrap.open();</span></span><br><span class="line"><span class="string">            this.show = true;</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        close() &#123;</span></span><br><span class="line"><span class="string">            this.$refs.wrap.close();</span></span><br><span class="line"><span class="string">            this.show = false;</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">&#125;;</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br></pre></td></tr></table></figure><p>同样的，<code>Pane</code> 的 <code>updated</code> 也不会被触发了。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220816083018335.png" alt="image-20220816083018335"></p><h2 id="等-Element-兼容"><a href="#等-Element-兼容" class="headerlink" title="等 Element 兼容"></a>等 Element 兼容</h2><p>讲道理，这个问题其实也不能算作是 <code>Element</code> 的，但在 <code>updated</code> 生命周期触发渲染其实 <code>Vue</code> 官方已经给出过警告了。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220816083227156.png" alt="image-20220816083227156"></p><p><code>Element</code> 兼容的话，需要分析一下当时为什么在 <code>updated</code> 更新父组件状态，然后换一种方式了。</p><h2 id="等-Vue-修复？"><a href="#等-Vue-修复？" class="headerlink" title="等 Vue 修复？"></a>等 Vue 修复？</h2><p>应该不会再修复了，毕竟有方案可以绕过这个问题，强制更新子组件应该是某些场景确实需要更新。</p><p>但 <code>slot</code> 为什么会引发这个问题，源代码到时候我会再研究下，最近也一直在看源代码相关的，目前 <code>Vue2</code> 响应式系统和虚拟 <code>dom</code> 两大块原理解析已经完成了，模版编译已经开始写了，关于 <code>slot</code> 应该也快写到了，感兴趣的同学也可以到 <a href="https://vue.windliang.wang/" target="_blank" rel="noopener">vue.windliang.wang</a> 一起学习，文章会将 <code>Vue</code> 的每个点都拆出来并且配有相应的源代码进行调试。</p><h1 id="总"><a href="#总" class="headerlink" title="总"></a>总</h1><p>在业务开发中，如果业务方能解决的问题，一般就自己解决了，一方面底层包团队更新速度确实慢，另一方面，因为业务代码依赖的包可能和最新版本差很多了，即使底层库修复了，我们也不会去更新库版本，罗老师镇楼。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220816084114944.png" alt="image-20220816084114944"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;现象&quot;&gt;&lt;a href=&quot;#现象&quot; class=&quot;headerlink&quot; title=&quot;现象&quot;&gt;&lt;/a&gt;现象&lt;/h1&gt;&lt;p&gt; &lt;code&gt;element-ui&lt;/code&gt; 版本是 &lt;code&gt;2.15.9&lt;/code&gt;，&lt;code&gt;vue&lt;/code&gt; 版本是 
      
    
    </summary>
    
    
      <category term="前端" scheme="https://windliang.wang/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="elementUI" scheme="https://windliang.wang/tags/elementUI/"/>
    
      <category term="vue" scheme="https://windliang.wang/tags/vue/"/>
    
  </entry>
  
</feed>
