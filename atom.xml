<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>windliang</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://windliang.wang/"/>
  <updated>2022-12-25T05:08:39.385Z</updated>
  <id>https://windliang.wang/</id>
  
  <author>
    <name>windliang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>前端 mock 数据的几种方式</title>
    <link href="https://windliang.wang/2022/12/20/%E5%89%8D%E7%AB%AFmock%E6%95%B0%E6%8D%AE%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
    <id>https://windliang.wang/2022/12/20/%E5%89%8D%E7%AB%AFmock%E6%95%B0%E6%8D%AE%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/</id>
    <published>2022-12-20T00:08:50.000Z</published>
    <updated>2022-12-25T05:08:39.385Z</updated>
    
    <content type="html"><![CDATA[<p>具体需求开发前，后端往往只提供接口文档，对于前端，最简单的方式就是把想要的数据写死在代码里进行开发，但这样的坏处就是和后端联调前还需要再把写死的数据从代码里删除，最好的方式是无侵入的 <code>mock</code> 。下边介绍几种常用的方式，大家可以结合自己的项目来选取。</p><p>大致分为三类，重写 <code>xhr/fetch</code>、<code>node.js</code> 服务中转、系统层面拦截。</p><h1 id="接口demo"><a href="#接口demo" class="headerlink" title="接口demo"></a>接口demo</h1><p>为了后边方便的安装 <code>node</code> 包，可以用 <code>webpack</code> 进行打包，具体配置可以参考 <a href="https://windliang.wang/2021/08/19/2021%E5%B9%B4%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%8F%91%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AE%E6%8C%87%E5%8D%97/">2021年从零开发前端项目指南</a>，看到 <code>React</code> 配置的前一步就够了，只需要配置一个 <code>html</code> 和一个接口请求。 需要注意下 <code>webpack</code> 的版本，不同版本后续的配置会不同，这里我用的是 <code>5.75.0</code> 。</p><p>最终目标是通过 <code>mock</code> 让下边还没有开发好的接口正常返回数据：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">fetch(<span class="string">"/api/data"</span>, &#123;</span><br><span class="line">  body: <span class="built_in">JSON</span>.stringify(&#123; <span class="attr">id</span>: <span class="number">10</span> &#125;),</span><br><span class="line">  method: <span class="string">"POST"</span>,</span><br><span class="line">&#125;)</span><br><span class="line">  .then(<span class="function">(<span class="params">response</span>) =&gt;</span> response.json())</span><br><span class="line">  .then(<span class="function">(<span class="params">json</span>) =&gt;</span> <span class="built_in">console</span>.log(json));</span><br></pre></td></tr></table></figure><p>现在肯定是 <code>404</code> 。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20221223093023287.png" alt="image-20221223093023287"></p><h1 id="Better-mock"><a href="#Better-mock" class="headerlink" title="Better-mock"></a>Better-mock</h1><p><strong>better-mock</strong> <code>fork</code> 自 <a href="https://github.com/nuysoft/Mock" target="_blank" rel="noopener">Mock.js</a>，使用方法和 <code>Mock.js</code> 一致，用于 <code>javascript</code> <code>mock</code> 数据生成，它可以拦截 <code>XHR</code> 和 <code>fetch</code> 请求，并返回自定义的数据类型。</p><p>只需要在调用接口前，引入 <code>better-mock</code> 。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Mock <span class="keyword">from</span> <span class="string">"better-mock"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// mock list 返回数组，大小是 1 到 10，对象中的 id 自动加 1</span></span><br><span class="line">Mock.mock(<span class="string">"/api/data"</span>, &#123;</span><br><span class="line">  <span class="string">"list|1-10"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"id|+1"</span>: <span class="number">1</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">fetch(<span class="string">"/api/data"</span>, &#123;</span><br><span class="line">  body: <span class="built_in">JSON</span>.stringify(&#123; <span class="attr">id</span>: <span class="number">10</span> &#125;),</span><br><span class="line">  method: <span class="string">"POST"</span>,</span><br><span class="line">&#125;)</span><br><span class="line">  .then(<span class="function">(<span class="params">response</span>) =&gt;</span> response.json())</span><br><span class="line">  .then(<span class="function">(<span class="params">json</span>) =&gt;</span> <span class="built_in">console</span>.log(json));</span><br></pre></td></tr></table></figure><p>控制台此时就会输出数据了。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20221224203508017.png" alt="image-20221224203508017"></p><p> <code>better-mock</code> 一个好处就是可以通过它既有的语法来生成一些随机的数据，每次请求都会返回不同的数据。</p><p>坏处是会在请求发送前就拦截，导致在 <code>Chrome</code> 控制台就看不见请求了。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20221224203741121.png" alt="image-20221224203741121"></p><h1 id="just-mock"><a href="#just-mock" class="headerlink" title="just mock"></a>just mock</h1><p><a href="https://just-mock.vercel.app/" target="_blank" rel="noopener">just mock</a> 是一个浏览器插件，在代码中什么都不需要更改，只需要添加相应的接口和数据即可实现拦截。</p><p>插件安装好后添加相应的域名就可以拦截到相应的请求。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20221224212934829.png" alt="image-20221224212934829"></p><p>接着进行相应的编辑添加对应的 <code>mock</code> 数据就好。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20221224221427974.png" alt="image-20221224221427974"> </p><p>这样接口就会被拦截，控制台输出预设的数据：</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20221224223523797.png" alt="image-20221224223523797"></p><p>浏览器插件原理和 <code>Better-mock</code> 是一样的，但会更加轻便，无需融入到代码中。两者的原理是一样的，都是在网络请求前重写了全局的 <code>xhr</code> 和 <code>fetch</code> ，具体可以参考 <a href="https://windliang.wang/2022/08/23/%E6%B2%B9%E7%8C%B4%E8%84%9A%E6%9C%AC%E9%87%8D%E6%96%B0fetch%E5%92%8Cxhr%E8%AF%B7%E6%B1%82/">油猴脚本重写fetch和xhr请求</a>。</p><h1 id="koa"><a href="#koa" class="headerlink" title="koa"></a>koa</h1><p>本地通过 <code>koa</code> 开启一个接口服务。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// serve.js</span></span><br><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">"koa"</span>);</span><br><span class="line"><span class="keyword">const</span> router = <span class="built_in">require</span>(<span class="string">"koa-router"</span>)();</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa();</span><br><span class="line"></span><br><span class="line">router.post(<span class="string">"/api/data"</span>, <span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">  ctx.response.body = &#123;</span><br><span class="line">    status: <span class="literal">true</span>,</span><br><span class="line">    data: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">    msg: <span class="string">"获取数据成功"</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// add router middleware:</span></span><br><span class="line">app.use(router.routes());</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure><p>本地开启运行：<code>node server.js</code>，接口提供的地址是 <code>localhost:3000</code>，但是请求的地址是 <code>loacalhost:8080</code> ，当然可以直接修改代码里的地址为 <code>localhost:3000</code> ，但还可以通过 <code>webpack</code>  的配置，将请求转发到 <code>localhost:3000</code> 。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">"path"</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="string">"./src/main.js"</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">"./dist"</span>),</span><br><span class="line">    filename: <span class="string">"bundle.js"</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    <span class="keyword">static</span>: path.resolve(__dirname, <span class="string">"./dist"</span>),</span><br><span class="line">    proxy: &#123;</span><br><span class="line">      <span class="comment">// 将 /api 开头的 http 请求，都代理到 localhost:3000 上，由 koa 提供 mock 数据</span></span><br><span class="line">      <span class="string">"/api"</span>: &#123;</span><br><span class="line">        target: <span class="string">"http://localhost:3000"</span>,</span><br><span class="line">        secure: <span class="literal">false</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这样就可以看到控制台输出了：</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20221225101033687.png" alt="image-20221225101033687"></p><p>此外，<code>Chrome</code> 的 <code>Network</code> 也可以正常看到这个请求：</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20221225101326328.png" alt="image-20221225101326328"></p><p>这种方法也可以用来解决跨域问题，举个例子：</p><p>如果本地想访问一个具体域名的接口，比如请求知乎的热榜接口：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">fetch(</span><br><span class="line">  <span class="string">"https://www.zhihu.com/api/v3/feed/topstory/hot-lists/total?limit=50&amp;desktop=true"</span>,</span><br><span class="line">  &#123;</span><br><span class="line">    headers: &#123;</span><br><span class="line">      accept: <span class="string">"*/*"</span>,</span><br><span class="line">      <span class="string">"accept-language"</span>: <span class="string">"zh-CN,zh;q=0.9,en;q=0.8"</span>,</span><br><span class="line">      <span class="string">"sec-ch-ua"</span>:</span><br><span class="line">        <span class="string">'"Not?A_Brand";v="8", "Chromium";v="108", "Google Chrome";v="108"'</span>,</span><br><span class="line">      <span class="string">"sec-ch-ua-mobile"</span>: <span class="string">"?0"</span>,</span><br><span class="line">      <span class="string">"sec-ch-ua-platform"</span>: <span class="string">'"macOS"'</span>,</span><br><span class="line">      <span class="string">"sec-fetch-dest"</span>: <span class="string">"empty"</span>,</span><br><span class="line">      <span class="string">"sec-fetch-mode"</span>: <span class="string">"cors"</span>,</span><br><span class="line">      <span class="string">"sec-fetch-site"</span>: <span class="string">"same-origin"</span>,</span><br><span class="line">      <span class="string">"x-ab-param"</span>: <span class="string">""</span>,</span><br><span class="line">      <span class="string">"x-ab-pb"</span>:</span><br><span class="line">        <span class="string">"CpoBCAAbAD8ARwC0AGkBagF0ATsCzALXAtgCoAOhA6IDtwOmBNYEEQVRBYsFjAWeBTAGMQbrBicHdAh2CHkI2gg/CWAJwwnECcUJxgnHCcgJyQnKCcsJzAnRCfQJBApJCmUKawqYCqUKqQq+CsQK1ArdCu0K/go7CzwLQwtGC3ELhwuNC9cL4AvlC+YLLAw4DHEMjwysDMMMyQz4DBJNAQAAAAAAAAAAAAAAAAAAAAAEAAEAAAEAAAEAAAIGAAABAAAAAAAAAAAAAAADAAAAAAEAAAABAQAAAAEAAQAAAAUCAQAABgIEAAACAAA="</span>,</span><br><span class="line">      <span class="string">"x-api-version"</span>: <span class="string">"3.0.76"</span>,</span><br><span class="line">      <span class="string">"x-requested-with"</span>: <span class="string">"fetch"</span>,</span><br><span class="line">      <span class="string">"x-zse-93"</span>: <span class="string">"101_3_3.0"</span>,</span><br><span class="line">      <span class="string">"x-zse-96"</span>:</span><br><span class="line">        <span class="string">"2.0_LYJSVCX+9b1YXp/sG1Azyi5tC5RpabLbkXb3w5s6rv=Gxy9uMXqMXm4LjYWRdoIz"</span>,</span><br><span class="line">      <span class="string">"x-zst-81"</span>:</span><br><span class="line">        <span class="string">"3_2.0aR_sn77yn6O92wOB8hPZnQr0EMYxc4f18wNBUgpTQ6nxERFZfRY0-4Lm-h3_tufIwJS8gcxTgJS_AuPZNcXCTwxI78YxEM20s4PGDwN8gGcYAupMWufIoLVqr4gxrRPOI0cY7HL8qun9g93mFukyigcmebS_FwOYPRP0E4rZUrN9DDom3hnynAUMnAVPF_PhaueTF4C8IhwVIDO_8ioC0JXfW9CKpCwCs4OBQAc0uBefagCKGMo1yroBh9CKe_STVHC1IqLKHJL_chSflqHCOqgYPhYKVwH8M4Lqqq9y1wH967NC7vH80UC8wCHswgHBDgY_ovg9r0wBcJO8s9OCzcLMNgLfkgNByqCLhhUf_veOQRY_dvxmCg_zugS8iBtBFgOZkwNLDw2skTX18XSYuJLqpCYBo_pMWbS8Pv3YtGFBaqL9AwCYhbL9eGVV2rNClDL1wJLmxCgKagNBUwSqYrHBbGp8e8HGggSMQ7xC3rOs"</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    referrer: <span class="string">"https://www.zhihu.com/hot"</span>,</span><br><span class="line">    referrerPolicy: <span class="string">"no-referrer-when-downgrade"</span>,</span><br><span class="line">    body: <span class="literal">null</span>,</span><br><span class="line">    method: <span class="string">"GET"</span>,</span><br><span class="line">    mode: <span class="string">"cors"</span>,</span><br><span class="line">    credentials: <span class="string">"include"</span>,</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>由于本地域名是 <code>http://localhost:8080/</code> ，此时浏览器就会报跨域的错了。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20221225102517407.png" alt="image-20221225102517407"></p><p>此时后端可以通过 <code>CORS</code> 策略解决跨域的问题，但因为是测试环境，后端可能会说你自己解决吧，此时就可以通过 <code>Koa</code> 进行中转。</p><p>改写一下 <code>Koa</code> 的代码，先请求后端的接口，接着将收到的数据拿到后返回。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Koa <span class="keyword">from</span> <span class="string">"koa"</span>;</span><br><span class="line"><span class="keyword">import</span> fetch <span class="keyword">from</span> <span class="string">"node-fetch"</span>;</span><br><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">"koa-router"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa();</span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> Router();</span><br><span class="line">router.post(<span class="string">"/api/data"</span>, <span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> res = <span class="keyword">await</span> fetch(</span><br><span class="line">    <span class="string">"https://www.zhihu.com/api/v3/feed/topstory/hot-lists/total?limit=50&amp;desktop=true"</span>,</span><br><span class="line">    &#123;</span><br><span class="line">      headers: &#123;</span><br><span class="line">        accept: <span class="string">"*/*"</span>,</span><br><span class="line">        <span class="string">"accept-language"</span>: <span class="string">"zh-CN,zh;q=0.9,en;q=0.8"</span>,</span><br><span class="line">        <span class="string">"sec-ch-ua"</span>:</span><br><span class="line">          <span class="string">'"Not?A_Brand";v="8", "Chromium";v="108", "Google Chrome";v="108"'</span>,</span><br><span class="line">        <span class="string">"sec-ch-ua-mobile"</span>: <span class="string">"?0"</span>,</span><br><span class="line">        <span class="string">"sec-ch-ua-platform"</span>: <span class="string">'"macOS"'</span>,</span><br><span class="line">        <span class="string">"sec-fetch-dest"</span>: <span class="string">"empty"</span>,</span><br><span class="line">        <span class="string">"sec-fetch-mode"</span>: <span class="string">"cors"</span>,</span><br><span class="line">        <span class="string">"sec-fetch-site"</span>: <span class="string">"same-origin"</span>,</span><br><span class="line">        <span class="string">"x-ab-param"</span>: <span class="string">""</span>,</span><br><span class="line">        <span class="string">"x-ab-pb"</span>:</span><br><span class="line">          <span class="string">"CpoBCAAbAD8ARwC0AGkBagF0ATsCzALXAtgCoAOhA6IDtwOmBNYEEQVRBYsFjAWeBTAGMQbrBicHdAh2CHkI2gg/CWAJwwnECcUJxgnHCcgJyQnKCcsJzAnRCfQJBApJCmUKawqYCqUKqQq+CsQK1ArdCu0K/go7CzwLQwtGC3ELhwuNC9cL4AvlC+YLLAw4DHEMjwysDMMMyQz4DBJNAQAAAAAAAAAAAAAAAAAAAAAEAAEAAAEAAAEAAAIGAAABAAAAAAAAAAAAAAADAAAAAAEAAAABAQAAAAEAAQAAAAUCAQAABgIEAAACAAA="</span>,</span><br><span class="line">        <span class="string">"x-api-version"</span>: <span class="string">"3.0.76"</span>,</span><br><span class="line">        <span class="string">"x-requested-with"</span>: <span class="string">"fetch"</span>,</span><br><span class="line">        <span class="string">"x-zse-93"</span>: <span class="string">"101_3_3.0"</span>,</span><br><span class="line">        <span class="string">"x-zse-96"</span>:</span><br><span class="line">          <span class="string">"2.0_LYJSVCX+9b1YXp/sG1Azyi5tC5RpabLbkXb3w5s6rv=Gxy9uMXqMXm4LjYWRdoIz"</span>,</span><br><span class="line">        <span class="string">"x-zst-81"</span>:</span><br><span class="line">          <span class="string">"3_2.0aR_sn77yn6O92wOB8hPZnQr0EMYxc4f18wNBUgpTQ6nxERFZfRY0-4Lm-h3_tufIwJS8gcxTgJS_AuPZNcXCTwxI78YxEM20s4PGDwN8gGcYAupMWufIoLVqr4gxrRPOI0cY7HL8qun9g93mFukyigcmebS_FwOYPRP0E4rZUrN9DDom3hnynAUMnAVPF_PhaueTF4C8IhwVIDO_8ioC0JXfW9CKpCwCs4OBQAc0uBefagCKGMo1yroBh9CKe_STVHC1IqLKHJL_chSflqHCOqgYPhYKVwH8M4Lqqq9y1wH967NC7vH80UC8wCHswgHBDgY_ovg9r0wBcJO8s9OCzcLMNgLfkgNByqCLhhUf_veOQRY_dvxmCg_zugS8iBtBFgOZkwNLDw2skTX18XSYuJLqpCYBo_pMWbS8Pv3YtGFBaqL9AwCYhbL9eGVV2rNClDL1wJLmxCgKagNBUwSqYrHBbGp8e8HGggSMQ7xC3rOs"</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      referrer: <span class="string">"https://www.zhihu.com/hot"</span>,</span><br><span class="line">      referrerPolicy: <span class="string">"no-referrer-when-downgrade"</span>,</span><br><span class="line">      body: <span class="literal">null</span>,</span><br><span class="line">      method: <span class="string">"GET"</span>,</span><br><span class="line">      mode: <span class="string">"cors"</span>,</span><br><span class="line">      credentials: <span class="string">"include"</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  );</span><br><span class="line">  <span class="keyword">const</span> data = <span class="keyword">await</span> res.json();</span><br><span class="line">  ctx.response.body = &#123;</span><br><span class="line">    status: <span class="literal">true</span>,</span><br><span class="line">    data,</span><br><span class="line">    msg: <span class="string">"获取数据成功"</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;);</span><br><span class="line">app.use(router.routes());</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure><p>此时还是请求 <code>/api/data</code> 。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">fetch(<span class="string">"/api/data"</span>, &#123;</span><br><span class="line">  body: <span class="built_in">JSON</span>.stringify(&#123; <span class="attr">id</span>: <span class="number">10</span> &#125;),</span><br><span class="line">  method: <span class="string">"POST"</span>,</span><br><span class="line">&#125;)</span><br><span class="line">  .then(<span class="function">(<span class="params">response</span>) =&gt;</span> response.json())</span><br><span class="line">  .then(<span class="function">(<span class="params">json</span>) =&gt;</span> <span class="built_in">console</span>.log(json));</span><br></pre></td></tr></table></figure><p>依旧让 <code>Webpack</code> 将数据转发到 <code>Koa</code> 。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">devServer: &#123;</span><br><span class="line">    <span class="keyword">static</span>: path.resolve(__dirname, <span class="string">"./dist"</span>),</span><br><span class="line">    proxy: &#123;</span><br><span class="line">      <span class="comment">// 将 `/api` 开头的 http 请求，都代理到 `localhost:3000` 上，由 koa 提供 mock 数据</span></span><br><span class="line">      <span class="string">"/api"</span>: &#123;</span><br><span class="line">        target: <span class="string">"http://localhost:3000"</span>,</span><br><span class="line">        secure: <span class="literal">false</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p>现在控制台输出的就是知乎返回的数据了，跨域问题也消失了：</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20221225104513837.png" alt="image-20221225104513837"></p><p>当然上边解决跨域只是一个思路，具体的封装还需要结合项目来进行。</p><h1 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h1><p>上边可以通过 <code>webpack</code> 进行转发数据，是因为 <code>webpack</code> 也启动了一个 <code>HTTP</code> 服务器，只不过用的不是 <code>Koa</code> ，是更早的一个框架 <code>Express</code> ，而且它们是同一个团队开发的。</p><p>既然已经有了一个 <code>HTTP</code> 服务器，所以也没必要再开启另一个 <code>Koa</code> 的了，通过给 <code>webpack</code> 传递一个函数，重写 <code>Koa</code> 返回的数据即可。</p><p>只需要通过 <code>setupMiddlewares</code> 重写数据即可。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">"path"</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="string">"./src/main.js"</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">"./dist"</span>),</span><br><span class="line">    filename: <span class="string">"bundle.js"</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    <span class="keyword">static</span>: path.resolve(__dirname, <span class="string">"./dist"</span>),</span><br><span class="line">    setupMiddlewares: <span class="function">(<span class="params">middlewares, devServer</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (!devServer) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"webpack-dev-server is not defined"</span>);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      middlewares.unshift(&#123;</span><br><span class="line">        path: <span class="string">"/api/data"</span>,</span><br><span class="line">        middleware: <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="comment">// mock 数据模拟接口数据</span></span><br><span class="line">          res.send(&#123; <span class="attr">list</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="attr">msg</span>: <span class="string">"webpack mock"</span> &#125;);</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> middlewares;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>此时控制台也可以看到输出的内容：</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20221225111041070.png" alt="image-20221225111041070"></p><p>同时 <code>Network</code> 也是可以看到网络请求的。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20221225111123332.png" alt="image-20221225111123332"></p><h1 id="Charles"><a href="#Charles" class="headerlink" title="Charles"></a>Charles</h1><p>终极必杀 <code>mock</code> 方法，因为它除了可以拦截浏览器中的请求，也可以拦截任意 <code>App</code> 的数据，甚至还可以拦截手机中的 <code>HTTPS</code> 请求，前段时间很火的羊了个羊就可以通过 <code>Charles</code> 抓取请求然后迅速通关。</p><p>需要注意的是 <code>Charles</code> 抓不到 <code>localhost</code> 的请求，访问的时候需要将 <code>localhost</code> 改为 <code>localhost.charlesproxy.com</code>。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20221225122855681.png" alt="image-20221225122855681"></p><p><code>webpack</code> 需要加一个 <code>allowedHosts</code> 的配置，不然会返回 <code>Invalid Host header</code> 。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">devServer: &#123;</span><br><span class="line">  <span class="keyword">static</span>: path.resolve(__dirname, <span class="string">"./dist"</span>),</span><br><span class="line">    allowedHosts: <span class="string">"all"</span>,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>全部配置好后就可以看到 <code>Charles</code> 抓到的请求了。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20221225115539515.png" alt="image-20221225115539515"></p><p>此时只需要提前写好一个 <code>json</code> 文件，然后将右键选择 <code>Map Local</code> 对应的文件即可。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20221225115824423.png" alt="image-20221225115824423"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"data"</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">  <span class="string">"msg"</span>: <span class="string">"from charles"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来就可以在控制台看到 <code>mock</code> 成功了。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20221225120440472.png" alt="image-20221225120440472"></p><h1 id="总"><a href="#总" class="headerlink" title="总"></a>总</h1><p>几种 <code>mock</code> 方式各有优缺点，上边只是提供一个思路，具体的 <code>mock</code> 方案就需要结合项目进行一定的封装了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;具体需求开发前，后端往往只提供接口文档，对于前端，最简单的方式就是把想要的数据写死在代码里进行开发，但这样的坏处就是和后端联调前还需要再把写死的数据从代码里删除，最好的方式是无侵入的 &lt;code&gt;mock&lt;/code&gt; 。下边介绍几种常用的方式，大家可以结合自己的项目来选取
      
    
    </summary>
    
    
      <category term="前端" scheme="https://windliang.wang/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="https://windliang.wang/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>前端er开发cocos小游戏快速入门</title>
    <link href="https://windliang.wang/2022/11/07/%E5%89%8D%E7%AB%AFer%E5%BC%80%E5%8F%91cocos%E5%B0%8F%E6%B8%B8%E6%88%8F%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"/>
    <id>https://windliang.wang/2022/11/07/%E5%89%8D%E7%AB%AFer%E5%BC%80%E5%8F%91cocos%E5%B0%8F%E6%B8%B8%E6%88%8F%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</id>
    <published>2022-11-07T00:56:38.000Z</published>
    <updated>2022-11-30T00:45:21.369Z</updated>
    
    <content type="html"><![CDATA[<p>前段时间一直在更 <a href="https://vue.windliang.wang/" target="_blank" rel="noopener">vue2的源码系列</a>，最近换了换口味，学了一下 <code>cocos</code> ，照猫画虎的写了一个「挑战1024」小游戏。</p><p>学习一门新语言或者新框架其实就是一个堆时间的过程了，整个过程就是结合已有经验进行不同的猜测，然后验证，搞不定就去官网或者搜索引擎找答案，<code>99.9%</code> 的问题应该都能找到。</p><p><code>cocos</code> 网上很多是视频教程，虽然对新手友好，但是信息密度太低了，这里我总结一下 <code>cocos</code> 专有的或者不太符合直觉的一些点，前端的同学看完以后能更快的进入 <code>cocos</code> 的开发中。</p><p>建议先跟着官方的 <a href="https://docs.cocos.com/creator/manual/zh/getting-started/first-game/" target="_blank" rel="noopener">快速上手</a> 先一步一步实现一个小游戏，再读下边的文章效果会更佳。</p><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p><code>cocos</code> 提供了游戏引擎，一些常用的操作，碰撞检测、重力模拟、变换位置、旋转、缩放、粒子系统等都可以通过配置一键实现，游戏引擎最终会帮我们把界面渲染到 <code>canvas</code> 节点上。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20221113101837574.png" alt="image-20221113101837574"></p><p>因为是渲染至 <code>canvas</code> ，当然很自然的可以支持跨端，一套代码可以编译至 <code>h5</code>、微信小游戏等平台。</p><p>同一个功能不同平台之间有不同的 <code>api</code> ，比如 <code>localstorage</code> 的使用会有所不同，<code>cocos</code> 会帮我们在上层抹平，只需要按照 <code>cocos</code> 的语法编写，编译的时候选择相应的平台就会转成对应平台的 <code>api</code>。</p><h1 id="编辑器"><a href="#编辑器" class="headerlink" title="编辑器"></a>编辑器</h1><p><code>cocos</code> 开发和平常的前端开发不太一样，它是代码结合 <code>UI</code> 拖拽来实现的，通过拖拽我们可以快速的布局、添加组件、设置属性等。</p><p>基于此，项目和编辑器就有了强绑定的关系，如果下载别人的项目，还需要下载相应的编辑器。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20221113104527992.png" alt="image-20221113104527992"></p><p>打开项目的时候需要选择相应的编辑器。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20221113104543991.png" alt="image-20221113104543991"></p><p>当然，如果编辑器差的版本比较小，<code>Cocos</code> 也可以帮我们自动升级项目的编辑器版本。如果是 <code>2.x</code> 升到 <code>3.x</code> 就会有 <code>break changes</code> ，需要手动进行一些代码的兼容。</p><p><code>ps</code>：<code>MAC</code> <code>M1</code> 版本不支持 <code>2.4.5</code> 以下的版本。</p><h1 id="场景-Scene"><a href="#场景-Scene" class="headerlink" title="场景/Scene"></a>场景/Scene</h1><p>游戏的 <code>ui</code> 、逻辑都挂载在某个场景（<code>Scene</code>）下，可以在资源管理器右键创建场景，然后双击打开。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20221113110410892.png" alt="image-20221113110410892"></p><p>接下来我们就可以在当前 <code>Canvas</code> 添加各种节点和代码逻辑了。</p><p>游戏如果有多个页面，可以新建多个场景各自维护。</p><p>ps：如果从导入网上下载的 <code>cocos</code> 项目，场景不会自动加载，需要双击一下场景然后再预览。</p><h1 id="节点-Node"><a href="#节点-Node" class="headerlink" title="节点/Node"></a>节点/Node</h1><p>我们可以通过右键创建节点，除了空结点，还帮我们预设了其他的很多节点，比如 <code>Label</code> 、<code>Button</code> 等。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20221113112755384.png" alt="image-20221113112755384"></p><p>节点是树状关系，每个节点可以得到它的父节点，也可以得到它的子节点。</p><p>比如我们可以通过 <code>getChildByName</code> 得到它的子节点。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.node.getChildByName(<span class="string">"message"</span>); <span class="comment">// 得到相应的 Node 节点</span></span><br></pre></td></tr></table></figure><p>通过 <code>this.node.parent</code> 拿到它的父节点。</p><h1 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h1><p>一个空结点只有一些位置、大小属性。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20221113153540396.png" alt="image-20221113153540396"></p><p>我们可以在 <code>Node</code> 节点上挂载一些组件让 <code>Node</code> 拥有样式和功能。</p><h2 id="Label-组件"><a href="#Label-组件" class="headerlink" title="Label 组件"></a>Label 组件</h2><p>如果我们创建一个 <code>Label</code> 节点，会自动挂一个 <code>Label</code> 组件。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20221113153748303.png" alt="image-20221113153748303"></p><p>通过 <code>Label</code> 组件我们可以设置文案 、字体大小等，展示到场景中的就是一个普通的 <code>Label</code>。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20221113153900887.png" alt="image-20221113153900887"></p><h2 id="图片组件"><a href="#图片组件" class="headerlink" title="图片组件"></a>图片组件</h2><p>我们可以通过将「资源管理器」中的图片拖动到「层级管理器」中生成一个带背景的 <code>Node</code> 节点。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20221113154522620.png" alt="image-20221113154522620"></p><p>拖过去之后会生成一个带有 <code>Sprite</code> 组件的节点，并将该图片设置为 <code>Sprite Frame</code> 属性的值，这样这张图片就会展示到场景中了。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20221113154930782.png" alt="image-20221113154930782"></p><p>如果想要更改图片，只要把 <code>Sprite Frame</code> 属性清空，重新拖一个图片上去即可。</p><h2 id="脚本组件"><a href="#脚本组件" class="headerlink" title="脚本组件"></a>脚本组件</h2><p>这个是最重要的，我们可以编写游戏逻辑，设置一些点击监听、节点之间联动等逻辑，然后挂到 <code>Node</code> 节点上。</p><p>先新建一个 <code>js</code> 文件，会自动帮我们生成带有生命周期的一些代码。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20221113160458554.png" alt="image-20221113160458554"></p><p>双击打开新建的 <code>js</code> 文件，我们可以把文件和 <code>VSCode</code> 关联，用 <code>VSCode</code> 进行代码的编辑。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Learn cc.Class:</span></span><br><span class="line"><span class="comment">//  - https://docs.cocos.com/creator/manual/en/scripting/class.html</span></span><br><span class="line"><span class="comment">// Learn Attribute:</span></span><br><span class="line"><span class="comment">//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html</span></span><br><span class="line"><span class="comment">// Learn life-cycle callbacks:</span></span><br><span class="line"><span class="comment">//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html</span></span><br><span class="line"></span><br><span class="line">cc.Class(&#123;</span><br><span class="line">    extends: cc.Component,</span><br><span class="line"></span><br><span class="line">    properties: &#123;</span><br><span class="line">        <span class="comment">// foo: &#123;</span></span><br><span class="line">        <span class="comment">//     // ATTRIBUTES:</span></span><br><span class="line">        <span class="comment">//     default: null,        // The default value will be used only when the component attaching</span></span><br><span class="line">        <span class="comment">//                           // to a node for the first time</span></span><br><span class="line">        <span class="comment">//     type: cc.SpriteFrame, // optional, default is typeof default</span></span><br><span class="line">        <span class="comment">//     serializable: true,   // optional, default is true</span></span><br><span class="line">        <span class="comment">// &#125;,</span></span><br><span class="line">        <span class="comment">// bar: &#123;</span></span><br><span class="line">        <span class="comment">//     get () &#123;</span></span><br><span class="line">        <span class="comment">//         return this._bar;</span></span><br><span class="line">        <span class="comment">//     &#125;,</span></span><br><span class="line">        <span class="comment">//     set (value) &#123;</span></span><br><span class="line">        <span class="comment">//         this._bar = value;</span></span><br><span class="line">        <span class="comment">//     &#125;</span></span><br><span class="line">        <span class="comment">// &#125;,</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// LIFE-CYCLE CALLBACKS:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// onLoad () &#123;&#125;,</span></span><br><span class="line"></span><br><span class="line">    start () &#123;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// update (dt) &#123;&#125;,</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>properties</code> 是脚本组件的属性，写在这里的属性可以在 <code>Cocos</code> 的界面上看到。</p><p>比较重要是 <code>OnLoad</code> 和 <code>update</code> 两个生命周期，<code>OnLoad</code> 会在组件渲染前进行执行，这里我们可以进行一些初始化的操作，<code>update</code> 生命周期会在每一帧渲染前执行，这里我们就可以更新节点的位置让一些节点动起来。</p><p>文件编写好以后，我们可以以组件的形式逻辑挂载到相应的 <code>Node</code> 节点上。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20221113161547263.png" alt="image-20221113161547263"></p><h2 id="Widget-组件"><a href="#Widget-组件" class="headerlink" title="Widget 组件"></a>Widget 组件</h2><p>这个比较简单，它可以设置和边界的相对距离。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20221113173512981.png" alt="image-20221113173512981"></p><h2 id="碰撞组件"><a href="#碰撞组件" class="headerlink" title="碰撞组件"></a>碰撞组件</h2><p>两个 <code>Node</code> 节点相撞，我们可以根据它们的坐标手动进行判断，也可以在 <code>Node</code> 节点上挂载碰撞组件，设置它们的分组，然后在脚本组件中增加 <code>onCollisionEnter</code> 回调函数即可。</p><p>添加 <code>BoxCollider</code> 组件。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20221113162101123.png" alt="image-20221113162101123"></p><p>设置 <code>Node</code> 中的 <code>Group</code> 属性。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20221113162143563.png" alt="image-20221113162143563"></p><p><code>Group</code> 我们可以手动进行管理，并且设置哪些 <code>Group</code> 产生碰撞。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20221113162918517.png" alt="image-20221113162918517"></p><p>接下来还需要在游戏最开始的时候开始碰撞检测，可以给层级节点中的 <code>Canvas</code> 节点添加一个用户脚本组件 <code>game.js</code> ，然后修改脚本组件的 <code>OnLoad</code> 中调用下边的方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> collisionManager = cc.director.getCollisionManager();</span><br><span class="line">collisionManager.enabled = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure><p>最后在相应的 <code>Node</code> 节点的用户脚本中添加 <code>onCollisionEnter</code> 回调函数进行碰撞后的逻辑即可。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">onCollisionEnter(other) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.game.continueIng &amp;&amp; other.node.name !== <span class="string">"ground"</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">switch</span> (other.node.name) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"star"</span>:</span><br><span class="line">      <span class="keyword">this</span>.handleStar(other);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"meteorites"</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"ground"</span>:</span><br><span class="line">      <span class="keyword">this</span>.game.endGame();</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>通过回调参数 <code>other</code> 可以拿到碰撞的节点。</p><h2 id="刚体组件"><a href="#刚体组件" class="headerlink" title="刚体组件"></a>刚体组件</h2><p>这里通过刚体组件我们可以实现物体受到重力的效果。</p><p>首先给节点添加一个 <code>RightBody</code> 组件，并且将类型设置为 <code>Dynamic</code> 。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20221113165834371.png" alt="image-20221113165834371"></p><p>和碰撞组件一样，我们在 <code>Canvas</code> 对应的用户脚本组件的 <code>OnLoad</code> 中调用下边的方法开启重力模拟即可。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> instance = cc.director.getPhysicsManager();</span><br><span class="line">instance.enabled = <span class="literal">true</span>;</span><br><span class="line">instance.gravity = cc.v2(<span class="number">0</span>, <span class="number">-980</span> * <span class="number">2</span>);</span><br></pre></td></tr></table></figure><p>这样相应的节点就会受到重力的作用了。</p><h2 id="动画组件"><a href="#动画组件" class="headerlink" title="动画组件"></a>动画组件</h2><p>在层级管理器选中相应的节点，点击「动画编辑器」，然后添加一个 <code>Animation</code> 组件</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20221113165636129.png" alt="image-20221113165636129"></p><p>接着添加一个 <code>Clip</code>，并进行编辑，设置动画的关键帧等，有点像 <code>photoShop</code> 里的动画编辑器。</p><p>保存后将新建的 <code>Clip</code> 拖到到对应的属性上即可。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20221113170821916.png" alt="image-20221113170821916"></p><h2 id="防穿透组件"><a href="#防穿透组件" class="headerlink" title="防穿透组件"></a>防穿透组件</h2><p><code>button</code> 被弹窗盖住，此时 <code>button</code> 依旧会响应到点击时间，此时可以通过给弹窗增加 <code>BlockInputEvents</code> 防止点击穿透。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20221119205327720.png" alt="image-20221119205327720"></p><p>需要点击的时候激活，关闭的时候取消激活。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.node.getComponent(cc.BlockInputEvents).enabled = <span class="literal">true</span>; <span class="comment">// 点击的时候激活</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.node.getComponent(cc.BlockInputEvents).enabled = <span class="literal">false</span>;  <span class="comment">// 关闭的时候取消激活</span></span><br></pre></td></tr></table></figure><h1 id="坐标系"><a href="#坐标系" class="headerlink" title="坐标系"></a>坐标系</h1><p>设置的 <code>positon</code> 是在父节点坐标系下的位置。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20221113173906330.png" alt=""></p><p>如果它有子节点，它的子节点设置的 <code>positon</code> 就是基于上边的红线和绿线为坐标轴进行排布。</p><h1 id="脚本组件属性"><a href="#脚本组件属性" class="headerlink" title="脚本组件属性"></a>脚本组件属性</h1><p>我们可以脚本组件中添加一些属性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">properties: &#123;</span><br><span class="line">       bird: &#123;</span><br><span class="line">           <span class="keyword">default</span>: <span class="literal">null</span>,</span><br><span class="line">           type: Bird,</span><br><span class="line">       &#125;,</span><br><span class="line">       gravity: cc.v2(<span class="number">0</span>, <span class="number">-980</span> * <span class="number">2</span>),</span><br><span class="line">       starPool: &#123;</span><br><span class="line">           <span class="keyword">default</span>: <span class="literal">null</span>,</span><br><span class="line">           type: StarPool,</span><br><span class="line">       &#125;,</span><br><span class="line">       scoreDisplay: &#123;</span><br><span class="line">           <span class="keyword">default</span>: <span class="literal">null</span>,</span><br><span class="line">           type: cc.Label,</span><br><span class="line">       &#125;,</span><br><span class="line">       scoreResult: &#123;</span><br><span class="line">           <span class="keyword">default</span>: <span class="literal">null</span>,</span><br><span class="line">           type: cc.Node,</span><br><span class="line">       &#125;,</span><br><span class="line">       successAudio: &#123;</span><br><span class="line">           <span class="keyword">default</span>: <span class="literal">null</span>,</span><br><span class="line">           type: cc.AudioClip,</span><br><span class="line">       &#125;,</span><br><span class="line">       failAudio: &#123;</span><br><span class="line">           <span class="keyword">default</span>: <span class="literal">null</span>,</span><br><span class="line">           type: cc.AudioClip,</span><br><span class="line">       &#125;,</span><br><span class="line">   &#125;,</span><br></pre></td></tr></table></figure><p>这样在 <code>cocos</code> 编辑器中我们可以通过拖动进行属性的初始化。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20221113172140746.png" alt="image-20221113172140746"></p><p>值的注意的是，如果我们在 <code>properties</code> 外边写属性，比如下边的 <code>num</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">cc.Class(&#123;</span><br><span class="line">    extends: cc.Component,</span><br><span class="line"></span><br><span class="line">    properties: &#123;</span><br><span class="line">        <span class="comment">// foo: &#123;</span></span><br><span class="line">        <span class="comment">//     // ATTRIBUTES:</span></span><br><span class="line">        <span class="comment">//     default: null,        // The default value will be used only when the component attaching</span></span><br><span class="line">        <span class="comment">//                           // to a node for the first time</span></span><br><span class="line">        <span class="comment">//     type: cc.SpriteFrame, // optional, default is typeof default</span></span><br><span class="line">        <span class="comment">//     serializable: true,   // optional, default is true</span></span><br><span class="line">        <span class="comment">// &#125;,</span></span><br><span class="line">        <span class="comment">// bar: &#123;</span></span><br><span class="line">        <span class="comment">//     get () &#123;</span></span><br><span class="line">        <span class="comment">//         return this._bar;</span></span><br><span class="line">        <span class="comment">//     &#125;,</span></span><br><span class="line">        <span class="comment">//     set (value) &#123;</span></span><br><span class="line">        <span class="comment">//         this._bar = value;</span></span><br><span class="line">        <span class="comment">//     &#125;</span></span><br><span class="line">        <span class="comment">// &#125;,</span></span><br><span class="line">    &#125;,</span><br><span class="line">  </span><br><span class="line">  num: <span class="number">0</span>, <span class="comment">// 自定义属性</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// LIFE-CYCLE CALLBACKS:</span></span><br><span class="line"></span><br><span class="line">    onLoad () &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.num)</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    start () &#123;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// update (dt) &#123;&#125;,</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>此时我们在 <code>onLoad</code> 打印该值只会是 <code>undefind</code> ，如果想在当前实例上挂载属性，我们可以选择在 <code>onLoad</code> 中进行值的初始化。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">onLoad () &#123;</span><br><span class="line">  <span class="keyword">this</span>.num = <span class="number">2</span>; <span class="comment">// 自定义属性</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>这里需要注意的是如果改变脚本代码，保存后我们需要重新切到 <code>Cocos</code> 的编辑页面 才会重新进行编译。</p><h1 id="Prelab"><a href="#Prelab" class="headerlink" title="Prelab"></a>Prelab</h1><p>节点可以在编辑器生成，当然也可以通过代码动态生成。对于需要重复生成的节点，我们可以将它保存成 <code>Prefab</code>（预制）资源，作为我们动态生成节点时使用的模板。</p><p>做法就是在「层级管理器」随便新建一个 <code>Node</code> 节点，并且添加所需要的组件和自定义的脚本组件，最后将该 <code>node</code> 节点拖动到「资源管理器」即可。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20221114064750298.png" alt="image-20221114064750298"></p><p>之后我们就可以层级管理器中刚新建的节点删除。当然，为了后续方便编辑，该 <code>Node</code> 节点也可以保留，但需要将其放到画面外，并且将脚本组件取消勾选一下，不执行逻辑。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20221114065217375.png" alt="image-20221114065217375"></p><p>有了预制资源后，我们可以通过下边的代码来动态生成 <code>Node</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> newStar = cc.instantiate(<span class="keyword">this</span>.starPrefab); <span class="comment">// 根据预置资源生成 node 节点</span></span><br><span class="line">newStar.getComponent(<span class="string">"Star"</span>).init(<span class="keyword">this</span>, <span class="keyword">this</span>.game); <span class="comment">// 根据 node 节点的脚本组件进行初始化</span></span><br><span class="line"><span class="keyword">this</span>.node.addChild(newStar); <span class="comment">// 加到当前 node 节点的下面</span></span><br></pre></td></tr></table></figure><p>对于画面中移动的 <code>node</code> ，当移出画面后我们可以进行重复利用，这里可以引入 <code>NodePool</code> ，出画面后加入节点池，需要的时候再从里边拿。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.pool = <span class="keyword">new</span> cc.NodePool();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 放入节点池</span></span><br><span class="line"><span class="keyword">this</span>.pool.put(star);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 需要的时候从里边拿</span></span><br><span class="line"><span class="keyword">const</span> newStar = <span class="keyword">this</span>.pool.get();</span><br></pre></td></tr></table></figure><p>通过节点池我们可以节省内存的开销。</p><h1 id="Node-和-组件"><a href="#Node-和-组件" class="headerlink" title="Node 和 组件"></a>Node 和 组件</h1><p><code>Node</code> 和组件的关系最开始的时候有点懵逼，慢慢的调试后大致了解了，下边讲一下我的理解。</p><p>在定义 <code>properties</code> 的时候我们需要定义对象的属性，它可以是 <code>type: cc.Node,</code> ，也可以是自带的组件类型 <code>type: cc.Label</code> ，也可以是我们定义的脚本组件类型，可以先将编写的脚本代码引入 <code>const Bird = require(&quot;Bird&quot;);</code> ，然后将其作为一种类型  <code>type: Bird</code>。</p><p>一个节点属于复合类型，它既是本身的 <code>cc.Node</code> 类型，如果添加了相应的组件，它也是相应的组件类型。</p><p>以下图为例，它既是 <code>cc.Node</code> 类型，也是 <code>cc.Label</code> 类型，还是 <code>test</code> 类型。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20221113174535576.png" alt="image-20221113174535576"></p><p>下边以动态修改 <code>Label</code> 的值，讲一下 <code>Node</code> 和组件之间的关系。</p><p>首先新建一个 <code>canvas</code> 的脚本组件 <code>game.js</code> ，将该组件挂载到 <code>canvas</code> 节点中。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20221113182122357.png" alt="image-20221113182122357"></p><p><code>game.js</code> 中添加一个 <code>label</code> 属性，类型为 <code>cc.Node</code> 。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">cc.Class(&#123;</span><br><span class="line">    extends: cc.Component,</span><br><span class="line">    properties: &#123;</span><br><span class="line">        label: &#123;</span><br><span class="line">            <span class="keyword">default</span>: <span class="literal">null</span>,</span><br><span class="line">            type: cc.Node,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    onLoad() &#123;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    start() &#123;&#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// update (dt) &#123;&#125;,</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>选中 <code>Canvas</code> 节点，将 <code>FirstLabel</code> 节点拖动添加的属性中。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20221113174930670.png" alt="image-20221113174930670"></p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20221113175131343.png" alt="image-20221113175131343"></p><p>虽然 <code>firstLabel</code> 属于三种类型，但因为我们定义的类型是 <code>cc.Node</code> ，因此拿到的是一个 <code>Node</code> 对象，我们打印看一下。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">onLoad() &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.label);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20221113175207934.png" alt="image-20221113175207934"></p><p>如果想要在运行的时候改变当前节点的位置，调用 <code>setPositon</code> 即可。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">cc.Class(&#123;</span><br><span class="line">    extends: cc.Component,</span><br><span class="line"></span><br><span class="line">    properties: &#123;</span><br><span class="line">        label: &#123;</span><br><span class="line">            <span class="keyword">default</span>: <span class="literal">null</span>,</span><br><span class="line">            type: cc.Node,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    onLoad() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.label);</span><br><span class="line">        <span class="keyword">this</span>.label.setPosition(cc.v2(<span class="number">0</span>, <span class="number">-200</span>));</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    start() &#123;&#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// update (dt) &#123;&#125;,</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>如果我们想改变组件的文案，我们需要先通过 <code>getComponent</code> 拿到 <code>Label</code> 组件的实例对象，然后更新 <code>string</code> 属性即可。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">onLoad() &#123;</span><br><span class="line">       <span class="built_in">console</span>.log(<span class="keyword">this</span>.label);</span><br><span class="line">       <span class="keyword">this</span>.label.setPosition(cc.v2(<span class="number">0</span>, <span class="number">-200</span>));</span><br><span class="line">       <span class="keyword">this</span>.label.getComponent(cc.Label).string = <span class="string">"我改变了"</span>;</span><br><span class="line">   &#125;,</span><br></pre></td></tr></table></figure><p>初值设置的是 <code>设置文案</code>。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20221113175852560.png" alt="image-20221113175852560"></p><p>运行起来会发现是我们在 <code>onLoad</code> 中设置的值。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20221113180058709.png" alt="image-20221113180058709"></p><p>当然，我们也可以在开始的时候将组件类型设置为 <code>cc.Label</code> ，这样我们开始拿到的就是 <code>Label</code> 实例对象，就不需要再通过 <code>getComponent</code>  方法了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">cc.Class(&#123;</span><br><span class="line">    extends: cc.Component,</span><br><span class="line"></span><br><span class="line">    properties: &#123;</span><br><span class="line">        label: &#123;</span><br><span class="line">            <span class="keyword">default</span>: <span class="literal">null</span>,</span><br><span class="line">            type: cc.Label,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    onLoad() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.label);</span><br><span class="line">        <span class="keyword">this</span>.label.string = <span class="string">"我改变了"</span>;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    start() &#123;&#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// update (dt) &#123;&#125;,</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>改为代码后我们重新拖动，更新下属性的值。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20221113180445655.png" alt="image-20221113180445655"></p><p>那么如果我们想改变 <code>node</code> 位置该怎么办呢？</p><p>获得的组件实例中有一个 <code>node</code> 属性，我们可以直接拿到当前的 <code>node</code> 对象实例，然后继续调用 <code>setPosition</code> 就可以了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">cc.Class(&#123;</span><br><span class="line">    extends: cc.Component,</span><br><span class="line"></span><br><span class="line">    properties: &#123;</span><br><span class="line">        label: &#123;</span><br><span class="line">            <span class="keyword">default</span>: <span class="literal">null</span>,</span><br><span class="line">            type: cc.Label,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    onLoad() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.label);</span><br><span class="line">        <span class="keyword">this</span>.label.string = <span class="string">"我改变了"</span>;</span><br><span class="line">        <span class="keyword">this</span>.label.node.setPosition(cc.v2(<span class="number">0</span>, <span class="number">-300</span>));</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    start() &#123;&#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// update (dt) &#123;&#125;,</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>为了更深刻的理解，我们再绕一下，实现通过当前节点的 <code>Node</code> ，调用自定义脚本组件的方法，来动态修改 <code>Label</code> 的值。</p><p>首先编写自定义组件的代码，提供一个方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// test.js</span></span><br><span class="line">cc.Class(&#123;</span><br><span class="line">    extends: cc.Component,</span><br><span class="line"></span><br><span class="line">    properties: &#123;&#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// LIFE-CYCLE CALLBACKS:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// onLoad () &#123;&#125;,</span></span><br><span class="line"></span><br><span class="line">    start() &#123;&#125;,</span><br><span class="line"></span><br><span class="line">    setLabelValue() &#123;</span><br><span class="line">        <span class="keyword">this</span>.getComponent(cc.Label).string = <span class="string">"我被 test 改变了"</span>;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// update (dt) &#123;&#125;,</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>当前脚本添加到相应的属性中。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20221113181717593.png" alt="image-20221113181717593"></p><p>接着我们只需要在 <code>canvas</code> 的脚本组件中调用 <code>getComponent(&quot;test&quot;)</code> 拿到上边的脚本对象实例，调用 <code>setLabelValue</code> 方法即可。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">cc.Class(&#123;</span><br><span class="line">    extends: cc.Component,</span><br><span class="line"></span><br><span class="line">    properties: &#123;</span><br><span class="line">        label: &#123;</span><br><span class="line">            <span class="keyword">default</span>: <span class="literal">null</span>,</span><br><span class="line">            type: cc.Node,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    onLoad() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.label);</span><br><span class="line">        <span class="keyword">this</span>.label.getComponent(<span class="string">"test"</span>).setLabelValue();</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    start() &#123;&#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// update (dt) &#123;&#125;,</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>小结一下，使用对象的时候，我们需要明确当前是 <code>cc.Node</code> 类型，还是某种组件类型，每一个种类型都有自己的方法。</p><p>如果想从 <code>cc.Node</code> 对象中拿到相应的组件，调用 <code>getComponent</code> 方法即可。</p><p>如果想从组件中拿到 <code>cc.Node</code> 类型，不管是自带的组件，还是自定义的脚本组件，可以直接通过 <code>this.node</code> 拿到当前的 <code>node</code> 实例对象。</p><h1 id="显示隐藏"><a href="#显示隐藏" class="headerlink" title="显示隐藏"></a>显示隐藏</h1><p>最直接就是设置 <code>node</code> 对象的 <code>active</code> 属性即可。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">cc.Class(&#123;</span><br><span class="line">    extends: cc.Component,</span><br><span class="line"></span><br><span class="line">    properties: &#123;</span><br><span class="line">        label: &#123;</span><br><span class="line">            <span class="keyword">default</span>: <span class="literal">null</span>,</span><br><span class="line">            type: cc.Node,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    onLoad() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.label);</span><br><span class="line">        <span class="keyword">this</span>.label.active = <span class="literal">false</span>;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    start() &#123;&#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// update (dt) &#123;&#125;,</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>上边的方式类似于 <code>vue</code> 的 <code>v-if</code> ，会直接把节点销毁掉。</p><p>如果想保留节点，实现 <code>vue</code> 的 <code>v-show</code> ，我们可以设置 <code>opacity</code> 透明度属性弯道实现，只需要将值设置为 <code>0</code> 实现隐藏。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">cc.Class(&#123;</span><br><span class="line">    extends: cc.Component,</span><br><span class="line"></span><br><span class="line">    properties: &#123;</span><br><span class="line">        label: &#123;</span><br><span class="line">            <span class="keyword">default</span>: <span class="literal">null</span>,</span><br><span class="line">            type: cc.Node,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    onLoad() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.label);</span><br><span class="line">        <span class="keyword">this</span>.label.opacity = <span class="number">0</span>;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    start() &#123;&#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// update (dt) &#123;&#125;,</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这里需要注意的是，虽然通过透明度可以隐藏组件，但是此时的点击事件还是存在的，需要处理一下。</p><h1 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h1><p>编译的时候我们选择微信小游戏，填写 <code>appId</code> ，编译完成后通过微信开发者工具导入 <code>build</code> 出来的文件就可以了。</p><p>菜单 -&gt;项目 -&gt; 构建发布：</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20221113183809044.png" alt="image-20221113183809044"></p><p>我们可以设置初始场景、设备方向等。</p><p>需要注意的是，微信主包有 <code>2M</code> 大小的限制，如果预览的微信小游戏遇到超包的情况，我们可以将没用到的组件在编译设置中去除。</p><p>菜单 -&gt; 项目 -&gt; 项目设置 -&gt; 模块设置：</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20221113184029466.png" alt="image-20221113184029466"></p><h1 id="微信小游戏排行榜"><a href="#微信小游戏排行榜" class="headerlink" title="微信小游戏排行榜"></a>微信小游戏排行榜</h1><p>微信为了防止好友的关系链泄露，提出了一个子域的概念，在子域中可以调用 <code>wx.getFriendCloudStorage</code> 方法拿到好友数据。</p><p>为了实现排行榜，我们需要再创建一个空项目，实现排行榜的显示逻辑，和正常项目开发是一致的。</p><p>添加 <code>message</code> 回调函数，供主项目调用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">private onMessage(msg: any) &#123;</span><br><span class="line">        <span class="keyword">switch</span> (msg.event) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"setScore"</span>:</span><br><span class="line">                <span class="keyword">this</span>.setScore(msg.score);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"showRank"</span>:</span><br><span class="line">                <span class="keyword">this</span>.getRank();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>编译的时候需要选择 <code>微信小游戏开发数据域</code>，名称自己定义，我写的是<code>wxSubContext</code>，路径选择之前项目编译的文件夹。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20221113184927037.png" alt="image-20221113184927037"></p><p>然后在主项目中我们需要添加一个空节点，并且添加一个 <code>SubContextView</code> 组件，将这个节点作为排行榜项目的容器节点。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20221113184416196.png" alt="image-20221113184416196"></p><p>如果想要调用排行榜的方法通过 <code>postMessage</code> 。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wx.postMessage(&#123;</span><br><span class="line">  event: <span class="string">"showRank"</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>编译的时候指定一下排行榜项目之前设置的名称 <code>wxSubContext</code>    。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20221113184628466.png" alt="image-20221113184628466"></p><p>上边就是实现排行榜的整个逻辑了，详细的可以参考 <a href="https://developers.weixin.qq.com/community/minigame/article/doc/00028ce147c270ac955a031b057813" target="_blank" rel="noopener">这篇文章</a>，相应的 <a href="https://gitee.com/ichenpipi/cocos-case-wxsubcontext" target="_blank" rel="noopener">代码仓库</a>，<code>clone</code> 下来可以直接用。这个项目的 <code>cocos</code> 编辑器是 <code>2.3.3</code> ，如果升级到 <code>2.4.5</code> 会出现无法滚动的情况，谨慎升级。</p><p>需要注意的一点是，当子项目的容器节点显示的时候，子项目才开始初始化，这就会导致主项目 <code>postMessage</code> 先调用，排行榜项目的<code>onMessage</code> 后调用，导致错失了消息。</p><p>解决这个问题的话，我们的显藏可以通过设置透明度的方式实现，让子项目提前加载。</p><h1 id="发布到微信"><a href="#发布到微信" class="headerlink" title="发布到微信"></a>发布到微信</h1><p>个人开发者提交的资料基本不用啥，有个自审资料网上找个模版在 <code>word</code> 填完截图就可以。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/%E8%87%AA%E6%9F%A5.jpg" alt="自查"></p><p>但提交审核的道路比较坎坷，除了慢以外，甚至被拒了两次。</p><p>第一次周日提交，周三还没有结果在微信社区平台催了一下审核，下午收到结果审核失败。</p><blockquote><p>小游戏涉嫌侵权，请参考示例截图标记点全面自查游戏内容，请于下个版本有效整改或举证，在微信公众平台-版本管理-提交审核-授权书/版本更新说明提交，包括但不限于游戏内容说明及对应截图、原创证明或有效授权书 主体信用分扣除-3分</p></blockquote><p>原因是一开始是准备仿 <code>Flappy bird</code> 的，直接用了相应的素材，就被驳回了，客服截图如下：</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20221119103132834.png" alt="image-20221119103132834"></p><p>第二次周三早上提交，周五晚上收到结果，又被拒了，这次就无法理解了：</p><blockquote><p>开发者你好，经平台审核，你的小游戏《挑战1024》未通过审核，具体原因如下：</p><p>1、小游戏需具有完整的游戏玩法，不能为简单的素材堆砌</p></blockquote><p>网上搜了搜，可能是因为我的游戏只有一个界面，点击就开始了。据说加个菜单就会好，于是又改了改，不同场景也换了换背景。</p><p>第三次周六晚上提交，周二晚上收到结果，同上次，审核被拒，原因为「小游戏需具有完整的游戏玩法，不能为简单的素材堆砌」。</p><p>已经不知道该怎么改了，周三早上点了审核失败那里的提交反馈，写了一段感人肺腑的话（* 的内容这里就省略了）。</p><blockquote><p>本游戏为益智类游戏，需要分数吃到 1024 才能获得胜利。<br>游戏场景分为菜单、第一关、最终关、好友排行，不同关卡也会通过背景色来区分。<br>菜单提供了分享好友、查看排行的功能。<br>第一关主要是为了体验游戏流程，星星的分数都是×2，因此只需要不停的吃分即可取得胜利。<br>最终关需要通过自己的策略，除了躲避陨石，还需要吃到星星上不同的分数，才能获得胜利。<br>游戏过程中，星星的速度、分数的出现会实时通过当前的状态进行变化，主要涉及到一些算法，也是本游戏的核心。<br>虽然素材都是星星，但结合算法上边的分数会一直变化，同时星星和陨石的比例也在不断变化。<br>除此之外玩家还需要躲避陨石，同时设定了策略，如果******。<br>在用户挑战失败的时候，增设了复活功能、重开功能。<br>游戏名为「挑战1024」，属于*******，来最终取得胜利。<br>希望审核大大可以再看一下，设计整个流程和算法确实花了很多心思。</p></blockquote><p>周四早上显示反馈成功。</p><blockquote><p>开发者你好，感谢你向小游戏审核团队反馈异议，经平台评估：我们已更正你的历史审核记录，如有需求，可重新提交审核</p></blockquote><p>周五早上进行了重新提审，周二下午终于通过了。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/image-20221130083045661.png" alt="image-20221130083045661"></p><p>小游戏相比于小程序审核严格好多，前前后后花了有半个多月了，简单游戏竟然不让上线，这是我想不通的。</p><h1 id="总"><a href="#总" class="headerlink" title="总"></a>总</h1><p>整体就是这样了，整个 <code>cocos</code> 项目可以理解为一棵树，整个树就是一个场景，根节点是一个包含 <code>Canvas</code> 组件的 <code>node</code> ，接下来可以创建自己的 <code>node</code> ，每个 <code>node</code> 又可以挂载想要的自带组件和用户脚本组件。</p><p>希望对大家有帮助，如果错误也欢迎指出，也可以体验一下我这次开发的小游戏，哈哈：</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/gh_dc7db84e6a20_258.jpg" alt="gh_dc7db84e6a20_258"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;前段时间一直在更 &lt;a href=&quot;https://vue.windliang.wang/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;vue2的源码系列&lt;/a&gt;，最近换了换口味，学了一下 &lt;code&gt;cocos&lt;/code&gt; ，照猫画虎的写了一个「挑战
      
    
    </summary>
    
    
      <category term="前端" scheme="https://windliang.wang/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="cocos" scheme="https://windliang.wang/tags/cocos/"/>
    
  </entry>
  
  <entry>
    <title>中后台系统提升质量和效率的一个思路</title>
    <link href="https://windliang.wang/2022/10/27/%E4%B8%AD%E5%90%8E%E5%8F%B0%E7%B3%BB%E7%BB%9F%E6%8F%90%E5%8D%87%E8%B4%A8%E9%87%8F%E5%92%8C%E6%95%88%E7%8E%87%E7%9A%84%E4%B8%80%E4%B8%AA%E6%80%9D%E8%B7%AF/"/>
    <id>https://windliang.wang/2022/10/27/%E4%B8%AD%E5%90%8E%E5%8F%B0%E7%B3%BB%E7%BB%9F%E6%8F%90%E5%8D%87%E8%B4%A8%E9%87%8F%E5%92%8C%E6%95%88%E7%8E%87%E7%9A%84%E4%B8%80%E4%B8%AA%E6%80%9D%E8%B7%AF/</id>
    <published>2022-10-26T22:04:20.000Z</published>
    <updated>2022-11-17T00:01:23.938Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>中后台项目中会存在一些配置页面需求的开发，这些需求高度相似，迭代频率低，基本结构为「搜索区域」、「表格区域」、「包含表单的弹窗」三部分组成。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20221027060647741.png" alt="image-20221027060647741"></p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20221027060711024.png" alt="image-20221027060711024"></p><p>其中「搜索区域」和「表格区域」的操作区交互固化，比如查询、添加、查看、删除、上线、下线。</p><p>当前开发时大都采用复制类似需求页面继而修改的方式，如下图所示。每个人都形成了自己的代码组织结构，导致虽属同一团队，但代码风格、交互实现逻辑变为了多条平行线。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20221027060727389.png" alt="image-20221027060727389"></p><p>这种迭代方式存在两点坏处：</p><p>a. 重复劳动较多，同时存在漏改的风险。易变的地方分布在页面中各个部分，修改起来不够方便，改动后存在影响到正常逻辑的风险。</p><p>b. 团队内各自抽离的不同交互方式，接手他人页面的时候需要耗费一定的理解成本，同时 <code>code review</code> 时无法快速的理清逻辑。</p><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>中后台项目提效一个直接的想法就是低代码的思路：</p><p>a. 初态：抽离各个组件，定义 <code>json</code> 的格式，通过 <code>json</code> 渲染出页面。</p><p>b. 终态：开发搭建平台，通过拖拽生成 <code>json</code> 并且实时预览页面，开发者也可以通过预定的协议接入自己的组件。</p><p>上述两种方案除去搭建成本大之外，最大的问题就是业务开发灵活性将大大降低。</p><p>开发者将在新的规范下进行开发，不管是通过 <code>json</code> 配置还是配置平台生成页面，上手难度大大增加，不亚于去学习一个新的前端框架。如果新需求的交互框架没有考虑到，将花费大量的时间进行适配， 甚至超过了从零开发需求的时间。极端情况下，如果无法满足需求的交互，还存在推倒重来的风险。</p><p>基于以上考虑，我们采取一个更轻便的方案，以模版代码为基础进行后续开发，并通过脚手架进行模版的配置、拉取。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20221027060745695.png" alt="image-20221027060745695"></p><p>如上图，大家的开发流程从之前的平行线变为了网状，未来的页面的目录格式和交互方式都会统一。</p><p>由于是生成的模版代码页面而且不强依赖于模版，未来需求有大的变化也可以正常迭代。</p><h1 id="方案设计"><a href="#方案设计" class="headerlink" title="方案设计"></a>方案设计</h1><h2 id="1-模板设计"><a href="#1-模板设计" class="headerlink" title="1.模板设计"></a>1.模板设计</h2><p>考虑到今后有可能增加其他场景模版，设计模版要考虑到未来可以进行无缝扩展，有两种方案：</p><p>a. 按分支来保存不同场景下的模版：</p><p>优点：不同场景下通过分支来拉取不同模版，模版之间完全隔离。</p><p>缺点：缺少了 <code>master</code> 分支，各模版都需要自己的 <code>master</code> 分支进行迭代。分支之间差异较大，完全违背了 <code>git</code> 的迭代初心。</p><p>b. 按文件夹来保存不同场景下的模版：</p><p>优点：所有模版都存在于 <code>master</code> 分支，和普通项目的方式一样从 <code>master</code> 切出分支进行迭代。</p><p>缺点：脚手架需要一次性拉取所有模版，然后复制自己需要的模版。</p><p>考虑到拉取文件速度较快，最终选取了方案 <code>b</code>。</p><p>各个配置页面之间虽然相似，但也会因实际情况存在细微差异，所以模版不能完全写死，需要支持动态编译，这里采用 <code>EJS</code> 进行编译。</p><p><code>EJS</code> 是一套简单的模板语言，它没有再造一套迭代和控制流语法，只需正常的 <code>JavaScript</code> 语法即可实现一些条件编译、变量替换等，因此可以快速上手。</p><p>关于模版内容，核心思想是将<strong>变化与不变的内容进行抽离</strong>。</p><p>我们可以将后端的接口、权限的配置、搜索框的配置、常量抽离出配置文件，将表格、搜索框、表单之间的联动方式预先写好，目录格式如下。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20221027060919512.png" alt="image-20221027060919512"></p><p>开发者只需进行后端接口的配置、搜索框的配置、表单的开发即可快速完成整个需求。</p><h2 id="2-架构设计"><a href="#2-架构设计" class="headerlink" title="2. 架构设计"></a>2. 架构设计</h2><p>考虑到一方面脚手架整体架构和功能实现后迭代频率会逐渐降低，另一方面更新脚手架需要走 <code>npm</code> 包的发布流程，如果将模版内容耦合到脚手架中，每次更新都重新进行发包较为繁琐。</p><p>因此将模版单独放一个仓库，从脚手架中解耦出来，实现脚手架仓库和模版仓库分离，独立迭代，降低更新成本。</p><p>使用者通过输入命令和参数即可生成模版页面代码，脚手架内部实现拉取模版和编译，生成最终页面，架构如下：</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20221027060851382.png" alt="image-20221027060851382"></p><h2 id="3-脚手架实现"><a href="#3-脚手架实现" class="headerlink" title="3. 脚手架实现"></a>3. 脚手架实现</h2><p>提供 <code>ce-cli</code> 命令，结合用户的参数进行进行模版的编译生成，同时提供交互式的形式选择参数，降低使用者的上手难度，交互形式如下：</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20221027060958575.png" alt="image-20221027060958575"></p><p>考虑到模版和脚手架存在强绑定关系，即如果模版更新了，但脚手架没有更新会造成一些模版逻辑未被编译的情况。因此执行命令时需要检查脚手架是否为最新版本，如果版本较低必须强制升级，中断程序的执行。（对于团队内部工具来说，始终保持最新版本才可以及时用到最新功能，这也是强制升级的原因之一）</p><p>为提高命令的执行速度，执行命令时将拉取的模版缓存到本地，并且将最新的 <code>commit</code> 名保存起来。第二次执行命令的时候将目前最新的 <code>commit</code> 和此前保存的 <code>commit</code> 进行比对，如果不相等则覆盖原来的模版，否则使用原来的模版即可，减少一次网络请求耗时。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>经过一段时间的迭代，后续有近 <code>20</code> 个页面用到脚手架，每需求可降低 <code>0.5pd</code> 的时间，更重要的是团队内相关需求的代码结构、交互实现均已统一，提升了代码质量 和 <code>code review</code> 的效率，团队间交替开发需求时的代码认知难度将大大降低。</p><p>在 <code>code review</code> 过程中，团队内提供相关建议，<a href="https://zhuanlan.zhihu.com/p/561275198" target="_blank" rel="noopener">沉淀最佳实践</a>，例如默认对象通过函数返回、公共方法的使用、项目框架一些特有操作都内置到模版中，不断提升代码质量，磨平大家之间的认知差异。</p><p>未来有新同学加入，可以在模版的基础上更快的进入开发，极大的降低对系统框架一些特有操作的认知时间，同时保证代码质量。</p><p>脚手架中的模版对主要对表格和搜索区域固化了代码逻辑，对于表单的使用我们还是通过原始的 <code>element</code> 表单进行开发，一些常用的规则校验、表单的逻辑每次都需要重复进行开发，经过调研目前公司内已经有多种封装好的表单，未来可以进行详细了解，最终引进到模版代码中，进一步提升开发效率。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;中后台项目中会存在一些配置页面需求的开发，这些需求高度相似，迭代频率低，基本结构为「搜索区域」、「表格区域」、「包含表单的弹窗」三部分组成。
      
    
    </summary>
    
    
      <category term="前端" scheme="https://windliang.wang/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="https://windliang.wang/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>前端老项目接入eslint从配置到上线的一些思考</title>
    <link href="https://windliang.wang/2022/09/21/%E5%89%8D%E7%AB%AF%E8%80%81%E9%A1%B9%E7%9B%AE%E6%8E%A5%E5%85%A5eslint%E5%85%A8%E8%BF%87%E7%A8%8B/"/>
    <id>https://windliang.wang/2022/09/21/%E5%89%8D%E7%AB%AF%E8%80%81%E9%A1%B9%E7%9B%AE%E6%8E%A5%E5%85%A5eslint%E5%85%A8%E8%BF%87%E7%A8%8B/</id>
    <published>2022-09-21T00:42:15.000Z</published>
    <updated>2022-11-17T00:01:23.942Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>在日常需求迭代中，代码的规范与质量是编码的重要一环。<code>Eslint</code> 作为规则扫描器，能够对前端代码进行有效管控，避免出现低级错误，对于前端项目或多或少肯定都会看到 <code>eslint</code> 的相关配置。</p><p>但目前存在一些老项目， <code>eslint</code> 的配置仅仅停留在了多年前加的一些 <code>eslint</code> 规则上，没有任何其他动作，导致平常开发中有如下痛点：</p><ol><li>本地不方便开启保存自动格式化，因为对于老页面，如果开启的话会造成大量的无关 <code>diff</code>。</li><li>提交代码的时候会受到莫名其妙的卡控。</li><li>过 <code>pr</code> 的时候分号、空格、换行各个地方不对齐，逼死强迫症系列。</li></ol><p>基于此，前段时间对老项目的 <code>eslint</code> 进行了一次完善，分享一下整个配置和思考的过程。</p><h1 id="选取规则"><a href="#选取规则" class="headerlink" title="选取规则"></a>选取规则</h1><h2 id="eslint"><a href="#eslint" class="headerlink" title="eslint"></a>eslint</h2><p><code>eslint</code> 规则可以单独一条条配置，也有一些规则的集合比如官方推荐的 <code>eslint:recommended</code>，框架相关的 <a href="https://eslint.vuejs.org/user-guide/#installation" target="_blank" rel="noopener">plugin:vue/recommended</a>，还有公司开源出来的整套规则比如 <code>Airbnb</code> 的 <a href="https://github.com/airbnb/javascript/tree/master/packages/eslint-config-airbnb" target="_blank" rel="noopener">eslint-config-airbnb</a>，腾讯的 <a href="https://github.com/AlloyTeam/eslint-config-alloy" target="_blank" rel="noopener">eslint-config-alloy</a>。</p><p>选取什么规则不是非常重要，大部分规则集也是类似的，此外本地也可以定义相同的规则名对规则集进行覆盖。</p><p>以 <code>alloy</code> 的规则为例，按照 <a href="https://github.com/AlloyTeam/eslint-config-alloy" target="_blank" rel="noopener">eslint-config-alloy</a> 中的文档安装完相应的 <code>node</code> 包以后，在本地根目录中新建 <code>.eslintrc.js</code> 文件引入相应的规则。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    extends: [<span class="string">'alloy'</span>, <span class="string">'alloy/vue'</span>],</span><br><span class="line">    env: &#123;</span><br><span class="line">        <span class="comment">// 你的环境变量（包含多个预定义的全局变量）</span></span><br><span class="line">    &#125;,</span><br><span class="line">    globals: &#123;</span><br><span class="line">        <span class="comment">// 全局变量</span></span><br><span class="line">        moment: <span class="string">'readonly'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    rules: &#123;</span><br><span class="line">        <span class="comment">// 自定义你的规则 0-关闭，1-warn，2-error</span></span><br><span class="line">        <span class="string">'vue/component-tags-order'</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="string">'vue/no-deprecated-slot-attribute'</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="string">'vue/no-deprecated-slot-scope-attribute'</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="string">'vue/no-duplicate-attributes'</span>: [</span><br><span class="line">            <span class="string">'error'</span>,</span><br><span class="line">            &#123;</span><br><span class="line">                allowCoexistClass: <span class="literal">true</span>,</span><br><span class="line">                allowCoexistStyle: <span class="literal">true</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">        ],</span><br><span class="line">        <span class="string">'no-param-reassign'</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="string">'no-console'</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="string">'no-magic-numbers'</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="string">'default-case'</span>: <span class="number">2</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>如上所示，我们可以在 <code>rules</code> 中定义或者覆盖一些规则。</p><h2 id="Prettier"><a href="#Prettier" class="headerlink" title="Prettier"></a>Prettier</h2><p><code>Prettier</code> 是一个代码格式化工具，相比于 <code>eslint</code> 中的代码格式规则，它提供了更少的选项，却更加专业。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220923090302423.png" alt="image-20220923090302423"></p><p>相比于 <code>eslint</code>， <code>Prettier</code>  主要格式样式相关的，比如有没有分号、空格数、一行最大字符数等等，而 <code>eslint</code> 通过解析出代码的 <code>AST</code> ，可以自动格式化或者检测出一些潜在的问题，比如是否允许使用 <code>console</code>、变量声明但未使用、<code>switch</code> 缺少 <code>defaut</code> 等。</p><p>当然 <code>eslint</code> 也可以配置样式相关的规则，但存在一些情况 <code>eslint</code> 无法胜任，因此格式化相关的我们都交给更专业的 <code>Prettier</code> ，安装 <code>Prettier</code> 的 <code>node</code> 包，并且根目录增加配置文件 <code>.prettierrc.js</code> 。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// .prettierrc.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="comment">// 一行最多 120 字符</span></span><br><span class="line">    printWidth: <span class="number">120</span>,</span><br><span class="line">    <span class="comment">// 使用 4 个空格缩进</span></span><br><span class="line">    tabWidth: <span class="number">4</span>,</span><br><span class="line">    <span class="comment">// 不使用缩进符，而使用空格</span></span><br><span class="line">    useTabs: <span class="literal">false</span>,</span><br><span class="line">    <span class="comment">// 行尾需要有分号</span></span><br><span class="line">    semi: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// 使用单引号</span></span><br><span class="line">    singleQuote: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// 对象的 key 仅在必要时用引号</span></span><br><span class="line">    quoteProps: <span class="string">'as-needed'</span>,</span><br><span class="line">    <span class="comment">// jsx 不使用单引号，而使用双引号</span></span><br><span class="line">    jsxSingleQuote: <span class="literal">false</span>,</span><br><span class="line">    <span class="comment">// 末尾需要有逗号</span></span><br><span class="line">    trailingComma: <span class="string">'all'</span>,</span><br><span class="line">    <span class="comment">// 大括号内的首尾需要空格</span></span><br><span class="line">    bracketSpacing: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// jsx 标签的反尖括号需要换行</span></span><br><span class="line">    bracketSameLine: <span class="literal">false</span>,</span><br><span class="line">    <span class="comment">// 箭头函数，只有一个参数的时候，也需要括号</span></span><br><span class="line">    arrowParens: <span class="string">'always'</span>,</span><br><span class="line">    <span class="comment">// 每个文件格式化的范围是文件的全部内容</span></span><br><span class="line">    rangeStart: <span class="number">0</span>,</span><br><span class="line">    rangeEnd: <span class="literal">Infinity</span>,</span><br><span class="line">    <span class="comment">// 不需要写文件开头的 @prettier</span></span><br><span class="line">    requirePragma: <span class="literal">false</span>,</span><br><span class="line">    <span class="comment">// 不需要自动在文件开头插入 @prettier</span></span><br><span class="line">    insertPragma: <span class="literal">false</span>,</span><br><span class="line">    <span class="comment">// 使用默认的折行标准</span></span><br><span class="line">    proseWrap: <span class="string">'preserve'</span>,</span><br><span class="line">    <span class="comment">// 根据显示样式决定 html 要不要折行</span></span><br><span class="line">    htmlWhitespaceSensitivity: <span class="string">'css'</span>,</span><br><span class="line">    <span class="comment">// vue 文件中的 script 和 style 内不用缩进</span></span><br><span class="line">    vueIndentScriptAndStyle: <span class="literal">false</span>,</span><br><span class="line">    <span class="comment">// 换行符使用 lf</span></span><br><span class="line">    endOfLine: <span class="string">'lf'</span>,</span><br><span class="line">    <span class="comment">// 格式化内嵌代码</span></span><br><span class="line">    embeddedLanguageFormatting: <span class="string">'auto'</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="编辑器自动修复"><a href="#编辑器自动修复" class="headerlink" title="编辑器自动修复"></a>编辑器自动修复</h1><p><strong>这一步我认为是推动 <code>eslint</code> 最重要的一步</strong>，大家抗拒项目添加 <code>eslint</code> 一个很大的原因就是本地没有开启实时检查和自动修复，当提交 <code>commit</code> 的时候遇到 <code>eslint</code> 规则卡控就很难受了。</p><p>团队内都使用的 <code>VSCode</code> 进行开发，可以安装 <code>Eslint</code> 和 <code>Prettier</code> 插件。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220925113210716.png" alt="image-20220925113210716"></p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220925113256543.png" alt="image-20220925113256543"></p><p>在本地新增 <code>.vscode/settings.json</code> 文件进行插件的配置，并且该文件不忽略 <code>git</code> ，所有人共享。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"editor.defaultFormatter"</span>: <span class="string">"esbenp.prettier-vscode"</span>, <span class="comment">// 用 Prettier 格式化</span></span><br><span class="line">    <span class="string">"editor.codeActionsOnSave"</span>: &#123;</span><br><span class="line">        <span class="string">"source.fixAll.eslint"</span>: <span class="literal">true</span> <span class="comment">// 保存时自动进行 eslint 的修复</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"editor.formatOnSave"</span>: <span class="literal">true</span> <span class="comment">// 保存时自动格式化</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个文件是 <code>VSCode</code> 针对当前工程的配置，配置后保存文件的时候插件会自动帮助我们格式化，同时有实时的错误提示。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comKapture%202022-09-25%20at%2015.41.13.gif" alt="Kapture 2022-09-25 at 15.41.13"></p><p>这里需要注意的一点是，保存的时候会同时进行 <code>prettier</code> 和 <code>eslint</code> 的修复，如果 <code>eslint</code> 也配置了样式相关的规则，此时可能发生冲突，导致自动格式化后会有 <code>eslint</code> 的报错，此时可以将相应的 <code>eslint</code> 规则手动关闭，也可以引入 <a href="https://github.com/prettier/eslint-config-prettier" target="_blank" rel="noopener">eslint-config-prettier</a> 这个规则集批量关闭。</p><h1 id="commit-卡控"><a href="#commit-卡控" class="headerlink" title="commit 卡控"></a>commit 卡控</h1><p>为了保证 <code>eslint</code> 规则的有效，需要在提交 <code>commit</code> 的时候进行检查，如果存在没有修复的 <code>eslint</code> 问题直接终止提交。</p><p>直接使用 <code>&quot;husky&quot;: &quot;^1.3.1&quot;</code> 和 <code>&quot;lint-staged&quot;: &quot;^8.1.5&quot;</code>  两个 <code>node</code> 包，需要注意下版本号，最新的配置有些不同了，下边是该版本下的配置。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"husky"</span>: &#123;</span><br><span class="line">  <span class="string">"hooks"</span>: &#123;</span><br><span class="line">    <span class="string">"pre-commit"</span>: <span class="string">"lint-staged"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line">  <span class="string">"lint-staged"</span>: &#123;</span><br><span class="line">    <span class="string">"linters"</span>: &#123;</span><br><span class="line">      <span class="string">"src/**/*.&#123;js,vue&#125;"</span>: [</span><br><span class="line">        <span class="string">"eslint --fix"</span>,</span><br><span class="line">        <span class="string">"git add"</span></span><br><span class="line">      ],</span><br><span class="line">        <span class="string">"src/**/*.&#123;js,vue,html,css,scss,sass&#125;"</span>: [</span><br><span class="line">          <span class="string">"prettier --write"</span>,</span><br><span class="line">          <span class="string">"git add"</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p><code>husky</code> 提供了 <code>pre-commit</code> 的钩子，然后 <code>lint-staged</code> 对暂存区代码自动进行格式化，如果出错的话会直接退出。</p><p>这样当我们提交 <code>commit</code> 的时候就会运行 <code>eslint</code> 和 <code>prettier</code> 进行代码的格式化。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220925162909689.png" alt="image-20220925162909689"></p><h1 id="流水线卡控"><a href="#流水线卡控" class="headerlink" title="流水线卡控"></a>流水线卡控</h1><p>虽然上一步对 <code>commit</code> 进行了卡控，但如果 <code>git commit</code> 的时候添加了 <code>-n</code> 参数，卡控检查也就直接跳过了。</p><p>如果想彻底的卡控，我们可以在打包流水线上增加一个 <code>lint</code> 的插件进行检查。</p><p>这里实现卡控有两种思路：</p><ol><li><p>发布分支和 <code>master</code> 做 <code>diff</code>，仅仅对 <code>diff</code> 出的 <code>commit</code> 进行 <code>eslint</code> 的检查。</p><p>但这里可能存在两个问题需要注意：</p><p>如果本地合并 <code>master</code> 的时候产生了冲突，然后解决冲突会新提交一个 <code>commit</code> 。 此时 <code>diff</code> 出来的 <code>commit</code> 可能会包含其他人的代码，如果之前的代码没有 <code>lint</code> ，此时就需要自己 <code>lint</code> 了。</p><p>如果上线流程是先合并 <code>master</code> ，那么上线的时候 <code>master</code> 已经有了自己的代码，此时上线分支和 <code>master</code> 就没有任何 <code>diff</code> 了，所以也就起不到卡控的作用了。</p></li><li><p>卡控分支前 <code>n</code> 天的 <code>commit</code> 。</p><p>理想情况下，前 <code>n</code> 天只包含自己的 <code>commit</code> 和已经 <code>lint</code> 过的 <code>commit</code> ， <code>merge master</code> 的 <code>commit</code> 可以自动过滤掉，因此可以很好的对新加的代码进行卡控。</p><p>当然还是无法完全避免遇到别人没有 <code>lint</code> 过的代码，此时还是需要自己进行修复了。</p><p>具体逻辑可以参考这个 <a href="https://github.com/wyntau/lint-recently#readme" target="_blank" rel="noopener">node 包</a>。</p></li></ol><p>不管是哪种方法，因为是在老项目引入的 <code>lint</code> ，前期如果在流水线加 <code>lint</code> 卡控的话一定会遇到明明不是自己代码，却被 <code>lint</code> 卡控拦截的情况。</p><p>我个人看法是流水线 <code>lint</code> 其实不加也可以，如果编辑器自动修复添加了、<code>commit</code> 卡控也添加了，这已经足够了，如果真有人通过 <code>-n</code> 绕过卡控，那肯定是有理由的，也没必要走流水线再卡控。</p><h1 id="上线"><a href="#上线" class="headerlink" title="上线"></a>上线</h1><p>因为老项目中会有大量的不符合 <code>eslint</code> 规则的代码，因此上线有两种方案。</p><ol><li><p>本地进行全量文件的 <code>eslint --fix</code> 后上线：</p><p>优点：未来开发时原有文件的 <code>lint</code> 问题不用关心，开发者只需关注原有 <code>error</code> 和自己当前的 <code>lint</code> 问题即可。</p><p>缺点：由于改动文件数较多，<code>eslint</code> 不可完全信任，贸然上线可能会造成线上问题。</p></li><li><p>仅仅上线 <code>eslint</code> 的卡控和保存时自动 <code>lint</code> 的配置：</p><p>优点：未改动代码逻辑，不会存在引发线上问题的隐患。</p><p>缺点：当开发者修改、保存老文件后，会自动触发 <code>lint</code> 修复，从而污染混淆本身的修改，增加后续 <code>code review</code> 工作负担。</p></li></ol><p>我是偏向于第 <code>2</code> 个方案的，虽然 <code>eslint</code> 自动修复一般不会引起问题，但程序肯定是不能 <code>100%</code> 相信的，如果造成了线上问题反而得不偿失。</p><p>如果采用第 <code>2</code> 个方案，后续开发老页面保存的时候一定会出现大面积的自动 <code>lint</code>，我们可以在添加新代码前先保存一下触发 <code>lint</code> 并且提交一个 <code>msg</code> 为 <code>lint auto fix</code> 的  <code>commit</code> 。这样做有两个好处：</p><ol><li>后续其他人遇到问题代码排查的时候看到 <code>lint fix</code> 就知道了这行代码不是你写的，他需要再往前找一个 <code>commit</code> 的提交人。</li><li>过 <code>pr</code> 的时候我们可以按 <code>commit</code> 看，第一个 <code>lint</code> 的 <code>commit</code> 如果没什么问题可以直接跳过，减轻 <code>cr</code> 的负担。</li></ol><h1 id="总"><a href="#总" class="headerlink" title="总"></a>总</h1><p>在业务迭代繁忙的时候，想在老项目中引入 <code>eslint</code> 其实还挺难的，毕竟业务价值很难讲清楚，一个反向逻辑就是现在项目没有 <code>eslint</code> 也运行的好好的，但加入 <code>eslint</code> 有什么收益呢？</p><p>另一方面，当有人推动项目 <code>eslint</code> 的规则的时候仅仅添加规则和卡控，其他的步骤不去推动，当越来越多人遇到需要手动修复 <code>eslint</code> 或者因为 <code>eslint</code> 的问题被卡控提交，内心就会不断地增加对 <code>eslint</code> 的抗拒。</p><p>在安装相关插件、<code>node</code> 包的时候<strong>需要注意下版本号</strong>，找到匹配自己包的版本号的配置，不然可能会遇到配置了但不生效的问题。</p><p>当有新项目开发的时候，一定要把 <code>eslint</code> 的自动修复、相关配置都搞好，这样开发的时候也舒服，未来也不用再进行 <code>eslint</code> 的治理了。</p><p>未来也可以结合平时开发的经验和发生的线上问题，逐步完善 <code>eslint</code> 中的 <code>rules</code> 规则，使得项目代码质量越来越高。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;在日常需求迭代中，代码的规范与质量是编码的重要一环。&lt;code&gt;Eslint&lt;/code&gt; 作为规则扫描器，能够对前端代码进行有效管控，避免
      
    
    </summary>
    
    
      <category term="前端" scheme="https://windliang.wang/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="eslint" scheme="https://windliang.wang/tags/eslint/"/>
    
  </entry>
  
  <entry>
    <title>提升前端开发质量的十点经验沉淀</title>
    <link href="https://windliang.wang/2022/09/05/%E5%89%8D%E7%AB%AF%E5%AE%9E%E9%99%85%E5%BC%80%E5%8F%91%E7%9A%84%E4%B8%80%E4%BA%9B%E7%BB%8F%E9%AA%8C%E6%B2%89%E6%B7%80/"/>
    <id>https://windliang.wang/2022/09/05/%E5%89%8D%E7%AB%AF%E5%AE%9E%E9%99%85%E5%BC%80%E5%8F%91%E7%9A%84%E4%B8%80%E4%BA%9B%E7%BB%8F%E9%AA%8C%E6%B2%89%E6%B7%80/</id>
    <published>2022-09-04T23:50:41.000Z</published>
    <updated>2022-11-17T00:01:23.941Z</updated>
    
    <content type="html"><![CDATA[<p>分享一下平常开发经常出现问题，增加代码质量的十个小点：</p><h1 id="记得错误处理"><a href="#记得错误处理" class="headerlink" title="记得错误处理"></a>记得错误处理</h1><p>特别是网络请求或者其他异步操作中，<code>await</code> 记得包裹 <code>try catch</code>，可以给用户一个友好提示，同时可以考虑 <code>catch</code> 中需要做什么兜底处理，必要时进行上传日志。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="keyword">this</span>.loading = <span class="keyword">this</span>.$loading(&#123;</span><br><span class="line">    lock: <span class="literal">true</span>,</span><br><span class="line">    text: <span class="string">'加载中...'</span>,</span><br><span class="line">    spinner: <span class="string">'el-icon-loading'</span>,</span><br><span class="line">    background: <span class="string">'rgba(0, 0, 0, 0.7)'</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">const</span> info = <span class="keyword">await</span> resDistributeService(&#123; <span class="attr">taskTicketId</span>: <span class="keyword">this</span>.id &#125;);</span><br><span class="line">  ...</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">  <span class="keyword">this</span>.$message(&#123;</span><br><span class="line">    type: <span class="string">'error'</span>,</span><br><span class="line">    message: e.msg || e.message || <span class="string">'失败'</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">  <span class="keyword">this</span>.loading.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以结合 <code>finally</code>，处理 <code>loading</code> 等。</p><h1 id="数字-0-的校验"><a href="#数字-0-的校验" class="headerlink" title="数字 0 的校验"></a>数字 0 的校验</h1><p>前端经常使用 <code>!v</code> ，来判断 <code>v</code> 是不是有值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(!v)&#123;</span><br><span class="line">  <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">doSomething()</span><br></pre></td></tr></table></figure><p>但如果 <code>0</code> 是 <code>v</code> 的有效值 ，此时本该处理，但会提前结束，最终引发错误。此时需要显示的判断是否是 <code>null</code> 或者 <code>undefined</code> 。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(v === <span class="literal">null</span> || v=== <span class="literal">undefined</span>)&#123;</span><br><span class="line">  <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">doSomething()</span><br></pre></td></tr></table></figure><h1 id="默认对象采用函数返回"><a href="#默认对象采用函数返回" class="headerlink" title="默认对象采用函数返回"></a>默认对象采用函数返回</h1><p>由于 <code>js</code> 中的对象是引用，因此赋默认值的时候最好通过函数，每次都返回一个新对象。</p><p>bad:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> defaultCondition = &#123;</span><br><span class="line">  name: <span class="string">''</span>,</span><br><span class="line">  conditionList: [</span><br><span class="line">    &#123;</span><br><span class="line">      conditionCode: <span class="string">''</span>,</span><br><span class="line">      conditionValue: <span class="literal">null</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            condition: &#123;...defaultCondition&#125;,</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        closeDialog() &#123;</span><br><span class="line">            <span class="keyword">this</span>.condition =  &#123;...defaultCondition&#125;;</span><br><span class="line">            <span class="keyword">this</span>.configId = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">this</span>.$refs.form.resetFields();</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>good:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> getDefaultCondition = <span class="function"><span class="params">()</span> =&gt;</span> (&#123;</span><br><span class="line">  name: <span class="string">''</span>,</span><br><span class="line">  conditionList: [</span><br><span class="line">    &#123;</span><br><span class="line">      conditionCode: <span class="string">''</span>,</span><br><span class="line">      conditionValue: <span class="literal">null</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            condition: getDefaultCondition(),</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        closeDialog() &#123;</span><br><span class="line">            <span class="keyword">this</span>.condition = getDefaultCondition();</span><br><span class="line">            <span class="keyword">this</span>.configId = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">this</span>.$refs.form.resetFields();</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="接口地址单独存放"><a href="#接口地址单独存放" class="headerlink" title="接口地址单独存放"></a>接口地址单独存放</h1><p>将接口的定义放到统一文件中，未来变动改动起来会比较方便，如果各个 <code>url</code> 都写死在页面中以后就很麻烦了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// service.js</span></span><br><span class="line"><span class="keyword">import</span> request <span class="keyword">from</span> <span class="string">'utils/request'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> service = <span class="keyword">new</span> (request(<span class="string">'/api/m/mallorder/exp/compensation/customer'</span>))();</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> listService = <span class="function">(<span class="params">params</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> service.post(<span class="string">'/queryRuleList'</span>, params);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> listDataKey = <span class="string">'ruleVOList'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> idKey = <span class="string">'ruleId'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> dialogEnumService = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> service.get(<span class="string">'/info'</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> saveService = <span class="function">(<span class="params">params</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> service.post(<span class="string">'/saveRule'</span>, params);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> detailService = <span class="function">(<span class="params">params</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> service.get(<span class="string">'/detail'</span>, params);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>此外，网络请求一般都会在 <code>npm</code> 包的基础上自己再包一层，一方面可以注入共用参数，另一方面可以对返回数据进行统一的错误处理。</p><h1 id="函数多参数采用对象"><a href="#函数多参数采用对象" class="headerlink" title="函数多参数采用对象"></a>函数多参数采用对象</h1><p>如果定义一个函数需要 3 个以上的参数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params">a,b,c,d</span>)</span>&#123;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时可以考虑采用对象解构，改为</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params">&#123;a=<span class="number">1</span>,b,c,d&#125;=&#123;&#125;</span>)</span>&#123;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好处是未来需要扩展参数的时候，不需要太担心其他地方调用时候传参是否会引起问题。</p><p>当然，如果参数过多也需要思考一下当前函数是否承载了太多的功能，进行一下功能上的拆分。</p><h1 id="函数单一职责"><a href="#函数单一职责" class="headerlink" title="函数单一职责"></a>函数单一职责</h1><p>当我们已经定义了一个函数，比如去初始一些变量。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initOptions</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  a = xxx</span><br><span class="line">  b = xxx</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时我们需要做另一件无关的事 【A】，虽然它和 <code>initOptions</code> 调用的时机一致，但最好不要直接放到 <code>initOptions</code> 中，而是新建一个函数单独调用。</p><p>不然未来如果其他地方也要调 <code>initOptions</code>，但此时可能并不需要做【A】这件事情就会引起 <code>bug</code>。</p><h1 id="参数合法性判断"><a href="#参数合法性判断" class="headerlink" title="参数合法性判断"></a>参数合法性判断</h1><p>由于 <code>js</code> 语言的灵活性，函数传入的参数很可能不符合预期，必要时我们需要进行判断并且进行兜底处理，不可完全信任调用方。</p><p>团队合作中，该函数在未来极大可能会被其他人调用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doSomeThing</span>(<span class="params">params1, params2</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(params1 === <span class="literal">null</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(params2)&#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 再去做我们的事情</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果后边的流程强依赖于 <code>params</code>，我们可以直接 <code>return</code>，必要时也可以上报日志或者 <code>throw Error</code>。</p><h1 id="整数的处理"><a href="#整数的处理" class="headerlink" title="整数的处理"></a>整数的处理</h1><p><code>js</code> 中没有整数类型，即 <code>java</code> 中的 <code>int</code>、<code>long</code> 这些，所有数字都遵循 <code>IEEE 754</code> 标准，即 <code>java</code> 中的 <code>double</code> 类型，详细的可参考 <a href="https://zhuanlan.zhihu.com/p/75581822" target="_blank" rel="noopener">浮点数详解。</a></p><p>可以精确表示的最大整数是 <code>9007199254740991</code>，共 <code>16</code> 位，超过这个数精度可能会丢失，对于新接口，可以问一下后端相应数字字段的最大值会是多少。</p><p>对于浮点数的处理，除了众所周知的 <code>0.1 + 0.2 === 0.3</code> 的值为<code>false</code> 外，当我们对数字进行运算的时候也需要注意。</p><p>常见的将 <code>9.04</code> 元转为 <code>904</code> 分：</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.com1661472877631-d41092fa-913c-40f8-89a0-154c7fd2fcc8.png" alt="img"></p><p>我们需要对结果进行取整处理。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.com1661472888799-0efa6ca3-5337-42ef-b623-1f999757f209.png" alt="img"></p><h1 id="可选链"><a href="#可选链" class="headerlink" title="可选链"></a>可选链</h1><p>可选链操作符，参考 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Optional_chaining" target="_blank" rel="noopener">MDN</a> ，用的比较多。</p><p>和后端定的数组或者对象，后端有时候返回来的很可能是 <code>null</code> 甚至没有该字段，因此前端可以用可选链操作符用于数组、对象、函数，防止出现错误直接阻断后续流程。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> nestedProp = obj.first?.second; <span class="comment">// 等效于 obj.first &amp;&amp; obj.fisrt.second</span></span><br><span class="line"><span class="comment">//后续流程</span></span><br></pre></td></tr></table></figure><p>但不要过度使用可选链，如果某些地方理论上不会出问题，比如 <code>let test = obj.first?.second</code>，如果 <code>second</code> 一定能取到，我们直接 <code>let test = obj.first.second</code> 即可。</p><p>不然未来如果这里由于某种原因出了问题导致 <code>obj.first</code> 是 <code>null</code>，但我们使用了可选链，所以 <code>obj.first?.second</code> 也不会报错，我们就永远不会知道这里出现问题了。</p><p>当然也需要权衡下，不加可选链造成<code>js Error</code> 会不会影响业务逻辑。</p><h1 id="对象or数组引用"><a href="#对象or数组引用" class="headerlink" title="对象or数组引用"></a>对象or数组引用</h1><p>修改或者使用对象、数组时，时刻切记它们为引用，一处修改会造成处处修改。</p><h1 id="总"><a href="#总" class="headerlink" title="总"></a>总</h1><p>以上的点应该算已经融入血液中了，平常开发和帮同事过 <code>pr</code> 的时候会格外注意，和业务逻辑没有关系，但可以提升代码质量。还有 <code>Vue</code> 一些常见的点也总结了一下，在语雀建了一个文档，未来有其他想法也会再更新一下，感兴趣的同学可以收藏一下，<a href="https://www.yuque.com/books/share/4946f854-2cac-4918-b70f-223fb173b7c2" target="_blank" rel="noopener">前端实践沉淀</a>。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220905081810640.png" alt="image-20220905081810640"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;分享一下平常开发经常出现问题，增加代码质量的十个小点：&lt;/p&gt;
&lt;h1 id=&quot;记得错误处理&quot;&gt;&lt;a href=&quot;#记得错误处理&quot; class=&quot;headerlink&quot; title=&quot;记得错误处理&quot;&gt;&lt;/a&gt;记得错误处理&lt;/h1&gt;&lt;p&gt;特别是网络请求或者其他异步操作中，&lt;c
      
    
    </summary>
    
    
      <category term="前端" scheme="https://windliang.wang/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>油猴脚本重写fetch和xhr请求</title>
    <link href="https://windliang.wang/2022/08/23/%E6%B2%B9%E7%8C%B4%E8%84%9A%E6%9C%AC%E9%87%8D%E6%96%B0fetch%E5%92%8Cxhr%E8%AF%B7%E6%B1%82/"/>
    <id>https://windliang.wang/2022/08/23/%E6%B2%B9%E7%8C%B4%E8%84%9A%E6%9C%AC%E9%87%8D%E6%96%B0fetch%E5%92%8Cxhr%E8%AF%B7%E6%B1%82/</id>
    <published>2022-08-22T23:35:02.000Z</published>
    <updated>2022-11-17T00:01:23.988Z</updated>
    
    <content type="html"><![CDATA[<p>写过几个油猴脚本，经常对页面请求返回的数据进行拦截或者覆盖，这篇文章就做个总结，涉及到 <code>fetch</code> 和 <code>xhr</code> 两种类型的请求。</p><h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><p>先简单写个 <code>html</code> 页面，搭一个 <code>koa</code> 服务进行测试。</p><p><code>html</code> 页面提供一个 <code>id=json</code> 的 <code>dom</code> 用来加数据，后边我们补充 <code>test.js</code> 文件来请求接口。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        我运行了</span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"json"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"test.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>将 <code>html</code> 通过 <code>VSCode</code> 的 <code>live-server</code> 插件运行在 <code>http://127.0.0.1:5500/</code> 上。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220823080047006.png" alt="image-20220823080047006"></p><p>安装 <code>koa</code> 和 <code>koa-route</code> 的 <code>node</code> 包，提供一个接口。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> koa = <span class="built_in">require</span>(<span class="string">"koa"</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> koa();</span><br><span class="line"><span class="keyword">const</span> router = <span class="built_in">require</span>(<span class="string">"koa-router"</span>)();</span><br><span class="line">router.get(<span class="string">"/api/query"</span>, <span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">    ctx.body = &#123;</span><br><span class="line">        data: [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],</span><br><span class="line">        code: <span class="number">0</span>,</span><br><span class="line">        msg: <span class="string">"成功"</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 跨域</span></span><br><span class="line">app.use(<span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">    ctx.set(<span class="string">"Access-Control-Allow-Origin"</span>, <span class="string">"http://127.0.0.1:5500"</span>);</span><br><span class="line">    ctx.set(</span><br><span class="line">        <span class="string">"Access-Control-Allow-Headers"</span>,</span><br><span class="line">        <span class="string">"Content-Type, Content-Length, Authorization, Accept, X-Requested-With"</span></span><br><span class="line">    );</span><br><span class="line">    ctx.set(<span class="string">"Access-Control-Allow-Methods"</span>, <span class="string">"PUT, POST, GET, DELETE, OPTIONS"</span>);</span><br><span class="line">    <span class="keyword">if</span> (ctx.method === <span class="string">"OPTIONS"</span>) &#123;</span><br><span class="line">        ctx.body = <span class="number">200</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">await</span> next();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 启动路由</span></span><br><span class="line">app.use(router.routes());</span><br><span class="line"><span class="comment">// 设置响应头</span></span><br><span class="line">app.use(router.allowedMethods());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听端口</span></span><br><span class="line">app.listen(<span class="number">3002</span>);</span><br></pre></td></tr></table></figure><p>提供了 <code>/api/query</code> 接口，返回 <code>data: [1,2,3],</code> 。运行在本地的 <code>3002</code> 端口上，并且设置跨域，允许从 <code>http://127.0.0.1:5500</code> 访问。</p><h1 id="油猴脚本"><a href="#油猴脚本" class="headerlink" title="油猴脚本"></a>油猴脚本</h1><p>先简单写一个插入 <code>我是油猴脚本的文本</code> 的脚本，后边再进行修改。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ==UserScript==</span></span><br><span class="line"><span class="comment">// @name         网络拦截测试</span></span><br><span class="line"><span class="comment">// @namespace    https://windliang.wang/</span></span><br><span class="line"><span class="comment">// @version      0.1</span></span><br><span class="line"><span class="comment">// @description  测试</span></span><br><span class="line"><span class="comment">// @author       windliang</span></span><br><span class="line"><span class="comment">// @match        http://127.0.0.1:5500/index.html</span></span><br><span class="line"><span class="comment">// @run-at       document-start</span></span><br><span class="line"><span class="comment">// @grant        unsafeWindow</span></span><br><span class="line"><span class="comment">// ==/UserScript==</span></span><br><span class="line"></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">window</span>.unsafeWindow)</span><br><span class="line">    <span class="keyword">const</span> dom = <span class="built_in">document</span>.createElement(<span class="string">"div"</span>);</span><br><span class="line">    dom.innerText = <span class="string">'我是油猴脚本的文本'</span></span><br><span class="line">    <span class="built_in">document</span>.getElementsByTagName(<span class="string">"body"</span>)[<span class="number">0</span>].append(dom);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>此时页面已经被成功拦截：</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220823101447976.png" alt="image-20220823101447976"></p><p>这里提一句，油猴脚本如果使用 <code>@grant</code> 申请了权限，此时脚本会运行在一个沙箱环境中，如果想访问原始的 <code>window</code> 对象，可以通过 <code>window.unsafeWindow</code> 。</p><p>并且我们加了 <code>@run-at</code> ，让脚本尽快执行。</p><h1 id="fetch-请求"><a href="#fetch-请求" class="headerlink" title="fetch 请求"></a>fetch 请求</h1><p>在 <code>html</code> 请求的 <code>test.js</code> 中添加 <code>fetch</code> 的代码。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">fetch(<span class="string">"http://localhost:3002/api/query"</span>)</span><br><span class="line">  .then(<span class="function">(<span class="params">response</span>) =&gt;</span> response.json())</span><br><span class="line">  .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> dom = <span class="built_in">document</span>.getElementById(<span class="string">"json"</span>); </span><br><span class="line">  dom.innerText = res.data;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>看下页面，此时就会把 <code>data</code> 显示出来。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220823102924464.png" alt="image-20220823102924464"></p><p>如果想更改返回的数据，我们只需要在油猴脚本中重写 <code>fetch</code> 方法，将原数据拿到以后再返回即可。 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ==UserScript==</span></span><br><span class="line"><span class="comment">// @name         网络拦截测试</span></span><br><span class="line"><span class="comment">// @namespace    https://windliang.wang/</span></span><br><span class="line"><span class="comment">// @version      0.1</span></span><br><span class="line"><span class="comment">// @description  测试</span></span><br><span class="line"><span class="comment">// @author       windliang</span></span><br><span class="line"><span class="comment">// @match        http://127.0.0.1:5500/index.html</span></span><br><span class="line"><span class="comment">// @run-at       document-start</span></span><br><span class="line"><span class="comment">// @grant        unsafeWindow</span></span><br><span class="line"><span class="comment">// ==/UserScript==</span></span><br><span class="line"></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">window</span>.unsafeWindow)</span><br><span class="line">    <span class="keyword">const</span> dom = <span class="built_in">document</span>.createElement(<span class="string">"div"</span>);</span><br><span class="line">    dom.innerText = <span class="string">'我是油猴脚本的文本'</span></span><br><span class="line">    <span class="built_in">document</span>.getElementsByTagName(<span class="string">"body"</span>)[<span class="number">0</span>].append(dom);</span><br><span class="line">    <span class="keyword">const</span> originFetch = fetch;</span><br><span class="line">    <span class="built_in">console</span>.log(originFetch)</span><br><span class="line">    <span class="built_in">window</span>.unsafeWindow.fetch = <span class="function">(<span class="params">url, options</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> originFetch(url, options).then(<span class="keyword">async</span> (response) =&gt; &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(url)</span><br><span class="line">            <span class="keyword">if</span>(url === <span class="string">'http://localhost:3002/api/query'</span>)&#123;</span><br><span class="line">                <span class="keyword">const</span> responseClone = response.clone();</span><br><span class="line">                <span class="keyword">let</span> res = <span class="keyword">await</span> responseClone.json();</span><br><span class="line">                res.data.push(<span class="string">'油猴脚本修改数据'</span>)</span><br><span class="line">                <span class="keyword">const</span> responseNew = <span class="keyword">new</span> Response(<span class="built_in">JSON</span>.stringify(res), response);</span><br><span class="line">                <span class="keyword">return</span> responseNew;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> response;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>对 <code>response</code> 的处理有点绕，当时也是试了好多次才试出了这种方案。</p><p>做的事情就是把原来返回的 <code>respones</code> 复制，通过 <code>json</code> 方法拿到数据，进行修改数据，最后新生成一个 <code>Response</code> 进行返回。</p><p>看下效果：</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220823173813341.png" alt="image-20220823173813341"></p><p>成功修改了返回的数据。</p><h1 id="xhr"><a href="#xhr" class="headerlink" title="xhr"></a>xhr</h1><p>我们将 <code>fetch</code> 改为用 <code>xhr</code> 发送请求，因为页面简单所以请求可能在油猴脚本重写之前就发送了，正常网站不会这么快，所以这里加一个 <code>setTimeout</code> 进行延时。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">    xhr.open(<span class="string">'GET'</span>, <span class="string">'http://localhost:3002/api/query'</span>);</span><br><span class="line">    xhr.send();</span><br><span class="line">    xhr.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">const</span> res = <span class="built_in">JSON</span>.parse(<span class="keyword">this</span>.responseText);</span><br><span class="line">        <span class="keyword">const</span> dom = <span class="built_in">document</span>.getElementById(<span class="string">"json"</span>);</span><br><span class="line">        dom.innerText = res.data;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>和 <code>fetch</code> 的思路一样，我们可以在返回前更改 <code>responseText</code> 。</p><p>重写 <code>XMLHttpRequest</code> 原型对象的 <code>open</code> 或者 <code>send</code> 方法，在函数内拿到用户当前的 <code>xhr</code> 实例，监听 <code>readystatechange</code> 事件，然后重写 <code>responseText</code> 。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> originOpen = XMLHttpRequest.prototype.open;</span><br><span class="line">XMLHttpRequest.prototype.open = <span class="function"><span class="keyword">function</span> (<span class="params">_, url</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (url === <span class="string">"http://localhost:3002/api/query"</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.addEventListener(<span class="string">"readystatechange"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.readyState === <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> res = <span class="built_in">JSON</span>.parse(<span class="keyword">this</span>.responseText);</span><br><span class="line">        res.data.push(<span class="string">"油猴脚本修改数据"</span>);</span><br><span class="line">        <span class="keyword">this</span>.responseText = <span class="built_in">JSON</span>.stringify(res);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  originOpen.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>运行一下：</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220824084014585.png" alt="image-20220824084014585"></p><p>拦截失败了，网上搜寻下答案，原因是  <code>responseText</code> 不是可写的，我们将原型对象上的 <code>responseText</code> 属性描述符打印一下。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220824084726967.png" alt="image-20220824084726967"></p><p>可以看到 <code>set</code> 属性是 <code>undefined</code> ，因此我们重写 <code>responseText</code> 失败了。</p><p>我们无法修改原型对象上的 <code>responseText</code> ，我们可以在当前 <code>xhr</code> 对象，也就是 <code>this</code> 上边定义一个同名的 <code>responseText</code> 属性，赋值的话有两种思路。</p><h2 id="1、直接赋值"><a href="#1、直接赋值" class="headerlink" title="1、直接赋值"></a>1、直接赋值</h2><p>我们定义一个 <code>writable: true,</code> 的属性，然后直接赋值为我们修改后的数据。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> originOpen = XMLHttpRequest.prototype.open;</span><br><span class="line">XMLHttpRequest.prototype.open = <span class="function"><span class="keyword">function</span> (<span class="params">_, url</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (url === <span class="string">"http://localhost:3002/api/query"</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.addEventListener(<span class="string">"readystatechange"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.readyState === <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> res = <span class="built_in">JSON</span>.parse(<span class="keyword">this</span>.responseText);</span><br><span class="line">        <span class="comment">// 当前 xhr 对象上定义 responseText</span></span><br><span class="line">        <span class="built_in">Object</span>.defineProperty(<span class="keyword">this</span>, <span class="string">"responseText"</span>, &#123; </span><br><span class="line">          writable: <span class="literal">true</span>,</span><br><span class="line">        &#125;);</span><br><span class="line">        res.data.push(<span class="string">"油猴脚本修改数据"</span>);</span><br><span class="line">        <span class="keyword">this</span>.responseText = <span class="built_in">JSON</span>.stringify(res);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  originOpen.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>看下页面会发现成功拦截了：</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220824085203088.png" alt="image-20220824085203088"></p><h2 id="2、重写-get"><a href="#2、重写-get" class="headerlink" title="2、重写 get"></a>2、重写 get</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> originOpen = XMLHttpRequest.prototype.open;</span><br><span class="line">XMLHttpRequest.prototype.open = <span class="function"><span class="keyword">function</span> (<span class="params">_, url</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (url === <span class="string">"http://localhost:3002/api/query"</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> xhr = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">const</span> getter = <span class="built_in">Object</span>.getOwnPropertyDescriptor(</span><br><span class="line">      XMLHttpRequest.prototype,</span><br><span class="line">      <span class="string">"response"</span></span><br><span class="line">    ).get;</span><br><span class="line">    <span class="built_in">Object</span>.defineProperty(xhr, <span class="string">"responseText"</span>, &#123;</span><br><span class="line">      get: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> result = getter.call(xhr);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="keyword">const</span> res = <span class="built_in">JSON</span>.parse(result);</span><br><span class="line">          res.data.push(<span class="string">'油猴脚本修改数据'</span>)</span><br><span class="line">          <span class="keyword">return</span> <span class="built_in">JSON</span>.stringify(res);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">          <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  originOpen.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>我们拿到原型对象的 <code>get</code> ，然后在当前对象上定义 <code>responseText</code> 的 <code>get</code>属性，修改数据后返回即可。</p><p>相比于第一种方案，这种方案无需等待  <code>readystatechange</code> ，在开始的时候重写即可。</p><p>需要注意的是，上边方案都只是重写了 <code>responseText</code> 字段，不排除有的网站读取的是 <code>response</code> 字段，但修改的话和上边是一样的，这里就不写了。</p><h1 id="总"><a href="#总" class="headerlink" title="总"></a>总</h1><p>通过对 <code>fetch</code> 和 <code>xhr</code> 的重写，我们基本上可以对网页「为所欲为」了，发挥想象力通过油猴脚本应该可以做很多有意思的事情。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;写过几个油猴脚本，经常对页面请求返回的数据进行拦截或者覆盖，这篇文章就做个总结，涉及到 &lt;code&gt;fetch&lt;/code&gt; 和 &lt;code&gt;xhr&lt;/code&gt; 两种类型的请求。&lt;/p&gt;
&lt;h1 id=&quot;环境搭建&quot;&gt;&lt;a href=&quot;#环境搭建&quot; class=&quot;heade
      
    
    </summary>
    
    
      <category term="前端" scheme="https://windliang.wang/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="油猴" scheme="https://windliang.wang/tags/%E6%B2%B9%E7%8C%B4/"/>
    
  </entry>
  
  <entry>
    <title>elementUI中el-tabs或者说Vue现存的一个bug排查</title>
    <link href="https://windliang.wang/2022/08/14/elementUI%E4%B8%ADel-tabs%E7%9A%84%E4%B8%80%E4%B8%AAbug%E5%88%86%E6%9E%90/"/>
    <id>https://windliang.wang/2022/08/14/elementUI%E4%B8%ADel-tabs%E7%9A%84%E4%B8%80%E4%B8%AAbug%E5%88%86%E6%9E%90/</id>
    <published>2022-08-13T23:26:13.000Z</published>
    <updated>2022-11-17T00:01:23.933Z</updated>
    
    <content type="html"><![CDATA[<h1 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象</h1><p> <code>element-ui</code> 版本是 <code>2.15.9</code>，<code>vue</code> 版本是 <code>2.7.8</code> 。</p><p>在 <code>el-dialog</code> 中使用 <code>el-tabs</code> ，并且 <code>el-dialog</code> 添加 <code>destroy-on-close</code> 属性，当关闭弹窗的时候页面就直接无响应了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">        &lt;el-dialog</span><br><span class="line">            title=<span class="string">"提示"</span></span><br><span class="line">            :visible.sync=<span class="string">"dialogVisible"</span></span><br><span class="line">            width=<span class="string">"30%"</span></span><br><span class="line">            destroy-on-close</span><br><span class="line">        &gt;</span><br><span class="line">            &lt;el-tabs type=<span class="string">"border-card"</span>&gt;</span><br><span class="line">                &lt;el-tab-pane label=<span class="string">"用户管理"</span>&gt;用户管理&lt;<span class="regexp">/el-tab-pane&gt;</span></span><br><span class="line"><span class="regexp">                &lt;el-tab-pane label="配置管理"&gt;配置管理&lt;/</span>el-tab-pane&gt;</span><br><span class="line">                &lt;el-tab-pane label=<span class="string">"角色管理"</span>&gt;角色管理&lt;<span class="regexp">/el-tab-pane&gt;</span></span><br><span class="line"><span class="regexp">                &lt;el-tab-pane label="定时任务补偿"&gt;定时任务补偿&lt;/</span>el-tab-pane&gt;</span><br><span class="line">            &lt;<span class="regexp">/el-tabs&gt;</span></span><br><span class="line"><span class="regexp">            &lt;span slot="footer" class="dialog-footer"&gt;</span></span><br><span class="line"><span class="regexp">                &lt;el-button @click="dialogVisible = false"&gt;取 消&lt;/</span>el-button&gt;</span><br><span class="line">                &lt;el-button type=<span class="string">"primary"</span> @click=<span class="string">"dialogVisible = false"</span></span><br><span class="line">                    &gt;确 定&lt;<span class="regexp">/el-button</span></span><br><span class="line"><span class="regexp">                &gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>span&gt;</span><br><span class="line">        &lt;<span class="regexp">/el-dialog&gt;</span></span><br><span class="line"><span class="regexp">        &lt;el-button @click="dialogVisible = true"&gt;打开弹窗&lt;/</span>el-button&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    name: <span class="string">"App"</span>,</span><br><span class="line">    data() &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            dialogVisible: <span class="literal">false</span>,</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.com11.gif" alt="11"></p><p>再等一会儿 <code>Chrome</code> 就直接抛错了：</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220814073751320.png" alt="image-20220814073751320"></p><p>操作过程中控制台也没有任何报错，去 <code>github</code> 的 <code>issues</code> 看一眼发现已经有 <code>3</code> 个人遇到过这个问题了：</p><p><a href="https://github.com/ElemeFE/element/issues/21114" target="_blank" rel="noopener">[bug report] El dialog [destroy on close] El tabs page crashes #21114</a></p><p><a href="https://github.com/ElemeFE/element/issues/20974" target="_blank" rel="noopener">[Bug Report] When set a attribute “destory-on-close=’true’” on a el-dialog which has a child el-tabs component will cause the browser crash #20974</a></p><p><a href="https://github.com/ElemeFE/element/issues/20947" target="_blank" rel="noopener">[Bug Report] el-tabs in el-dialog with destroy-on-close=‘true’ ,dialog can’t be closed</a></p><p>看表现应该是哪里陷入了死循环，猜测是 <code>el-tabs</code> 的 <code>render</code> 函数在无限执行。</p><p>为了证实这个猜测，我们直接在 <code>node_modules</code> 中 <code>el-tabs</code> 的 <code>render</code> 函数添加 <code>console</code> 。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220814080300663.png" alt="image-20220814080300663"></p><p>打开控制台观察一下是否有输出：</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comKapture%202022-08-14%20at%2008.05.56.gif" alt="Kapture 2022-08-14 at 08.05.56"></p><p>直接原因找到了，下边需要排查一下 <code>render</code> 进入死循环的原因。</p><h1 id="问题排查"><a href="#问题排查" class="headerlink" title="问题排查"></a>问题排查</h1><p>可能出现问题的点，<code>el-dialog</code>、<code>el-tabs</code>、<code>el-tab-pane</code>，当然如果上述都没问题的话，也不排除 <code>Vue</code> 的问题，虽然可能性很低。</p><h2 id="el-dialog"><a href="#el-dialog" class="headerlink" title="el-dialog"></a>el-dialog</h2><p>如果我们把 <code>destroy-on-close</code> 属性去掉，然后一切就恢复正常了。所以我们先看一下 <code>destroy-on-close</code>  做了什么。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;transition</span><br><span class="line">    name=<span class="string">"dialog-fade"</span></span><br><span class="line">    @after-enter=<span class="string">"afterEnter"</span></span><br><span class="line">    @after-leave=<span class="string">"afterLeave"</span>&gt;</span><br><span class="line">    &lt;div</span><br><span class="line">      v-show=<span class="string">"visible"</span></span><br><span class="line">      <span class="class"><span class="keyword">class</span></span>=<span class="string">"el-dialog__wrapper"</span></span><br><span class="line">      @click.self=<span class="string">"handleWrapperClick"</span>&gt;</span><br><span class="line">      &lt;div</span><br><span class="line">        role=<span class="string">"dialog"</span></span><br><span class="line">        :key=<span class="string">"key"</span></span><br><span class="line">        :style=<span class="string">"style"</span>&gt;</span><br><span class="line">        ...</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"el-dialog__body"</span> v-<span class="keyword">if</span>=<span class="string">"rendered"</span>&gt;<span class="xml"><span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        ...</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">  &lt;<span class="regexp">/transition&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br></pre></td></tr></table></figure><p>最关键的的是 <code>&lt;el-dialog__body&gt;</code> 的外层 <code>div</code> 中设置了一个 <code>key</code> 。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">watch: &#123;</span><br><span class="line">  visible(val) &#123;</span><br><span class="line">    <span class="keyword">if</span> (val) &#123;</span><br><span class="line">      ...</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.$el.removeEventListener(<span class="string">'scroll'</span>, <span class="keyword">this</span>.updatePopper);</span><br><span class="line">      <span class="keyword">if</span> (!<span class="keyword">this</span>.closed) <span class="keyword">this</span>.$emit(<span class="string">'close'</span>);</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.destroyOnClose) &#123;</span><br><span class="line">        <span class="keyword">this</span>.$nextTick(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">this</span>.key++;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>当我们把 <code>dialog</code> 的 <code>visible</code> 置为 <code>false</code> 的时候，会判断 <code>this.destroyOnClose</code> 的值，然后修改 <code>key</code> 的值。</p><p>当 <code>key</code> 值修改以后，<code>div</code> 中的元素就会整个重新渲染了，这就是官网中所说明 <code>this.destroyOnClose</code> 的作用。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220814095416654.png" alt="image-20220814095416654"></p><p>为了排除 <code>el-dialog</code> 的问题，我们写一个自定义组件来替代 <code>el-dialog</code> 。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div v-show=<span class="string">"showDialog"</span> :key=<span class="string">"key"</span>&gt;</span><br><span class="line">        &lt;slot&gt;<span class="xml"><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    components: &#123;&#125;,</span><br><span class="line">    data() &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            key: <span class="number">1</span>,</span><br><span class="line">            showDialog: <span class="literal">false</span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        open() &#123;</span><br><span class="line">            <span class="keyword">this</span>.showDialog = <span class="literal">true</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">        close() &#123;</span><br><span class="line">            <span class="keyword">this</span>.key += <span class="number">1</span></span><br><span class="line">            <span class="keyword">this</span>.showDialog = <span class="literal">false</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;style scoped&gt;&lt;/</span>style&gt;</span><br></pre></td></tr></table></figure><p>接着我们将 <code>el-dialog</code>  换为上边的组件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">        &lt;wrap ref=<span class="string">"wrap"</span>&gt;</span><br><span class="line">            &lt;el-tabs type=<span class="string">"border-card"</span>&gt;</span><br><span class="line">                &lt;el-tab-pane label=<span class="string">"用户管理"</span>&gt;用户管理&lt;<span class="regexp">/el-tab-pane&gt;</span></span><br><span class="line"><span class="regexp">                &lt;el-tab-pane label="配置管理"&gt;配置管理&lt;/</span>el-tab-pane&gt;</span><br><span class="line">                &lt;el-tab-pane label=<span class="string">"角色管理"</span>&gt;角色管理&lt;<span class="regexp">/el-tab-pane&gt;</span></span><br><span class="line"><span class="regexp">                &lt;el-tab-pane label="定时任务补偿"&gt;定时任务补偿&lt;/</span>el-tab-pane&gt;</span><br><span class="line">            &lt;<span class="regexp">/el-tabs&gt;</span></span><br><span class="line"><span class="regexp">            &lt;el-button @click="close"&gt;关闭&lt;/</span>el-button&gt;</span><br><span class="line">        &lt;<span class="regexp">/wrap&gt;</span></span><br><span class="line"><span class="regexp">        &lt;el-button @click="open"&gt;打开弹窗&lt;/</span>el-button&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> Wrap <span class="keyword">from</span> <span class="string">"./Wrap.vue"</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    name: <span class="string">"App"</span>,</span><br><span class="line">    components: &#123;</span><br><span class="line">        Wrap,</span><br><span class="line">    &#125;,</span><br><span class="line">    data() &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        open() &#123;</span><br><span class="line">            <span class="keyword">this</span>.$refs.wrap.open();</span><br><span class="line">        &#125;,</span><br><span class="line">        close() &#123;</span><br><span class="line">            <span class="keyword">this</span>.$refs.wrap.close();</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;style&gt;</span></span><br><span class="line"><span class="regexp">#app &#123;</span></span><br><span class="line"><span class="regexp">    font-family: Avenir, Helvetica, Arial, sans-serif;</span></span><br><span class="line"><span class="regexp">    -webkit-font-smoothing: antialiased;</span></span><br><span class="line"><span class="regexp">    -moz-osx-font-smoothing: grayscale;</span></span><br><span class="line"><span class="regexp">    text-align: center;</span></span><br><span class="line"><span class="regexp">    color: #2c3e50;</span></span><br><span class="line"><span class="regexp">    margin-top: 60px;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>style&gt;</span><br></pre></td></tr></table></figure><p>运行之后发现问题依旧存在，因此我们可以排除是 <code>el-dialog</code> 的问题了。</p><h2 id="el-tabs-el-tab-pane"><a href="#el-tabs-el-tab-pane" class="headerlink" title="el-tabs el-tab-pane"></a>el-tabs el-tab-pane</h2><p>接下来就是一个二选一问题了，问题代码是在 <code>el-tabs</code> 还是 <code>el-tab-pane</code> 中。</p><p>我们把 <code>el-tab-pane</code> 从 <code>el-tabs</code> 去掉再来看一下还有没有问题。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">wrap</span> <span class="attr">ref</span>=<span class="string">"wrap"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-tabs</span> <span class="attr">type</span>=<span class="string">"border-card"</span>&gt;</span></span><br><span class="line">                hello World</span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-tabs</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-button</span> @<span class="attr">click</span>=<span class="string">"close"</span>&gt;</span>关闭<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">wrap</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-button</span> @<span class="attr">click</span>=<span class="string">"open"</span>&gt;</span>打开弹窗<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>运行一下发现一切正常了：</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comKapture%202022-08-14%20at%2010.07.33.gif" alt="Kapture 2022-08-14 at 10.07.33"></p><p>至此，可以基本确认是 <code>el-tab-pane</code> 问题了。</p><h1 id="直接原因"><a href="#直接原因" class="headerlink" title="直接原因"></a>直接原因</h1><p>我们来定位是哪行代码出现了问题，看一下 <code>el-tab-pane</code> 的整个代码。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div</span><br><span class="line">    <span class="class"><span class="keyword">class</span></span>=<span class="string">"el-tab-pane"</span></span><br><span class="line">    v-<span class="keyword">if</span>=<span class="string">"(!lazy || loaded) || active"</span></span><br><span class="line">    v-show=<span class="string">"active"</span></span><br><span class="line">    role=<span class="string">"tabpanel"</span></span><br><span class="line">    :aria-hidden=<span class="string">"!active"</span></span><br><span class="line">    :id=<span class="string">"`pane-$&#123;paneName&#125;`"</span></span><br><span class="line">    :aria-labelledby=<span class="string">"`tab-$&#123;paneName&#125;`"</span></span><br><span class="line">  &gt;</span><br><span class="line">    &lt;slot&gt;<span class="xml"><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    name: <span class="string">'ElTabPane'</span>,</span><br><span class="line"></span><br><span class="line">    componentName: <span class="string">'ElTabPane'</span>,</span><br><span class="line"></span><br><span class="line">    props: &#123;</span><br><span class="line">      label: <span class="built_in">String</span>,</span><br><span class="line">      labelContent: <span class="built_in">Function</span>,</span><br><span class="line">      name: <span class="built_in">String</span>,</span><br><span class="line">      closable: <span class="built_in">Boolean</span>,</span><br><span class="line">      disabled: <span class="built_in">Boolean</span>,</span><br><span class="line">      lazy: <span class="built_in">Boolean</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    data() &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        index: <span class="literal">null</span>,</span><br><span class="line">        loaded: <span class="literal">false</span></span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    computed: &#123;</span><br><span class="line">      isClosable() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.closable || <span class="keyword">this</span>.$parent.closable;</span><br><span class="line">      &#125;,</span><br><span class="line">      active() &#123;</span><br><span class="line">        <span class="keyword">const</span> active = <span class="keyword">this</span>.$parent.currentName === (<span class="keyword">this</span>.name || <span class="keyword">this</span>.index);</span><br><span class="line">        <span class="keyword">if</span> (active) &#123;</span><br><span class="line">          <span class="keyword">this</span>.loaded = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> active;</span><br><span class="line">      &#125;,</span><br><span class="line">      paneName() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name || <span class="keyword">this</span>.index;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    updated() &#123;</span><br><span class="line">      <span class="keyword">this</span>.$parent.$emit(<span class="string">'tab-nav-update'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>定位 <code>bug</code> 所在行数一般无脑采取二分注释法很快就出来了，经过两次尝试，我们只需要把 <code>updated</code> 中的代码注释掉就一切正常了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">updated() &#123;</span><br><span class="line">  <span class="comment">// this.$parent.$emit('tab-nav-update');</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="根本原因"><a href="#根本原因" class="headerlink" title="根本原因"></a>根本原因</h1><p>子组件发送了 <code>tab-nav-update</code> 事件，看一下父组件 <code>el-tabs</code> 接收  <code>tab-nav-update</code> 事件的代码。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">created() &#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="keyword">this</span>.currentName) &#123;</span><br><span class="line">    <span class="keyword">this</span>.setCurrentName(<span class="string">'0'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.$on(<span class="string">'tab-nav-update'</span>, <span class="keyword">this</span>.calcPaneInstances.bind(<span class="literal">null</span>, <span class="literal">true</span>));</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>这里会执行 <code>calcPaneInstances</code> 方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">calcPaneInstances(isForceUpdate = <span class="literal">false</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.$slots.default) &#123;</span><br><span class="line">    <span class="keyword">const</span> paneSlots = <span class="keyword">this</span>.$slots.default.filter(<span class="function"><span class="params">vnode</span> =&gt;</span> vnode.tag &amp;&amp;</span><br><span class="line">                                                 vnode.componentOptions &amp;&amp; vnode.componentOptions.Ctor.options.name === <span class="string">'ElTabPane'</span>);</span><br><span class="line">    <span class="comment">// update indeed</span></span><br><span class="line">    <span class="keyword">const</span> panes = paneSlots.map(<span class="function">(<span class="params">&#123; componentInstance &#125;</span>) =&gt;</span> componentInstance);</span><br><span class="line">    <span class="keyword">const</span> panesChanged = !<span class="function">(<span class="params">panes.length === <span class="keyword">this</span>.panes.length &amp;&amp; panes.every((pane, index</span>) =&gt;</span> pane === <span class="keyword">this</span>.panes[index]));</span><br><span class="line">    <span class="keyword">if</span> (isForceUpdate || panesChanged) &#123;</span><br><span class="line">      <span class="keyword">this</span>.panes = panes;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.panes.length !== <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.panes = [];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>主要是比较前后的 <code>panes</code> 是否一致，如果不一致就直接用新的覆盖旧的 <code>this.panes</code> 。</p><p>由于 <code>render</code> 函数中使用了 <code>panes</code> ，当修改 <code>panes</code> 的值的时候就会触发 <code>el-tabs</code> 的 <code>render</code> 。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">render(h) &#123;</span><br><span class="line">      <span class="keyword">let</span> &#123;</span><br><span class="line">        type,</span><br><span class="line">        handleTabClick,</span><br><span class="line">        handleTabRemove,</span><br><span class="line">        handleTabAdd,</span><br><span class="line">        currentName,</span><br><span class="line">        panes, <span class="comment">// 这里用到了</span></span><br><span class="line">        editable,</span><br><span class="line">        addable,</span><br><span class="line">        tabPosition,</span><br><span class="line">        stretch</span><br><span class="line">      &#125; = <span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line">      ...</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><p>打印一下关闭弹窗的时候发生了什么：</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220816063309490.png" alt="image-20220816063309490"></p><p>当关闭弹窗的时候，触发了 <code>el-tabs</code> 的 <code>render</code> ，但此时除了触发了 <code>el-tabs</code> 的 <code>updated</code> ，同时也触发到了 <code>el-tabs-pane</code> 的 <code>updated</code> 。</p><p>在 <code>el-tab-pane</code> 的 <code>updated</code> 中我们发送 <code>tab-nav-update</code> 事件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">updated() &#123;</span><br><span class="line">  <span class="keyword">this</span>.$parent.$emit(<span class="string">'tab-nav-update'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>tab-nav-update</code> 事件的回调是 <code>calcPaneInstances</code> ，除了改变 <code>this</code> 指向，同时传了一个默认参数 <code>true</code> 。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.$on(<span class="string">'tab-nav-update'</span>, <span class="keyword">this</span>.calcPaneInstances.bind(<span class="literal">null</span>, <span class="literal">true</span>));</span><br></pre></td></tr></table></figure><p>对于 <code>calcPaneInstances</code> 第一个参数的含义是 <code>isForceUpdate</code> 。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">calcPaneInstances(isForceUpdate = <span class="literal">false</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.$slots.default) &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">if</span> (isForceUpdate || panesChanged) &#123;</span><br><span class="line">      <span class="keyword">this</span>.panes = panes;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.panes.length !== <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.panes = [];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>如果 <code>isForceUpdate</code> 为 <code>true</code> 就会更新 <code>panes</code> 的值，接着又触发 <code>el-tabs</code> 的 <code>render</code> 函数，又一次引发 <code>el-tab-pane</code> 的 <code>updated</code> ，最终造成了 <code>render</code> 的死循环，使得浏览器卡死。</p><h1 id="bug-最小说明"><a href="#bug-最小说明" class="headerlink" title="bug 最小说明"></a>bug 最小说明</h1><p>一句话总结：某些场景下如果父组件重新 <code>render</code>，即使子组件没有变化，但子组件传递了 <code>slot</code> ，此时就会触发子组件的 <code>updated</code> 函数。</p><p>上边的逻辑确实不符合直觉，我们将代码完全从 <code>Element</code> 中抽离，举一个简单的例子来复现这个问题：</p><p><code>App.vue</code> 代码，依旧用 <code>wrap</code> 包裹。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">        &lt;wrap ref=<span class="string">"wrap"</span>&gt;</span><br><span class="line">            &lt;tabs&gt;</span><br><span class="line">                &lt;pane&gt;我来自pane的slot&lt;<span class="regexp">/pane&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>tabs&gt;</span><br><span class="line">            &lt;el-button @click=<span class="string">"close"</span>&gt;关闭&lt;<span class="regexp">/el-button&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>wrap&gt;</span><br><span class="line">        &lt;el-button @click=<span class="string">"open"</span>&gt;打开弹窗&lt;<span class="regexp">/el-button&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">import Wrap from "./</span>Wrap.vue<span class="string">";</span></span><br><span class="line"><span class="string">import Pane from "</span>./Pane.vue<span class="string">";</span></span><br><span class="line"><span class="string">import Tabs from "</span>./Tabs.vue<span class="string">";</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">export default &#123;</span></span><br><span class="line"><span class="string">    name: "</span>App<span class="string">",</span></span><br><span class="line"><span class="string">    components: &#123;</span></span><br><span class="line"><span class="string">        Wrap,</span></span><br><span class="line"><span class="string">        Pane,</span></span><br><span class="line"><span class="string">        Tabs,</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">    data() &#123;</span></span><br><span class="line"><span class="string">        return &#123;</span></span><br><span class="line"><span class="string">            show: false,</span></span><br><span class="line"><span class="string">        &#125;;</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">    methods: &#123;</span></span><br><span class="line"><span class="string">        open() &#123;</span></span><br><span class="line"><span class="string">            this.$refs.wrap.open();</span></span><br><span class="line"><span class="string">            this.show = true;</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        close() &#123;</span></span><br><span class="line"><span class="string">            this.$refs.wrap.close();</span></span><br><span class="line"><span class="string">            this.show = false;</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">&#125;;</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;style&gt;</span></span><br><span class="line"><span class="string">#app &#123;</span></span><br><span class="line"><span class="string">    font-family: Avenir, Helvetica, Arial, sans-serif;</span></span><br><span class="line"><span class="string">    -webkit-font-smoothing: antialiased;</span></span><br><span class="line"><span class="string">    -moz-osx-font-smoothing: grayscale;</span></span><br><span class="line"><span class="string">    text-align: center;</span></span><br><span class="line"><span class="string">    color: #2c3e50;</span></span><br><span class="line"><span class="string">    margin-top: 60px;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&lt;/style&gt;</span></span><br></pre></td></tr></table></figure><p><code>Tabs.vue</code> ，提供一个 <code>slot</code> ，并且提供一个方法更新自己包含的 <code>data</code> 属性 <code>i</code> 。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;div&gt;我是 Tabs，第 &#123;&#123; i &#125;&#125; 次渲染&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        &lt;slot&gt;&lt;/</span>slot&gt;</span><br><span class="line">        &lt;el-button @click=<span class="string">"change"</span>&gt;触发 Tabs 重新渲染&lt;<span class="regexp">/el-button&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">export default &#123;</span></span><br><span class="line"><span class="regexp">    data() &#123;</span></span><br><span class="line"><span class="regexp">        return &#123;</span></span><br><span class="line"><span class="regexp">            i: 0,</span></span><br><span class="line"><span class="regexp">        &#125;;</span></span><br><span class="line"><span class="regexp">    &#125;,</span></span><br><span class="line"><span class="regexp">    methods: &#123;</span></span><br><span class="line"><span class="regexp">        change() &#123;</span></span><br><span class="line"><span class="regexp">            this.i++;</span></span><br><span class="line"><span class="regexp">        &#125;,</span></span><br><span class="line"><span class="regexp">    &#125;,</span></span><br><span class="line"><span class="regexp">    updated() &#123;</span></span><br><span class="line"><span class="regexp">        console.log("Tabs:updated");</span></span><br><span class="line"><span class="regexp">    &#125;,</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    mounted() &#123;</span></span><br><span class="line"><span class="regexp">        console.log("Tabs:mounted");</span></span><br><span class="line"><span class="regexp">    &#125;,</span></span><br><span class="line"><span class="regexp">&#125;;</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;<span class="xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><code>Pane.vue</code> ，提供一个 <code>slot</code> 。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;<span class="xml"><span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">    export default &#123;</span></span><br><span class="line"><span class="regexp">mounted() &#123;</span></span><br><span class="line"><span class="regexp">  console.log("Pane:mounted");</span></span><br><span class="line"><span class="regexp">&#125;,</span></span><br><span class="line"><span class="regexp">  updated() &#123;</span></span><br><span class="line"><span class="regexp">    console.log("Pane:updated");</span></span><br><span class="line"><span class="regexp">  &#125;,</span></span><br><span class="line"><span class="regexp">&#125;;</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;<span class="xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>操作路径：</p><p>打开弹窗 -&gt; 关闭弹窗 -&gt; 再打开弹窗（此时 <code>pane</code> 就会触发 <code>updated</code> ） -&gt; 更新 <code>Tabs</code> 的值，会发现 <code>pane</code> 一直触发 <code>updated</code> 。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.com3.gif" alt="3"></p><p>如果我们在 <code>Pane</code> 的 <code>updated</code> 中引发 <code>Tabs</code> 的 <code>render</code> ，就会造成死循环了。</p><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>关于这个问题网上前几年已经讨论过了：</p><p><a href="https://segmentfault.com/q/1010000040171066" target="_blank" rel="noopener">https://segmentfault.com/q/1010000040171066</a></p><p><a href="https://github.com/vuejs/vue/issues/8342" target="_blank" rel="noopener">https://github.com/vuejs/vue/issues/8342</a></p><p><a href="https://stackoverflow.com/questions/57536067/why-vue-need-to-forceupdate-components-when-they-include-static-slot" target="_blank" rel="noopener">https://stackoverflow.com/questions/57536067/why-vue-need-to-forceupdate-components-when-they-include-static-slot</a></p><p>但是上边网站的例子试了下已经不能复现了，看起来这个问题被修过一次了，但没有完全解决，可能是当做 <code>feature</code> 了。</p><h2 id="Vue-2-6"><a href="#Vue-2-6" class="headerlink" title="Vue 2.6+"></a>Vue 2.6+</h2><p>如果你的版本是 <code>Vue 2.6</code> 以上，当时尤大提过了一个<a href="https://github.com/vuejs/vue/pull/9371" target="_blank" rel="noopener">解决方案</a>：</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220816085852972.png" alt="image-20220816085852972"></p><p>指明 <code>slot</code> 的名字，这里就是 <code>default</code> 。</p><p>代码中我们在 <code>Pane</code> 中包裹一层 <code>template</code> 指明 <code>default</code> 。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">        &lt;wrap ref=<span class="string">"wrap"</span>&gt;</span><br><span class="line">            &lt;tabs&gt;</span><br><span class="line">                &lt;pane&gt;</span><br><span class="line">                    &lt;template v-slot:<span class="keyword">default</span>&gt; 我来自pane的slot &lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp">                &lt;/</span>pane&gt;</span><br><span class="line">            &lt;<span class="regexp">/tabs&gt;</span></span><br><span class="line"><span class="regexp">            &lt;el-button @click="close"&gt;关闭&lt;/</span>el-button&gt;</span><br><span class="line">        &lt;<span class="regexp">/wrap&gt;</span></span><br><span class="line"><span class="regexp">        &lt;el-button @click="open"&gt;打开弹窗&lt;/</span>el-button&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br></pre></td></tr></table></figure><p>再运行一下会发现 <code>pane</code> 的 <code>updated</code> 就不会触发了。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220816082327739.png" alt="image-20220816082327739"></p><h2 id="Vue-2-6-以下"><a href="#Vue-2-6-以下" class="headerlink" title="Vue 2.6 以下"></a>Vue 2.6 以下</h2><p>仔细想一下，我们第一次渲染的时候并不会出现问题，因此我们干脆在关闭弹窗的时候把 <code>Pane</code> 销毁掉（<code>Pane</code> 添加 <code>v-if</code> ），再打开弹窗的时候现场就和第一次保持一致，就不会引起 <code>Element</code> 的死循环了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">        &lt;wrap ref=<span class="string">"wrap"</span>&gt;</span><br><span class="line">            &lt;tabs&gt;</span><br><span class="line">                &lt;pane v-<span class="keyword">if</span>=<span class="string">"show"</span>&gt; 我来自pane的slot &lt;<span class="regexp">/pane&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>tabs&gt;</span><br><span class="line">            &lt;el-button @click=<span class="string">"close"</span>&gt;关闭&lt;<span class="regexp">/el-button&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>wrap&gt;</span><br><span class="line">        &lt;el-button @click=<span class="string">"open"</span>&gt;打开弹窗&lt;<span class="regexp">/el-button&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">import Wrap from "./</span>Wrap.vue<span class="string">";</span></span><br><span class="line"><span class="string">import Pane from "</span>./Pane.vue<span class="string">";</span></span><br><span class="line"><span class="string">import Tabs from "</span>./Tabs.vue<span class="string">";</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">export default &#123;</span></span><br><span class="line"><span class="string">    name: "</span>App<span class="string">",</span></span><br><span class="line"><span class="string">    components: &#123;</span></span><br><span class="line"><span class="string">        Wrap,</span></span><br><span class="line"><span class="string">        Pane,</span></span><br><span class="line"><span class="string">        Tabs,</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">    data() &#123;</span></span><br><span class="line"><span class="string">        return &#123;</span></span><br><span class="line"><span class="string">            show: false,</span></span><br><span class="line"><span class="string">        &#125;;</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">    methods: &#123;</span></span><br><span class="line"><span class="string">        open() &#123;</span></span><br><span class="line"><span class="string">            this.$refs.wrap.open();</span></span><br><span class="line"><span class="string">            this.show = true;</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        close() &#123;</span></span><br><span class="line"><span class="string">            this.$refs.wrap.close();</span></span><br><span class="line"><span class="string">            this.show = false;</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">&#125;;</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br></pre></td></tr></table></figure><p>同样的，<code>Pane</code> 的 <code>updated</code> 也不会被触发了。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220816083018335.png" alt="image-20220816083018335"></p><h2 id="等-Element-兼容"><a href="#等-Element-兼容" class="headerlink" title="等 Element 兼容"></a>等 Element 兼容</h2><p>讲道理，这个问题其实也不能算作是 <code>Element</code> 的，但在 <code>updated</code> 生命周期触发渲染其实 <code>Vue</code> 官方已经给出过警告了。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220816083227156.png" alt="image-20220816083227156"></p><p><code>Element</code> 兼容的话，需要分析一下当时为什么在 <code>updated</code> 更新父组件状态，然后换一种方式了。</p><h2 id="等-Vue-修复？"><a href="#等-Vue-修复？" class="headerlink" title="等 Vue 修复？"></a>等 Vue 修复？</h2><p>应该不会再修复了，毕竟有方案可以绕过这个问题，强制更新子组件应该是某些场景确实需要更新。</p><p>但 <code>slot</code> 为什么会引发这个问题，源代码到时候我会再研究下，最近也一直在看源代码相关的，目前 <code>Vue2</code> 响应式系统和虚拟 <code>dom</code> 两大块原理解析已经完成了，模版编译已经开始写了，关于 <code>slot</code> 应该也快写到了，感兴趣的同学也可以到 <a href="https://vue.windliang.wang/" target="_blank" rel="noopener">vue.windliang.wang</a> 一起学习，文章会将 <code>Vue</code> 的每个点都拆出来并且配有相应的源代码进行调试。</p><h1 id="总"><a href="#总" class="headerlink" title="总"></a>总</h1><p>在业务开发中，如果业务方能解决的问题，一般就自己解决了，一方面底层包团队更新速度确实慢，另一方面，因为业务代码依赖的包可能和最新版本差很多了，即使底层库修复了，我们也不会去更新库版本，罗老师镇楼。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220816084114944.png" alt="image-20220816084114944"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;现象&quot;&gt;&lt;a href=&quot;#现象&quot; class=&quot;headerlink&quot; title=&quot;现象&quot;&gt;&lt;/a&gt;现象&lt;/h1&gt;&lt;p&gt; &lt;code&gt;element-ui&lt;/code&gt; 版本是 &lt;code&gt;2.15.9&lt;/code&gt;，&lt;code&gt;vue&lt;/code&gt; 版本是 
      
    
    </summary>
    
    
      <category term="前端" scheme="https://windliang.wang/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="elementUI" scheme="https://windliang.wang/tags/elementUI/"/>
    
      <category term="vue" scheme="https://windliang.wang/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>在美团工作的第二年</title>
    <link href="https://windliang.wang/2022/06/30/%E5%9C%A8%E7%BE%8E%E5%9B%A2%E5%B7%A5%E4%BD%9C%E7%9A%84%E7%AC%AC%E4%BA%8C%E5%B9%B4/"/>
    <id>https://windliang.wang/2022/06/30/%E5%9C%A8%E7%BE%8E%E5%9B%A2%E5%B7%A5%E4%BD%9C%E7%9A%84%E7%AC%AC%E4%BA%8C%E5%B9%B4/</id>
    <published>2022-06-29T23:31:12.000Z</published>
    <updated>2022-11-17T00:01:23.942Z</updated>
    
    <content type="html"><![CDATA[<p>不知不觉入职两周年了，<a href="https://windliang.wang/2021/05/29/%E5%9C%A8%E7%BE%8E%E5%9B%A2%E5%B7%A5%E4%BD%9C%E7%9A%84%E7%AC%AC%E4%B8%80%E5%B9%B4/">在美团工作的第一年</a> 里主要介绍了一下平时的工作内容，这次就记录下当下的感受和一些思考吧。</p><h2 id="互联网低谷"><a href="#互联网低谷" class="headerlink" title="互联网低谷"></a>互联网低谷</h2><p>自己 <code>20</code> 年入职那几个月可谓互联网巅峰了，之后随着疫情的持续和政策的影响，互联网就开始一泄千丈。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220630074404498.png" alt="image-20220630074404498"></p><p>网上的裁员消息也是不停歇，今年即将秋招的同学应该会感受更加强烈。</p><p>互联网就此不行了吗？股市除了公司的盈利外，也反映着大家对未来发展的信心程度。互联网本身其实没有变化，反而大家越来越依赖于互联网，微信、短视频、游戏、快递外卖，互联网的应用已经和生活交融在了一起。随着疫情的结束，当大家的生活重新恢复正常，重拾信心，相信互联网依旧会继续向上发展。</p><p>自己 <code>14</code> 年进入大学接触计算机的时候，其实当前互联网并不火爆，计算机学院很多同学是调剂过来的，但到毕业的时候计算机学院的录取分反而成了学校最高的学院。因此，大家选专业、选行业的时候，第一位一定要基于兴趣，没有人能准确预测这个行业未来会怎么样。</p><p>准备进入互联网技术岗位的话，需要做好随时学习新技术的准备，<code>PHP</code>、<code>Flash</code> 、<code>.NET</code> 开发，过去也都火爆一时，但现在也逐步走向小众甚至消失，对于前端，从 <code>jQuery</code> ，到 <code>React</code> 、<code>Vue</code>，到现在的小程序，也就十几年，框架却不断更迭。</p><p>未来漫漫几十年出现新旧技术的更迭是必然的，我们能做的就是持续学习，不要过于关心外部环境的变化，终会有自己的一席之地。当然最重要还是热爱，不管是工作还是什么，唯有热爱，方能抵御岁月漫长。</p><h2 id="技术方向"><a href="#技术方向" class="headerlink" title="技术方向"></a>技术方向</h2><p>从前端的角度来看，可以分为技术前端和业务前端。</p><p>技术前端做的事情主要是公司的一些基础设施，比如 CI/CD 流水线、小程序编辑器、项目的编译优化、UI 组件库，做的东西更像是地基，不面向具体业务。公司的各个业务团队都会用到这些基建，有问题的话就去向相应负责人反馈。</p><p>换句话讲，技术前端面对的用户更多的是开发者。</p><p>业务前端更多的会跟产品经理交流，围绕具体的业务，比如营销活动、直播、发票、内部系统等，产品经理会进行业务数据的分析，然后提出相应的需求，交由业务前端来实现。bug 由测试人员或者开发者自己寻找，或者通过大盘监控异常，最差的情况就是由用户反馈上来。</p><p>相应的，业务前端的产品面向的就是普通人。</p><p>对于找工作的话，这两个大方向就可以确定一个，面试的时候也可以向面试官询问具体的方向。</p><h2 id="业务与技术"><a href="#业务与技术" class="headerlink" title="业务与技术"></a>业务与技术</h2><p>说到业务与技术的关系， @冴羽 <a href="https://mp.weixin.qq.com/s/M9YS_S2uDt3xhYdtDeclkw" target="_blank" rel="noopener">这篇文章</a> 写的非常详细，我就不班门弄斧了。</p><p>一句话总结就是除了技术，我们需要有意识的去理解当前业务各项指标，理解各个需求的目的和联系，从技术的角度为产品赋能。</p><p>除了日常的需求迭代外，我们还需要寻找平时业务或者开发上的痛点，比如开发效率、日志排查、质量建设等，从技术的角度提出解决方案，最终落地实施。</p><p>当然上边说的东西我也还没做到，只能说朝上边的方向努力吧，哈哈。</p><h2 id="关于英语"><a href="#关于英语" class="headerlink" title="关于英语"></a>关于英语</h2><p>英语真的是从小学开始接触到现在也一直在学的东西，虽然现在还是很菜，但值得安慰的是心里一直有这个事情。</p><p>自己看过真的是很多很多关于英语学习的方法了，女朋友每次看到我看英文学习的英文视频就调侃一次，「你现在看这些视频是不是都能无字幕」，哈哈，确实有那么点，毕竟教英语学习方法的单词就那么些。</p><p>多年学习怎么学习英语的方法经验有两点。</p><p>第一点就是坚持，英语不像程序一样有实时反馈，注定就是一个慢慢积累的过程，甚至很长时间看不到进步，但还是需要坚持。</p><p>第二点就是去用，要把英语当成工具，需要自己构造英文环境。简单的比如逛 quora、Twitter 等一些国外应用，再比如看到生活中的物品去想想英语怎么说，看美剧遮住英文字幕，看中文字幕一句一句去翻译校对等。方法很多，重要的还是第一点。</p><p>为什么学英语呢？因为全世界都是在用英语交流，翻译出来的东西和原文一定是有 gap 的，最生动的例子就是古诗翻译成英语，很大程度失去了韵味。从技术来讲，当迈出中文圈的那一步，一定是技术继续向上迈进的必经之步。</p><p>把英语当成工具去探索世界，无论是网上探索还是实地探索，不管是技术还是价值观一定都会有新的认识。</p><p>对于我的话，未来如果我的博客变成了英文来写，那一定是人生中一个值得纪念的时刻。</p><h2 id="关于人生"><a href="#关于人生" class="headerlink" title="关于人生"></a>关于人生</h2><p>当每天重复的两点一线，工作吃饭回家睡觉工作…总会情不自禁的去思考人生的意义是什么。过去一年看了些哲学、心理学方面的东西，人确实是一个神奇的存在，即使是自己也不一定完全了解自己。</p><p>三年前秋招的过程中也产生过迷茫，详见 <a href="https://mp.weixin.qq.com/s/o5U4YG101IJXVsgBiMG_xw" target="_blank" rel="noopener">面完腾讯阿里后对人生的思考</a>。当时对于人生意义有了一定的感触，三年过去了当时的观念也没有变化。仔细探讨的话，人生确实没有意义，一切都需要我们自己赋予。我们现在可以感受身边的一切，就已经是最大的幸福了。</p><p>至于世俗上的成功，每个人的定义也会不一样，人的欲望是无止境的，成功了一次，又想着下一次成功。我们不妨多听听内心的声音，保持 stay hungry stay foolish ，寻找自己的节奏。</p><p>自己太菜了也讲不了太多的东西，这里就推荐几个书吧。「得到」的「刘擎西方现代思想」、「刘玮存在主义哲学20讲」，微信读书的「哲学家们都干了些什么」、「五种时间：重建人生秩序」，「认知觉醒：开启自我改变的原动力」。</p><p>心理学方面的：「思考，快与慢」，「稀缺：我们是如何陷入贫穷与忙碌的」。</p><h2 id="总"><a href="#总" class="headerlink" title="总"></a>总</h2><p>零零碎碎记录了一下，如果对你有所启发，那就更好了。越努力，越幸运，共勉～</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;不知不觉入职两周年了，&lt;a href=&quot;https://windliang.wang/2021/05/29/%E5%9C%A8%E7%BE%8E%E5%9B%A2%E5%B7%A5%E4%BD%9C%E7%9A%84%E7%AC%AC%E4%B8%80%E5%B9%B4/&quot;
      
    
    </summary>
    
    
      <category term="随想" scheme="https://windliang.wang/categories/%E9%9A%8F%E6%83%B3/"/>
    
    
      <category term="美团" scheme="https://windliang.wang/tags/%E7%BE%8E%E5%9B%A2/"/>
    
  </entry>
  
  <entry>
    <title>Element使用的async-validator表单校验库源码解析</title>
    <link href="https://windliang.wang/2022/05/17/async-validator%E8%A1%A8%E5%8D%95%E6%A0%A1%E9%AA%8C%E5%BA%93%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    <id>https://windliang.wang/2022/05/17/async-validator%E8%A1%A8%E5%8D%95%E6%A0%A1%E9%AA%8C%E5%BA%93%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</id>
    <published>2022-05-17T00:13:34.000Z</published>
    <updated>2022-11-17T00:01:23.933Z</updated>
    
    <content type="html"><![CDATA[<p>平常开发写 <code>element</code> 表单的时候，肯定少不了表单的校验，<code>element</code> 使用的是 <a href="https://github.com/yiminghe/async-validator" target="_blank" rel="noopener">async-validator</a> 这个开源库。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220517090312952.png" alt="image-20220517090312952"></p><p>这篇文章详细分析一下 <code>async-validator</code> 的主流程。</p><h1 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Schema <span class="keyword">from</span> <span class="string">'async-validator'</span>;</span><br><span class="line"><span class="keyword">const</span> descriptor = &#123;</span><br><span class="line">  list: &#123;</span><br><span class="line">    required: <span class="literal">true</span>,</span><br><span class="line">    type: <span class="string">'number'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  limit: [</span><br><span class="line">    &#123;</span><br><span class="line">      required: <span class="literal">true</span>,</span><br><span class="line">      message: <span class="string">'数量必填'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      validator(r, v, cb) &#123;</span><br><span class="line">        <span class="keyword">if</span> (v &lt; <span class="number">100</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> cb(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'数量不能小于 100'</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        cb();</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> validator = <span class="keyword">new</span> Schema(descriptor);</span><br><span class="line">validator.validate(</span><br><span class="line">  &#123; <span class="attr">list</span>: <span class="string">'12'</span>, <span class="attr">limit</span>: <span class="literal">null</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">firstFields</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">  (errors, fields) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (errors) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'错误列表'</span>, errors);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>我们需要定义 <code>descriptor</code> ，也就是我们在 <code>element</code> 中定义的 <code>rules</code> ，然后创建一个 <code>Schema</code> 对象。</p><p>最后调用 <code>validate</code> 函数，传递三个参数：</p><p>第一个参数是要校验的对象</p><p>第二个参数是 <code>options</code> 对象， <code>firstFields</code> 为 <code>true</code> ，表示同一个字段如果有多个校验规则，一旦出现校验不通过的规则后边的规则就不执行了。</p><p>还可以设置 <code>first</code> 为 <code>true</code>，这个是针对整个校验对象的，如果某个字段校验不通过，那么后边所有的字段就不再校验了。</p><p>第三个参数是校验结束后的回调函数，<code>erros</code> 保存了所有校验失败的字段以及 <code>message</code> 信息。</p><p>因此，上边代码的输出如下：</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220519081546339.png" alt="image-20220519081546339"></p><p><code>list</code> 对应结果的 <code>message</code> 是默认为我们添加的，<code>limit</code> 对应结果的 <code>message</code> 是我们自己设置的，会覆盖默认的 <code>message</code>。</p><p>因为我们设置了 <code>firstFields</code> 为 <code>true</code> ，所以只校验了 <code>limit</code> 的第一个规则，第二个规则就没有走到。</p><p>我们给 <code>limit</code> 设置一个值，让它走到第二个校验规则。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">validator.validate(</span><br><span class="line">  &#123; <span class="attr">list</span>: <span class="string">'12'</span>, <span class="attr">limit</span>: <span class="number">3</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">firstFields</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">  (errors, fields) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (errors) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'错误列表'</span>, errors);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>输出如下：</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220519081840212.png" alt="image-20220519081840212"></p><p>此时 <code>limit</code> 对应结果就是一个 <code>Error</code> 对象了，<code>Error</code> 对象除了本身的 <code>message</code> 属性，默认还为我们添加了 <code>field</code> 和 <code>filedValue</code> 属性。</p><h1 id="预处理-descriptor"><a href="#预处理-descriptor" class="headerlink" title="预处理 descriptor"></a>预处理 descriptor</h1><p>校验前  <code>async-validator</code>  会将传入的 <code>descriptor</code> 规范化。</p><p>我们传进入的是下边的样子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> descriptor = &#123;</span><br><span class="line">  list: &#123;</span><br><span class="line">    required: <span class="literal">true</span>,</span><br><span class="line">    type: <span class="string">'number'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  limit: [</span><br><span class="line">    &#123;</span><br><span class="line">      required: <span class="literal">true</span>,</span><br><span class="line">      message: <span class="string">'数量必填'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      validator(r, v, cb) &#123;</span><br><span class="line">        <span class="keyword">if</span> (v &lt; <span class="number">100</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> cb(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'数量不能小于 100'</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        cb();</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>预处理后会变成下边的样子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  list: [</span><br><span class="line">    &#123;</span><br><span class="line">      rule: &#123;</span><br><span class="line">        required: <span class="literal">true</span>,</span><br><span class="line">        type: <span class="string">'number'</span>,</span><br><span class="line">        field: <span class="string">'list'</span>,</span><br><span class="line">        fullField: <span class="string">'list'</span>,</span><br><span class="line">        validator: <span class="function">(<span class="params">rule, value, callback, source, options</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">const</span> errors = [];</span><br><span class="line">          <span class="keyword">const</span> validate =</span><br><span class="line">            rule.required ||</span><br><span class="line">            (!rule.required &amp;&amp; source.hasOwnProperty(rule.field));</span><br><span class="line">          <span class="keyword">if</span> (validate) &#123;</span><br><span class="line">            <span class="keyword">if</span> (value === <span class="string">''</span>) &#123;</span><br><span class="line">              value = <span class="literal">undefined</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (isEmptyValue(value) &amp;&amp; !rule.required) &#123;</span><br><span class="line">              <span class="keyword">return</span> callback();</span><br><span class="line">            &#125;</span><br><span class="line">            rules.required(rule, value, source, errors, options);</span><br><span class="line">            <span class="keyword">if</span> (value !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">              rules.type(rule, value, source, errors, options);</span><br><span class="line">              rules.range(rule, value, source, errors, options);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          callback(errors);</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      value: <span class="string">'12'</span>,</span><br><span class="line">      source: &#123;</span><br><span class="line">        list: <span class="string">'12'</span>,</span><br><span class="line">        limit: <span class="number">3</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      field: <span class="string">'list'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">  limit: [</span><br><span class="line">    &#123;</span><br><span class="line">      rule: &#123;</span><br><span class="line">        required: <span class="literal">true</span>,</span><br><span class="line">        message: <span class="string">'数量必填'</span>,</span><br><span class="line">        field: <span class="string">'limit'</span>,</span><br><span class="line">        fullField: <span class="string">'limit'</span>,</span><br><span class="line">        type: <span class="string">'string'</span>,</span><br><span class="line">        validator: <span class="function">(<span class="params">rule, value, callback, source, options</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">const</span> errors = [];</span><br><span class="line">          <span class="keyword">const</span> type = <span class="built_in">Array</span>.isArray(value) ? <span class="string">'array'</span> : <span class="keyword">typeof</span> value;</span><br><span class="line">          rules.required(rule, value, source, errors, options, type);</span><br><span class="line">          callback(errors);</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      value: <span class="number">3</span>,</span><br><span class="line">      source: &#123;</span><br><span class="line">        list: <span class="string">'12'</span>,</span><br><span class="line">        limit: <span class="number">3</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      field: <span class="string">'limit'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      rule: &#123;</span><br><span class="line">        field: <span class="string">'limit'</span>,</span><br><span class="line">        fullField: <span class="string">'limit'</span>,</span><br><span class="line">        type: <span class="string">'string'</span>,</span><br><span class="line">        validator(r, v, cb) &#123;</span><br><span class="line">          <span class="keyword">if</span> (v &lt; <span class="number">100</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> cb(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'数量不能小于 100'</span>));</span><br><span class="line">          &#125;</span><br><span class="line">          cb();</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      value: <span class="number">3</span>,</span><br><span class="line">      source: &#123;</span><br><span class="line">        list: <span class="string">'12'</span>,</span><br><span class="line">        limit: <span class="number">3</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      field: <span class="string">'limit'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>主要做了三件事情：</p><ol><li>把每个字段的校验规则统一成了一个数组对象</li><li>把原本的校验对象放到了 <code>rule</code> 属性中，并且添加了 <code>value</code>、<code>source</code>、<code>field</code> 属性</li><li>根据 <code>required</code> 和 <code>type</code> 补充了默认的 <code>validator</code> 校验函数</li></ol><h1 id="预处理-descriptor-对应的源码"><a href="#预处理-descriptor-对应的源码" class="headerlink" title="预处理 descriptor 对应的源码"></a>预处理 descriptor 对应的源码</h1><p>让我们过一下这部分源码。</p><p>在构造函数中，把 <code>descriptor</code> 所有字段的 <code>rule</code> 转为了数组，保存到 <code>rules</code> 对象中。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">constructor</span>(descriptor: Rules) &#123;</span><br><span class="line">  <span class="keyword">this</span>.define(descriptor);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">define(rules: Rules) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!rules) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Cannot configure a schema with no rules'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> rules !== <span class="string">'object'</span> || <span class="built_in">Array</span>.isArray(rules)) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Rules must be an object'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">this</span>.rules = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">Object</span>.keys(rules).forEach(<span class="function"><span class="params">name</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> item: Rule = rules[name];</span><br><span class="line">    <span class="keyword">this</span>.rules[name] = <span class="built_in">Array</span>.isArray(item) ? item : [item];</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>剩下的处理都在 <code>validate</code> 函数中了，可以跟随下边的注释看一下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"> validate(source_: Values, <span class="attr">o</span>: any = &#123;&#125;, <span class="attr">oc</span>: any = <span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;): <span class="built_in">Promise</span>&lt;Values&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> source: Values = source_;</span><br><span class="line">    <span class="keyword">let</span> options: ValidateOption = o;</span><br><span class="line">    <span class="keyword">let</span> callback: ValidateCallback = oc;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> options === <span class="string">'function'</span>) &#123;</span><br><span class="line">      callback = options;</span><br><span class="line">      options = &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    function complete(results: (ValidateError | ValidateError[])[]) &#123;</span><br><span class="line">      ...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> series: Record&lt;string, RuleValuePackage[]&gt; = &#123;&#125;;</span><br><span class="line">    <span class="keyword">const</span> keys = options.keys || <span class="built_in">Object</span>.keys(<span class="keyword">this</span>.rules); <span class="comment">// 得到所有的要校验的 key</span></span><br><span class="line">    keys.forEach(<span class="function"><span class="params">z</span> =&gt;</span> &#123; <span class="comment">// 遍历所有字段</span></span><br><span class="line">      <span class="keyword">const</span> arr = <span class="keyword">this</span>.rules[z];</span><br><span class="line">      <span class="keyword">let</span> value = source[z];</span><br><span class="line">      arr.forEach(<span class="function"><span class="params">r</span> =&gt;</span> &#123; <span class="comment">// 遍历每个字段的所有 rule</span></span><br><span class="line">        <span class="keyword">let</span> rule: InternalRuleItem = r;</span><br><span class="line">        ...</span><br><span class="line">        <span class="comment">// 如果是函数，放到 validator 属性中</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> rule === <span class="string">'function'</span>) &#123;</span><br><span class="line">          rule = &#123;</span><br><span class="line">            validator: rule,</span><br><span class="line">          &#125;;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          rule = &#123; ...rule &#125;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 填充 validator 属性</span></span><br><span class="line">        rule.validator = <span class="keyword">this</span>.getValidationMethod(rule);</span><br><span class="line">        <span class="keyword">if</span> (!rule.validator) &#123;</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 填充其他属性</span></span><br><span class="line">        rule.field = z;</span><br><span class="line">        rule.fullField = rule.fullField || z;</span><br><span class="line">        rule.type = <span class="keyword">this</span>.getType(rule);</span><br><span class="line">        series[z] = series[z] || [];</span><br><span class="line">        <span class="comment">// 保存到 series 中</span></span><br><span class="line">        series[z].push(&#123;</span><br><span class="line">          rule,</span><br><span class="line">          value,</span><br><span class="line">          source,</span><br><span class="line">          field: z,</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">const</span> errorFields = &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看下上边的 <code>getValidationMethod</code> 方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">getValidationMethod(rule: InternalRuleItem) &#123;</span><br><span class="line">  <span class="comment">// 如果用户自定了，直接返回自定义的</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> rule.validator === <span class="string">'function'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> rule.validator;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> keys = <span class="built_in">Object</span>.keys(rule);</span><br><span class="line">  <span class="keyword">const</span> messageIndex = keys.indexOf(<span class="string">'message'</span>);</span><br><span class="line">  <span class="keyword">if</span> (messageIndex !== <span class="number">-1</span>) &#123;</span><br><span class="line">    keys.splice(messageIndex, <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 如果只有一个 required 字段，返回 required 的校验函数</span></span><br><span class="line">  <span class="keyword">if</span> (keys.length === <span class="number">1</span> &amp;&amp; keys[<span class="number">0</span>] === <span class="string">'required'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> validators.required;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 否则的根据 type 去返回校验函数</span></span><br><span class="line">  <span class="keyword">return</span> validators[<span class="keyword">this</span>.getType(rule)] || <span class="literal">undefined</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所有的校验函数都是提前定义好的：</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220519094003441.png" alt="image-20220519094003441"></p><p>在 <a href="https://pattern.windliang.wang/posts/%E5%89%8D%E7%AB%AF%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B3%BB%E5%88%97-%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F.html" target="_blank" rel="noopener">前端的设计模式中-策略模式</a> 中我们也提到过上边的逻辑。</p><h1 id="循环校验"><a href="#循环校验" class="headerlink" title="循环校验"></a>循环校验</h1><p>当我们有了预处理好的所有字段的校验规则。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> series = &#123;</span><br><span class="line">  list: [</span><br><span class="line">    &#123;</span><br><span class="line">      rule: &#123;</span><br><span class="line">        required: <span class="literal">true</span>,</span><br><span class="line">        type: <span class="string">'number'</span>,</span><br><span class="line">        field: <span class="string">'list'</span>,</span><br><span class="line">        fullField: <span class="string">'list'</span>,</span><br><span class="line">        validator: <span class="function">(<span class="params">rule, value, callback, source, options</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">const</span> errors = [];</span><br><span class="line">          <span class="keyword">const</span> validate =</span><br><span class="line">            rule.required ||</span><br><span class="line">            (!rule.required &amp;&amp; source.hasOwnProperty(rule.field));</span><br><span class="line">          <span class="keyword">if</span> (validate) &#123;</span><br><span class="line">            <span class="keyword">if</span> (value === <span class="string">''</span>) &#123;</span><br><span class="line">              value = <span class="literal">undefined</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (isEmptyValue(value) &amp;&amp; !rule.required) &#123;</span><br><span class="line">              <span class="keyword">return</span> callback();</span><br><span class="line">            &#125;</span><br><span class="line">            rules.required(rule, value, source, errors, options);</span><br><span class="line">            <span class="keyword">if</span> (value !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">              rules.type(rule, value, source, errors, options);</span><br><span class="line">              rules.range(rule, value, source, errors, options);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          callback(errors);</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      value: <span class="string">'12'</span>,</span><br><span class="line">      source: &#123;</span><br><span class="line">        list: <span class="string">'12'</span>,</span><br><span class="line">        limit: <span class="number">3</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      field: <span class="string">'list'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">  limit: [</span><br><span class="line">    &#123;</span><br><span class="line">      rule: &#123;</span><br><span class="line">        required: <span class="literal">true</span>,</span><br><span class="line">        message: <span class="string">'数量必填'</span>,</span><br><span class="line">        field: <span class="string">'limit'</span>,</span><br><span class="line">        fullField: <span class="string">'limit'</span>,</span><br><span class="line">        type: <span class="string">'string'</span>,</span><br><span class="line">        validator: <span class="function">(<span class="params">rule, value, callback, source, options</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">const</span> errors = [];</span><br><span class="line">          <span class="keyword">const</span> type = <span class="built_in">Array</span>.isArray(value) ? <span class="string">'array'</span> : <span class="keyword">typeof</span> value;</span><br><span class="line">          rules.required(rule, value, source, errors, options, type);</span><br><span class="line">          callback(errors);</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      value: <span class="number">3</span>,</span><br><span class="line">      source: &#123;</span><br><span class="line">        list: <span class="string">'12'</span>,</span><br><span class="line">        limit: <span class="number">3</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      field: <span class="string">'limit'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      rule: &#123;</span><br><span class="line">        field: <span class="string">'limit'</span>,</span><br><span class="line">        fullField: <span class="string">'limit'</span>,</span><br><span class="line">        type: <span class="string">'string'</span>,</span><br><span class="line">        validator(r, v, cb) &#123;</span><br><span class="line">          <span class="keyword">if</span> (v &lt; <span class="number">100</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> cb(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'数量不能小于 100'</span>));</span><br><span class="line">          &#125;</span><br><span class="line">          cb();</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      value: <span class="number">3</span>,</span><br><span class="line">      source: &#123;</span><br><span class="line">        list: <span class="string">'12'</span>,</span><br><span class="line">        limit: <span class="number">3</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      field: <span class="string">'limit'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>接下来只需要搞一个双重循环，执行所有的字段和每个字段的所有校验函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">const</span> field <span class="keyword">of</span> <span class="built_in">Object</span>.keys(series)) &#123; <span class="comment">// 遍历每一个字段</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">const</span> data <span class="keyword">of</span> series[field]) &#123; <span class="comment">// 每一个规则</span></span><br><span class="line">    <span class="keyword">const</span> rule = data.rule;</span><br><span class="line">    <span class="keyword">const</span> res = rule.validator(rule, data.value, cb, data.source, options);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>rule</code> 、<code>data.value</code>、<code>data.source</code> 就是当前规则相关的变量，<code>options</code> 是最开始调用校验的时候传进来的 <code>{ firstFields: true },</code>，那么 <code>cb</code> 是什么？</p><p><code>cb</code> 函数接受一个错误数据列表，如果返回的不是数组会包装为数组，然后对错误进行填充。</p><p>最后调用 <code>doIt</code> 函数，将校验结果传入，后边会介绍这个方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cb</span>(<span class="params">e = []</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> errorList = <span class="built_in">Array</span>.isArray(e) ? e : [e];</span><br><span class="line">  <span class="keyword">if</span> (errorList.length &amp;&amp; rule.message !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">    errorList = [].concat(rule.message); <span class="comment">// 错误列表优先使用 message 字段</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// Fill error info</span></span><br><span class="line">  <span class="keyword">let</span> filledErrors = errorList.map(complementError(rule, source));</span><br><span class="line">  doIt(filledErrors); <span class="comment">// 将当前字段的错误列表保存起来</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>complementError</code> 会返回一个函数，将错误列表进行填充，主要就是补充了 <code>field</code> 和 <code>fieldValue</code> 属性。 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">complementError</span>(<span class="params">rule: InternalRuleItem, source: Values</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">oe: ValidateError | ((</span>) =&gt;</span> string) | string): <span class="function"><span class="params">ValidateError</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> fieldValue;</span><br><span class="line">    <span class="keyword">if</span> (rule.fullFields) &#123;</span><br><span class="line">      fieldValue = getValue(source, rule.fullFields);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      fieldValue = source[(oe <span class="keyword">as</span> any).field || rule.fullField];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (isErrorObj(oe)) &#123;</span><br><span class="line">      oe.field = oe.field || rule.fullField;</span><br><span class="line">      oe.fieldValue = fieldValue;</span><br><span class="line">      <span class="keyword">return</span> oe;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      message: <span class="keyword">typeof</span> oe === <span class="string">'function'</span> ? oe() : oe,</span><br><span class="line">      fieldValue,</span><br><span class="line">      field: ((oe <span class="keyword">as</span> unknown) <span class="keyword">as</span> ValidateError).field || rule.fullField,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>收到的错误列表分为两种情况：</p><p>处理前如果 <code>cb</code> 收到的是 <code>Error</code> 列表，比如这样调用 <code>cb(new Error(&#39;数量不能小于 100&#39;));</code> 。</p><p>那么处理前是下图：</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220521082112809.png" alt="image-20220521082112809"></p><p>处理后，就会往 <code>Error</code> 对象中塞入 <code>field</code> 和 <code>fieldValue</code> 属性。 </p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220521082219018.png" alt="image-20220521082219018"></p><p>处理前如果<code>cb</code> 是字符串列表，比如这样调用 <code>cb([&#39;list is required&#39;, &#39;list is not a number&#39;])</code> 。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220521082345013.png" alt="image-20220521082345013"></p><p>同样的，处理后也是塞入 <code>field</code> 和 <code>fieldValue</code> 属性。 </p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220521082457313.png" alt="image-20220521082457313"></p><p>再回到我们的双重循环中。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">const</span> field <span class="keyword">of</span> <span class="built_in">Object</span>.keys(series)) &#123; <span class="comment">// 遍历每一个字段</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">const</span> data <span class="keyword">of</span> series[field]) &#123; <span class="comment">// 每一个规则</span></span><br><span class="line">    <span class="keyword">const</span> rule = data.rule;</span><br><span class="line">    <span class="keyword">const</span> res = rule.validator(rule, data.value, cb, data.source, options);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中 <code>validator</code> 函数就是我们自己定义的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">validator(r, v, cb) &#123;</span><br><span class="line">  <span class="keyword">if</span> (v &lt; <span class="number">100</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> cb(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'数量不能小于 100'</span>));</span><br><span class="line">  &#125;</span><br><span class="line">  cb();</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>由于 <code>Element</code> 官方示例是上边的样子，所以我们一般都按照上边的样子写，但其实我们也可以不调用 <code>cb</code> 函数，而是仅仅 <code>return</code> 字符串数组，或者 <code>boolean</code> 值，调用 <code>cb</code> 函数交给双重循环。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">validator(r, v, cb) &#123;</span><br><span class="line">  <span class="keyword">if</span> (v &lt; <span class="number">100</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'数量不能小于 100'</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>双重循环中来处理 <code>validator</code> 的返回值去调用 <code>cb</code> 函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">const</span> field <span class="keyword">of</span> <span class="built_in">Object</span>.keys(series)) &#123; <span class="comment">// 遍历每一个字段</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">const</span> data <span class="keyword">of</span> series[field]) &#123; <span class="comment">// 每一个规则</span></span><br><span class="line">    <span class="keyword">const</span> rule = data.rule;</span><br><span class="line">    <span class="keyword">const</span> res = rule.validator(rule, data.value, cb, data.source, options);</span><br><span class="line">    <span class="comment">// 根据返回的结果，去调用 cb 函数</span></span><br><span class="line">    <span class="keyword">if</span> (res === <span class="literal">true</span>) &#123;</span><br><span class="line">      cb();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (res === <span class="literal">false</span>) &#123;</span><br><span class="line">      cb(</span><br><span class="line">        <span class="keyword">typeof</span> rule.message === <span class="string">'function'</span></span><br><span class="line">        ? rule.message(rule.fullField || rule.field)</span><br><span class="line">        : rule.message || <span class="string">`<span class="subst">$&#123;rule.fullField || rule.field&#125;</span> fails`</span>,</span><br><span class="line">      );</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (res <span class="keyword">instanceof</span> <span class="built_in">Array</span>) &#123;</span><br><span class="line">      cb(res);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (res <span class="keyword">instanceof</span> <span class="built_in">Error</span>) &#123;</span><br><span class="line">      cb(res.message);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="asyncMap"><a href="#asyncMap" class="headerlink" title="asyncMap"></a>asyncMap</h1><p>向上边我们直接粗暴的写双重循环去依次校验也没有问题，但因为校验库还支持一些参数，比如前边介绍的：</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220521083746778.png" alt="image-20220521083746778"></p><p>如果是 <code>for</code> 循环中去处理 <code>firstFields</code> 和 <code>first</code> 的逻辑，就过于耦合了，未来再扩充其他逻辑，双重循环中的逻辑就会越来越复杂。</p><p> <code>async-validator</code>  的处理方式在这里就比较优雅了，实现了 <code>asyncMap</code> 方法，作用就是遍历 <code>series</code> 数组，并且处理了 <code>firstFields</code> 和 <code>first</code> 参数的逻辑。</p><p>下边来分析一下实现：</p><p>看一下 <code>asyncMap</code> 的入口参数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">asyncMap</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  objArr: Record&lt;string, RuleValuePackage[]&gt;,</span></span></span><br><span class="line"><span class="function"><span class="params">  option: ValidateOption,</span></span></span><br><span class="line"><span class="function"><span class="params">  func: ValidateFunc,</span></span></span><br><span class="line"><span class="function"><span class="params">  callback: (errors: ValidateError[]</span>) =&gt; <span class="title">void</span>,</span></span><br><span class="line"><span class="function">  <span class="title">source</span>: <span class="title">Values</span>,</span></span><br><span class="line"><span class="function">)</span>&#123;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接受 <code>5</code> 个参数：</p><p><code>objArr</code>：要遍历的 <code>rule</code> 规则，就是我们前边生成的 <code>series</code> 数组，即双重循环遍历的对象。</p><p><code>option</code> ：最开始传入的 <code>option</code>，可能包含 <code>firstFields</code> 和 <code>first</code> 属性。</p><p><code>func</code>：遍历过程的中会调用这个函数，会传入当前遍历的 <code>rule</code> 和一个 <code>doIt</code> 函数，<code>doIt</code> 函数需要接收处理好的校验结果。这里就需要我们之前 <code>for</code> 循环内部的处理逻辑。</p><p><code>callback</code> : 全部检验结束后调用，会传入所有的校验结果。</p><p><code>source</code>：要校验的对象。</p><p>这样我们就可以把 <code>for</code> 循环改为直接调用 <code>asyncMap</code> 函数了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">asyncMap(</span><br><span class="line">  series,</span><br><span class="line">  options,</span><br><span class="line">  (data, doIt) =&gt; &#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;,</span><br><span class="line">  results =&gt; &#123;</span><br><span class="line">    complete(results);</span><br><span class="line">  &#125;,</span><br><span class="line">  source,</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>第三个参数就是需要我们去处理 <code>data</code> 这个校验规则，也就是之前 <code>for</code> 循环中的逻辑移动过来。</p><p>其中 <code>doIt</code> 函数我们在之前讲的 <code>cb</code> 函数中调用即可。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">(data, doIt) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> rule = data.rule;</span><br><span class="line">  rule.field = data.field;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">cb</span>(<span class="params">e: SyncErrorType | SyncErrorType[] = []</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> errorList = <span class="built_in">Array</span>.isArray(e) ? e : [e];</span><br><span class="line">    <span class="keyword">if</span> (errorList.length &amp;&amp; rule.message !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">      errorList = [].concat(rule.message);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Fill error info</span></span><br><span class="line">    <span class="keyword">let</span> filledErrors = errorList.map(complementError(rule, source));</span><br><span class="line">    doIt(filledErrors); <span class="comment">// 将当前字段的错误列表保存起来</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">/******** for 循环中的逻辑 *****************/</span></span><br><span class="line">  <span class="keyword">const</span> res = rule.validator(rule, data.value, cb, data.source, options);</span><br><span class="line">  <span class="keyword">if</span> (res === <span class="literal">true</span>) &#123;</span><br><span class="line">    cb();</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (res === <span class="literal">false</span>) &#123;</span><br><span class="line">    cb(</span><br><span class="line">      <span class="keyword">typeof</span> rule.message === <span class="string">'function'</span></span><br><span class="line">      ? rule.message(rule.fullField || rule.field)</span><br><span class="line">      : rule.message || <span class="string">`<span class="subst">$&#123;rule.fullField || rule.field&#125;</span> fails`</span>,</span><br><span class="line">    );</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (res <span class="keyword">instanceof</span> <span class="built_in">Array</span>) &#123;</span><br><span class="line">    cb(res);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (res <span class="keyword">instanceof</span> <span class="built_in">Error</span>) &#123;</span><br><span class="line">    cb(res.message);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/***************************************/</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>最后就是全部遍历结束后的 <code>complete</code> 函数，我们只需要把 <code>results</code> 列表传到外边即可。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">complete</span>(<span class="params">results</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> fields: ValidateFieldsError = &#123;&#125;;</span><br><span class="line">  <span class="keyword">if</span> (!results.length) &#123;</span><br><span class="line">    callback(<span class="literal">null</span>, source);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    fields = convertFieldsError(results);</span><br><span class="line">    callback (results, fields);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上边的 <code>callback</code> 函数就是我们调用校验函数时候外部传入的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> validator = <span class="keyword">new</span> Schema(descriptor);</span><br><span class="line">validator.validate(</span><br><span class="line">  &#123; <span class="attr">list</span>: <span class="string">'12'</span>, <span class="attr">limit</span>: <span class="literal">null</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">firstFields</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">  <span class="comment">//***** 上边的 callback ********************/</span></span><br><span class="line">  (errors, fields) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (errors) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'错误列表'</span>, errors);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//*********************************************/</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h1 id="内层循环"><a href="#内层循环" class="headerlink" title="内层循环"></a>内层循环</h1><p>双重循环的的外层是遍历所有字段，内层是遍历该字段的所有规则。</p><p>我们来先看一下内层循环的实现：</p><p> <code>async-validator</code>  库提供了 <code>asyncParallelArray</code> 方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">asyncParallelArray</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  arr: RuleValuePackage[],</span></span></span><br><span class="line"><span class="function"><span class="params">  func: ValidateFunc,</span></span></span><br><span class="line"><span class="function"><span class="params">  callback: (errors: ValidateError[]</span>) =&gt; <span class="title">void</span>,</span></span><br><span class="line"><span class="function">) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> results: ValidateError[] = [];</span><br><span class="line">  <span class="keyword">let</span> total = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">const</span> arrLength = arr.length;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">count</span>(<span class="params">errors: ValidateError[]</span>) </span>&#123;</span><br><span class="line">    results.push(...(errors || []));</span><br><span class="line">    total++;</span><br><span class="line">    <span class="keyword">if</span> (total === arrLength) &#123;</span><br><span class="line">      callback(results);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  arr.forEach(<span class="function"><span class="params">a</span> =&gt;</span> &#123;</span><br><span class="line">    func(a, count);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接受三个参数：</p><p><code>arr</code> 就是当前字段要遍历的规则列表。</p><p><code>func</code> 是处理 <code>rule</code> 规则的函数，内部会调用这里的 <code>count</code> 方法，接受当前 <code>a</code> 的校验结果。</p><p>传入的 <code>func</code> 其实就是我们前边介绍过的 <code>for</code> 循环内部逻辑，<code>a</code> 是下边的 <code>data</code> 参数，<code>count</code> 就是下边的 <code>doIt</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">(data, doIt) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> rule = data.rule;</span><br><span class="line">  rule.field = data.field;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">cb</span>(<span class="params">e: SyncErrorType | SyncErrorType[] = []</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> errorList = <span class="built_in">Array</span>.isArray(e) ? e : [e];</span><br><span class="line">    <span class="keyword">if</span> (errorList.length &amp;&amp; rule.message !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">      errorList = [].concat(rule.message);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Fill error info</span></span><br><span class="line">    <span class="keyword">let</span> filledErrors = errorList.map(complementError(rule, source));</span><br><span class="line">    doIt(filledErrors);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> res = rule.validator(rule, data.value, cb, data.source, options);</span><br><span class="line">  <span class="keyword">if</span> (res === <span class="literal">true</span>) &#123;</span><br><span class="line">    cb();</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (res === <span class="literal">false</span>) &#123;</span><br><span class="line">    cb(</span><br><span class="line">      <span class="keyword">typeof</span> rule.message === <span class="string">'function'</span></span><br><span class="line">      ? rule.message(rule.fullField || rule.field)</span><br><span class="line">      : rule.message || <span class="string">`<span class="subst">$&#123;rule.fullField || rule.field&#125;</span> fails`</span>,</span><br><span class="line">    );</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (res <span class="keyword">instanceof</span> <span class="built_in">Array</span>) &#123;</span><br><span class="line">    cb(res);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (res <span class="keyword">instanceof</span> <span class="built_in">Error</span>) &#123;</span><br><span class="line">    cb(res.message);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>第三个参数 <code>callback</code> 是当前 <code>arr</code> 全部校验结束后的回调，代表当前字段的所有校验规则都判断结束。</p><p>这里需要注意的是，我们是通过 <code>count</code> 进入的次数来判断是否去调用 <code>callback</code> 函数，而不是 <code>arr</code> 遍历结束后调用 <code>callback</code>。</p><p>除了 <code>asyncParallelArray</code> 方法，因为有 <code>firstFields</code> 属性的存在，也就是遍历某个字段的所有规则时，如果出现校验不通过的规则就直接结束，后边的规则不再进行判断。</p><p>因此， <code>async-validator</code>  还提供了 <code>asyncSerialArray</code> 方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">asyncSerialArray</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  arr: RuleValuePackage[],</span></span></span><br><span class="line"><span class="function"><span class="params">  func: ValidateFunc,</span></span></span><br><span class="line"><span class="function"><span class="params">  callback: (errors: ValidateError[]</span>) =&gt; <span class="title">void</span>,</span></span><br><span class="line"><span class="function">) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">const</span> arrLength = arr.length;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">next</span>(<span class="params">errors: ValidateError[]</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (errors &amp;&amp; errors.length) &#123;</span><br><span class="line">      callback(errors);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> original = index;</span><br><span class="line">    index = index + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (original &lt; arrLength) &#123;</span><br><span class="line">      func(arr[original], next);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      callback([]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  next([]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>入口参数和 <code>asyncParallelArray</code> 是一致的，区别在于对于 <code>arr</code> 是顺序执行，如果过程中出现了校验不通过的规则，就直接调用 <code>callback</code> 结束。</p><h1 id="外层循环"><a href="#外层循环" class="headerlink" title="外层循环"></a>外层循环</h1><p>外层循环和上边很类似，其实就是遍历所有字段，然后把每个字段的校验列表传给内层循环即可。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">asyncMap</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  objArr: Record&lt;string, RuleValuePackage[]&gt;,</span></span></span><br><span class="line"><span class="function"><span class="params">  option: ValidateOption,</span></span></span><br><span class="line"><span class="function"><span class="params">  func: ValidateFunc,</span></span></span><br><span class="line"><span class="function"><span class="params">  callback: (errors: ValidateError[]</span>) =&gt; <span class="title">void</span>,</span></span><br><span class="line"><span class="function">  <span class="title">source</span>: <span class="title">Values</span>,</span></span><br><span class="line"><span class="function">) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> firstFields =</span><br><span class="line">    option.firstFields === <span class="literal">true</span></span><br><span class="line">      ? <span class="built_in">Object</span>.keys(objArr)</span><br><span class="line">      : option.firstFields || [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> objArrKeys = <span class="built_in">Object</span>.keys(objArr);</span><br><span class="line">  <span class="keyword">const</span> objArrLength = objArrKeys.length;</span><br><span class="line">  <span class="keyword">let</span> total = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">const</span> results: ValidateError[] = [];</span><br><span class="line">  <span class="keyword">const</span> next = <span class="function">(<span class="params">errors: ValidateError[]</span>) =&gt;</span> &#123;</span><br><span class="line">    results.push.apply(results, errors);</span><br><span class="line">    total++;</span><br><span class="line">    <span class="keyword">if</span> (total === objArrLength) &#123;</span><br><span class="line">      callback(results);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">if</span> (!objArrKeys.length) &#123;</span><br><span class="line">    callback(results);</span><br><span class="line">  &#125;</span><br><span class="line">  objArrKeys.forEach(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> arr = objArr[key];</span><br><span class="line">    <span class="keyword">if</span> (firstFields.indexOf(key) !== <span class="number">-1</span>) &#123;</span><br><span class="line">      asyncSerialArray(arr, func, next);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      asyncParallelArray(arr, func, next);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>入口参数前边已经介绍过了，可以看到我们做的就是遍历 <code>objArrKeys</code> 数组，然后根据 <code>firstFields</code> 的值去调用 <code>asyncSerialArray</code> 和 <code>asyncParallelArray</code> 。内存循环判断结束后会调用上边的 <code>next</code> 方法。</p><p><code>next</code> 同样也是通过进入的次数，来判断是否调用 <code>callback</code> 函数，也就是前边介绍的 <code>complete</code> 方法。</p><p>和内层循环类似，因为有 <code>first</code> 属性的存在，也就是遍历某个字段时，存在校验不通过的字段就直接结束，后边的字段就不再进行判断。</p><p>我们只需要把所有规则打平，然后调用 <code>asyncSerialArray</code> 方法即可。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (option.first) &#123;</span><br><span class="line">  <span class="keyword">const</span> next = <span class="function">(<span class="params">errors: ValidateError[]</span>) =&gt;</span> &#123;</span><br><span class="line">    callback(errors);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">const</span> flattenArr = flattenObjArr(objArr);</span><br><span class="line">  asyncSerialArray(flattenArr, func, next);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">flattenObjArr</span>(<span class="params">objArr: Record&lt;string, RuleValuePackage[]&gt;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> ret: RuleValuePackage[] = [];</span><br><span class="line">  <span class="built_in">Object</span>.keys(objArr).forEach(<span class="function"><span class="params">k</span> =&gt;</span> &#123;</span><br><span class="line">    ret.push(...(objArr[k] || []));</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="代码总"><a href="#代码总" class="headerlink" title="代码总"></a>代码总</h1><p>以上就是  <code>async-validator</code> 源码的主要流程了，说起来也简单，先预处理所有规则，然后通过 <code>asyncMap</code> 方法双层循环遍历所有校验规则即可，这个双层循环的抽离确实很优雅，避免了循环中耦合太多逻辑。</p><p>除了上边介绍的代码，因为 <code>async-validator</code> 还支持 <code>Promise</code> 的调用风格，校验函数支持 <code>Promise</code> 函数等其他功能，大家感兴趣也可以到 <a href="https://github.com/yiminghe/async-validator" target="_blank" rel="noopener">async-validator</a> 看一下更详细的源码。</p><p>值得一提的点是，双层循环是通过计数来判断是否结束的，而进入计数其实就是调用 <code>cb</code> 函数。因此如果我们规则是下边的样子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Schema <span class="keyword">from</span> <span class="string">'../src/index'</span>;</span><br><span class="line"><span class="keyword">const</span> descriptor = &#123;</span><br><span class="line">  limit: [</span><br><span class="line">    &#123;</span><br><span class="line">      validator(r, v, cb) &#123;</span><br><span class="line">        <span class="keyword">if</span> (v &lt; <span class="number">100</span>) &#123;</span><br><span class="line">          cb(<span class="string">'校验1'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        cb();</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      validator(r, v, cb) &#123;</span><br><span class="line">        <span class="keyword">if</span> (v &lt; <span class="number">50</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> cb(<span class="string">'校验2'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        cb();</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> validator = <span class="keyword">new</span> Schema(descriptor);</span><br><span class="line">validator.validate(</span><br><span class="line">  &#123; <span class="attr">limit</span>: <span class="number">3</span> &#125;,</span><br><span class="line">  (errors, fields) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (errors) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'错误列表'</span>, errors);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>因为我们没有传递 <code>firstFields</code> 属性，所以我们期望的是将 <code>limit</code> 所有的校验都进行了，<code>limit</code> 的值是 <code>3</code> ，所以两个校验都没通过，应该输出下边的内容：</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220521103342907.png" alt="image-20220521103342907"></p><p>但其实只进行了第一个的校验：</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220521103508233.png" alt="image-20220521103508233"></p><p>原因就在于第一个 <code>validator</code> 进行了两次 <code>cb</code> ，然后内层循环的 <code>callback</code> 就提前调用了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">validator(r, v, cb) &#123;</span><br><span class="line">  <span class="keyword">if</span> (v &lt; <span class="number">100</span>) &#123;</span><br><span class="line">    cb(<span class="string">'校验1'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  cb();</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>因此我们最好保证一个 <code>validator</code> 只进行一次 <code>cb</code> ，走到 <code>cb</code> 后就直接 <code>return</code>。（因为 <code>Element</code> 会设置 <code>firstFields</code> 为 <code>true</code>，所以其实有多个 <code>cb</code> 也不影响最终结果）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">validator(r, v, cb) &#123;</span><br><span class="line">  <span class="keyword">if</span> (v &lt; <span class="number">100</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> cb(<span class="string">'校验1'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  cb();</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>并且一定要有一个 <code>cb</code> ，不然最终的回调函数永远也不会执行了，这就是为什么 <code>Element</code> 提示我们要进行 <code>cb</code> 。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220521103841307.png" alt="image-20220521103841307"></p><p>但这里说的也不够严谨，我们也可以返回字符串，或者字符串数组、布尔值等， <code>async-validator</code> 内部会根据 <code>validator</code> 返回的结果去调用 <code>cb</code> 函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> res = rule.validator(rule, data.value, cb, data.source, options);</span><br><span class="line">  <span class="keyword">if</span> (res === <span class="literal">true</span>) &#123;</span><br><span class="line">    cb();</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (res === <span class="literal">false</span>) &#123;</span><br><span class="line">    cb(</span><br><span class="line">      <span class="keyword">typeof</span> rule.message === <span class="string">'function'</span></span><br><span class="line">      ? rule.message(rule.fullField || rule.field)</span><br><span class="line">      : rule.message || <span class="string">`<span class="subst">$&#123;rule.fullField || rule.field&#125;</span> fails`</span>,</span><br><span class="line">    );</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (res <span class="keyword">instanceof</span> <span class="built_in">Array</span>) &#123;</span><br><span class="line">    cb(res);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (res <span class="keyword">instanceof</span> <span class="built_in">Error</span>) &#123;</span><br><span class="line">    cb(res.message);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p> <code>async-validator</code>  用计数的方式来判断是否去调用回调，就是为了实现异步的校验，当异步过程结束后才去调用 <code>cb</code> ，代表校验完成。</p><h1 id="其他属性"><a href="#其他属性" class="headerlink" title="其他属性"></a>其他属性</h1><p>平时写代码直接参照前人的校验规则去仿照着写了，大家也基本上是按照 <code>Element</code> 的样例来写校验规则，如果去  <a href="https://github.com/yiminghe/async-validator" target="_blank" rel="noopener">async-validator</a>  看一下的话，会发现一些其他没听过的属性，这里也记录下。</p><p><code>validator</code> 校验函数最多能接收到 <code>5</code> 个参数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">validator(rule, value, callback, source, options) &#123;</span><br><span class="line">  <span class="keyword">const</span> errors = [];</span><br><span class="line">  <span class="comment">// test if email address already exists in a database</span></span><br><span class="line">  <span class="comment">// and add a validation error to the errors array if it does</span></span><br><span class="line">  <span class="keyword">return</span> errors;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>我们可以通过第四个参数 <code>source</code> 拿到整个表单的对象，如果想校验一些联动的逻辑，我们就可以通过 <code>source</code> 拿到其他字段的值。</p><p>对对象字段的校验，如果校验字段是个对象，我们可以通过 <code>fields</code> 来校验对象中的字段。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> descriptor = &#123;</span><br><span class="line">  address: &#123;</span><br><span class="line">    type: <span class="string">'object'</span>,</span><br><span class="line">    required: <span class="literal">true</span>,</span><br><span class="line">    fields: &#123;</span><br><span class="line">      street: &#123; <span class="attr">type</span>: <span class="string">'string'</span>, <span class="attr">required</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">      city: &#123; <span class="attr">type</span>: <span class="string">'string'</span>, <span class="attr">required</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">      zip: &#123; <span class="attr">type</span>: <span class="string">'string'</span>, <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">len</span>: <span class="number">8</span>, <span class="attr">message</span>: <span class="string">'invalid zip'</span> &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  name: &#123; <span class="attr">type</span>: <span class="string">'string'</span>, <span class="attr">required</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> validator = <span class="keyword">new</span> Schema(descriptor);</span><br><span class="line">validator.validate(&#123; <span class="attr">address</span>: &#123;&#125; &#125;, (errors, fields) =&gt; &#123;</span><br><span class="line">  <span class="comment">// errors for address.street, address.city, address.zip</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>transform</code> 函数，可以将值先进行一次转换，然后再进行校验。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> descriptor = &#123;</span><br><span class="line">  name: &#123;</span><br><span class="line">    type: <span class="string">'string'</span>,</span><br><span class="line">    required: <span class="literal">true</span>,</span><br><span class="line">    pattern: <span class="regexp">/^[a-z]+$/</span>,</span><br><span class="line">    transform(value) &#123;</span><br><span class="line">      <span class="keyword">return</span> value.trim();</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>asyncValidator</code>，校验函数内部是用 <code>Promise</code> 或者直接返回一个 <code>Promise</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fields = &#123;</span><br><span class="line">  asyncField: &#123;</span><br><span class="line">    asyncValidator(rule, value, callback) &#123;</span><br><span class="line">      ajax(&#123;</span><br><span class="line">        url: <span class="string">'xx'</span>,</span><br><span class="line">        value: value,</span><br><span class="line">      &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">        callback();</span><br><span class="line">      &#125;, <span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line">        callback(<span class="keyword">new</span> <span class="built_in">Error</span>(error));</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  promiseField: &#123;</span><br><span class="line">    asyncValidator(rule, value) &#123;</span><br><span class="line">      <span class="keyword">return</span> ajax(&#123;</span><br><span class="line">        url: <span class="string">'xx'</span>,</span><br><span class="line">        value: value,</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="总"><a href="#总" class="headerlink" title="总"></a>总</h1><p>上边就是   <code>async-validator</code>  开源库的核心源码了，希望对你有帮助。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;平常开发写 &lt;code&gt;element&lt;/code&gt; 表单的时候，肯定少不了表单的校验，&lt;code&gt;element&lt;/code&gt; 使用的是 &lt;a href=&quot;https://github.com/yiminghe/async-validator&quot; target=&quot;_blan
      
    
    </summary>
    
    
      <category term="前端" scheme="https://windliang.wang/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="element" scheme="https://windliang.wang/tags/element/"/>
    
  </entry>
  
  <entry>
    <title>echarts 画中国地图及省份切换</title>
    <link href="https://windliang.wang/2022/05/10/echarts%E7%94%BB%E4%B8%AD%E5%9B%BD%E5%9C%B0%E5%9B%BE/"/>
    <id>https://windliang.wang/2022/05/10/echarts%E7%94%BB%E4%B8%AD%E5%9B%BD%E5%9C%B0%E5%9B%BE/</id>
    <published>2022-05-10T00:41:10.000Z</published>
    <updated>2022-11-17T00:01:23.933Z</updated>
    
    <content type="html"><![CDATA[<p>最近用 <code>ehcarts</code> 写了一个有关中国地图的需求，这篇文章来总结下基本的原理和用法。</p><h1 id="Geojson"><a href="#Geojson" class="headerlink" title="Geojson"></a>Geojson</h1><p>首先了解一下 <code>GeoJSON</code> ，看下 <a href="https://zh.wikipedia.org/wiki/GeoJSON" target="_blank" rel="noopener">维基百科</a> 的定义：</p><blockquote><p><strong>GeoJSON </strong>是一种基于 <a href="https://zh.wikipedia.org/wiki/JSON" target="_blank" rel="noopener">JSON</a> 的地理空间数据交换格式，它定义了几种类型 JSON 对象以及它们组合在一起的方法，以表示有关地理要素、属性和它们的空间范围的数据。</p><p>2015年，互联网工程任务组（<a href="https://zh.wikipedia.org/wiki/互联网工程任务组" target="_blank" rel="noopener">IETF</a>）与原始规范作者组建了一个 GeoJSON 工作组，一起规范 GeoJSON 标准。在2016年8月，推出了最新的GeoJSON数据格式标准规范(<a href="https://tools.ietf.org/html/rfc7946" target="_blank" rel="noopener">RFC 7946</a>)。</p><p>GeoJSON 使用唯一地理坐标参考系统 WGS1984 和十进制度单位，一个 GeoJSON 对象可以是 Geometry, Feature 或者FeatureCollection.</p><p>其几何对象包括有点（表示地理位置）、线（表示街道、公路、边界）、<a href="https://zh.wikipedia.org/wiki/多边形" target="_blank" rel="noopener">多边形</a>（表示国家、省、领土），以及由以上类型组合成的复合几何图形。</p></blockquote><p>简单说就是通过坐标系来描述点、线、面，看几个例子就明白它们是什么了。</p><p>单个点：<code>&quot;type&quot;: &quot;Point&quot;</code> </p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220510095405517.png" alt="image-20220510095405517"></p><p>多个点，<code>&quot;type&quot;: &quot;MultiPoint&quot;</code> </p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220510095158715.png" alt="image-20220510095158715"></p><p>多个线：<code>&quot;type&quot;: &quot;MultiLineString&quot;</code> </p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220510095241321.png" alt="image-20220510095241321"></p><p>多个面：<code>&quot;type&quot;: &quot;MultiPolygon&quot;</code> </p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220510095257874.png" alt="image-20220510095257874"></p><h1 id="地图-Geojson"><a href="#地图-Geojson" class="headerlink" title="地图 Geojson"></a>地图 Geojson</h1><p> 中国地图和省份的 <code>geoJson</code> 可以在 <a href="https://github.com/echarts-maps" target="_blank" rel="noopener">echarts-map</a> 或者阿里的 <a href="https://datav.aliyun.com/portal/school/atlas/area_selector" target="_blank" rel="noopener">数据可视化中心</a> 进行下载。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220510101045037.png" alt="image-20220510101045037"></p><p><code>echarts 4.x</code> 的版本自带了一些 <code>Geojson</code> 的数据，在 <code>node_modules/echarts/map/json</code> 目录，但可能考虑到一些省区数据不能及时更新，<code>echarts 5</code> 版本就没有自带数据了。</p><p>让我们看一下全国地图中山西省的 <code>geoJson</code> 长什么样子。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"type"</span>: <span class="string">"FeatureCollection"</span>,</span><br><span class="line">    <span class="attr">"features"</span>: [</span><br><span class="line">      ...</span><br><span class="line">        &#123;</span><br><span class="line">          ...</span><br><span class="line">        &#125;</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"Feature"</span>,</span><br><span class="line">            <span class="attr">"properties"</span>: &#123;</span><br><span class="line">                <span class="attr">"adcode"</span>: <span class="number">140000</span>,</span><br><span class="line">                <span class="attr">"name"</span>: <span class="string">"山西省"</span>,</span><br><span class="line">                <span class="attr">"center"</span>: [<span class="number">112.549248</span>, <span class="number">37.857014</span>],</span><br><span class="line">                <span class="attr">"centroid"</span>: [<span class="number">112.304436</span>, <span class="number">37.618179</span>],</span><br><span class="line">                <span class="attr">"childrenNum"</span>: <span class="number">11</span>,</span><br><span class="line">                <span class="attr">"level"</span>: <span class="string">"province"</span>,</span><br><span class="line">                <span class="attr">"parent"</span>: &#123; <span class="attr">"adcode"</span>: <span class="number">100000</span> &#125;,</span><br><span class="line">                <span class="attr">"subFeatureIndex"</span>: <span class="number">3</span>,</span><br><span class="line">                <span class="attr">"acroutes"</span>: [<span class="number">100000</span>]</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">"geometry"</span>: &#123;</span><br><span class="line">                <span class="attr">"type"</span>: <span class="string">"MultiPolygon"</span>,</span><br><span class="line">                <span class="attr">"coordinates"</span>: [</span><br><span class="line">                    [</span><br><span class="line">                        [</span><br><span class="line">                            [<span class="number">110.379257</span>, <span class="number">34.600612</span>],</span><br><span class="line">                            [<span class="number">110.424837</span>, <span class="number">34.588295</span>],</span><br><span class="line">                            [<span class="number">110.488279</span>, <span class="number">34.610956</span>],</span><br><span class="line">                            [<span class="number">110.533242</span>, <span class="number">34.583368</span>],</span><br><span class="line">                            [<span class="number">110.610851</span>, <span class="number">34.607508</span>],</span><br><span class="line">                            [<span class="number">110.710017</span>, <span class="number">34.605045</span>],</span><br><span class="line">                            [<span class="number">110.749437</span>, <span class="number">34.65232</span>],</span><br><span class="line">                            [<span class="number">110.791937</span>, <span class="number">34.649858</span>],</span><br><span class="line">                            [<span class="number">110.824582</span>, <span class="number">34.615881</span>],</span><br><span class="line">                            [<span class="number">110.883712</span>, <span class="number">34.64395</span>],</span><br><span class="line">                            [<span class="number">110.903422</span>, <span class="number">34.669056</span>],</span><br><span class="line">                            [<span class="number">110.920052</span>, <span class="number">34.730068</span>],</span><br><span class="line">                            ...</span><br><span class="line">                        ]</span><br><span class="line">                    ]</span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">&#123;</span><br><span class="line">          ...</span><br><span class="line">        &#125;</span><br><span class="line">        ...</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>整体是一个 <code>&quot;type&quot;: &quot;FeatureCollection&quot;</code> ，然后有一个 <code>features</code> 数组保存所有省份，每一个都是 <code>&quot;type&quot;: &quot;Feature&quot;</code> ，代表单个省份。包含 <code>properties</code> 属性和 <code>geometry</code> 属性。<code>geometry</code> 属性就是所有的坐标信息。</p><p>根据坐标信息，计算最大值和最小值的差值，按比例映射到 <code>canvas</code> 上的坐标，然后就可以画出来了，细节的话可以参考 <a href="https://www.bilibili.com/video/BV13V411J7kg/" target="_blank" rel="noopener">b 站</a> 的这个视频。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220510102224426.png" alt="image-20220510102224426" style="width:30%;"></p><h1 id="echarts-画地图"><a href="#echarts-画地图" class="headerlink" title="echarts 画地图"></a>echarts 画地图</h1><p>安装 <code>vue</code> 和 <code>echarts</code> ，先来个简单的正方形。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"type"</span>: <span class="string">"FeatureCollection"</span>,</span><br><span class="line">    <span class="attr">"features"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"Feature"</span>,</span><br><span class="line">            <span class="attr">"properties"</span>: &#123;</span><br><span class="line">                <span class="attr">"name"</span>: <span class="string">"正方形"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">"geometry"</span>: &#123;</span><br><span class="line">                <span class="attr">"type"</span>: <span class="string">"MultiPolygon"</span>,</span><br><span class="line">                <span class="attr">"coordinates"</span>: [</span><br><span class="line">                    [</span><br><span class="line">                        [</span><br><span class="line">                            [<span class="number">100.0</span>, <span class="number">0.0</span>],</span><br><span class="line">                            [<span class="number">101.0</span>, <span class="number">0.0</span>],</span><br><span class="line">                            [<span class="number">101.0</span>, <span class="number">1.0</span>],</span><br><span class="line">                            [<span class="number">100.0</span>, <span class="number">1.0</span>],</span><br><span class="line">                            [<span class="number">100.0</span>, <span class="number">0.0</span>]</span><br><span class="line">                        ]</span><br><span class="line">                    ]</span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后用 <code>echarts</code> 做引入我们的 <code>json</code> 文件、通过 <code>echarts.registerMap</code> 注册 <code>json</code> 文件、设置 <code>opitons</code> 的<code>series</code> 属性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div id=<span class="string">"main"</span> style=<span class="string">"width: 600px; height: 600px"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">import * as echarts from "echarts";</span></span><br><span class="line"><span class="regexp">import test from '../</span>data/test<span class="string">'</span></span><br><span class="line"><span class="string">export default &#123;</span></span><br><span class="line"><span class="string">    name: "HelloWorld",</span></span><br><span class="line"><span class="string">    props: &#123;</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">    mounted() &#123;</span></span><br><span class="line"><span class="string">        var myChart = echarts.init(document.getElementById("main"));</span></span><br><span class="line"><span class="string">        echarts.registerMap('</span>mapName<span class="string">', test); // 注册地图</span></span><br><span class="line"><span class="string">        let option = &#123;</span></span><br><span class="line"><span class="string">            series: [</span></span><br><span class="line"><span class="string">                &#123;</span></span><br><span class="line"><span class="string">                    type: "map",</span></span><br><span class="line"><span class="string">                    map: '</span>mapName<span class="string">', // 引入地图数据</span></span><br><span class="line"><span class="string">                &#125;,</span></span><br><span class="line"><span class="string">            ],</span></span><br><span class="line"><span class="string">        &#125;;</span></span><br><span class="line"><span class="string">        myChart.setOption(option);</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">&#125;;</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;!-- Add "scoped" attribute to limit CSS to this component only --&gt;</span></span><br><span class="line"><span class="string">&lt;style scoped&gt;</span></span><br><span class="line"><span class="string">&lt;/style&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220511080857038.png" alt="image-20220511080857038"></p><p>然后我们只需要到阿里的 <a href="https://datav.aliyun.com/portal/school/atlas/area_selector" target="_blank" rel="noopener">数据可视化中心</a> 把中国地图的 <code>Geojson</code> 数据下载下来，替换上边的 <code>test.json</code> 即可。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220511081044461.png" alt="image-20220511081044461" style="width:50%;"></p><p>值得注意的是，如果我们设置注册的名字为 <code>china</code> ，<code>echarts</code> 会自动给我们加上南沙群岛的放大图：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> echarts <span class="keyword">from</span> <span class="string">"echarts"</span>;</span><br><span class="line"><span class="keyword">import</span> china <span class="keyword">from</span> <span class="string">'../data/china'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    name: <span class="string">"HelloWorld"</span>,</span><br><span class="line">    props: &#123;</span><br><span class="line">    &#125;,</span><br><span class="line">    mounted() &#123;</span><br><span class="line">        <span class="keyword">var</span> myChart = echarts.init(<span class="built_in">document</span>.getElementById(<span class="string">"main"</span>));</span><br><span class="line">        echarts.registerMap(<span class="string">'china'</span>, china);</span><br><span class="line">        <span class="keyword">let</span> option = &#123;</span><br><span class="line">            series: [</span><br><span class="line">                &#123;</span><br><span class="line">                    type: <span class="string">"map"</span>,</span><br><span class="line">                    map: <span class="string">'china'</span>, <span class="comment">// 引入地图数据</span></span><br><span class="line">                &#125;,</span><br><span class="line">            ],</span><br><span class="line">        &#125;;</span><br><span class="line">        myChart.setOption(option);</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220511082046489.png" alt="image-20220511082046489" style="zoom:50%;"></p><h1 id="可能会用到的-options-属性"><a href="#可能会用到的-options-属性" class="headerlink" title="可能会用到的 options 属性"></a>可能会用到的 options 属性</h1><p>地图画出来以后，接下来可以照着 <a href="https://echarts.apache.org/zh/option.html#geo" target="_blank" rel="noopener">echarts 官网</a> 变身为「<code>echarts</code> 配置工程师」了，记得注意一下自己当前的 <code>eharts</code> 版本。</p><h2 id="设置悬浮上的数据"><a href="#设置悬浮上的数据" class="headerlink" title="设置悬浮上的数据"></a>设置悬浮上的数据</h2><p>我们在 <code>series</code> 中引入 <code>data</code> ，加一点随机数据，其中 <code>name</code> 值是 <code>json</code> 数据中的 <code>properties</code> 对应的 <code>name</code> ，名字一定要一致。</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> option = &#123;</span><br><span class="line">  ...</span><br><span class="line">  series: [</span><br><span class="line">    &#123;</span><br><span class="line">      type: <span class="string">"map"</span>,</span><br><span class="line">      map: <span class="string">"china"</span>, <span class="comment">// 引入地图数据</span></span><br><span class="line">      name: <span class="string">"省份随机数据"</span>,</span><br><span class="line">      data: [</span><br><span class="line">        &#123;</span><br><span class="line">          name: <span class="string">"北京市"</span>,</span><br><span class="line">          value: <span class="number">21</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          name: <span class="string">"天津市"</span>,</span><br><span class="line">          value: <span class="number">12</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          name: <span class="string">"上海市"</span>,</span><br><span class="line">          value: <span class="number">99</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          name: <span class="string">"重庆市"</span>,</span><br><span class="line">          value: <span class="number">98</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          name: <span class="string">"河北省"</span>,</span><br><span class="line">          value: <span class="number">99</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          name: <span class="string">"河南省"</span>,</span><br><span class="line">          value: <span class="number">29</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          name: <span class="string">"云南省"</span>,</span><br><span class="line">          value: <span class="number">79</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          name: <span class="string">"辽宁省"</span>,</span><br><span class="line">          value: <span class="number">38</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          name: <span class="string">"黑龙江省"</span>,</span><br><span class="line">          value: <span class="number">4</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          name: <span class="string">"湖南省"</span>,</span><br><span class="line">          value: <span class="number">32</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          name: <span class="string">"安徽省"</span>,</span><br><span class="line">          value: <span class="number">84</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          name: <span class="string">"山东省"</span>,</span><br><span class="line">          value: <span class="number">72</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          name: <span class="string">"新疆维吾尔自治区"</span>,</span><br><span class="line">          value: <span class="number">99</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          name: <span class="string">"江苏省"</span>,</span><br><span class="line">          value: <span class="number">70</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          name: <span class="string">"浙江省"</span>,</span><br><span class="line">          value: <span class="number">85</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          name: <span class="string">"江西省"</span>,</span><br><span class="line">          value: <span class="number">11</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          name: <span class="string">"湖北省"</span>,</span><br><span class="line">          value: <span class="number">62</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          name: <span class="string">"广西壮族自治区"</span>,</span><br><span class="line">          value: <span class="number">13</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          name: <span class="string">"甘肃省"</span>,</span><br><span class="line">          value: <span class="number">74</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          name: <span class="string">"山西省"</span>,</span><br><span class="line">          value: <span class="number">78</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          name: <span class="string">"内蒙古自治区"</span>,</span><br><span class="line">          value: <span class="number">74</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          name: <span class="string">"陕西省"</span>,</span><br><span class="line">          value: <span class="number">40</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          name: <span class="string">"吉林省"</span>,</span><br><span class="line">          value: <span class="number">9</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          name: <span class="string">"福建省"</span>,</span><br><span class="line">          value: <span class="number">90</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          name: <span class="string">"贵州省"</span>,</span><br><span class="line">          value: <span class="number">57</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          name: <span class="string">"广东省"</span>,</span><br><span class="line">          value: <span class="number">6</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          name: <span class="string">"青海省"</span>,</span><br><span class="line">          value: <span class="number">52</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          name: <span class="string">"西藏自治区"</span>,</span><br><span class="line">          value: <span class="number">10</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          name: <span class="string">"四川省"</span>,</span><br><span class="line">          value: <span class="number">98</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          name: <span class="string">"宁夏回族自治区"</span>,</span><br><span class="line">          value: <span class="number">11</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          name: <span class="string">"海南省"</span>,</span><br><span class="line">          value: <span class="number">25</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          name: <span class="string">"台湾省"</span>,</span><br><span class="line">          value: <span class="number">86</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          name: <span class="string">"香港特别行政区"</span>,</span><br><span class="line">          value: <span class="number">8</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          name: <span class="string">"澳门特别行政区"</span>,</span><br><span class="line">          value: <span class="number">50</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再补上 <code>tooltip</code> 选项。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> option = &#123;</span><br><span class="line">  ...</span><br><span class="line">  tooltip: &#123;</span><br><span class="line">    trigger: <span class="string">"item"</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220512084334737.png" alt="image-20220512084334737" style="zoom:50%;"></p><h2 id="视觉映射"><a href="#视觉映射" class="headerlink" title="视觉映射"></a>视觉映射</h2><p>我们可以通过 <code>visualMap</code> 选项，将数据分组。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> option = &#123;</span><br><span class="line">  ...</span><br><span class="line">  visualMap: &#123;</span><br><span class="line">    left: <span class="string">"right"</span>,</span><br><span class="line">    min: <span class="number">0</span>,</span><br><span class="line">    max: <span class="number">100</span>,</span><br><span class="line">    inRange: &#123;</span><br><span class="line">      color: [</span><br><span class="line">        <span class="string">"#313695"</span>,</span><br><span class="line">        <span class="string">"#4575b4"</span>,</span><br><span class="line">        <span class="string">"#74add1"</span>,</span><br><span class="line">        <span class="string">"#abd9e9"</span>,</span><br><span class="line">        <span class="string">"#e0f3f8"</span>,</span><br><span class="line">        <span class="string">"#ffffbf"</span>,</span><br><span class="line">        <span class="string">"#fee090"</span>,</span><br><span class="line">        <span class="string">"#fdae61"</span>,</span><br><span class="line">        <span class="string">"#f46d43"</span>,</span><br><span class="line">        <span class="string">"#d73027"</span>,</span><br><span class="line">        <span class="string">"#a50026"</span>,</span><br><span class="line">      ],</span><br><span class="line">    &#125;,</span><br><span class="line">    text: [<span class="string">"High"</span>, <span class="string">"Low"</span>],</span><br><span class="line">    calculable: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>设置后之后，我们可以滑动右下角的范围来选取不同的省份。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220512084634727.png" alt="image-20220512084634727" style="zoom:50%;"></p><p>除了滑块的映射，还支持分区间的，类似下边这种。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220512084908512.png" alt="image-20220512084908512"></p><h2 id="其他选项"><a href="#其他选项" class="headerlink" title="其他选项"></a>其他选项</h2><p>其他选项这里就不介绍了，可以参考 <a href="https://echarts.apache.org/examples/zh/index.html#chart-type-map" target="_blank" rel="noopener">官网</a> 和 <a href="https://www.makeapie.cn/echarts_1.html" target="_blank" rel="noopener">社区</a> 的样例，然后结合自己的需求进行配置即可。</p><p>贴几张社区上炫酷的地图：</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220512085159589.png" alt="image-20220512085159589"></p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220512085134411.png" alt="image-20220512085134411" style="zoom:50%;"></p><h1 id="省份切换"><a href="#省份切换" class="headerlink" title="省份切换"></a>省份切换</h1><p>下边再实现一下点击省份切换到对应的省份地图的功能。</p><p>知道了上边的东西，思路其实很简单了，我们只需要把所有省份的 <code>Geojson</code> 数据全部下载下来，然后监听 <code>echarts</code> 的点击事件去显示省份即可。</p><p>为了逻辑之间的解耦，我们可以再新建一个组件，专门展示省份的数据。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">  &lt;div id=<span class="string">"province"</span> style=<span class="string">"width: 600px; height: 600px"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">import</span> * <span class="keyword">as</span> echarts <span class="keyword">from</span> <span class="string">"echarts"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  name: <span class="string">"Province"</span>,</span><br><span class="line">  props: &#123;</span><br><span class="line">    fileName: <span class="built_in">String</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      option: &#123;</span><br><span class="line">        series: [</span><br><span class="line">          &#123;</span><br><span class="line">            name: <span class="string">"省份数据"</span>,</span><br><span class="line">            type: <span class="string">"map"</span>,</span><br><span class="line">            map: <span class="string">"province"</span>,</span><br><span class="line">            data: [],</span><br><span class="line">          &#125;,</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    <span class="keyword">this</span>.initData();</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    initData() &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> provinceJSON = <span class="built_in">require</span>(<span class="string">"../data/province/"</span> +</span><br><span class="line">                                     <span class="keyword">this</span>.fileName);</span><br><span class="line">        <span class="keyword">const</span> myChart = echarts.init(</span><br><span class="line">          <span class="built_in">document</span>.getElementById(<span class="string">"province"</span>)</span><br><span class="line">        );</span><br><span class="line">        echarts.registerMap(<span class="string">"province"</span>, provinceJSON);</span><br><span class="line">        myChart.setOption(<span class="keyword">this</span>.option);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        alert(<span class="string">`暂无<span class="subst">$&#123;<span class="keyword">this</span>.fileName&#125;</span>数据`</span>);</span><br><span class="line">        <span class="keyword">this</span>.$emit(<span class="string">"toMap"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;style scoped rel="stylesheet/</span>scss<span class="string">" lang="</span>scss<span class="string">"&gt;&lt;/style&gt;</span></span><br></pre></td></tr></table></figure><p>我们把省份数据都放到 <code>&quot;../data/province&quot;</code> 目录中，这里简单演示，只下载了两个省份的地图：</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220512091724599.png" alt="image-20220512091724599"></p><p>通过外部传进来文件的 <code>fileName</code> 注册地图。这里直接通过 <code>require(&quot;../data/province&quot; + this.fileName)</code> 来动态引入 <code>Geojson</code>，一定要加上 <code>&quot;../data/province&quot;</code> 前缀来限制文件的位置，关于 <code>webpack</code> 的动态引入的更多细节可以参考 <a href="https://windliang.wang/2022/05/03/Webpack%E6%89%93%E5%8C%85commonjs%E5%92%8Cesmodule%E5%8A%A8%E6%80%81%E5%BC%95%E5%85%A5%E6%A8%A1%E5%9D%97%E7%9A%84%E4%BA%A7%E7%89%A9%E5%AF%B9%E6%AF%94/">Webpack 打包 commonjs 和 esmodule 动态引入模块的产物对比</a>。</p><p>我们增加一个 <code>ProvinceMap</code> 组件来调度两个组件的显示隐藏。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;Province</span><br><span class="line">            v-<span class="keyword">if</span>=<span class="string">"showProvince"</span></span><br><span class="line">            :fileName=<span class="string">"fileName"</span></span><br><span class="line">            @toMap=<span class="string">"toMap"</span></span><br><span class="line">        &gt;<span class="xml"><span class="tag">&lt;/<span class="name">Province</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">        &lt;<span class="built_in">Map</span> v-<span class="keyword">else</span> @toProvince=<span class="string">"toProvince"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">Map</span>&gt;</span></span></span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> Province <span class="keyword">from</span> <span class="string">"./Province.vue"</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="built_in">Map</span> <span class="keyword">from</span> <span class="string">"./Map.vue"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    name: <span class="string">"HelloWorld"</span>,</span><br><span class="line">    components: &#123;</span><br><span class="line">        Province,</span><br><span class="line">        <span class="built_in">Map</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    data() &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            showProvince: <span class="literal">false</span>,</span><br><span class="line">            fileName: <span class="literal">null</span>,</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">       <span class="comment">// 显示省份数据</span></span><br><span class="line">        toProvince(&#123; fileName &#125; = &#123;&#125;) &#123;</span><br><span class="line">            <span class="keyword">this</span>.fileName = fileName;</span><br><span class="line">            <span class="keyword">this</span>.showProvince = <span class="literal">true</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">      <span class="comment">// 显示全国地图</span></span><br><span class="line">        toMap() &#123;</span><br><span class="line">            <span class="keyword">this</span>.showProvince = <span class="literal">false</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;!-- Add "scoped" attribute to limit CSS to this component only --&gt;</span></span><br><span class="line"><span class="regexp">&lt;style scoped&gt;&lt;/</span>style&gt;</span><br></pre></td></tr></table></figure><p>在 <code>Map</code> 组件中监听省份的 <code>click</code> ，传递给 <code>ProvinceMap</code> 组件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">initData() &#123;</span><br><span class="line">  <span class="keyword">var</span> myChart = echarts.init(<span class="built_in">document</span>.getElementById(<span class="string">"main"</span>));</span><br><span class="line">  echarts.registerMap(<span class="string">"china"</span>, china);</span><br><span class="line">  <span class="keyword">const</span> option =  ....;</span><br><span class="line">  myChart.setOption(option);</span><br><span class="line">  myChart.on(<span class="string">"click"</span>, (params) =&gt;</span><br><span class="line">             <span class="keyword">this</span>.$emit(<span class="string">"toProvince"</span>, &#123; <span class="attr">fileName</span>: params.name &#125;)</span><br><span class="line">            );</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>在 <code>Province</code> 组件中监听 <code>click</code>，传递给 <code>ProvinceMap</code> 组件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">initData() &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> provinceJSON = <span class="built_in">require</span>(<span class="string">"../data/province/"</span> +</span><br><span class="line">                                 <span class="keyword">this</span>.fileName);</span><br><span class="line">    <span class="keyword">const</span> myChart = echarts.init(</span><br><span class="line">      <span class="built_in">document</span>.getElementById(<span class="string">"province"</span>)</span><br><span class="line">    );</span><br><span class="line">    echarts.registerMap(<span class="string">"province"</span>, provinceJSON);</span><br><span class="line">    myChart.setOption(<span class="keyword">this</span>.option);</span><br><span class="line">    myChart.on(<span class="string">"click"</span>, () =&gt; <span class="keyword">this</span>.$emit(<span class="string">"toMap"</span>));</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    alert(<span class="string">`暂无<span class="subst">$&#123;<span class="keyword">this</span>.fileName&#125;</span>数据`</span>);</span><br><span class="line">    <span class="keyword">this</span>.$emit(<span class="string">"toMap"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>最后看一下实现的效果：</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comKapture%202022-05-12%20at%2010.06.29.gif" alt="Kapture 2022-05-12 at 10.06.29"></p><h1 id="总"><a href="#总" class="headerlink" title="总"></a>总</h1><p>通过 <code>GeoJSON</code> 画 <code>echarts</code> ，知道大致的原理，然后其他配置项参考 <a href="https://echarts.apache.org/examples/zh/index.html#chart-type-map" target="_blank" rel="noopener">官网</a> 和 <a href="https://www.makeapie.cn/echarts_7.html" target="_blank" rel="noopener">社区</a> 的例子比对上 <a href="https://echarts.apache.org/zh/option.html#geo" target="_blank" rel="noopener">配置项</a> 慢慢配置即可，文章的整体代码放到了 <a href="https://github.com/wind-liang/echarts-map-vue" target="_blank" rel="noopener">github</a>，需要的同学可以参考。</p><p><code>ECharts</code> 最初由百度团队开源，并于 <code>2018</code> 年初捐赠给<code>Apache</code> 基金会，<code>2021</code> 年 <code>1</code> 月 <code>26</code> 日晚，<code>Apache</code> 基金会官方宣布 <code>ECharts</code> 项目正式毕业，成为 <code>Apache</code> 顶级项目。</p><p>平时开发 <code>Echarts</code> ，我们就可以从「切图仔」变成「<code>echarts</code> 配置工程师了」，手动狗头。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近用 &lt;code&gt;ehcarts&lt;/code&gt; 写了一个有关中国地图的需求，这篇文章来总结下基本的原理和用法。&lt;/p&gt;
&lt;h1 id=&quot;Geojson&quot;&gt;&lt;a href=&quot;#Geojson&quot; class=&quot;headerlink&quot; title=&quot;Geojson&quot;&gt;&lt;/a&gt;G
      
    
    </summary>
    
    
      <category term="前端" scheme="https://windliang.wang/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="echarts" scheme="https://windliang.wang/tags/echarts/"/>
    
  </entry>
  
  <entry>
    <title>Webpack打包commonjs和esmodule混用模块的产物对比</title>
    <link href="https://windliang.wang/2022/05/06/Webpack%E6%89%93%E5%8C%85commonjs%E5%92%8Cesmodule%E6%B7%B7%E7%94%A8%E6%A8%A1%E5%9D%97%E7%9A%84%E4%BA%A7%E7%89%A9%E5%AF%B9%E6%AF%94/"/>
    <id>https://windliang.wang/2022/05/06/Webpack%E6%89%93%E5%8C%85commonjs%E5%92%8Cesmodule%E6%B7%B7%E7%94%A8%E6%A8%A1%E5%9D%97%E7%9A%84%E4%BA%A7%E7%89%A9%E5%AF%B9%E6%AF%94/</id>
    <published>2022-05-06T01:04:47.000Z</published>
    <updated>2022-11-17T00:01:23.933Z</updated>
    
    <content type="html"><![CDATA[<p>接 <a href="https://zhuanlan.zhihu.com/p/508808789" target="_blank" rel="noopener">Webpack 打包 commonjs 和 esmodule 模块的产物对比</a> 继续，这篇文章来测试下 <code>commonjs</code> 模块和 <code>esmodule</code> 混用的情况，也就是 <code>import</code> 导入 <code>commonjs</code> 的模块，<code>require</code> 导入 <code>esomodule</code> 的模块，看一下它们在 <code>Webpack</code> 下的产物。</p><h1 id="import-导入-commonjs-模块"><a href="#import-导入-commonjs-模块" class="headerlink" title="import 导入 commonjs 模块"></a>import 导入 commonjs 模块</h1><p><code>commonjs</code> 模块会为我们预设一个 <code>module = {exports: {}}</code> 的对象，导出模块的话我们可以直接给 <code>module.exports.xxx = xxxx</code> 或者 <code>exports.xxx = xxx</code> 加属性，也可以给 <code>module.exports = xxx</code> 赋值为一个新对象或者函数。</p><p>下边看下这两种情况的异同：</p><h2 id="exports-添加属性"><a href="#exports-添加属性" class="headerlink" title="exports 添加属性"></a>exports 添加属性</h2><p>两个文件的代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/commonjs/add.js</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"add开始引入"</span>);</span><br><span class="line"><span class="keyword">const</span> add = <span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports.add = add;</span><br><span class="line"></span><br><span class="line">exports.sub = <span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b;</span><br><span class="line"></span><br><span class="line"><span class="comment">// src/commonjs/index.js</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"commonjs开始执行"</span>);</span><br><span class="line"><span class="keyword">import</span> &#123; add &#125; <span class="keyword">from</span> <span class="string">"./add"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"1+1="</span>, add(<span class="number">1</span>, <span class="number">1</span>));</span><br></pre></td></tr></table></figure><p>如果还记得  <a href="https://zhuanlan.zhihu.com/p/508808789" target="_blank" rel="noopener">Webpack 打包 commonjs 和 esmodule 模块的产物对比</a>  这里总结的，我们的 <code>import</code> 会导入整个对象，然后执行的时候再通过 <code>xxx.add</code> 的形式调用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> _add__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(</span><br><span class="line">  <span class="string">"./src/commonjs/add.js"</span></span><br><span class="line">);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"commonjs开始执行"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"1+1="</span>, (<span class="number">0</span>, _add__WEBPACK_IMPORTED_MODULE_0__.add)(<span class="number">1</span>, <span class="number">1</span>));</span><br></pre></td></tr></table></figure><p>而 <code>_add__WEBPACK_IMPORTED_MODULE_0__</code> 就是我们导出的整个 <code>module.exports</code> 对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"./src/commonjs/add.js"</span>: <span class="function">(<span class="params"><span class="built_in">module</span>, exports</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"add开始引入"</span>);</span><br><span class="line">  <span class="keyword">const</span> add = <span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">module</span>.exports.add = add;</span><br><span class="line"></span><br><span class="line">  exports.sub = <span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>因此这种情况两种模式是完全契合的，不会有问题。</p><p>全部代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> __webpack_modules__ = &#123;</span><br><span class="line">        <span class="string">"./src/commonjs/add.js"</span>: <span class="function">(<span class="params"><span class="built_in">module</span>, exports</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"add开始引入"</span>);</span><br><span class="line">            <span class="keyword">const</span> add = <span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> a + b;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">module</span>.exports.add = add;</span><br><span class="line"></span><br><span class="line">            exports.sub = <span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> __webpack_module_cache__ = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__webpack_require__</span>(<span class="params">moduleId</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> cachedModule = __webpack_module_cache__[moduleId];</span><br><span class="line">        <span class="keyword">if</span> (cachedModule !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> cachedModule.exports;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> <span class="built_in">module</span> = (__webpack_module_cache__[moduleId] = &#123;</span><br><span class="line">            exports: &#123;&#125;,</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        __webpack_modules__[moduleId](</span><br><span class="line">            <span class="built_in">module</span>,</span><br><span class="line">            <span class="built_in">module</span>.exports,</span><br><span class="line">            __webpack_require__</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">module</span>.exports;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    (<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        __webpack_require__.r = <span class="function">(<span class="params">exports</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">Symbol</span> !== <span class="string">"undefined"</span> &amp;&amp; <span class="built_in">Symbol</span>.toStringTag) &#123;</span><br><span class="line">                <span class="built_in">Object</span>.defineProperty(exports, <span class="built_in">Symbol</span>.toStringTag, &#123;</span><br><span class="line">                    value: <span class="string">"Module"</span>,</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">Object</span>.defineProperty(exports, <span class="string">"__esModule"</span>, &#123;</span><br><span class="line">                value: <span class="literal">true</span>,</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;)();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> __webpack_exports__ = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    (<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line"><span class="meta">        "use strict"</span>;</span><br><span class="line"></span><br><span class="line">        __webpack_require__.r(__webpack_exports__);</span><br><span class="line">        <span class="keyword">var</span> _add__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(</span><br><span class="line">            <span class="string">"./src/commonjs/add.js"</span></span><br><span class="line">        );</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"commonjs开始执行"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"1+1="</span>, (<span class="number">0</span>, _add__WEBPACK_IMPORTED_MODULE_0__.add)(<span class="number">1</span>, <span class="number">1</span>));</span><br><span class="line">    &#125;)();</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h2 id="exports-赋值为新对象"><a href="#exports-赋值为新对象" class="headerlink" title="exports 赋值为新对象"></a>exports 赋值为新对象</h2><p>这次我们将 <code>module.exports</code> 整个赋值为一个新对象，这种情况我们一般是直接赋值为一个新的函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/commonjs/add.js</span></span><br><span class="line"><span class="keyword">const</span> add = <span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = add;</span><br></pre></td></tr></table></figure><p><code>index.js</code> 我们可以直接导入函数，不需要这样子 <code>import { xxx } from &#39;yyy&#39;</code>  再进行对象解构。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/commonjs/index.js</span></span><br><span class="line"><span class="keyword">import</span> add <span class="keyword">from</span> <span class="string">"./add"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"1+1="</span>, add(<span class="number">1</span>, <span class="number">1</span>));</span><br></pre></td></tr></table></figure><p>我们知道，对于直接 <code>import</code> 导入的话， <code>esmodule</code> 相当于导入 <code>default</code> 属性，事实上 <code>commonjs</code> 并没有导出 <code>default</code> ，但 <code>webpack</code> 帮我们进行了兼容。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> _add__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__( <span class="string">"./src/commonjs/add.js"</span>);</span><br><span class="line"><span class="keyword">var</span> _add__WEBPACK_IMPORTED_MODULE_0___default = __webpack_require__.n(_add__WEBPACK_IMPORTED_MODULE_0__);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"1+1="</span>, _add__WEBPACK_IMPORTED_MODULE_0___default()(<span class="number">1</span>, <span class="number">1</span>));</span><br></pre></td></tr></table></figure><p>看一下 <code>__webpack_require__.n</code> 方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">__webpack_require__.n = <span class="function">(<span class="params"><span class="built_in">module</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> getter = <span class="built_in">module</span> &amp;&amp; <span class="built_in">module</span>.__esModule ? <span class="comment">// 判断是否为 esmodule 模块</span></span><br><span class="line">      () =&gt; (<span class="built_in">module</span>[<span class="string">'default'</span>]) :</span><br><span class="line">  () =&gt; (<span class="built_in">module</span>); <span class="comment">// 直接返回整个模块</span></span><br><span class="line">  __webpack_require__.d(getter, &#123; <span class="attr">a</span>: getter &#125;); <span class="comment">// 这句没懂</span></span><br><span class="line">  <span class="keyword">return</span> getter;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>如果不是 <code>esmodule</code> 模块的话，我们会将整个模块作为 <code>default</code> 属性返回，但为什么在模块内又加了个 <code>a</code> 属性，这里没太懂，谁知道的话可以和我交流一下哈。</p><p>再看下整个的代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> __webpack_modules__ = &#123;</span><br><span class="line">        <span class="string">"./src/commonjs/add.js"</span>: <span class="function">(<span class="params"><span class="built_in">module</span></span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> add = <span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> a + b;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">module</span>.exports = add;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> __webpack_module_cache__ = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__webpack_require__</span>(<span class="params">moduleId</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> cachedModule = __webpack_module_cache__[moduleId];</span><br><span class="line">        <span class="keyword">if</span> (cachedModule !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> cachedModule.exports;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> <span class="built_in">module</span> = (__webpack_module_cache__[moduleId] = &#123;</span><br><span class="line">            exports: &#123;&#125;,</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        __webpack_modules__[moduleId](</span><br><span class="line">            <span class="built_in">module</span>,</span><br><span class="line">            <span class="built_in">module</span>.exports,</span><br><span class="line">            __webpack_require__</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">module</span>.exports;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    (<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        __webpack_require__.n = <span class="function">(<span class="params"><span class="built_in">module</span></span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">var</span> getter =</span><br><span class="line">                <span class="built_in">module</span> &amp;&amp; <span class="built_in">module</span>.__esModule</span><br><span class="line">                    ? <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">module</span>[<span class="string">"default"</span>]</span><br><span class="line">                    : <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">module</span>;</span><br><span class="line">            __webpack_require__.d(getter, &#123; <span class="attr">a</span>: getter &#125;);</span><br><span class="line">            <span class="keyword">return</span> getter;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;)();</span><br><span class="line"></span><br><span class="line">    (<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        __webpack_require__.d = <span class="function">(<span class="params">exports, definition</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> definition) &#123;</span><br><span class="line">                <span class="keyword">if</span> (</span><br><span class="line">                    __webpack_require__.o(definition, key) &amp;&amp;</span><br><span class="line">                    !__webpack_require__.o(exports, key)</span><br><span class="line">                ) &#123;</span><br><span class="line">                    <span class="built_in">Object</span>.defineProperty(exports, key, &#123;</span><br><span class="line">                        enumerable: <span class="literal">true</span>,</span><br><span class="line">                        get: definition[key],</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;)();</span><br><span class="line"></span><br><span class="line">    (<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        __webpack_require__.o = <span class="function">(<span class="params">obj, prop</span>) =&gt;</span></span><br><span class="line">            <span class="built_in">Object</span>.prototype.hasOwnProperty.call(obj, prop);</span><br><span class="line">    &#125;)();</span><br><span class="line"></span><br><span class="line">    (<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        __webpack_require__.r = <span class="function">(<span class="params">exports</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">Symbol</span> !== <span class="string">"undefined"</span> &amp;&amp; <span class="built_in">Symbol</span>.toStringTag) &#123;</span><br><span class="line">                <span class="built_in">Object</span>.defineProperty(exports, <span class="built_in">Symbol</span>.toStringTag, &#123;</span><br><span class="line">                    value: <span class="string">"Module"</span>,</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">Object</span>.defineProperty(exports, <span class="string">"__esModule"</span>, &#123; <span class="attr">value</span>: <span class="literal">true</span> &#125;);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;)();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> __webpack_exports__ = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    (<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line"><span class="meta">        "use strict"</span>;</span><br><span class="line"></span><br><span class="line">        __webpack_require__.r(__webpack_exports__);</span><br><span class="line">        <span class="keyword">var</span> _add__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(</span><br><span class="line">            <span class="string">"./src/commonjs/add.js"</span></span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">var</span> _add__WEBPACK_IMPORTED_MODULE_0___default = __webpack_require__.n(</span><br><span class="line">            _add__WEBPACK_IMPORTED_MODULE_0__</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"1+1="</span>, _add__WEBPACK_IMPORTED_MODULE_0___default()(<span class="number">1</span>, <span class="number">1</span>));</span><br><span class="line">    &#125;)();</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h1 id="require-导入-esmodule-模块"><a href="#require-导入-esmodule-模块" class="headerlink" title="require 导入 esmodule 模块"></a>require 导入 esmodule 模块</h1><p><code>esmodule</code> 模块除了正常的 <code>export</code> ，我们把 <code>export default</code> 也加一下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/esmodule/add.js</span></span><br><span class="line"><span class="keyword">const</span> add = <span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> sub = <span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> add;</span><br></pre></td></tr></table></figure><p>然后 <code>index.js</code> 通过 <code>require</code> 来导入：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/esmodule/index.js</span></span><br><span class="line"><span class="keyword">const</span> m = <span class="built_in">require</span>(<span class="string">"./add"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(m)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"1+1="</span>, m.default(<span class="number">1</span>, <span class="number">1</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"1-1="</span>, m.sub(<span class="number">1</span>, <span class="number">1</span>));</span><br></pre></td></tr></table></figure><p>因为 <code>require</code> 是直接导入整个对象，没有专门导入 <code>default</code> 的形式，所以调用 <code>default</code> 方法的时候，我们需要通过 <code>m.default</code> 来调用。</p><p>运行起来是没有问题的：</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220508085606651.png" alt="image-20220508085606651"></p><p>让我们回忆下 <a href="https://zhuanlan.zhihu.com/p/508808789" target="_blank" rel="noopener">Webpack 打包 commonjs 和 esmodule 模块的产物对比</a>  这里介绍的 <code>esmodule</code> 模块的导出产物：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> __webpack_modules__ = &#123;</span><br><span class="line">  <span class="string">"./src/esmodule/add.js"</span>: (</span><br><span class="line">    __unused_webpack_module,</span><br><span class="line">    __webpack_exports__,</span><br><span class="line">    __webpack_require__</span><br><span class="line">  ) =&gt; &#123;</span><br><span class="line"><span class="meta">    "use strict"</span>;</span><br><span class="line">    __webpack_require__.r(__webpack_exports__);</span><br><span class="line">    __webpack_require__.d(__webpack_exports__, &#123;</span><br><span class="line">      sub: <span class="function"><span class="params">()</span> =&gt;</span> sub,</span><br><span class="line">      <span class="keyword">default</span>: <span class="function"><span class="params">()</span> =&gt;</span> __WEBPACK_DEFAULT_EXPORT__,</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">const</span> add = <span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">const</span> sub = <span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> __WEBPACK_DEFAULT_EXPORT__ = add;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>相当于导出了一个 <code>module.exports</code> 大的对象，包含 <code>sub</code> 和 <code>default</code> 属性。</p><p>然后是 <code>index.js</code> </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> m = __webpack_require__(<span class="string">"./src/esmodule/add.js"</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(m);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"1+1="</span>, m.default(<span class="number">1</span>, <span class="number">1</span>));</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"1-1="</span>, m.sub(<span class="number">1</span>, <span class="number">1</span>));</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>需要注意的是虽然导出的是整个对象，但对于 <code>index.js</code> 我们不可以通过对象解构来拿到 <code>default</code> 方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/esmodule/index.js</span></span><br><span class="line"><span class="keyword">const</span> &#123; <span class="keyword">default</span>&#125; = <span class="built_in">require</span>(<span class="string">"./add"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"1+1="</span>, <span class="keyword">default</span>(<span class="number">1</span>, <span class="number">1</span>));</span><br></pre></td></tr></table></figure><p><code>default</code> 会在这里被认为是一个关键字，直接抛错：</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220508090141724.png" alt="image-20220508090141724"></p><p>来看下整体代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> __webpack_modules__ = &#123;</span><br><span class="line">        <span class="string">"./src/esmodule/add.js"</span>: (</span><br><span class="line">            __unused_webpack_module,</span><br><span class="line">            __webpack_exports__,</span><br><span class="line">            __webpack_require__</span><br><span class="line">        ) =&gt; &#123;</span><br><span class="line"><span class="meta">            "use strict"</span>;</span><br><span class="line">            __webpack_require__.r(__webpack_exports__);</span><br><span class="line">            __webpack_require__.d(__webpack_exports__, &#123;</span><br><span class="line">                sub: <span class="function"><span class="params">()</span> =&gt;</span> sub,</span><br><span class="line">                <span class="keyword">default</span>: <span class="function"><span class="params">()</span> =&gt;</span> __WEBPACK_DEFAULT_EXPORT__,</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">const</span> add = <span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> a + b;</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="keyword">const</span> sub = <span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">const</span> __WEBPACK_DEFAULT_EXPORT__ = add;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> __webpack_module_cache__ = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__webpack_require__</span>(<span class="params">moduleId</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> cachedModule = __webpack_module_cache__[moduleId];</span><br><span class="line">        <span class="keyword">if</span> (cachedModule !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> cachedModule.exports;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> <span class="built_in">module</span> = (__webpack_module_cache__[moduleId] = &#123;</span><br><span class="line">            exports: &#123;&#125;,</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        __webpack_modules__[moduleId](</span><br><span class="line">            <span class="built_in">module</span>,</span><br><span class="line">            <span class="built_in">module</span>.exports,</span><br><span class="line">            __webpack_require__</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">module</span>.exports;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    (<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        __webpack_require__.d = <span class="function">(<span class="params">exports, definition</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> definition) &#123;</span><br><span class="line">                <span class="keyword">if</span> (</span><br><span class="line">                    __webpack_require__.o(definition, key) &amp;&amp;</span><br><span class="line">                    !__webpack_require__.o(exports, key)</span><br><span class="line">                ) &#123;</span><br><span class="line">                    <span class="built_in">Object</span>.defineProperty(exports, key, &#123;</span><br><span class="line">                        enumerable: <span class="literal">true</span>,</span><br><span class="line">                        get: definition[key],</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;)();</span><br><span class="line"></span><br><span class="line">    (<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        __webpack_require__.o = <span class="function">(<span class="params">obj, prop</span>) =&gt;</span></span><br><span class="line">            <span class="built_in">Object</span>.prototype.hasOwnProperty.call(obj, prop);</span><br><span class="line">    &#125;)();</span><br><span class="line"></span><br><span class="line">    (<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        __webpack_require__.r = <span class="function">(<span class="params">exports</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">Symbol</span> !== <span class="string">"undefined"</span> &amp;&amp; <span class="built_in">Symbol</span>.toStringTag) &#123;</span><br><span class="line">                <span class="built_in">Object</span>.defineProperty(exports, <span class="built_in">Symbol</span>.toStringTag, &#123;</span><br><span class="line">                    value: <span class="string">"Module"</span>,</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">Object</span>.defineProperty(exports, <span class="string">"__esModule"</span>, &#123; <span class="attr">value</span>: <span class="literal">true</span> &#125;);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;)();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> __webpack_exports__ = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    (<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> m = __webpack_require__(<span class="string">"./src/esmodule/add.js"</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(m);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"1+1="</span>, m.default(<span class="number">1</span>, <span class="number">1</span>));</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"1-1="</span>, m.sub(<span class="number">1</span>, <span class="number">1</span>));</span><br><span class="line">    &#125;)();</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h1 id="同时导出-commonjs-和-esmodule"><a href="#同时导出-commonjs-和-esmodule" class="headerlink" title="同时导出 commonjs 和 esmodule"></a>同时导出 commonjs 和 esmodule</h1><p>我们在一个文件同时使用 <code>module.exports</code> 和 <code>export</code> 。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> add = <span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">module</span>.exports.add = add;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> sub = <span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>浏览器会直接抛错：</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220508092644764.png" alt="image-20220508092644764"></p><p>如果直接重写 <code>module.exports</code> 呢？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> add = <span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">module</span>.exports = add;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> sub = <span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220508092737165.png" alt="image-20220508092737165"></p><p>同样会抛错，让我们看一下 <code>webpack</code> 的产物。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"./src/commonjs/add.js"</span>: (</span><br><span class="line">           <span class="built_in">module</span>,</span><br><span class="line">           __webpack_exports__,</span><br><span class="line">           __webpack_require__</span><br><span class="line">       ) =&gt; &#123;</span><br><span class="line">           __webpack_require__.r(__webpack_exports__);</span><br><span class="line">           __webpack_require__.d(__webpack_exports__, &#123;</span><br><span class="line">               sub: <span class="function"><span class="params">()</span> =&gt;</span> sub,</span><br><span class="line">           &#125;);</span><br><span class="line">           <span class="built_in">module</span> = __webpack_require__.hmd(<span class="built_in">module</span>);</span><br><span class="line"></span><br><span class="line">           <span class="keyword">const</span> add = <span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">               <span class="keyword">return</span> a + b;</span><br><span class="line">           &#125;;</span><br><span class="line">           <span class="built_in">module</span>.exports.add = add;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">const</span> sub = <span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">               <span class="keyword">return</span> a + b;</span><br><span class="line">           &#125;;</span><br><span class="line">       &#125;,</span><br></pre></td></tr></table></figure><p>调用了 <code>__webpack_require__.hmd</code> 方法拿到 <code>module</code> 。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">__webpack_require__.hmd = <span class="function">(<span class="params"><span class="built_in">module</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">module</span> = <span class="built_in">Object</span>.create(<span class="built_in">module</span>);</span><br><span class="line">  <span class="keyword">if</span> (!<span class="built_in">module</span>.children) <span class="built_in">module</span>.children = [];</span><br><span class="line">  <span class="built_in">Object</span>.defineProperty(<span class="built_in">module</span>, <span class="string">"exports"</span>, &#123;</span><br><span class="line">    enumerable: <span class="literal">true</span>,</span><br><span class="line">    set: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(</span><br><span class="line">        <span class="string">"ES Modules may not assign module.exports or exports.*, Use ESM export syntax, instead: "</span> +</span><br><span class="line">        <span class="built_in">module</span>.id</span><br><span class="line">      );</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">module</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>hmd</code> 方法重新定义了 <code>exports</code> 属性，没有定义 <code>get</code> 属性，所以 <code>module.exports</code> 返回的是 <code>undefined</code>，<code>module.exports.add</code> 就直接抛错了。</p><p>重新定义了 <code>set</code> 函数，所以 <code>module.exports = xxx</code> ，重新赋值属性的时候走到 <code>set</code> 后直接抛错。</p><h1 id="同时导入-commonjs-和-esmodule"><a href="#同时导入-commonjs-和-esmodule" class="headerlink" title="同时导入 commonjs 和 esmodule"></a>同时导入 commonjs 和 esmodule</h1><p>定义一个 <code>commonjs</code> 模块：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/commonjs/add.js</span></span><br><span class="line"><span class="keyword">const</span> add = <span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">module</span>.exports = add;</span><br></pre></td></tr></table></figure><p>定义一个 <code>esmodule</code> 模块：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/esmodule/sub.js</span></span><br><span class="line"><span class="keyword">const</span> sub = <span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a - b;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> sub;</span><br></pre></td></tr></table></figure><p>然后在 <code>index.js</code> 同时引入：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> add = <span class="built_in">require</span>(<span class="string">"./add"</span>) ;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"1+1="</span>, add(<span class="number">1</span>, <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sub <span class="keyword">from</span> <span class="string">'../esmodule/sub'</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"1-1="</span>, sub(<span class="number">1</span>, <span class="number">1</span>));</span><br></pre></td></tr></table></figure><p>没什么问题，正常运行：</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220508094440422.png" alt="image-20220508094440422"></p><p>因为导入的话它们是互不影响的，各自导入自己的即可，可以看下完整代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> __webpack_modules__ = &#123;</span><br><span class="line">        <span class="string">"./src/commonjs/add.js"</span>: <span class="function">(<span class="params"><span class="built_in">module</span></span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> add = <span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> a + b;</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="built_in">module</span>.exports = add;</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        <span class="string">"./src/esmodule/sub.js"</span>: (</span><br><span class="line">            __unused_webpack_module,</span><br><span class="line">            __webpack_exports__,</span><br><span class="line">            __webpack_require__</span><br><span class="line">        ) =&gt; &#123;</span><br><span class="line"><span class="meta">            "use strict"</span>;</span><br><span class="line">            __webpack_require__.r(__webpack_exports__);</span><br><span class="line">            __webpack_require__.d(__webpack_exports__, &#123;</span><br><span class="line">                <span class="keyword">default</span>: <span class="function"><span class="params">()</span> =&gt;</span> __WEBPACK_DEFAULT_EXPORT__,</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">const</span> sub = <span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> a - b;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">const</span> __WEBPACK_DEFAULT_EXPORT__ = sub;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> __webpack_module_cache__ = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__webpack_require__</span>(<span class="params">moduleId</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> cachedModule = __webpack_module_cache__[moduleId];</span><br><span class="line">        <span class="keyword">if</span> (cachedModule !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> cachedModule.exports;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> <span class="built_in">module</span> = (__webpack_module_cache__[moduleId] = &#123;</span><br><span class="line">            exports: &#123;&#125;,</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        __webpack_modules__[moduleId](</span><br><span class="line">            <span class="built_in">module</span>,</span><br><span class="line">            <span class="built_in">module</span>.exports,</span><br><span class="line">            __webpack_require__</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">module</span>.exports;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    (<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        __webpack_require__.d = <span class="function">(<span class="params">exports, definition</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> definition) &#123;</span><br><span class="line">                <span class="keyword">if</span> (</span><br><span class="line">                    __webpack_require__.o(definition, key) &amp;&amp;</span><br><span class="line">                    !__webpack_require__.o(exports, key)</span><br><span class="line">                ) &#123;</span><br><span class="line">                    <span class="built_in">Object</span>.defineProperty(exports, key, &#123;</span><br><span class="line">                        enumerable: <span class="literal">true</span>,</span><br><span class="line">                        get: definition[key],</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;)();</span><br><span class="line"></span><br><span class="line">    (<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        __webpack_require__.o = <span class="function">(<span class="params">obj, prop</span>) =&gt;</span></span><br><span class="line">            <span class="built_in">Object</span>.prototype.hasOwnProperty.call(obj, prop);</span><br><span class="line">    &#125;)();</span><br><span class="line"></span><br><span class="line">    (<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        __webpack_require__.r = <span class="function">(<span class="params">exports</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">Symbol</span> !== <span class="string">"undefined"</span> &amp;&amp; <span class="built_in">Symbol</span>.toStringTag) &#123;</span><br><span class="line">                <span class="built_in">Object</span>.defineProperty(exports, <span class="built_in">Symbol</span>.toStringTag, &#123;</span><br><span class="line">                    value: <span class="string">"Module"</span>,</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">Object</span>.defineProperty(exports, <span class="string">"__esModule"</span>, &#123; <span class="attr">value</span>: <span class="literal">true</span> &#125;);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;)();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> __webpack_exports__ = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    (<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line"><span class="meta">        "use strict"</span>;</span><br><span class="line"></span><br><span class="line">        __webpack_require__.r(__webpack_exports__);</span><br><span class="line">        <span class="keyword">var</span> _esmodule_sub__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(</span><br><span class="line">            <span class="string">"./src/esmodule/sub.js"</span></span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">const</span> add = __webpack_require__(<span class="string">"./src/commonjs/add.js"</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"1+1="</span>, add(<span class="number">1</span>, <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">        <span class="built_in">console</span>.log(</span><br><span class="line">            <span class="string">"1-1="</span>,</span><br><span class="line">            (<span class="number">0</span>, _esmodule_sub__WEBPACK_IMPORTED_MODULE_0__[<span class="string">"default"</span>])(<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">        );</span><br><span class="line">    &#125;)();</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h1 id="总"><a href="#总" class="headerlink" title="总"></a>总</h1><p>不管是 <code>esmodule</code> 还是 <code>commonjs</code> 模块，最终都转换成了 <code>module = {exports: {}}</code> 形式的模块，所以它们之间的混用成为了可能。</p><p><code>import</code> <code>commonjs</code> 模块的话，<code>import</code> 拿到的就是整个 <code>module.exports</code> 对象，正常使用即可。如果我们直接改写 <code>module.exports</code> 对象，<code>webpack</code> 会认为等同于 <code>export default</code> ，进行兼容处理。</p><p><code>require</code> <code>esmodule</code> 模块的话，如果之前 <code>esmodule</code> 模块中有 <code>export default</code> ，那么使用的时候需要显示的调用 <code>xxx.default</code> ，对于其他的 <code>export</code> 正常使用即可。</p><p>虽然可以混用，但一般情况下能不混用就不混用，以免遇到未知问题，目前更推荐 <code>esmodule</code> 模块。</p><p>如果遇到奇怪问题的话，可以考虑直接去查看 <code>webpack</code> 的产物，能更快的排查出问题。</p><h1 id="讨论"><a href="#讨论" class="headerlink" title="讨论"></a>讨论</h1><p>对产物其实有两个问题，然后去请教了下 <code>Tecvan</code> ，杰哥。</p><p>第一个问题就是上边提到，当使用 <code>imports</code> 导入 <code>commonjs</code> 模块的时候，会调用 <code>n</code> 方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">__webpack_require__.n = <span class="function">(<span class="params"><span class="built_in">module</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> getter =</span><br><span class="line">      <span class="built_in">module</span> &amp;&amp; <span class="built_in">module</span>.__esModule</span><br><span class="line">  ? <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">module</span>[<span class="string">"default"</span>]</span><br><span class="line">  : <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">module</span>;</span><br><span class="line">  __webpack_require__.d(getter, &#123; <span class="attr">a</span>: getter &#125;);</span><br><span class="line">  <span class="keyword">return</span> getter;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这里会挂一个 <code>a</code> 属性，原因的话如下：</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220508095931458.png" alt="image-20220508095931458"></p><p>主要是兼容 <code>webpack</code> 混用的情况，场景可能如下：</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220508100718016.png" alt="image-20220508100718016"></p><p>第二个问题，还是 <code>import</code> 导入 <code>commonjs</code> 模块的时候，打包产物如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> _add__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(</span><br><span class="line">  <span class="string">"./src/commonjs/add.js"</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">var</span> _add__WEBPACK_IMPORTED_MODULE_0___default = __webpack_require__.n(</span><br><span class="line">  _add__WEBPACK_IMPORTED_MODULE_0__</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"1+1="</span>, _add__WEBPACK_IMPORTED_MODULE_0___default()(<span class="number">1</span>, <span class="number">1</span>));</span><br></pre></td></tr></table></figure><p>这里会触发 <code>__webpack_require__.n</code> 方法去生成 <code>_add__WEBPACK_IMPORTED_MODULE_0___default</code> 变量。触发这个逻辑的原因并不是因为我们使用了 <code>import xxx from &#39;yyy&#39;</code> 的格式，而是因为导出 <code>commonjs</code> 模块的时候直接使用 <code>module.exports = xxx</code> 进行了覆盖，这种情况 <code>webpack</code> 就会认为等效于 <code>export default</code> 的情况。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220508101552792.png" alt="image-20220508101552792"></p><p>但对于代码，因为 <code>_add__WEBPACK_IMPORTED_MODULE_0__</code> 和 <code>_add__WEBPACK_IMPORTED_MODULE_0___default</code> 是同一个值，我们不处理 <code>default</code> 逻辑其实也是通的：</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220508101628186.png" alt="image-20220508101628186"></p><p><code>webpack</code> 为什么会这样处理，具体原因就不知道了，欢迎大家一起来讨论，下边是杰哥的猜测：</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220508101715288.png" alt="image-20220508101715288"></p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>算上这篇，总结了三篇 <code>webpack</code> 的产物的文章  <a href="https://zhuanlan.zhihu.com/p/508808789" target="_blank" rel="noopener">Webpack 打包 commonjs 和 esmodule 模块的产物对比</a> 、<a href="https://windliang.wang/2022/05/03/Webpack%E6%89%93%E5%8C%85commonjs%E5%92%8Cesmodule%E5%8A%A8%E6%80%81%E5%BC%95%E5%85%A5%E6%A8%A1%E5%9D%97%E7%9A%84%E4%BA%A7%E7%89%A9%E5%AF%B9%E6%AF%94/">Webpack 打包 commonjs 和 esmodule 动态引入模块的产物对比</a>，可以加深平常开发中对于模块之间的理解。</p><p>大家如果还对 <code>Webpack</code> 原理感兴趣的话，可以去看杰哥的 <a href="https://juejin.cn/column/6978684601921175583" target="_blank" rel="noopener">Webpack 原理系列</a>。目前我没有总结这个系列的计划了，哈哈。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;接 &lt;a href=&quot;https://zhuanlan.zhihu.com/p/508808789&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Webpack 打包 commonjs 和 esmodule 模块的产物对比&lt;/a&gt; 继续，这篇文章来测试下 
      
    
    </summary>
    
    
      <category term="前端" scheme="https://windliang.wang/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="webpack" scheme="https://windliang.wang/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>Webpack 打包 commonjs 和 esmodule 动态引入模块的产物对比</title>
    <link href="https://windliang.wang/2022/05/03/Webpack%E6%89%93%E5%8C%85commonjs%E5%92%8Cesmodule%E5%8A%A8%E6%80%81%E5%BC%95%E5%85%A5%E6%A8%A1%E5%9D%97%E7%9A%84%E4%BA%A7%E7%89%A9%E5%AF%B9%E6%AF%94/"/>
    <id>https://windliang.wang/2022/05/03/Webpack%E6%89%93%E5%8C%85commonjs%E5%92%8Cesmodule%E5%8A%A8%E6%80%81%E5%BC%95%E5%85%A5%E6%A8%A1%E5%9D%97%E7%9A%84%E4%BA%A7%E7%89%A9%E5%AF%B9%E6%AF%94/</id>
    <published>2022-05-03T09:03:10.000Z</published>
    <updated>2022-11-17T00:01:23.932Z</updated>
    
    <content type="html"><![CDATA[<p>接 <a href="https://zhuanlan.zhihu.com/p/508808789" target="_blank" rel="noopener">Webpack 打包 commonjs 和 esmodule 模块的产物对比</a> 我们来继续分析。这篇文章主要来看一下动态引入，允许我们引入的模块名包含变量。</p><p>⚠️超长代码预警，需要几个小时的时间去啃，但读懂以后应该会很开心。</p><h1 id="commonjs"><a href="#commonjs" class="headerlink" title="commonjs"></a>commonjs</h1><p>新建一个 <code>json</code> 文件夹，包含几个 <code>json</code> 文件，和一个 <code>add</code> 方法。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220503173159890.png" alt=""></p><p>其中 <code>add.js</code> 就是一个简单的加法模块。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/commonjs/json/add.js</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"add开始引入"</span>);</span><br><span class="line"><span class="built_in">module</span>.exports.add = <span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>test1.json</code> 和 <code>test2.json</code> 都是一个 <code>json</code> 对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/commonjs/json/test1.json</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"data"</span>: <span class="string">"test1"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// src/commonjs/json/test2.json</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"data"</span>: <span class="string">"test2"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后我们提供一个 <code>hello</code> 模块，可以根据用户传入的参数，来引入不同的 <code>json</code> 文件返回给用户。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params">filename</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> data = <span class="built_in">require</span>(<span class="string">"./json/"</span> + filename + <span class="string">".json"</span>);</span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>需要注意的上边 <code>require</code> 传入的模块名一定不能是一个纯变量，比如 <code>require(filename)</code> ，不然 <code>webpack</code> 就不知道该打包哪些文件了。</p><p>上边我们限定了目录位置 <code>./json</code> 和文件名后缀 <code>.json</code> 。这样 <code>Webpack</code> 就会把 <code>json</code> 文件夹下所有的 <code>.json</code> 文件进行打包。</p><p>主函数 <code>index.js</code> 来调用 <code>hello</code> 方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">"commonjs开始执行"</span>);</span><br><span class="line"><span class="keyword">const</span> hello = <span class="built_in">require</span>(<span class="string">"./hello"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(hello(<span class="string">"test1"</span>));</span><br></pre></td></tr></table></figure><p>可以看一下控制台是正常输出：</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220503173736921.png" alt="image-20220503173736921"></p><p>看一下打包产物：</p><p>主要看一下保存所有模块的 <code>__webpack_modules__</code> 变量，其它的可以看一下上篇 <a href="https://zhuanlan.zhihu.com/p/508808789" target="_blank" rel="noopener">Webpack 打包 commonjs 和 esmodule 模块的产物对比</a> 。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> __webpack_modules__ = &#123;</span><br><span class="line">        <span class="string">"./src/commonjs/hello.js"</span>: (</span><br><span class="line">            <span class="built_in">module</span>,</span><br><span class="line">            __unused_webpack_exports,</span><br><span class="line">            __webpack_require__</span><br><span class="line">        ) =&gt; &#123;</span><br><span class="line">            <span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params">filename</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">const</span> data = __webpack_require__(</span><br><span class="line">                    <span class="string">"./src/commonjs/json sync recursive ^\\.\\/.*\\.json$"</span></span><br><span class="line">                )(<span class="string">"./"</span> + filename + <span class="string">".json"</span>);</span><br><span class="line">                <span class="keyword">return</span> data;</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        <span class="string">"./src/commonjs/json sync recursive ^\\.\\/.*\\.json$"</span>: (</span><br><span class="line">            <span class="built_in">module</span>,</span><br><span class="line">            __unused_webpack_exports,</span><br><span class="line">            __webpack_require__</span><br><span class="line">        ) =&gt; &#123;</span><br><span class="line">            ...</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        <span class="string">"./src/commonjs/json/test1.json"</span>: <span class="function">(<span class="params"><span class="built_in">module</span></span>) =&gt;</span> &#123;</span><br><span class="line"><span class="meta">            "use strict"</span>;</span><br><span class="line">            <span class="built_in">module</span>.exports = &#123; <span class="attr">data</span>: <span class="string">"test1"</span> &#125;;</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        <span class="string">"./src/commonjs/json/test2.json"</span>: <span class="function">(<span class="params"><span class="built_in">module</span></span>) =&gt;</span> &#123;</span><br><span class="line"><span class="meta">            "use strict"</span>;</span><br><span class="line">            <span class="built_in">module</span>.exports = &#123; <span class="attr">data</span>: <span class="string">"test2"</span> &#125;;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure><p>主要是四个模块 <code>./src/commonjs/hello.js</code> 、<code>./src/commonjs/json sync recursive ^\\.\\/.*\\.json$</code>、<code>./src/commonjs/json/test1.json</code> 和 <code>./src/commonjs/json/test2.json</code> 。</p><p><code>./src/commonjs/json/test1.json</code> 和 <code>./src/commonjs/json/test2.json</code> 这两个模块就是把我们的 <code>json</code> 文件用 <code>module.exports</code> 来导出。</p><p><code>./src/commonjs/hello.js</code> 模块中先调用 <code>./src/commonjs/json sync recursive ^\\.\\/.*\\.json$</code> 模块的方法，再进行传参。</p><p>此外将我们原本的 <code>&quot;./json/&quot; + filename + &quot;.json&quot;</code> 参数转为了 <code>&quot;./&quot; + filename + &quot;.json&quot;</code> 。</p><p>重点来看下 <code>./src/commonjs/json sync recursive ^\\.\\/.*\\.json$</code> ，详见下边的注释</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"./src/commonjs/json sync recursive ^\\.\\/.*\\.json$"</span>: (</span><br><span class="line">            <span class="built_in">module</span>,</span><br><span class="line">            __unused_webpack_exports,</span><br><span class="line">            __webpack_require__</span><br><span class="line">        ) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 映射 key</span></span><br><span class="line">            <span class="keyword">var</span> map = &#123;</span><br><span class="line">                <span class="string">"./test1.json"</span>: <span class="string">"./src/commonjs/json/test1.json"</span>,</span><br><span class="line">                <span class="string">"./test2.json"</span>: <span class="string">"./src/commonjs/json/test2.json"</span>,</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">function</span> <span class="title">webpackContext</span>(<span class="params">req</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">var</span> id = webpackContextResolve(req); <span class="comment">// 得到映射后的 key</span></span><br><span class="line">                <span class="keyword">return</span> __webpack_require__(id); <span class="comment">// 通过 __webpack_require__ 导入文件</span></span><br><span class="line">            &#125;</span><br><span class="line">  <span class="comment">// 返回映射后的 key</span></span><br><span class="line">            <span class="function"><span class="keyword">function</span> <span class="title">webpackContextResolve</span>(<span class="params">req</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (!__webpack_require__.o(map, req)) &#123;</span><br><span class="line">                    <span class="keyword">var</span> e = <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"Cannot find module '"</span> + req + <span class="string">"'"</span>);</span><br><span class="line">                    e.code = <span class="string">"MODULE_NOT_FOUND"</span>;</span><br><span class="line">                    <span class="keyword">throw</span> e;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> map[req];</span><br><span class="line">            &#125;</span><br><span class="line">            webpackContext.keys = <span class="function"><span class="keyword">function</span> <span class="title">webpackContextKeys</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">Object</span>.keys(map);</span><br><span class="line">            &#125;;</span><br><span class="line">            webpackContext.resolve = webpackContextResolve;</span><br><span class="line">            <span class="built_in">module</span>.exports = webpackContext;</span><br><span class="line">            webpackContext.id =</span><br><span class="line">                <span class="string">"./src/commonjs/json sync recursive ^\\.\\/.*\\.json$"</span>;</span><br><span class="line">        &#125;,</span><br></pre></td></tr></table></figure><p><code>commonjs</code> 模块整体上就是把匹配 <code>&quot;./json/&quot; + filename + &quot;.json&quot;</code> 这个格式的文件 <code>test1.json</code> 和 <code>test2.json</code> 都进行了打包，并且略过了 <code>add.js</code> 文件。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220503173159890.png" alt=""></p><p>可以再看下整体的产物：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> __webpack_modules__ = &#123;</span><br><span class="line">        <span class="string">"./src/commonjs/hello.js"</span>: (</span><br><span class="line">            <span class="built_in">module</span>,</span><br><span class="line">            __unused_webpack_exports,</span><br><span class="line">            __webpack_require__</span><br><span class="line">        ) =&gt; &#123;</span><br><span class="line">            <span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params">filename</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">const</span> data = __webpack_require__(</span><br><span class="line">                    <span class="string">"./src/commonjs/json sync recursive ^\\.\\/.*\\.json$"</span></span><br><span class="line">                )(<span class="string">"./"</span> + filename + <span class="string">".json"</span>);</span><br><span class="line">                <span class="keyword">return</span> data;</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        <span class="string">"./src/commonjs/json sync recursive ^\\.\\/.*\\.json$"</span>: (</span><br><span class="line">            <span class="built_in">module</span>,</span><br><span class="line">            __unused_webpack_exports,</span><br><span class="line">            __webpack_require__</span><br><span class="line">        ) =&gt; &#123;</span><br><span class="line">            <span class="keyword">var</span> map = &#123;</span><br><span class="line">                <span class="string">"./test1.json"</span>: <span class="string">"./src/commonjs/json/test1.json"</span>,</span><br><span class="line">                <span class="string">"./test2.json"</span>: <span class="string">"./src/commonjs/json/test2.json"</span>,</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">function</span> <span class="title">webpackContext</span>(<span class="params">req</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">var</span> id = webpackContextResolve(req);</span><br><span class="line">                <span class="keyword">return</span> __webpack_require__(id);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="function"><span class="keyword">function</span> <span class="title">webpackContextResolve</span>(<span class="params">req</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (!__webpack_require__.o(map, req)) &#123;</span><br><span class="line">                    <span class="keyword">var</span> e = <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"Cannot find module '"</span> + req + <span class="string">"'"</span>);</span><br><span class="line">                    e.code = <span class="string">"MODULE_NOT_FOUND"</span>;</span><br><span class="line">                    <span class="keyword">throw</span> e;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> map[req];</span><br><span class="line">            &#125;</span><br><span class="line">            webpackContext.keys = <span class="function"><span class="keyword">function</span> <span class="title">webpackContextKeys</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">Object</span>.keys(map);</span><br><span class="line">            &#125;;</span><br><span class="line">            webpackContext.resolve = webpackContextResolve;</span><br><span class="line">            <span class="built_in">module</span>.exports = webpackContext;</span><br><span class="line">            webpackContext.id =</span><br><span class="line">                <span class="string">"./src/commonjs/json sync recursive ^\\.\\/.*\\.json$"</span>;</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        <span class="string">"./src/commonjs/json/test1.json"</span>: <span class="function">(<span class="params"><span class="built_in">module</span></span>) =&gt;</span> &#123;</span><br><span class="line"><span class="meta">            "use strict"</span>;</span><br><span class="line">            <span class="built_in">module</span>.exports = &#123; <span class="attr">data</span>: <span class="string">"test1"</span> &#125;;</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        <span class="string">"./src/commonjs/json/test2.json"</span>: <span class="function">(<span class="params"><span class="built_in">module</span></span>) =&gt;</span> &#123;</span><br><span class="line"><span class="meta">            "use strict"</span>;</span><br><span class="line">            <span class="built_in">module</span>.exports = &#123; <span class="attr">data</span>: <span class="string">"test2"</span> &#125;;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> __webpack_module_cache__ = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__webpack_require__</span>(<span class="params">moduleId</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> cachedModule = __webpack_module_cache__[moduleId];</span><br><span class="line">        <span class="keyword">if</span> (cachedModule !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> cachedModule.exports;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> <span class="built_in">module</span> = (__webpack_module_cache__[moduleId] = &#123;</span><br><span class="line">            exports: &#123;&#125;,</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        __webpack_modules__[moduleId](</span><br><span class="line">            <span class="built_in">module</span>,</span><br><span class="line">            <span class="built_in">module</span>.exports,</span><br><span class="line">            __webpack_require__</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">module</span>.exports;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    (<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        __webpack_require__.o = <span class="function">(<span class="params">obj, prop</span>) =&gt;</span></span><br><span class="line">            <span class="built_in">Object</span>.prototype.hasOwnProperty.call(obj, prop);</span><br><span class="line">    &#125;)();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> __webpack_exports__ = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    (<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"commonjs开始执行"</span>);</span><br><span class="line">        <span class="keyword">const</span> hello = __webpack_require__(<span class="string">"./src/commonjs/hello.js"</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(hello(<span class="string">"test1"</span>));</span><br><span class="line">    &#125;)();</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h1 id="esmodule"><a href="#esmodule" class="headerlink" title="esmodule"></a>esmodule</h1><p><code>esmodule</code> 提供了 <code>import()</code> 方法进行动态引入，会返回一个 <code>Promise</code> 对象。</p><blockquote><p>The <a href="https://whatwg.github.io/loader/" target="_blank" rel="noopener">ES2015 Loader spec</a> defines <code>import()</code> as method to load ES2015 modules dynamically on runtime.</p></blockquote><p>我们来用 <code>esmodule</code> 的形式改写下上边 <code>commonjs</code> 的代码。</p><p>首先是 <code>hello.js</code> 。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/esmodule/hello.js</span></span><br><span class="line"><span class="keyword">const</span> hello = <span class="function">(<span class="params">filename</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">import</span>(<span class="string">"./json/"</span> + filename + <span class="string">".json"</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> hello;</span><br></pre></td></tr></table></figure><p>然后是 <code>index.js</code> </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/esmodule/index.js</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"esmodule开始执行"</span>);</span><br><span class="line"><span class="keyword">import</span> hello <span class="keyword">from</span> <span class="string">"./hello"</span>;</span><br><span class="line">hello(<span class="string">"test1"</span>).then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>不同于 <code>commonjs</code> ，除了输出 <code>test1.json</code> 原本的数据，还多了一个 <code>default</code> 属性。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220503191214724.png" alt="image-20220503191214724"></p><p>打包文件中除了 <code>main.js</code> ，把两个 <code>json</code> 文件也单拎了出来，如下图：</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220503214502914.png" alt="image-20220503214502914"></p><p>打包产物中除了  <a href="https://zhuanlan.zhihu.com/p/508808789" target="_blank" rel="noopener">Webpack 打包 commonjs 和 esmodule 模块的产物对比</a>  介绍的 <code>d、o、r</code> 方法，又多了很多奇奇怪怪的方法。</p><p><code>m</code> 属性指向 <code>__webpack_modules__</code>，保存了导出的所有模块。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> __webpack_modules__ = &#123;</span><br><span class="line">        <span class="string">"./src/esmodule/hello.js"</span>: (</span><br><span class="line">            __unused_webpack_module,</span><br><span class="line">            __webpack_exports__,</span><br><span class="line">            __webpack_require__</span><br><span class="line">        ) =&gt; &#123;</span><br><span class="line"><span class="meta">            "use strict"</span>;</span><br><span class="line">            __webpack_require__.r(__webpack_exports__);</span><br><span class="line">            __webpack_require__.d(__webpack_exports__, &#123;</span><br><span class="line">                <span class="keyword">default</span>: <span class="function"><span class="params">()</span> =&gt;</span> __WEBPACK_DEFAULT_EXPORT__,</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">const</span> hello = <span class="function">(<span class="params">filename</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> __webpack_require__(</span><br><span class="line">                    <span class="string">"./src/esmodule/json lazy recursive ^\\.\\/.*\\.json$"</span></span><br><span class="line">                )(<span class="string">"./"</span> + filename + <span class="string">".json"</span>);</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="keyword">const</span> __WEBPACK_DEFAULT_EXPORT__ = hello;</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        <span class="string">"./src/esmodule/json lazy recursive ^\\.\\/.*\\.json$"</span>: (</span><br><span class="line">            <span class="built_in">module</span>,</span><br><span class="line">            __unused_webpack_exports,</span><br><span class="line">            __webpack_require__</span><br><span class="line">        ) =&gt; &#123;</span><br><span class="line">            ...</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">__webpack_require__.m = __webpack_modules__;</span><br></pre></td></tr></table></figure><p><code>g</code> 属性指向全局对象，浏览器中的话就会返回 <code>window</code> 。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">__webpack_require__.g = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">           <span class="keyword">if</span> (<span class="keyword">typeof</span> globalThis === <span class="string">"object"</span>) <span class="keyword">return</span> globalThis; <span class="comment">// 这句就直接返回</span></span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               <span class="keyword">return</span> <span class="keyword">this</span> || <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">"return this"</span>)();</span><br><span class="line">           &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">               <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">window</span> === <span class="string">"object"</span>) <span class="keyword">return</span> <span class="built_in">window</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;)();</span><br></pre></td></tr></table></figure><p><code>u</code> 方法是将 <code>chunkId</code> 末尾加上 <code>.main.js</code> ，主要是为了和打包出来的文件名吻合。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">__webpack_require__.u = <span class="function">(<span class="params">chunkId</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">""</span> + chunkId + <span class="string">".main.js"</span>;</span><br><span class="line">        &#125;;</span><br></pre></td></tr></table></figure><p><code>p</code> 属性主要是为了拿到域名，开始执行的时候浏览器会加载我们的 <code>main.js</code> 。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220503214502914.png" alt="image-20220503214502914"></p><p>当前请求的地址是 <code>http://127.0.0.1:5501/dist/main.js</code> ，通过这个地址，我们要拿到 <code>http://127.0.0.1:5501/dist/</code> ，详见下边的代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> scriptUrl;</span><br><span class="line">        <span class="keyword">if</span> (__webpack_require__.g.importScripts) <span class="comment">// 这里不执行</span></span><br><span class="line">            scriptUrl = __webpack_require__.g.location + <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">var</span> <span class="built_in">document</span> = __webpack_require__.g.document; <span class="comment">// 这里拿到 window.document</span></span><br><span class="line">        <span class="keyword">if</span> (!scriptUrl &amp;&amp; <span class="built_in">document</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">document</span>.currentScript) scriptUrl = <span class="built_in">document</span>.currentScript.src; <span class="comment">// 这里得到 http://127.0.0.1:5501/dist/main.js</span></span><br><span class="line">            <span class="keyword">if</span> (!scriptUrl) &#123; <span class="comment">// 这里不执行</span></span><br><span class="line">                <span class="keyword">var</span> scripts = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"script"</span>);</span><br><span class="line">                <span class="keyword">if</span> (scripts.length) scriptUrl = scripts[scripts.length - <span class="number">1</span>].src;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!scriptUrl)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(</span><br><span class="line">                <span class="string">"Automatic publicPath is not supported in this browser"</span></span><br><span class="line">            );</span><br><span class="line">        scriptUrl = scriptUrl</span><br><span class="line">            .replace(<span class="regexp">/#.*$/</span>, <span class="string">""</span>)</span><br><span class="line">            .replace(<span class="regexp">/\?.*$/</span>, <span class="string">""</span>)</span><br><span class="line">            .replace(<span class="regexp">/\/[^\/]+$/</span>, <span class="string">"/"</span>); <span class="comment">// 这里得到 http://127.0.0.1:5501/dist/</span></span><br><span class="line">        __webpack_require__.p = scriptUrl;</span><br></pre></td></tr></table></figure><p>接下来会比较复杂，会分成 <code>8</code> 个步骤来看一下 <code>esmodule</code> 异步加载的主流程。整体思路是通过 <code>JSONP</code> 的形式发送请求加载我们的 <code>JSON</code> 文件，同时把整个的加载过程会包装为一个 <code>Promise</code> ，加载完成将内容保存到 <code>__webpack_modules__</code> 中。</p><ol><li><p><code>hello</code> 方法通过 <code>__webpack_require__</code> 调用 <code>&quot;./src/esmodule/json lazy recursive ^\\.\\/.*\\.json$&quot;</code> 方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"./src/esmodule/hello.js"</span>: (</span><br><span class="line">            __unused_webpack_module,</span><br><span class="line">            __webpack_exports__,</span><br><span class="line">            __webpack_require__</span><br><span class="line">        ) =&gt; &#123;</span><br><span class="line"><span class="meta">            "use strict"</span>;</span><br><span class="line">            __webpack_require__.r(__webpack_exports__);</span><br><span class="line">            __webpack_require__.d(__webpack_exports__, &#123;</span><br><span class="line">                <span class="keyword">default</span>: <span class="function"><span class="params">()</span> =&gt;</span> __WEBPACK_DEFAULT_EXPORT__,</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">const</span> hello = <span class="function">(<span class="params">filename</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> __webpack_require__(</span><br><span class="line">                    <span class="string">"./src/esmodule/json lazy recursive ^\\.\\/.*\\.json$"</span></span><br><span class="line">                )(<span class="string">"./"</span> + filename + <span class="string">".json"</span>);</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="keyword">const</span> __WEBPACK_DEFAULT_EXPORT__ = hello;</span><br><span class="line">        &#125;,</span><br></pre></td></tr></table></figure></li><li><p><code>./src/esmodule/json lazy recursive ^\\.\\/.*\\.json$</code> 方法导出的是 <code>webpackAsyncContext</code> 方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"./src/esmodule/json lazy recursive ^\\.\\/.*\\.json$"</span>: (</span><br><span class="line">            <span class="built_in">module</span>,</span><br><span class="line">            __unused_webpack_exports,</span><br><span class="line">            __webpack_require__</span><br><span class="line">        ) =&gt; &#123;</span><br><span class="line">            <span class="keyword">var</span> map = &#123;</span><br><span class="line">                <span class="string">"./test1.json"</span>: [</span><br><span class="line">                    <span class="string">"./src/esmodule/json/test1.json"</span>,</span><br><span class="line">                    <span class="string">"src_esmodule_json_test1_json"</span>,</span><br><span class="line">                ],</span><br><span class="line">                <span class="string">"./test2.json"</span>: [</span><br><span class="line">                    <span class="string">"./src/esmodule/json/test2.json"</span>,</span><br><span class="line">                    <span class="string">"src_esmodule_json_test2_json"</span>,</span><br><span class="line">                ],</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="function"><span class="keyword">function</span> <span class="title">webpackAsyncContext</span>(<span class="params">req</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (!__webpack_require__.o(map, req)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                        <span class="keyword">var</span> e = <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"Cannot find module '"</span> + req + <span class="string">"'"</span>);</span><br><span class="line">                        e.code = <span class="string">"MODULE_NOT_FOUND"</span>;</span><br><span class="line">                        <span class="keyword">throw</span> e;</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">debugger</span>;</span><br><span class="line">                <span class="keyword">var</span> ids = map[req],</span><br><span class="line">                    id = ids[<span class="number">0</span>];</span><br><span class="line">                <span class="keyword">return</span> __webpack_require__.e(ids[<span class="number">1</span>]).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> __webpack_require__.t(id, <span class="number">3</span> | <span class="number">16</span>);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">            webpackAsyncContext.keys = <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">Object</span>.keys(map);</span><br><span class="line">            webpackAsyncContext.id =</span><br><span class="line">                <span class="string">"./src/esmodule/json lazy recursive ^\\.\\/.*\\.json$"</span>;</span><br><span class="line">            <span class="built_in">module</span>.exports = webpackAsyncContext;</span><br></pre></td></tr></table></figure><p><code>map</code> 中定义了 <code>json</code> 文件的映射，<code>&quot;./src/esmodule/json/test1.json&quot;</code> 是原本的文件位置，会作为模块的 <code>key</code> ，<code>&quot;src_esmodule_json_test1_json&quot;</code> 对应打包后的文件名。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220503214502914.png" alt="image-20220503214502914"></p><p>看一下 <code>webpackAsyncContext</code> 方法，先调用 <code>__webpack_require__.e</code> 方法来发送请求加载文件并且返回一个  <code>Promise</code> 。<code>__webpack_require__.t</code> 方法会将返回的数据加一个 <code>default</code> 属性，也就是开头说的一个不同之处。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">webpackAsyncContext</span>(<span class="params">req</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!__webpack_require__.o(map, req)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">var</span> e = <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"Cannot find module '"</span> + req + <span class="string">"'"</span>);</span><br><span class="line">      e.code = <span class="string">"MODULE_NOT_FOUND"</span>;</span><br><span class="line">      <span class="keyword">throw</span> e;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> ids = map[req], <span class="comment">// ids[0] 是原本路径, id[1] 是打包后的文件名字</span></span><br><span class="line">      id = ids[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">return</span> __webpack_require__.e(ids[<span class="number">1</span>]).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> __webpack_require__.t(id, <span class="number">3</span> | <span class="number">16</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>详细看一下 <code>__webpack_require__.e</code> 方法，传入了一个参数 <code>chunkId</code> ，这里就是 <code>src_esmodule_json_test1_json</code> 。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">__webpack_require__.e = <span class="function">(<span class="params">chunkId</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.all(</span><br><span class="line">    <span class="built_in">Object</span>.keys(__webpack_require__.f).reduce(<span class="function">(<span class="params">promises, key</span>) =&gt;</span> &#123;</span><br><span class="line">      __webpack_require__.f[key](chunkId, promises);</span><br><span class="line">      <span class="keyword">return</span> promises;</span><br><span class="line">    &#125;, [])</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>主要就是执行 <code>f</code> 对象的所有属性函数，<code>f</code> 的属性函数会在传入的 <code>promises</code> 中添加当前的 <code>Promise</code> 。</p><p>看一下 <code>f</code> 对象的属性函数的定义。</p></li><li><p><code>f</code> 对象当前场景下只有一个 <code>j</code> 属性函数，所以在上边的 <code>e</code> 方法中会执行下边的 <code>j</code> 函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> installedChunks = &#123; <span class="comment">// 记录加载的文件</span></span><br><span class="line">  main: <span class="number">0</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">__webpack_require__.f.j = <span class="function">(<span class="params">chunkId, promises</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> installedChunkData = __webpack_require__.o( <span class="comment">// o 方法是判断当前对象是否有该属性</span></span><br><span class="line">    installedChunks,</span><br><span class="line">    chunkId</span><br><span class="line">  )</span><br><span class="line">  ? installedChunks[chunkId]</span><br><span class="line">  : <span class="literal">undefined</span>;</span><br><span class="line">  <span class="keyword">if</span> (installedChunkData !== <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (installedChunkData) &#123;</span><br><span class="line">      promises.push(installedChunkData[<span class="number">2</span>]);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="comment">// 第一次加载文件会走到这里</span></span><br><span class="line">        <span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(</span><br><span class="line">          (resolve, reject) =&gt;</span><br><span class="line">          (installedChunkData = installedChunks[chunkId] =</span><br><span class="line">           [resolve, reject]) <span class="comment">// 将 resolve 和 reject 保存</span></span><br><span class="line">        );</span><br><span class="line">        promises.push((installedChunkData[<span class="number">2</span>] = promise)); <span class="comment">// 把当前 promise 塞入到传入的 promises 数组</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> url =</span><br><span class="line">            __webpack_require__.p +</span><br><span class="line">            __webpack_require__.u(chunkId); <span class="comment">// url 拼成了 http://127.0.0.1:5501/dist/src_esmodule_json_test1_json.main.js</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> error = <span class="keyword">new</span> <span class="built_in">Error</span>();</span><br><span class="line">        <span class="keyword">var</span> loadingEnded = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (</span><br><span class="line">            __webpack_require__.o(installedChunks, chunkId)</span><br><span class="line">          ) &#123;</span><br><span class="line">              ...</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        </span><br><span class="line">        __webpack_require__.l(</span><br><span class="line">          url,</span><br><span class="line">          loadingEnded,</span><br><span class="line">          <span class="string">"chunk-"</span> + chunkId,</span><br><span class="line">          chunkId</span><br><span class="line">        );</span><br><span class="line">      &#125; <span class="keyword">else</span> installedChunks[chunkId] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>上边的 <code>j</code> 函数执行完后，会在 <code>installedChunks</code>  对象中增加一个 <code>src_esmodule_json_test1_json</code> 的 <code>key</code> ，值是一个数组，数组的 <code>0</code> 是 <code>promise</code> 的 <code>resolve</code> ，<code>1</code> 是 <code>promise</code> 的 <code>reject</code> ，<code>2</code> 是当前 <code>promise</code> ，如下图所示。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220504181410631.png" alt="image-20220504181410631"></p><p>最后执行 <code>l</code> 方法，就是我们的主角，通过 <code>JSONP</code> 的形式，塞一个 <code>script</code> 去加载 <code>http://127.0.0.1:5501/dist/src_esmodule_json_test1_json.main.js</code> 文件。</p><p>加载完成或者加载错误会执行上边的 <code>loadingEnded</code> 方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> error = <span class="keyword">new</span> <span class="built_in">Error</span>();</span><br><span class="line"><span class="keyword">var</span> loadingEnded = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    __webpack_require__.o(installedChunks, chunkId)</span><br><span class="line">  ) &#123;</span><br><span class="line">    installedChunkData = installedChunks[chunkId];</span><br><span class="line">    <span class="keyword">if</span> (installedChunkData !== <span class="number">0</span>)</span><br><span class="line">      installedChunks[chunkId] = <span class="literal">undefined</span>;</span><br><span class="line">    <span class="keyword">if</span> (installedChunkData) &#123; <span class="comment">// 走到这里 installedChunkData 应该已经是 0 了(后边会讲到哪里置的 0)，不然的话就抛出错误</span></span><br><span class="line">      <span class="keyword">var</span> errorType =</span><br><span class="line">          event &amp;&amp;</span><br><span class="line">          (event.type === <span class="string">"load"</span></span><br><span class="line">           ? <span class="string">"missing"</span></span><br><span class="line">           : event.type);</span><br><span class="line">      <span class="keyword">var</span> realSrc =</span><br><span class="line">          event &amp;&amp;</span><br><span class="line">          event.target &amp;&amp;</span><br><span class="line">          event.target.src;</span><br><span class="line">      error.message =</span><br><span class="line">        <span class="string">"Loading chunk "</span> +</span><br><span class="line">        chunkId +</span><br><span class="line">        <span class="string">" failed.\n("</span> +</span><br><span class="line">        errorType +</span><br><span class="line">        <span class="string">": "</span> +</span><br><span class="line">        realSrc +</span><br><span class="line">        <span class="string">")"</span>;</span><br><span class="line">      error.name = <span class="string">"ChunkLoadError"</span>;</span><br><span class="line">      error.type = errorType;</span><br><span class="line">      error.request = realSrc;</span><br><span class="line">      installedChunkData[<span class="number">1</span>](error); <span class="comment">// installedChunkData[1] 是之前保存的 reject</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>看一下 <code>l</code> 方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> inProgress = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> dataWebpackPrefix = <span class="string">"webpack-demo:"</span>;</span><br><span class="line"></span><br><span class="line">__webpack_require__.l = <span class="function">(<span class="params">url, done, key, chunkId</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (inProgress[url]) &#123;</span><br><span class="line">    inProgress[url].push(done);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> script, needAttach;</span><br><span class="line">  ...</span><br><span class="line">  <span class="comment">// 设置 script</span></span><br><span class="line">  <span class="keyword">if</span> (!script) &#123;</span><br><span class="line">    needAttach = <span class="literal">true</span>;</span><br><span class="line">    script = <span class="built_in">document</span>.createElement(<span class="string">"script"</span>);</span><br><span class="line"></span><br><span class="line">    script.charset = <span class="string">"utf-8"</span>;</span><br><span class="line">    script.timeout = <span class="number">120</span>;</span><br><span class="line">    <span class="keyword">if</span> (__webpack_require__.nc) &#123;</span><br><span class="line">      script.setAttribute(<span class="string">"nonce"</span>, __webpack_require__.nc);</span><br><span class="line">    &#125;</span><br><span class="line">    script.setAttribute(<span class="string">"data-webpack"</span>, dataWebpackPrefix + key);</span><br><span class="line">    script.src = url;</span><br><span class="line">  &#125;</span><br><span class="line">  inProgress[url] = [done];</span><br><span class="line">  <span class="keyword">var</span> onScriptComplete = <span class="function">(<span class="params">prev, event</span>) =&gt;</span> &#123;</span><br><span class="line">    script.onerror = script.onload = <span class="literal">null</span>;</span><br><span class="line">    clearTimeout(timeout);</span><br><span class="line">    <span class="keyword">var</span> doneFns = inProgress[url];</span><br><span class="line">    <span class="keyword">delete</span> inProgress[url];</span><br><span class="line">    script.parentNode &amp;&amp; script.parentNode.removeChild(script);</span><br><span class="line">    doneFns &amp;&amp; doneFns.forEach(<span class="function">(<span class="params">fn</span>) =&gt;</span> fn(event));</span><br><span class="line">    <span class="keyword">if</span> (prev) <span class="keyword">return</span> prev(event);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">var</span> timeout = setTimeout(</span><br><span class="line">    onScriptComplete.bind(<span class="literal">null</span>, <span class="literal">undefined</span>, &#123;</span><br><span class="line">      type: <span class="string">"timeout"</span>,</span><br><span class="line">      target: script,</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="number">120000</span></span><br><span class="line">  );</span><br><span class="line">  script.onerror = onScriptComplete.bind(<span class="literal">null</span>, script.onerror);</span><br><span class="line">  script.onload = onScriptComplete.bind(<span class="literal">null</span>, script.onload);</span><br><span class="line">  needAttach &amp;&amp; <span class="built_in">document</span>.head.appendChild(script); <span class="comment">// 插入当前 script</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>主要就是 <code>scrpit</code> 加载完毕后的回调，然后将当前 <code>script</code> 插入到 <code>head</code> 标签中。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220504183052534.png" alt="image-20220504183052534"></p></li><li><p>接着浏览器就会发送请求加载我们之前打包后的 <code>js</code> 文件。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220504183143512.png" alt="image-20220504183143512"></p><p>看一下文件内容：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">"use strict"</span>;</span><br><span class="line">(self[<span class="string">"webpackChunkwebpack_demo"</span>] =</span><br><span class="line">    self[<span class="string">"webpackChunkwebpack_demo"</span>] || []).push([</span><br><span class="line">    [<span class="string">"src_esmodule_json_test1_json"</span>],</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">"./src/esmodule/json/test1.json"</span>: <span class="function">(<span class="params"><span class="built_in">module</span></span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">module</span>.exports = &#123; <span class="attr">data</span>: <span class="string">"test1"</span> &#125;;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">]);</span><br></pre></td></tr></table></figure><p>加载完毕后会执行上边的代码，<code>self[&quot;webpackChunkwebpack_demo&quot;]</code> 的 <code>push</code> 方法之前已经重定义好了，也就是下边的代码。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> webpackJsonpCallback = <span class="function">(<span class="params">parentChunkLoadingFunction, data</span>) =&gt;</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> chunkLoadingGlobal = (self[<span class="string">"webpackChunkwebpack_demo"</span>] =</span><br><span class="line">                          self[<span class="string">"webpackChunkwebpack_demo"</span>] || []);</span><br><span class="line">chunkLoadingGlobal.forEach(webpackJsonpCallback.bind(<span class="literal">null</span>, <span class="number">0</span>));</span><br><span class="line">chunkLoadingGlobal.push = webpackJsonpCallback.bind( <span class="comment">// 定义 push 方法</span></span><br><span class="line">  <span class="literal">null</span>,</span><br><span class="line">  chunkLoadingGlobal.push.bind(chunkLoadingGlobal)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>执行 <code>self[&quot;webpackChunkwebpack_demo&quot;] || []).push</code> 相当于执行 <code>webpackJsonpCallback</code> 方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> webpackJsonpCallback = <span class="function">(<span class="params">parentChunkLoadingFunction, data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> [chunkIds, moreModules, runtime] = data;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> moduleId,</span><br><span class="line">      chunkId,</span><br><span class="line">      i = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> (chunkIds.some(<span class="function">(<span class="params">id</span>) =&gt;</span> installedChunks[id] !== <span class="number">0</span>)) &#123;</span><br><span class="line">    <span class="keyword">for</span> (moduleId <span class="keyword">in</span> moreModules) &#123;</span><br><span class="line">      <span class="keyword">if</span> (__webpack_require__.o(moreModules, moduleId)) &#123;</span><br><span class="line">        __webpack_require__.m[moduleId] = moreModules[moduleId];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (runtime) <span class="keyword">var</span> result = runtime(__webpack_require__);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (parentChunkLoadingFunction) parentChunkLoadingFunction(data);</span><br><span class="line">  <span class="keyword">for</span> (; i &lt; chunkIds.length; i++) &#123;</span><br><span class="line">    chunkId = chunkIds[i];</span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">      __webpack_require__.o(installedChunks, chunkId) &amp;&amp;</span><br><span class="line">      installedChunks[chunkId]</span><br><span class="line">    ) &#123;</span><br><span class="line">      installedChunks[chunkId][<span class="number">0</span>]();</span><br><span class="line">    &#125;</span><br><span class="line">    installedChunks[chunkIds[i]] = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>传入的 <code>data</code> 参数就是加载的文件内容时候传入的，也就是下边的样子。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    [<span class="string">"src_esmodule_json_test1_json"</span>],</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">"./src/esmodule/json/test1.json"</span>: <span class="function">(<span class="params"><span class="built_in">module</span></span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">module</span>.exports = &#123; <span class="attr">data</span>: <span class="string">"test1"</span> &#125;;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><code>webpackJsonpCallback</code> 拿到上边的  <code>data</code> 后主要做了三件事情：</p><ol><li><p>将 <code>./src/esmodule/json/test1.json</code> 模块保存到 <code>__webpack_modules__</code> </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (chunkIds.some(<span class="function">(<span class="params">id</span>) =&gt;</span> installedChunks[id] !== <span class="number">0</span>)) &#123;</span><br><span class="line">  <span class="keyword">for</span> (moduleId <span class="keyword">in</span> moreModules) &#123;</span><br><span class="line">    <span class="keyword">if</span> (__webpack_require__.o(moreModules, moduleId)) &#123;</span><br><span class="line">      __webpack_require__.m[moduleId] = moreModules[moduleId];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (runtime) <span class="keyword">var</span> result = runtime(__webpack_require__);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>__webpack_require__.m</code> 就是 <code>__webpack_modules__</code> ，保存着所有模块的键值对。</p></li><li><p>将 <code>installedChunks</code> 之前保存的 <code>promise</code> 执行 <code>resolve</code> 。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (; i &lt; chunkIds.length; i++) &#123;</span><br><span class="line">    chunkId = chunkIds[i];</span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">      __webpack_require__.o(installedChunks, chunkId) &amp;&amp;</span><br><span class="line">      installedChunks[chunkId]</span><br><span class="line">    ) &#123;</span><br><span class="line">      installedChunks[chunkId][<span class="number">0</span>](); <span class="comment">// 数组 0 保存的就是 resolve</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li><p>将 <code>installedChunks</code> 相应的对象置为 <code>0</code> ，代表加载完成了，前边讲的 <code>loadingEnded</code> 会判断这里是不是 <code>0</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">installedChunks[chunkIds[i]] = <span class="number">0</span>;</span><br></pre></td></tr></table></figure></li></ol></li><li><p>上边一大堆完成了 <code>JSONP</code> ，并且成功将动态加载的模块放到了 <code>__webpack_modules__</code> 中，然后我们看一下执行到哪里了：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">webpackAsyncContext</span>(<span class="params">req</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!__webpack_require__.o(map, req)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">var</span> e = <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"Cannot find module '"</span> + req + <span class="string">"'"</span>);</span><br><span class="line">      e.code = <span class="string">"MODULE_NOT_FOUND"</span>;</span><br><span class="line">      <span class="keyword">throw</span> e;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> ids = map[req], <span class="comment">// ids[0] 是原本路径, id[1] 是打包后的文件名字</span></span><br><span class="line">      id = ids[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">return</span> __webpack_require__.e(ids[<span class="number">1</span>]).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> __webpack_require__.t(id, <span class="number">3</span> | <span class="number">16</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行完 <code>e</code> 方法，接下执行 <code>t</code> 方法，会有很多不同的 <code>mode</code> 进入不同的分支，这里就不细究了，只需要知道最终结果是把数据加了 <code>default</code> 属性然后返回。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">__webpack_require__.t = <span class="function"><span class="keyword">function</span> (<span class="params">value, mode</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (mode &amp; <span class="number">1</span>) value = <span class="keyword">this</span>(value);</span><br><span class="line">  <span class="keyword">if</span> (mode &amp; <span class="number">8</span>) <span class="keyword">return</span> value;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> value === <span class="string">"object"</span> &amp;&amp; value) &#123;</span><br><span class="line">    <span class="keyword">if</span> (mode &amp; <span class="number">4</span> &amp;&amp; value.__esModule) <span class="keyword">return</span> value;</span><br><span class="line">    <span class="keyword">if</span> (mode &amp; <span class="number">16</span> &amp;&amp; <span class="keyword">typeof</span> value.then === <span class="string">"function"</span>) <span class="keyword">return</span> value;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> ns = <span class="built_in">Object</span>.create(<span class="literal">null</span>);</span><br><span class="line">  __webpack_require__.r(ns);</span><br><span class="line">  <span class="keyword">var</span> def = &#123;&#125;;</span><br><span class="line">  leafPrototypes = leafPrototypes || [</span><br><span class="line">    <span class="literal">null</span>,</span><br><span class="line">    getProto(&#123;&#125;),</span><br><span class="line">    getProto([]),</span><br><span class="line">    getProto(getProto),</span><br><span class="line">  ];</span><br><span class="line">  <span class="keyword">for</span> (</span><br><span class="line">    <span class="keyword">var</span> current = mode &amp; <span class="number">2</span> &amp;&amp; value;</span><br><span class="line">    <span class="keyword">typeof</span> current == <span class="string">"object"</span> &amp;&amp; !~leafPrototypes.indexOf(current);</span><br><span class="line">    current = getProto(current)</span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="built_in">Object</span>.getOwnPropertyNames(current).forEach(</span><br><span class="line">      (key) =&gt; <span class="function">(<span class="params">def[key] = (</span>) =&gt;</span> value[key])</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">  def[<span class="string">"default"</span>] = <span class="function"><span class="params">()</span> =&gt;</span> value;</span><br><span class="line">  __webpack_require__.d(ns, def);</span><br><span class="line">  <span class="keyword">return</span> ns;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>拿数据的话就是第一行代码，<code>if (mode &amp; 1) value = this(value);</code> ，这里的 <code>this</code> 就是 <code>webpack_require</code> 函数，相当于执行 <code>__webpack_require__(&#39;./src/esmodule/json/test1.json&#39;)</code>。关于 <code>this</code> 指向可以参考 <a href="https://zhuanlan.zhihu.com/p/431472497" target="_blank" rel="noopener">JavaScript中this指向详细分析(译)</a>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__webpack_require__</span>(<span class="params">moduleId</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> cachedModule = __webpack_module_cache__[moduleId];</span><br><span class="line">  <span class="keyword">if</span> (cachedModule !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> cachedModule.exports;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> <span class="built_in">module</span> = (__webpack_module_cache__[moduleId] = &#123;</span><br><span class="line">    exports: &#123;&#125;,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  __webpack_modules__[moduleId](</span><br><span class="line">    <span class="built_in">module</span>,</span><br><span class="line">    <span class="built_in">module</span>.exports,</span><br><span class="line">    __webpack_require__</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">module</span>.exports;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>&#39;./src/esmodule/json/test1.json&#39;</code> 之前已经保存到了 <code>__webpack_modules__</code> 中，所以就把之前加载的内容返回给了 <code>value</code>。</p></li><li><p>上边讲了 <code>hello</code> 方法的执行，最后返回了一个包含数据的 <code>promise</code> ，最终回到了我们的 <code>index</code> 函数中。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> _hello__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(</span><br><span class="line">  <span class="string">"./src/esmodule/hello.js"</span></span><br><span class="line">);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"esmodule开始执行"</span>);</span><br><span class="line">(<span class="number">0</span>, _hello__WEBPACK_IMPORTED_MODULE_0__[<span class="string">"default"</span>])(<span class="string">"test1"</span>).then(</span><br><span class="line">  (data) =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li></ol><p>以上就是 <code>esmodule</code> 异步加载模块的全过程了，稍微有些复杂，整体流程如下：</p><p>定义 <code>JSOP</code> 的回调函数（<code>(self[&quot;webpackChunkwebpack_demo&quot;].push</code>） -&gt; </p><p>进入 <code>index</code> 函数 -&gt; 进入 <code>hello</code> 函数 -&gt; 进入 <code>webpackAsyncContext</code> 函数 -&gt;</p><p>进入 <code>__webpack_require__.e</code> 函数 -&gt; </p><p>执行 <code>__webpack_require__.f.j</code> 函数，保存 <code>promise</code> ，生成要下载的文件 <code>url</code>  -&gt; </p><p>进入 <code>__webpack_require__.l</code> 函数，运用 <code>JSONP</code>，动态插入 <code>script</code>  -&gt;</p><p>加载 <code>script</code> 文件，执行回调函数 <code>(self[&quot;webpackChunkwebpack_demo&quot;].push</code> ，将数据保存到 <code>__webpack_modules__</code>  -&gt;</p><p>执行 <code>__webpack_require__.t</code> 方法，将数据加上 <code>default</code> 返回 -&gt;</p><p><code>hello</code> 函数执行完毕 -&gt;</p><p>回到 <code>index</code> 函数继续执行，输出导入的数据。</p><p>可以再看下完整代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> __webpack_modules__ = &#123;</span><br><span class="line">        <span class="string">"./src/esmodule/hello.js"</span>: (</span><br><span class="line">            __unused_webpack_module,</span><br><span class="line">            __webpack_exports__,</span><br><span class="line">            __webpack_require__</span><br><span class="line">        ) =&gt; &#123;</span><br><span class="line"><span class="meta">            "use strict"</span>;</span><br><span class="line">            __webpack_require__.r(__webpack_exports__);</span><br><span class="line">            __webpack_require__.d(__webpack_exports__, &#123;</span><br><span class="line">                <span class="keyword">default</span>: <span class="function"><span class="params">()</span> =&gt;</span> __WEBPACK_DEFAULT_EXPORT__,</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">const</span> hello = <span class="function">(<span class="params">filename</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> __webpack_require__(</span><br><span class="line">                    <span class="string">"./src/esmodule/json lazy recursive ^\\.\\/.*\\.json$"</span></span><br><span class="line">                )(<span class="string">"./"</span> + filename + <span class="string">".json"</span>);</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="keyword">const</span> __WEBPACK_DEFAULT_EXPORT__ = hello;</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        <span class="string">"./src/esmodule/json lazy recursive ^\\.\\/.*\\.json$"</span>: (</span><br><span class="line">            <span class="built_in">module</span>,</span><br><span class="line">            __unused_webpack_exports,</span><br><span class="line">            __webpack_require__</span><br><span class="line">        ) =&gt; &#123;</span><br><span class="line">            <span class="keyword">var</span> map = &#123;</span><br><span class="line">                <span class="string">"./test1.json"</span>: [</span><br><span class="line">                    <span class="string">"./src/esmodule/json/test1.json"</span>,</span><br><span class="line">                    <span class="string">"src_esmodule_json_test1_json"</span>,</span><br><span class="line">                ],</span><br><span class="line">                <span class="string">"./test2.json"</span>: [</span><br><span class="line">                    <span class="string">"./src/esmodule/json/test2.json"</span>,</span><br><span class="line">                    <span class="string">"src_esmodule_json_test2_json"</span>,</span><br><span class="line">                ],</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="function"><span class="keyword">function</span> <span class="title">webpackAsyncContext</span>(<span class="params">req</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (!__webpack_require__.o(map, req)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                        <span class="keyword">var</span> e = <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"Cannot find module '"</span> + req + <span class="string">"'"</span>);</span><br><span class="line">                        e.code = <span class="string">"MODULE_NOT_FOUND"</span>;</span><br><span class="line">                        <span class="keyword">throw</span> e;</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">debugger</span>;</span><br><span class="line">                <span class="keyword">var</span> ids = map[req],</span><br><span class="line">                    id = ids[<span class="number">0</span>];</span><br><span class="line">                <span class="keyword">return</span> __webpack_require__.e(ids[<span class="number">1</span>]).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> __webpack_require__.t(id, <span class="number">3</span> | <span class="number">16</span>);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">            webpackAsyncContext.keys = <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">Object</span>.keys(map);</span><br><span class="line">            webpackAsyncContext.id =</span><br><span class="line">                <span class="string">"./src/esmodule/json lazy recursive ^\\.\\/.*\\.json$"</span>;</span><br><span class="line">            <span class="built_in">module</span>.exports = webpackAsyncContext;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> __webpack_module_cache__ = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__webpack_require__</span>(<span class="params">moduleId</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> cachedModule = __webpack_module_cache__[moduleId];</span><br><span class="line">        <span class="keyword">if</span> (cachedModule !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> cachedModule.exports;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> <span class="built_in">module</span> = (__webpack_module_cache__[moduleId] = &#123;</span><br><span class="line">            exports: &#123;&#125;,</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        __webpack_modules__[moduleId](</span><br><span class="line">            <span class="built_in">module</span>,</span><br><span class="line">            <span class="built_in">module</span>.exports,</span><br><span class="line">            __webpack_require__</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">module</span>.exports;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    __webpack_require__.m = __webpack_modules__;</span><br><span class="line"></span><br><span class="line">    (<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> getProto = <span class="built_in">Object</span>.getPrototypeOf</span><br><span class="line">            ? <span class="function">(<span class="params">obj</span>) =&gt;</span> <span class="built_in">Object</span>.getPrototypeOf(obj)</span><br><span class="line">            : <span class="function">(<span class="params">obj</span>) =&gt;</span> obj.__proto__;</span><br><span class="line">        <span class="keyword">var</span> leafPrototypes;</span><br><span class="line"></span><br><span class="line">        __webpack_require__.t = <span class="function"><span class="keyword">function</span> (<span class="params">value, mode</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (mode &amp; <span class="number">1</span>) value = <span class="keyword">this</span>(value);</span><br><span class="line">            <span class="keyword">if</span> (mode &amp; <span class="number">8</span>) <span class="keyword">return</span> value;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">typeof</span> value === <span class="string">"object"</span> &amp;&amp; value) &#123;</span><br><span class="line">                <span class="keyword">if</span> (mode &amp; <span class="number">4</span> &amp;&amp; value.__esModule) <span class="keyword">return</span> value;</span><br><span class="line">                <span class="keyword">if</span> (mode &amp; <span class="number">16</span> &amp;&amp; <span class="keyword">typeof</span> value.then === <span class="string">"function"</span>) <span class="keyword">return</span> value;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">var</span> ns = <span class="built_in">Object</span>.create(<span class="literal">null</span>);</span><br><span class="line">            __webpack_require__.r(ns);</span><br><span class="line">            <span class="keyword">var</span> def = &#123;&#125;;</span><br><span class="line">            leafPrototypes = leafPrototypes || [</span><br><span class="line">                <span class="literal">null</span>,</span><br><span class="line">                getProto(&#123;&#125;),</span><br><span class="line">                getProto([]),</span><br><span class="line">                getProto(getProto),</span><br><span class="line">            ];</span><br><span class="line">            <span class="keyword">for</span> (</span><br><span class="line">                <span class="keyword">var</span> current = mode &amp; <span class="number">2</span> &amp;&amp; value;</span><br><span class="line">                <span class="keyword">typeof</span> current == <span class="string">"object"</span> &amp;&amp; !~leafPrototypes.indexOf(current);</span><br><span class="line">                current = getProto(current)</span><br><span class="line">            ) &#123;</span><br><span class="line">                <span class="built_in">Object</span>.getOwnPropertyNames(current).forEach(</span><br><span class="line">                    (key) =&gt; <span class="function">(<span class="params">def[key] = (</span>) =&gt;</span> value[key])</span><br><span class="line">                );</span><br><span class="line">            &#125;</span><br><span class="line">            def[<span class="string">"default"</span>] = <span class="function"><span class="params">()</span> =&gt;</span> value;</span><br><span class="line">            __webpack_require__.d(ns, def);</span><br><span class="line">            <span class="keyword">return</span> ns;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;)();</span><br><span class="line"></span><br><span class="line">    (<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        __webpack_require__.d = <span class="function">(<span class="params">exports, definition</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> definition) &#123;</span><br><span class="line">                <span class="keyword">if</span> (</span><br><span class="line">                    __webpack_require__.o(definition, key) &amp;&amp;</span><br><span class="line">                    !__webpack_require__.o(exports, key)</span><br><span class="line">                ) &#123;</span><br><span class="line">                    <span class="built_in">Object</span>.defineProperty(exports, key, &#123;</span><br><span class="line">                        enumerable: <span class="literal">true</span>,</span><br><span class="line">                        get: definition[key],</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;)();</span><br><span class="line"></span><br><span class="line">    (<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        __webpack_require__.f = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">        __webpack_require__.e = <span class="function">(<span class="params">chunkId</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Promise</span>.all(</span><br><span class="line">                <span class="built_in">Object</span>.keys(__webpack_require__.f).reduce(<span class="function">(<span class="params">promises, key</span>) =&gt;</span> &#123;</span><br><span class="line">                    __webpack_require__.f[key](chunkId, promises);</span><br><span class="line">                    <span class="keyword">return</span> promises;</span><br><span class="line">                &#125;, [])</span><br><span class="line">            );</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;)();</span><br><span class="line"></span><br><span class="line">    (<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        __webpack_require__.u = <span class="function">(<span class="params">chunkId</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">""</span> + chunkId + <span class="string">".main.js"</span>;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;)();</span><br><span class="line"></span><br><span class="line">    (<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        __webpack_require__.g = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">typeof</span> globalThis === <span class="string">"object"</span>) <span class="keyword">return</span> globalThis;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span> || <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">"return this"</span>)();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">window</span> === <span class="string">"object"</span>) <span class="keyword">return</span> <span class="built_in">window</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)();</span><br><span class="line">    &#125;)();</span><br><span class="line"></span><br><span class="line">    (<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        __webpack_require__.o = <span class="function">(<span class="params">obj, prop</span>) =&gt;</span></span><br><span class="line">            <span class="built_in">Object</span>.prototype.hasOwnProperty.call(obj, prop);</span><br><span class="line">    &#125;)();</span><br><span class="line"></span><br><span class="line">    (<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> inProgress = &#123;&#125;;</span><br><span class="line">        <span class="keyword">var</span> dataWebpackPrefix = <span class="string">"webpack-demo:"</span>;</span><br><span class="line"></span><br><span class="line">        __webpack_require__.l = <span class="function">(<span class="params">url, done, key, chunkId</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (inProgress[url]) &#123;</span><br><span class="line">                inProgress[url].push(done);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">var</span> script, needAttach;</span><br><span class="line">            <span class="keyword">if</span> (key !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">                <span class="keyword">var</span> scripts = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"script"</span>);</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; scripts.length; i++) &#123;</span><br><span class="line">                    <span class="keyword">var</span> s = scripts[i];</span><br><span class="line">                    <span class="keyword">if</span> (</span><br><span class="line">                        s.getAttribute(<span class="string">"src"</span>) == url ||</span><br><span class="line">                        s.getAttribute(<span class="string">"data-webpack"</span>) ==</span><br><span class="line">                            dataWebpackPrefix + key</span><br><span class="line">                    ) &#123;</span><br><span class="line">                        script = s;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!script) &#123;</span><br><span class="line">                needAttach = <span class="literal">true</span>;</span><br><span class="line">                script = <span class="built_in">document</span>.createElement(<span class="string">"script"</span>);</span><br><span class="line"></span><br><span class="line">                script.charset = <span class="string">"utf-8"</span>;</span><br><span class="line">                script.timeout = <span class="number">120</span>;</span><br><span class="line">                <span class="keyword">if</span> (__webpack_require__.nc) &#123;</span><br><span class="line">                    script.setAttribute(<span class="string">"nonce"</span>, __webpack_require__.nc);</span><br><span class="line">                &#125;</span><br><span class="line">                script.setAttribute(<span class="string">"data-webpack"</span>, dataWebpackPrefix + key);</span><br><span class="line">                script.src = url;</span><br><span class="line">            &#125;</span><br><span class="line">            inProgress[url] = [done];</span><br><span class="line">            <span class="keyword">var</span> onScriptComplete = <span class="function">(<span class="params">prev, event</span>) =&gt;</span> &#123;</span><br><span class="line">                script.onerror = script.onload = <span class="literal">null</span>;</span><br><span class="line">                clearTimeout(timeout);</span><br><span class="line">                <span class="keyword">var</span> doneFns = inProgress[url];</span><br><span class="line">                <span class="keyword">delete</span> inProgress[url];</span><br><span class="line">                script.parentNode &amp;&amp; script.parentNode.removeChild(script);</span><br><span class="line">                doneFns &amp;&amp; doneFns.forEach(<span class="function">(<span class="params">fn</span>) =&gt;</span> fn(event));</span><br><span class="line">                <span class="keyword">if</span> (prev) <span class="keyword">return</span> prev(event);</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="keyword">var</span> timeout = setTimeout(</span><br><span class="line">                onScriptComplete.bind(<span class="literal">null</span>, <span class="literal">undefined</span>, &#123;</span><br><span class="line">                    type: <span class="string">"timeout"</span>,</span><br><span class="line">                    target: script,</span><br><span class="line">                &#125;),</span><br><span class="line">                <span class="number">120000</span></span><br><span class="line">            );</span><br><span class="line">            script.onerror = onScriptComplete.bind(<span class="literal">null</span>, script.onerror);</span><br><span class="line">            script.onload = onScriptComplete.bind(<span class="literal">null</span>, script.onload);</span><br><span class="line">            needAttach &amp;&amp; <span class="built_in">document</span>.head.appendChild(script);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;)();</span><br><span class="line"></span><br><span class="line">    (<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        __webpack_require__.r = <span class="function">(<span class="params">exports</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">Symbol</span> !== <span class="string">"undefined"</span> &amp;&amp; <span class="built_in">Symbol</span>.toStringTag) &#123;</span><br><span class="line">                <span class="built_in">Object</span>.defineProperty(exports, <span class="built_in">Symbol</span>.toStringTag, &#123;</span><br><span class="line">                    value: <span class="string">"Module"</span>,</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">Object</span>.defineProperty(exports, <span class="string">"__esModule"</span>, &#123; <span class="attr">value</span>: <span class="literal">true</span> &#125;);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;)();</span><br><span class="line"></span><br><span class="line">    (<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> scriptUrl;</span><br><span class="line">        <span class="keyword">if</span> (__webpack_require__.g.importScripts)</span><br><span class="line">            scriptUrl = __webpack_require__.g.location + <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">var</span> <span class="built_in">document</span> = __webpack_require__.g.document;</span><br><span class="line">        <span class="keyword">if</span> (!scriptUrl &amp;&amp; <span class="built_in">document</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">document</span>.currentScript) scriptUrl = <span class="built_in">document</span>.currentScript.src;</span><br><span class="line">            <span class="keyword">if</span> (!scriptUrl) &#123;</span><br><span class="line">                <span class="keyword">var</span> scripts = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"script"</span>);</span><br><span class="line">                <span class="keyword">if</span> (scripts.length) scriptUrl = scripts[scripts.length - <span class="number">1</span>].src;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!scriptUrl)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(</span><br><span class="line">                <span class="string">"Automatic publicPath is not supported in this browser"</span></span><br><span class="line">            );</span><br><span class="line">        scriptUrl = scriptUrl</span><br><span class="line">            .replace(<span class="regexp">/#.*$/</span>, <span class="string">""</span>)</span><br><span class="line">            .replace(<span class="regexp">/\?.*$/</span>, <span class="string">""</span>)</span><br><span class="line">            .replace(<span class="regexp">/\/[^\/]+$/</span>, <span class="string">"/"</span>);</span><br><span class="line">        __webpack_require__.p = scriptUrl;</span><br><span class="line">    &#125;)();</span><br><span class="line"></span><br><span class="line">    (<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> installedChunks = &#123;</span><br><span class="line">            main: <span class="number">0</span>,</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        __webpack_require__.f.j = <span class="function">(<span class="params">chunkId, promises</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">var</span> installedChunkData = __webpack_require__.o(</span><br><span class="line">                installedChunks,</span><br><span class="line">                chunkId</span><br><span class="line">            )</span><br><span class="line">                ? installedChunks[chunkId]</span><br><span class="line">                : <span class="literal">undefined</span>;</span><br><span class="line">            <span class="keyword">if</span> (installedChunkData !== <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (installedChunkData) &#123;</span><br><span class="line">                    promises.push(installedChunkData[<span class="number">2</span>]);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                        <span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(</span><br><span class="line">                            (resolve, reject) =&gt;</span><br><span class="line">                                (installedChunkData = installedChunks[chunkId] =</span><br><span class="line">                                    [resolve, reject])</span><br><span class="line">                        );</span><br><span class="line">                        promises.push((installedChunkData[<span class="number">2</span>] = promise));</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">var</span> url =</span><br><span class="line">                            __webpack_require__.p +</span><br><span class="line">                            __webpack_require__.u(chunkId);</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">var</span> error = <span class="keyword">new</span> <span class="built_in">Error</span>();</span><br><span class="line">                        <span class="keyword">var</span> loadingEnded = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">                            <span class="keyword">if</span> (</span><br><span class="line">                                __webpack_require__.o(installedChunks, chunkId)</span><br><span class="line">                            ) &#123;</span><br><span class="line">                                installedChunkData = installedChunks[chunkId];</span><br><span class="line">                                <span class="keyword">if</span> (installedChunkData !== <span class="number">0</span>)</span><br><span class="line">                                    installedChunks[chunkId] = <span class="literal">undefined</span>;</span><br><span class="line">                                <span class="keyword">if</span> (installedChunkData) &#123;</span><br><span class="line">                                    <span class="keyword">var</span> errorType =</span><br><span class="line">                                        event &amp;&amp;</span><br><span class="line">                                        (event.type === <span class="string">"load"</span></span><br><span class="line">                                            ? <span class="string">"missing"</span></span><br><span class="line">                                            : event.type);</span><br><span class="line">                                    <span class="keyword">var</span> realSrc =</span><br><span class="line">                                        event &amp;&amp;</span><br><span class="line">                                        event.target &amp;&amp;</span><br><span class="line">                                        event.target.src;</span><br><span class="line">                                    error.message =</span><br><span class="line">                                        <span class="string">"Loading chunk "</span> +</span><br><span class="line">                                        chunkId +</span><br><span class="line">                                        <span class="string">" failed.\n("</span> +</span><br><span class="line">                                        errorType +</span><br><span class="line">                                        <span class="string">": "</span> +</span><br><span class="line">                                        realSrc +</span><br><span class="line">                                        <span class="string">")"</span>;</span><br><span class="line">                                    error.name = <span class="string">"ChunkLoadError"</span>;</span><br><span class="line">                                    error.type = errorType;</span><br><span class="line">                                    error.request = realSrc;</span><br><span class="line">                                    installedChunkData[<span class="number">1</span>](error);</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;;</span><br><span class="line">                        __webpack_require__.l(</span><br><span class="line">                            url,</span><br><span class="line">                            loadingEnded,</span><br><span class="line">                            <span class="string">"chunk-"</span> + chunkId,</span><br><span class="line">                            chunkId</span><br><span class="line">                        );</span><br><span class="line">                    &#125; <span class="keyword">else</span> installedChunks[chunkId] = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> webpackJsonpCallback = <span class="function">(<span class="params">parentChunkLoadingFunction, data</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">var</span> [chunkIds, moreModules, runtime] = data;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> moduleId,</span><br><span class="line">                chunkId,</span><br><span class="line">                i = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (chunkIds.some(<span class="function">(<span class="params">id</span>) =&gt;</span> installedChunks[id] !== <span class="number">0</span>)) &#123;</span><br><span class="line">                <span class="keyword">for</span> (moduleId <span class="keyword">in</span> moreModules) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (__webpack_require__.o(moreModules, moduleId)) &#123;</span><br><span class="line">                        __webpack_require__.m[moduleId] = moreModules[moduleId];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (runtime) <span class="keyword">var</span> result = runtime(__webpack_require__);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (parentChunkLoadingFunction) parentChunkLoadingFunction(data);</span><br><span class="line">            <span class="keyword">for</span> (; i &lt; chunkIds.length; i++) &#123;</span><br><span class="line">                chunkId = chunkIds[i];</span><br><span class="line">                <span class="keyword">if</span> (</span><br><span class="line">                    __webpack_require__.o(installedChunks, chunkId) &amp;&amp;</span><br><span class="line">                    installedChunks[chunkId]</span><br><span class="line">                ) &#123;</span><br><span class="line">                    installedChunks[chunkId][<span class="number">0</span>]();</span><br><span class="line">                &#125;</span><br><span class="line">                installedChunks[chunkIds[i]] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> chunkLoadingGlobal = (self[<span class="string">"webpackChunkwebpack_demo"</span>] =</span><br><span class="line">            self[<span class="string">"webpackChunkwebpack_demo"</span>] || []);</span><br><span class="line">        chunkLoadingGlobal.forEach(webpackJsonpCallback.bind(<span class="literal">null</span>, <span class="number">0</span>));</span><br><span class="line">        chunkLoadingGlobal.push = webpackJsonpCallback.bind(</span><br><span class="line">            <span class="literal">null</span>,</span><br><span class="line">            chunkLoadingGlobal.push.bind(chunkLoadingGlobal)</span><br><span class="line">        );</span><br><span class="line">    &#125;)();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> __webpack_exports__ = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    (<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line"><span class="meta">        "use strict"</span>;</span><br><span class="line"></span><br><span class="line">        __webpack_require__.r(__webpack_exports__);</span><br><span class="line">        <span class="keyword">var</span> _hello__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(</span><br><span class="line">            <span class="string">"./src/esmodule/hello.js"</span></span><br><span class="line">        );</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"esmodule开始执行"</span>);</span><br><span class="line"></span><br><span class="line">        (<span class="number">0</span>, _hello__WEBPACK_IMPORTED_MODULE_0__[<span class="string">"default"</span>])(<span class="string">"test1"</span>).then(</span><br><span class="line">            (data) =&gt; &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(data);</span><br><span class="line">            &#125;</span><br><span class="line">        );</span><br><span class="line">    &#125;)();</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h1 id="总"><a href="#总" class="headerlink" title="总"></a>总</h1><p><code>require</code> 引入模块是同步的，因此打包的时候就将数据保存起来了，打包产物也比较简单。</p><p><code>import()</code> 是异步的，需要异步加载的文件提前单独生成文件，然后通过 <code>JSONP</code> 的形式进行加载，加载完毕后通过回调将数据添加到 <code>__webpack_modules__</code> 对象中，方便后续使用。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;接 &lt;a href=&quot;https://zhuanlan.zhihu.com/p/508808789&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Webpack 打包 commonjs 和 esmodule 模块的产物对比&lt;/a&gt; 我们来继续分析。这篇文章
      
    
    </summary>
    
    
      <category term="前端" scheme="https://windliang.wang/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="webpack" scheme="https://windliang.wang/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>Webpack打包commonjs和esmodule模块的产物对比</title>
    <link href="https://windliang.wang/2022/05/02/Webpack%E6%89%93%E5%8C%85commonjs%E5%92%8Cesmodule%E6%A8%A1%E5%9D%97%E7%9A%84%E4%BA%A7%E7%89%A9%E5%AF%B9%E6%AF%94/"/>
    <id>https://windliang.wang/2022/05/02/Webpack%E6%89%93%E5%8C%85commonjs%E5%92%8Cesmodule%E6%A8%A1%E5%9D%97%E7%9A%84%E4%BA%A7%E7%89%A9%E5%AF%B9%E6%AF%94/</id>
    <published>2022-05-02T10:40:11.000Z</published>
    <updated>2022-11-17T00:01:23.933Z</updated>
    
    <content type="html"><![CDATA[<p>这篇文章不涉及 <code>Webpack</code> 的原理，只是观察下 <code>Webpack</code> 对 <code>commonjs</code> 和 <code>esmodule</code> 模块打包后的产物，读完后会对模块系统有个更深的了解。</p><h1 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h1><p><code>Webpack</code> 只配置入口和出口，并且将 <code>devtool</code> 设置为 <code>false</code>，把 <code>sourcemap</code> 关掉。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">"path"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: <span class="string">"./src/commonjs/index.js"</span>,</span><br><span class="line">    output: &#123;</span><br><span class="line">        path: path.resolve(__dirname, <span class="string">"./dist"</span>),</span><br><span class="line">        filename: <span class="string">"main.js"</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    devServer: &#123;</span><br><span class="line">        <span class="keyword">static</span>: path.resolve(__dirname, <span class="string">"./dist"</span>),</span><br><span class="line">    &#125;,</span><br><span class="line">    devtool: <span class="literal">false</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>npm</code> 安装三个 <code>node</code> 包。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -D webpack webpack-cli webpack-dev-server</span><br></pre></td></tr></table></figure><p>更详细的过程可以参考 <a href="https://zhuanlan.zhihu.com/p/402924613" target="_blank" rel="noopener">2021年从零开发前端项目指南</a></p><h1 id="小试牛刀"><a href="#小试牛刀" class="headerlink" title="小试牛刀"></a>小试牛刀</h1><p>先简单写行代码测试一下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/commonjs/index.js</span></span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">"hello, liang"</span>);</span><br></pre></td></tr></table></figure><p>打包产物：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> __webpack_exports__ = &#123;&#125;;</span><br><span class="line">    <span class="built_in">document</span>.write(<span class="string">"hello, liang"</span>);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>只是简单的包了层 <code>IIFE</code> 。</p><h1 id="commonjs-模块"><a href="#commonjs-模块" class="headerlink" title="commonjs 模块"></a>commonjs 模块</h1><p>写一个 <code>add</code> 模块函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/commonjs/add.js</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"add开始引入"</span>);</span><br><span class="line"><span class="built_in">module</span>.exports.add = <span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;;</span><br><span class="line">exports.PI = <span class="number">3.14</span>;</span><br></pre></td></tr></table></figure><p>然后 <code>index.js</code> 进行调用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/commonjs/index.js</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"commonjs开始执行"</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; add &#125; = <span class="built_in">require</span>(<span class="string">"./add"</span>);</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">"1+1="</span>, add(<span class="number">1</span>, <span class="number">1</span>));</span><br></pre></td></tr></table></figure><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220503162217512.png" alt="image-20220503162217512"></p><p>分析一下打包产物。</p><p>变成了 <code>key、value</code> 的键值对，<code>key</code> 是文件名，<code>value</code> 是封装为一个函数的模块，提供 <code>module</code>  和  <code>exports</code>参数。</p><p>这里我们只有一个模块，所以只有一个 <code>key</code> 。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> __webpack_modules__ = &#123;</span><br><span class="line">  <span class="string">"./src/commonjs/add.js"</span>: <span class="function">(<span class="params"><span class="built_in">module</span>, exports</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"add开始引入"</span>);</span><br><span class="line">    <span class="built_in">module</span>.exports.add = <span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;;</span><br><span class="line">    exports.PI = <span class="number">3.14</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>提供一个 <code>__webpack_require__</code> 方法用来导入上边 <code>__webpack_modules__</code>  中的模块。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__webpack_require__</span>(<span class="params">moduleId</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> <span class="built_in">module</span>  = &#123;</span><br><span class="line">    exports: &#123;&#125;,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  __webpack_modules__[moduleId](</span><br><span class="line">    <span class="built_in">module</span>,</span><br><span class="line">    <span class="built_in">module</span>.exports,</span><br><span class="line">    __webpack_require__</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">module</span>.exports;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为 <code>module</code> 和 <code>exports</code> 都是对象，所以在 <code>__webpack_modules__</code> 中给 <code>exports</code> 添加值就是改变这里外边的值。</p><p>最后把 <code>module.exports</code> 返回即可。</p><p>此外，我们可以添加一个 <code>__webpack_module_cache__</code> 变量来保存已经导出过的对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> __webpack_module_cache__ = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__webpack_require__</span>(<span class="params">moduleId</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 如果已经被导出过，直接返回缓存</span></span><br><span class="line">  <span class="keyword">var</span> cachedModule = __webpack_module_cache__[moduleId];</span><br><span class="line">  <span class="keyword">if</span> (cachedModule !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> cachedModule.exports;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 缓存对象指向同一个值</span></span><br><span class="line">  <span class="keyword">var</span> <span class="built_in">module</span> = (__webpack_module_cache__[moduleId] = &#123;</span><br><span class="line">    exports: &#123;&#125;,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  __webpack_modules__[moduleId](</span><br><span class="line">    <span class="built_in">module</span>,</span><br><span class="line">    <span class="built_in">module</span>.exports,</span><br><span class="line">    __webpack_require__</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">module</span>.exports;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后看下整体代码，<code>index.js</code> 中通过 <code>__webpack_require__</code> 方法导入模块即可。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> __webpack_modules__ = &#123;</span><br><span class="line">        <span class="string">"./src/commonjs/add.js"</span>: <span class="function">(<span class="params"><span class="built_in">module</span>, exports</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"add开始引入"</span>);</span><br><span class="line">            <span class="built_in">module</span>.exports.add = <span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> a + b;</span><br><span class="line">            &#125;;</span><br><span class="line">            exports.PI = <span class="number">3.14</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> __webpack_module_cache__ = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__webpack_require__</span>(<span class="params">moduleId</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> cachedModule = __webpack_module_cache__[moduleId];</span><br><span class="line">        <span class="keyword">if</span> (cachedModule !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> cachedModule.exports;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> <span class="built_in">module</span> = (__webpack_module_cache__[moduleId] = &#123;</span><br><span class="line">            exports: &#123;&#125;,</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        __webpack_modules__[moduleId](</span><br><span class="line">            <span class="built_in">module</span>,</span><br><span class="line">            <span class="built_in">module</span>.exports,</span><br><span class="line">            __webpack_require__</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">module</span>.exports;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> __webpack_exports__ = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    (<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"commonjs开始执行"</span>);</span><br><span class="line">        <span class="keyword">const</span> &#123; add &#125; = __webpack_require__(<span class="string">"./src/commonjs/add.js"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">document</span>.write(<span class="string">"1+1="</span>, add(<span class="number">1</span>, <span class="number">1</span>));</span><br><span class="line">    &#125;)();</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h1 id="esmodule-模块"><a href="#esmodule-模块" class="headerlink" title="esmodule 模块"></a>esmodule 模块</h1><p>我们把上边的 <code>commonjs</code> 模块改写一下。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/esmodule/add.js</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"add开始引入"</span>);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> add = <span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> PI = <span class="number">3.14</span>;</span><br><span class="line"><span class="keyword">const</span> test = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> test;</span><br></pre></td></tr></table></figure><p>然后是 <code>index.js</code> 。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/esmodule/index.js</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"esmodule开始执行"</span>);</span><br><span class="line"><span class="keyword">import</span> &#123; add &#125; <span class="keyword">from</span> <span class="string">"./add"</span>;</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">"1+1="</span>, add(<span class="number">1</span>, <span class="number">1</span>));</span><br></pre></td></tr></table></figure><p>此时运行一下会发现和 <code>commonjs</code> 不同的地方，代码并没有按照我们写的顺序执行，屏幕中先输出的是 <code>add开始引入</code> 然后才是 <code>esmodule开始执行</code>。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220503113614453.png" alt="image-20220503113614453"></p><p>看一下打包产物应该就可以理解为什么了。</p><p>和之前一样，会提供一个 <code>__webpack_require__</code> 方法来引入模块。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> __webpack_module_cache__ = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__webpack_require__</span>(<span class="params">moduleId</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> cachedModule = __webpack_module_cache__[moduleId];</span><br><span class="line">  <span class="keyword">if</span> (cachedModule !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> cachedModule.exports;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> <span class="built_in">module</span> = (__webpack_module_cache__[moduleId] = &#123;</span><br><span class="line">    exports: &#123;&#125;,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  __webpack_modules__[moduleId](</span><br><span class="line">    <span class="built_in">module</span>,</span><br><span class="line">    <span class="built_in">module</span>.exports,</span><br><span class="line">    __webpack_require__</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">module</span>.exports;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不同之处在于，额外提供了几个看起来比较奇怪的方法。</p><p>第一个是 <code>d</code> 方法，用来将 <code>definition</code> 上边的属性挂到 <code>exports</code> 上。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">__webpack_require__.d = <span class="function">(<span class="params">exports, definition</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> definition) &#123;</span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">      __webpack_require__.o(definition, key) &amp;&amp;</span><br><span class="line">      !__webpack_require__.o(exports, key)</span><br><span class="line">    ) &#123;</span><br><span class="line">      <span class="built_in">Object</span>.defineProperty(exports, key, &#123;</span><br><span class="line">        enumerable: <span class="literal">true</span>,</span><br><span class="line">        get: definition[key],</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>第二个是 <code>o</code> 方法，判断 <code>exports</code> 方法是否有 <code>key</code> 属性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">__webpack_require__.o = <span class="function">(<span class="params">obj, prop</span>) =&gt;</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.hasOwnProperty.call(obj, prop);</span><br></pre></td></tr></table></figure><p>第三个是 <code>r</code> 方法，给 <code>exports</code> 加一个 <code>Symbol.toStringTag</code> 属性，这样 <code>exports.toString</code> 返回的就是  <code>&#39;[object Module]</code> 。</p><p>此外，再加一个 <code>__esModule</code> 属性，用来标识该模块是 <code>esmodule</code> 。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">__webpack_require__.r = <span class="function">(<span class="params">exports</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">Symbol</span> !== <span class="string">"undefined"</span> &amp;&amp; <span class="built_in">Symbol</span>.toStringTag) &#123;</span><br><span class="line">    <span class="built_in">Object</span>.defineProperty(exports, <span class="built_in">Symbol</span>.toStringTag, &#123;</span><br><span class="line">      value: <span class="string">"Module"</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">Object</span>.defineProperty(exports, <span class="string">"__esModule"</span>, &#123;</span><br><span class="line">    value: <span class="literal">true</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这几个方法啥时候用呢，会在我们的模块代码之前调用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> __webpack_modules__ = &#123;</span><br><span class="line">        <span class="string">"./src/esmodule/add.js"</span>: (</span><br><span class="line">            __unused_webpack_module,</span><br><span class="line">            __webpack_exports__,</span><br><span class="line">            __webpack_require__</span><br><span class="line">        ) =&gt; &#123;</span><br><span class="line">            __webpack_require__.r(__webpack_exports__);<span class="comment">// 标识该模块是 esmodule</span></span><br><span class="line">            __webpack_require__.d(__webpack_exports__, &#123;<span class="comment">// 将该模块里的属性、方法挂到 __webpack_exports__ 上</span></span><br><span class="line">                add: <span class="function"><span class="params">()</span> =&gt;</span> add,</span><br><span class="line">                PI: <span class="function"><span class="params">()</span> =&gt;</span> PI,</span><br><span class="line">                <span class="keyword">default</span>: <span class="function"><span class="params">()</span> =&gt;</span> __WEBPACK_DEFAULT_EXPORT__,</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"add开始引入"</span>);</span><br><span class="line">            <span class="keyword">const</span> add = <span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> a + b;</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="keyword">const</span> PI = <span class="number">3.14</span>;</span><br><span class="line">            <span class="keyword">const</span> test = <span class="number">3</span>;</span><br><span class="line">            <span class="keyword">const</span> __WEBPACK_DEFAULT_EXPORT__ = test;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure><p>我们把 <code>add、PI、__WEBPACK_DEFAULT_EXPORT__</code> 属性都包了箭头函数 <code>() =&gt; add</code> ，因此可以先在 <code>__webpack_require__.d</code> 函数中使用它们，<code>__webpack_require__.d</code> 函数之后才去定义 <code>add、PI、__WEBPACK_DEFAULT_EXPORT__</code>  这些变量的值。</p><p>然后是 <code>index.js</code> 的使用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> __webpack_exports__ = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    (<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        __webpack_require__.r(__webpack_exports__);</span><br><span class="line">        <span class="keyword">var</span> _add__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(</span><br><span class="line">            <span class="string">"./src/esmodule/add.js"</span></span><br><span class="line">        );</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"esmodule开始执行"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">document</span>.write(</span><br><span class="line">            <span class="string">"1+1="</span>,</span><br><span class="line">            (<span class="number">0</span>, _add__WEBPACK_IMPORTED_MODULE_0__.add)(<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">        );</span><br><span class="line">    &#125;)();</span><br></pre></td></tr></table></figure><p>可以看到我们是通过 <code>_add__WEBPACK_IMPORTED_MODULE_0__</code> 变量把 <code>./src/esmodule/add.js</code> 的所有方法都拿到，然后再使用 <code>_add__WEBPACK_IMPORTED_MODULE_0__.add</code> 调用具体的方法。</p><p>上边还有一个奇怪的用法 <code>(0, _add__WEBPACK_IMPORTED_MODULE_0__.add)(1, 1)</code> ，通过逗号表达式可以改变 <code>this</code> 指向，参考 <a href="https://stackoverflow.com/questions/32275135/why-does-babel-rewrite-imported-function-call-to-0-fn" target="_blank" rel="noopener">Why does babel rewrite imported function call to (0, fn)(…)?</a>，至于为什么这么用还不清楚，目前不重要先跳过了。</p><p>然后看下整体代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line"><span class="meta">    "use strict"</span>;</span><br><span class="line">    <span class="keyword">var</span> __webpack_modules__ = &#123;</span><br><span class="line">        <span class="string">"./src/esmodule/add.js"</span>: (</span><br><span class="line">            __unused_webpack_module,</span><br><span class="line">            __webpack_exports__,</span><br><span class="line">            __webpack_require__</span><br><span class="line">        ) =&gt; &#123;</span><br><span class="line">            __webpack_require__.r(__webpack_exports__);</span><br><span class="line">            __webpack_require__.d(__webpack_exports__, &#123;</span><br><span class="line">                add: <span class="function"><span class="params">()</span> =&gt;</span> add,</span><br><span class="line">                PI: <span class="function"><span class="params">()</span> =&gt;</span> PI,</span><br><span class="line">                <span class="keyword">default</span>: <span class="function"><span class="params">()</span> =&gt;</span> __WEBPACK_DEFAULT_EXPORT__,</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"add开始引入"</span>);</span><br><span class="line">            <span class="keyword">const</span> add = <span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> a + b;</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="keyword">const</span> PI = <span class="number">3.14</span>;</span><br><span class="line">            <span class="keyword">const</span> test = <span class="number">3</span>;</span><br><span class="line">            <span class="keyword">const</span> __WEBPACK_DEFAULT_EXPORT__ = test;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> __webpack_module_cache__ = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__webpack_require__</span>(<span class="params">moduleId</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> cachedModule = __webpack_module_cache__[moduleId];</span><br><span class="line">        <span class="keyword">if</span> (cachedModule !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> cachedModule.exports;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> <span class="built_in">module</span> = (__webpack_module_cache__[moduleId] = &#123;</span><br><span class="line">            exports: &#123;&#125;,</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        __webpack_modules__[moduleId](</span><br><span class="line">            <span class="built_in">module</span>,</span><br><span class="line">            <span class="built_in">module</span>.exports,</span><br><span class="line">            __webpack_require__</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">module</span>.exports;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    (<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        __webpack_require__.d = <span class="function">(<span class="params">exports, definition</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> definition) &#123;</span><br><span class="line">                <span class="keyword">if</span> (</span><br><span class="line">                    __webpack_require__.o(definition, key) &amp;&amp;</span><br><span class="line">                    !__webpack_require__.o(exports, key)</span><br><span class="line">                ) &#123;</span><br><span class="line">                    <span class="built_in">Object</span>.defineProperty(exports, key, &#123;</span><br><span class="line">                        enumerable: <span class="literal">true</span>,</span><br><span class="line">                        get: definition[key],</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;)();</span><br><span class="line"></span><br><span class="line">    (<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        __webpack_require__.o = <span class="function">(<span class="params">obj, prop</span>) =&gt;</span></span><br><span class="line">            <span class="built_in">Object</span>.prototype.hasOwnProperty.call(obj, prop);</span><br><span class="line">    &#125;)();</span><br><span class="line"></span><br><span class="line">    (<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        __webpack_require__.r = <span class="function">(<span class="params">exports</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">Symbol</span> !== <span class="string">"undefined"</span> &amp;&amp; <span class="built_in">Symbol</span>.toStringTag) &#123;</span><br><span class="line">                <span class="built_in">Object</span>.defineProperty(exports, <span class="built_in">Symbol</span>.toStringTag, &#123;</span><br><span class="line">                    value: <span class="string">"Module"</span>,</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">Object</span>.defineProperty(exports, <span class="string">"__esModule"</span>, &#123;</span><br><span class="line">                value: <span class="literal">true</span>,</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;)();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> __webpack_exports__ = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    (<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        __webpack_require__.r(__webpack_exports__);</span><br><span class="line">        <span class="keyword">var</span> _add__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(</span><br><span class="line">            <span class="string">"./src/esmodule/add.js"</span></span><br><span class="line">        );</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"commonjs开始执行"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">document</span>.write(</span><br><span class="line">            <span class="string">"1+1="</span>,</span><br><span class="line">            (<span class="number">0</span>, _add__WEBPACK_IMPORTED_MODULE_0__.add)(<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">        );</span><br><span class="line">    &#125;)();</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h1 id="commonjs-和-esmodule-的不同"><a href="#commonjs-和-esmodule-的不同" class="headerlink" title="commonjs 和 esmodule 的不同"></a>commonjs 和 esmodule 的不同</h1><p>两个的打包产物对比：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// commonjs</span></span><br><span class="line"><span class="keyword">var</span> __webpack_modules__ = &#123;</span><br><span class="line">        <span class="string">"./src/commonjs/add.js"</span>: <span class="function">(<span class="params"><span class="built_in">module</span>, exports</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"add开始引入"</span>);</span><br><span class="line">            <span class="built_in">module</span>.exports.add = <span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> a + b;</span><br><span class="line">            &#125;;</span><br><span class="line">            exports.PI = <span class="number">3.14</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//esmodule</span></span><br><span class="line"><span class="keyword">var</span> __webpack_modules__ = &#123;</span><br><span class="line">        <span class="string">"./src/esmodule/add.js"</span>: (</span><br><span class="line">            __unused_webpack_module,</span><br><span class="line">            __webpack_exports__,</span><br><span class="line">            __webpack_require__</span><br><span class="line">        ) =&gt; &#123;</span><br><span class="line">            __webpack_require__.r(__webpack_exports__);<span class="comment">// 标识该模块是 esmodule</span></span><br><span class="line">            __webpack_require__.d(__webpack_exports__, &#123;<span class="comment">// 将该模块里的属性、方法挂到 __webpack_exports__ 上</span></span><br><span class="line">                add: <span class="function"><span class="params">()</span> =&gt;</span> add,</span><br><span class="line">                PI: <span class="function"><span class="params">()</span> =&gt;</span> PI,</span><br><span class="line">                <span class="keyword">default</span>: <span class="function"><span class="params">()</span> =&gt;</span> __WEBPACK_DEFAULT_EXPORT__,</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"add开始引入"</span>);</span><br><span class="line">            <span class="keyword">const</span> add = <span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> a + b;</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="keyword">const</span> PI = <span class="number">3.14</span>;</span><br><span class="line">            <span class="keyword">const</span> test = <span class="number">3</span>;</span><br><span class="line">            <span class="keyword">const</span> __WEBPACK_DEFAULT_EXPORT__ = test;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure><p>一个最大的区别就是 <code>commonjs</code> 导出的就是普通的值，一旦导入就不会改变了。而 <code>esmodule</code> 导出的值通过函数包装了一层，因此是动态的，导入之后再次使用可能会变化。</p><p>举个例子，对于 <code>esmodule</code> </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/esmodule/add.js</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"add开始引入"</span>);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> PI = <span class="number">3.14</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> add = <span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">    PI = <span class="number">6</span>;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> test = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> test;</span><br><span class="line"></span><br><span class="line"><span class="comment">// src/esmodule/index.js</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"esmodule开始执行"</span>);</span><br><span class="line"><span class="keyword">import</span> &#123; add, PI &#125; <span class="keyword">from</span> <span class="string">"./add"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(PI, <span class="string">"1+1="</span>, add(<span class="number">1</span>, <span class="number">1</span>));</span><br><span class="line"><span class="built_in">console</span>.log(PI, <span class="string">"1+1="</span>, add(<span class="number">1</span>, <span class="number">1</span>));</span><br></pre></td></tr></table></figure><p>如果只看 <code>src/esmodule/index.js</code> 的代码，我们并没有改变 <code>PI</code> 的值，但执行会发现 <code>add</code> 函数执行后 <code>PI</code> 的值就发生了改变：</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220503114207675.png" alt="image-20220503114207675"></p><p>对于原始值， <code>commonjs</code> 就做不到上边的事情了，一般情况下也不要这样搞，以防出现未知 <code>bug</code> 。</p><p>此外，<code>esmodule</code> 在挂载属性的时候只定义了 <code>get</code> 。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">__webpack_require__.d = <span class="function">(<span class="params">exports, definition</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> definition) &#123;</span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">      __webpack_require__.o(definition, key) &amp;&amp;</span><br><span class="line">      !__webpack_require__.o(exports, key)</span><br><span class="line">    ) &#123;</span><br><span class="line">      <span class="built_in">Object</span>.defineProperty(exports, key, &#123;</span><br><span class="line">        enumerable: <span class="literal">true</span>,</span><br><span class="line">        get: definition[key],</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>所以我们如果在 <code>esmodule</code> 模块中的去修改导入的值，会直接抛错。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">"esmodule开始执行"</span>);</span><br><span class="line"><span class="keyword">import</span> &#123; add, PI &#125; <span class="keyword">from</span> <span class="string">"./add"</span>;</span><br><span class="line">PI = <span class="number">3</span>;</span><br><span class="line"><span class="built_in">console</span>.log(PI, <span class="string">"1+1="</span>, add(<span class="number">1</span>, <span class="number">1</span>));</span><br></pre></td></tr></table></figure><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220503115321218.png" alt="image-20220503115321218"></p><p>在 <code>commonjs</code> 中就无所谓了，但同样也不要这样搞，以防出现未知 <code>bug</code> 。</p><h1 id="总"><a href="#总" class="headerlink" title="总"></a>总</h1><p>简单对比了下 <code>commonjs</code> 和 <code>esmodule</code> 模块的产物，其中 <code>commonjs</code> 比较简单，就是普通的导出对象和解构对象。但对于 <code>esmodule</code> 的话，导出的每一个属性会映射到一个函数，因此值是可以动态改变的。</p><p>此外 <code>require</code> 会按我们代码中的顺序执行，但 <code>import</code> 会被提升到代码最前边首先执行。</p><p>还会继续对比一下两者的动态导入、混合导入，本来想一篇文章总结完的，但有点长了，那就下篇继续吧，哈哈。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这篇文章不涉及 &lt;code&gt;Webpack&lt;/code&gt; 的原理，只是观察下 &lt;code&gt;Webpack&lt;/code&gt; 对 &lt;code&gt;commonjs&lt;/code&gt; 和 &lt;code&gt;esmodule&lt;/code&gt; 模块打包后的产物，读完后会对模块系统有个更深的了解。&lt;/p
      
    
    </summary>
    
    
      <category term="前端" scheme="https://windliang.wang/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="Webpack" scheme="https://windliang.wang/tags/Webpack/"/>
    
      <category term="commonjs" scheme="https://windliang.wang/tags/commonjs/"/>
    
      <category term="esmodule" scheme="https://windliang.wang/tags/esmodule/"/>
    
  </entry>
  
  <entry>
    <title>VuePress博客优化访问速度</title>
    <link href="https://windliang.wang/2022/04/27/Vuepress%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96%E8%AE%BF%E9%97%AE%E9%80%9F%E5%BA%A6/"/>
    <id>https://windliang.wang/2022/04/27/Vuepress%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96%E8%AE%BF%E9%97%AE%E9%80%9F%E5%BA%A6/</id>
    <published>2022-04-27T01:00:45.000Z</published>
    <updated>2022-11-17T00:01:23.932Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>最近用 <a href="https://vuepress.vuejs.org/" target="_blank" rel="noopener">Vupress</a> 搭了两个静态的网站，设计模式的 <a href="https://vuepress.vuejs.org/" target="_blank" rel="noopener">pattern.windliang.wang</a> 和 <code>Vue</code> 源码的 <a href="https://vue.windliang.wang/" target="_blank" rel="noopener">vue.windliang.wang</a>，但会发现有时候打开网站会特别特别慢，终止请求才会加载出来。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comvue.gif" alt="vue"></p><p>从搭博客到现在一个多月了，实在不能忍受，这篇文章就来解决下这个问题。</p><h1 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h1><p>让我们看一下网络请求：</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220427091248116.png" alt="image-20220427091248116"></p><p>会发现 <code>all.min.css</code> 耗时近 <code>10s</code>，另外两个字体文件甚至到了 <code>20</code> 多秒，看一下具体请求：</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220427090411397.png" alt="image-20220427090411397"></p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220427091304292.png" alt="image-20220427091304292"></p><p><code>css</code> 和 <code>woff</code> 的共同点都是从 <code>jsdelivr</code> 的 <code>cdn</code> 拿资源，理论上 <code>cdn</code> 是根据地区分发来加速的，这怎么还减速了呢？</p><p>网上搜到了 <code>2021.12.20</code> 官方 <a href="https://github.com/jsdelivr/jsdelivr/issues/18348#issuecomment-997777996" target="_blank" rel="noopener">issues</a> 的一个回应：</p><blockquote><p>Unfortunately today jsDelivr unexpectedly lost its ICP license in China. As effect the regional CDN disabled our account.</p><p>This resulted in the extended outage we had in mainland China and Taiwan.</p><p>Other regions were unaffected.</p><p>We understand how difficult it was for our users to experience this unique situation.</p><p>From now on all Chinese traffic will be served by “near China” locations provided by global CDN providers.</p><p>This will have the additional benefit of better failover logic in the future.</p></blockquote><p>大意就是中国的 <code>CDN</code> 没了，解析的话只能走中国附近国家地区的 <code>CDN</code>，这就是变慢的原因了。</p><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><h2 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h2><p>把 <code>css</code> 文件直接丢到自己的云服务器上，然后修改原来的引用路径。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220427094509671.png" alt="image-20220427094509671"></p><p>上边的地址改成本地路径即可。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220427094533495.png" alt="image-20220427094533495"></p><p>但我们如果进入 <code>fontawesome.min.css</code> 去看会发现，这里面又引了好多文件。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220427094748497.png" alt="image-20220427094748497"></p><p>其中就有我们的字体文件。</p><p>如果为了保证完整使用，还要把这些文件也搞下来。</p><p>但实际测了下，替换完 <code>css</code> 后，这些 <code>url</code> 不处理对网站也没看出什么影响。</p><h2 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h2><p>换个 <code>cdn</code> ，找到了 <a href="https://staticfile.org/" target="_blank" rel="noopener">staticfile</a>，由七牛云和掘金提供。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220427095023458.png" alt="image-20220427095023458"></p><h1 id="替换"><a href="#替换" class="headerlink" title="替换"></a>替换</h1><p>我们只需要做一件事情，将 <code>VuePress</code> 打包出来的 <code>.css</code> 文件中  <code>jsdelivr</code>  的路径替换为 <code>staticfile</code>。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220428065601633.png" alt="image-20220428065601633"></p><p>即，<code>https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@5.14.0/css/all.min.css</code> 换为 <code>https://cdn.staticfile.org/font-awesome/5.14.0/css/all.min.css</code>。</p><p>我们可以用 <code>sed</code> 命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i  <span class="string">'s/https.*\/all\.min\.css/https:\/\/cdn\.staticfile\.org\/font-awesome\/5\.14\.0\/css\/all\.min\.css/'</span> ./docs/.vuepress/dist/assets/css/*.css</span><br></pre></td></tr></table></figure><p>其中，<code>-i</code> 表示直接替换原文件，接下来的 <code>&#39;s/XXXXX/YYYYY/&#39;</code>  ，<code>s</code> 表示进行替换，紧跟两个正则表达式 <code>XXXXX</code> 和 <code>YYYYY</code>。</p><p><code>XXXXX</code> 我们直接写成 <code>https.*\/all\.min\.css</code>，匹配原来的 <code>url</code>。</p><p><code>YYYYY</code> 就是我们替换后的字符串，其中 <code>url</code> 中的 <code>/</code> 需要加 <code>\</code> 进行转义，就变成了 <code>https:\/\/cdn\.staticfile\.org\/font-awesome\/5\.14\.0\/css\/all\.min\.css</code>。</p><p>最后跟的是文件的名字，因为每次生成的 <code>css</code> 文件名 <code>0.styles.cf4c95b7.css</code> 可能会变化，又因为 <code>css</code> 文件夹下只有一个文件，所以我们直接用 <code>*.css</code> 进行通配。最后就是 <code>./docs/.vuepress/dist/assets/css/*.css</code> 了。</p><p>那么把这行命令加到哪里呢？</p><p>之前我们配置了 <code>github</code> 的 <code>webhook</code> ，当执行 <code>push</code> 代码的时候，我们服务器会自动执行下边的代码，详见 <a href="https://zhuanlan.zhihu.com/p/108720935" target="_blank" rel="noopener">云服务器搭建全过程</a>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span></span><br><span class="line">cd ../vue2</span><br><span class="line">git pull</span><br><span class="line">npm i</span><br><span class="line">npm run build</span><br></pre></td></tr></table></figure><p>我们只需要在 <code>build</code> 之后进行替换即可。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span></span><br><span class="line">cd ../vue2</span><br><span class="line">git pull</span><br><span class="line">npm i</span><br><span class="line">npm run build</span><br><span class="line">sed -i  's/https.*\/all\.min\.css/https:\/\/cdn\.staticfile\.org\/font-awesome\/5\.14\.0\/css\/all\.min\.css/' ./docs/.vuepress/dist/assets/css/*.css</span><br></pre></td></tr></table></figure><h1 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h1><p>让我们再来访问一下网站。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comvue2.gif" alt="vue2"></p><p>成功实现了秒开，让我们看下之前 <code>css</code> 和 <code>woff</code> 的加载时间：</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220428070818711.png" alt="image-20220428070818711"></p><p>只能说快的飞起！</p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>最近如果发现一些常用的网站打开变慢了，比如 <a href="https://echarts.apache.org/zh/option.html#title" target="_blank" rel="noopener">echarts</a> ，一个可能的原因就是它们使用了 <code>jsdelivr</code> 的 <code>cdn</code>，只能让 <code>*.jsdelivr.net</code> 去走代理了。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220427105232197.png" alt="image-20220427105232197"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;最近用 &lt;a href=&quot;https://vuepress.vuejs.org/&quot; target=&quot;_blank&quot; rel=&quot;noopene
      
    
    </summary>
    
    
      <category term="前端" scheme="https://windliang.wang/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="博客" scheme="https://windliang.wang/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>Vue2剥丝抽茧-响应式系统完善</title>
    <link href="https://windliang.wang/2022/04/03/Vue2%E5%89%A5%E4%B8%9D%E6%8A%BD%E8%8C%A7-%E5%93%8D%E5%BA%94%E5%BC%8F%E7%B3%BB%E7%BB%9F%E5%AE%8C%E5%96%84/"/>
    <id>https://windliang.wang/2022/04/03/Vue2%E5%89%A5%E4%B8%9D%E6%8A%BD%E8%8C%A7-%E5%93%8D%E5%BA%94%E5%BC%8F%E7%B3%BB%E7%BB%9F%E5%AE%8C%E5%96%84/</id>
    <published>2022-04-03T03:56:32.000Z</published>
    <updated>2022-11-17T00:01:23.932Z</updated>
    
    <content type="html"><![CDATA[<p>接 <a href="https://windliang.wang/2022/03/27/Vue2%E5%89%A5%E4%B8%9D%E6%8A%BD%E8%8C%A7-%E5%93%8D%E5%BA%94%E5%BC%8F%E7%B3%BB%E7%BB%9F/">Vue2剥丝抽茧-响应式系统</a>、<a href="https://windliang.wang/2022/03/31/Vue2%E5%89%A5%E4%B8%9D%E6%8A%BD%E8%8C%A7-%E5%93%8D%E5%BA%94%E5%BC%8F%E7%B3%BB%E7%BB%9F%E4%B9%8B%E5%88%86%E6%94%AF%E5%88%87%E6%8D%A2/">Vue2剥丝抽茧-响应式系统之分支切换</a>，<a href="https://windliang.wang/2022/04/02/Vue2%E5%89%A5%E4%B8%9D%E6%8A%BD%E8%8C%A7-%E5%93%8D%E5%BA%94%E5%BC%8F%E7%B3%BB%E7%BB%9F%E4%B9%8B%E5%B5%8C%E5%A5%97/">Vue2剥丝抽茧-响应式系统之嵌套</a> 还没有看过的同学需要看一下。</p><p>这篇文章主要修之前代码存在的一个问题，废话不多说，上代码！</p><h1 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; observe &#125; <span class="keyword">from</span> <span class="string">"./reactive"</span>;</span><br><span class="line"><span class="keyword">import</span> Watcher <span class="keyword">from</span> <span class="string">"./watcher"</span>;</span><br><span class="line"><span class="keyword">const</span> data = &#123;</span><br><span class="line">    text: <span class="string">"hello, world"</span>,</span><br><span class="line">&#125;;</span><br><span class="line">observe(data);</span><br><span class="line"><span class="keyword">let</span> show = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">const</span> updateComponent = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (show) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(data.text);</span><br><span class="line">        show = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Watcher(updateComponent);</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Watcher(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">"依赖"</span>, data.text));</span><br><span class="line"></span><br><span class="line">data.text = <span class="string">"123"</span>;</span><br></pre></td></tr></table></figure><p>先可以 <code>1</code> 分钟思考一下会输出什么。</p><ul><li><p><code>new Watcher(updateParentComponent);</code> </p><p>执行 <code>updateParentComponent</code> 函数，输出 <code>hello, world</code>，并且 <code>text</code> 的  <code>Dep</code>    收集该 <code>Watcher</code> 。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220403121307975.png" alt="image-20220403121307975"></p></li><li><p><code>new Watcher(() =&gt; console.log(&quot;依赖&quot;, data.text));</code></p><p>执行匿名函数，输出 <code>依赖 hello, world</code> ，并且 <code>text</code> 的  <code>Dep</code> 收集该 <code>Watcher</code> 。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220403121807211.png" alt="image-20220403121807211"></p></li><li><p><code>data.text = &quot;123&quot;;</code> 。</p><p>触发 <code>text</code> 的 <code>set</code>，依次执行 <code>Dep</code> 中的 <code>Watcher</code> 。</p><p>先执行 <code>updateParentComponent</code> 。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> updateComponent = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (show) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(data.text);</span><br><span class="line">        show = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>由于之前已经执行过一次了，此时 <code>show</code> 就是 <code>false</code> 了，什么都不会输出。</p><p>再执行 <code>() =&gt; console.log(&quot;依赖&quot;, data.text)</code> ，输出 <code>依赖 hello, world</code>。</p></li></ul><p>是的，上边是我们所期望的样子，但事实上输出结果如下：</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220403122245290.png" alt="image-20220403122245290"></p><p>出错代码 <code>dep.js:37:26</code> 如下：</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220403122317871.png" alt="image-20220403122317871"></p><p>调用 <code>update</code> 的时候是，遍历过程中 <code>subs[i]</code> 变成了 <code>undefined</code> ，导致了报错。</p><p>需要回忆下 <a href="https://windliang.wang/2022/03/31/Vue2%E5%89%A5%E4%B8%9D%E6%8A%BD%E8%8C%A7-%E5%93%8D%E5%BA%94%E5%BC%8F%E7%B3%BB%E7%BB%9F%E4%B9%8B%E5%88%86%E6%94%AF%E5%88%87%E6%8D%A2/">Vue2剥丝抽茧-响应式系统之分支切换</a> 这篇文章里我们做了什么。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220331091857522.png" alt="image-20220331091857522"></p><p>如果 <code>Watcher</code> 中的函数不再依赖当前属性，我们就把当前 <code>Watcher</code> 从该属性的 <code>Dep</code> 中移除。</p><p>而移除其实就是调用了数组的 <code>splice</code> 方法，直接将 <code>Dep</code> 中的 <code>subs</code> 数组元素进行删除。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">removeSub(sub) &#123;</span><br><span class="line">  remove(<span class="keyword">this</span>.subs, sub);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">remove</span>(<span class="params">arr, item</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (arr.length) &#123;</span><br><span class="line">    <span class="keyword">const</span> index = arr.indexOf(item);</span><br><span class="line">    <span class="keyword">if</span> (index &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> arr.splice(index, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而此时我们正在遍历 <code>subs</code> 数组：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">notify() &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, l = <span class="keyword">this</span>.subs.length; i &lt; l; i++) &#123;</span><br><span class="line">    <span class="keyword">this</span>.subs[i].update();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对应上边的例子，原本 <code>subs</code> 数组两个 <code>Watcher</code>，第一个 <code>Watcher</code> 执行的时候没有访问 <code>data.text</code> 属性，就要把这一个 <code>Watcher</code> 删除了，第二个就移动到第一个的位置了，此时 <code>for</code> 循环中访问第二个位置的 <code>Watcher</code> 因为被移到前边自然就报错了。</p><p>修改起来也很容易，我们只需要在循环前，将原有的 <code>subs</code> 数组保存给一个新的数组即可。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">notify() &#123;</span><br><span class="line">  <span class="comment">// stabilize the subscriber list first</span></span><br><span class="line">  <span class="keyword">const</span> subs = <span class="keyword">this</span>.subs.slice();</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, l = subs.length; i &lt; l; i++) &#123;</span><br><span class="line">    subs[i].update();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="总"><a href="#总" class="headerlink" title="总"></a>总</h1><p>这篇文章比较简单，主要就是循环通知 <code>Watcher</code> 之前把列表另存起来，防止遍历过程中被修改。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;接 &lt;a href=&quot;https://windliang.wang/2022/03/27/Vue2%E5%89%A5%E4%B8%9D%E6%8A%BD%E8%8C%A7-%E5%93%8D%E5%BA%94%E5%BC%8F%E7%B3%BB%E7%BB%9F/&quot;&gt;Vue
      
    
    </summary>
    
    
      <category term="前端" scheme="https://windliang.wang/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="vue2" scheme="https://windliang.wang/tags/vue2/"/>
    
  </entry>
  
  <entry>
    <title>Vue2剥丝抽茧-响应式系统之嵌套</title>
    <link href="https://windliang.wang/2022/04/02/Vue2%E5%89%A5%E4%B8%9D%E6%8A%BD%E8%8C%A7-%E5%93%8D%E5%BA%94%E5%BC%8F%E7%B3%BB%E7%BB%9F%E4%B9%8B%E5%B5%8C%E5%A5%97/"/>
    <id>https://windliang.wang/2022/04/02/Vue2%E5%89%A5%E4%B8%9D%E6%8A%BD%E8%8C%A7-%E5%93%8D%E5%BA%94%E5%BC%8F%E7%B3%BB%E7%BB%9F%E4%B9%8B%E5%B5%8C%E5%A5%97/</id>
    <published>2022-04-02T00:12:33.000Z</published>
    <updated>2022-11-17T00:01:23.932Z</updated>
    
    <content type="html"><![CDATA[<p>接 <a href="https://windliang.wang/2022/03/27/Vue2%E5%89%A5%E4%B8%9D%E6%8A%BD%E8%8C%A7-%E5%93%8D%E5%BA%94%E5%BC%8F%E7%B3%BB%E7%BB%9F/">Vue2剥丝抽茧-响应式系统</a>、<a href="https://windliang.wang/2022/03/31/Vue2%E5%89%A5%E4%B8%9D%E6%8A%BD%E8%8C%A7-%E5%93%8D%E5%BA%94%E5%BC%8F%E7%B3%BB%E7%BB%9F%E4%B9%8B%E5%88%86%E6%94%AF%E5%88%87%E6%8D%A2/">Vue2剥丝抽茧-响应式系统之分支切换</a>，还没有看过的同学需要看一下。</p><h1 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h1><p>在 <code>Vue</code> 开发中肯定存在组件嵌套组件的情况，类似于下边的样子。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- parent-component --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">my-component</span> <span class="attr">:text</span>=<span class="string">"inner"</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br><span class="line">  &#123;&#123; text &#125;&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- my-component--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; text &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>回到我们之前的响应式系统，模拟一下上边的情况：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; observe &#125; <span class="keyword">from</span> <span class="string">"./reactive"</span>;</span><br><span class="line"><span class="keyword">import</span> Watcher <span class="keyword">from</span> <span class="string">"./watcher"</span>;</span><br><span class="line"><span class="keyword">const</span> data = &#123;</span><br><span class="line">    text: <span class="string">"hello, world"</span>,</span><br><span class="line">    inner: <span class="string">"内部"</span>,</span><br><span class="line">&#125;;</span><br><span class="line">observe(data);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> updateMyComponent = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"子组件收到:"</span>, data.inner);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> updateParentComponent = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">new</span> Watcher(updateMyComponent);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"父组件收到："</span>, data.text);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Watcher(updateParentComponent);</span><br><span class="line"></span><br><span class="line">data.text = <span class="string">"hello, liang"</span>;</span><br></pre></td></tr></table></figure><p>可以先 <code>1</code> 分钟考虑一下上边输出什么？ </p><p>首先回忆一下 <code>new Watcher</code> 会做什么操作。</p><p>第一步是保存当前函数，然后执行当前函数前将全局的 <code>Dep.target</code> 赋值为当前 <code>Watcher</code> 对象。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220402083845476.png" alt="image-20220402083845476"></p><p>接下来执行 <code>getter</code> 函数的时候，如果读取了相应的属性就会触发 <code>get</code> ，从而将当前 <code>Watcher</code> 收集到该属性的  <code>Dep</code> 中。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220402083943606.png" alt="image-20220402083943606"></p><h1 id="执行过程"><a href="#执行过程" class="headerlink" title="执行过程"></a>执行过程</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; observe &#125; <span class="keyword">from</span> <span class="string">"./reactive"</span>;</span><br><span class="line"><span class="keyword">import</span> Watcher <span class="keyword">from</span> <span class="string">"./watcher"</span>;</span><br><span class="line"><span class="keyword">const</span> data = &#123;</span><br><span class="line">    text: <span class="string">"hello, world"</span>,</span><br><span class="line">    inner: <span class="string">"内部"</span>,</span><br><span class="line">&#125;;</span><br><span class="line">observe(data);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> updateMyComponent = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"子组件收到:"</span>, data.inner);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> updateParentComponent = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">new</span> Watcher(updateMyComponent);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"父组件收到："</span>, data.text);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Watcher(updateParentComponent);</span><br><span class="line"></span><br><span class="line">data.text = <span class="string">"hello, liang"</span>;</span><br></pre></td></tr></table></figure><p>我们再一步一步理清一下：</p><ul><li><p><code>new Watcher(updateParentComponent);</code></p><p>将 <code>Dep.target</code> 赋值为保存了 <code>updateParentComponent</code> 函数的 <code>Watcher</code> 。</p><p>接下来执行  <code>updateParentComponent</code> 函数。</p></li><li><p><code>new Watcher(updateMyComponent);</code></p><p>将 <code>Dep.target</code> 赋值为保存了 <code>updateMyComponent</code> 函数的 <code>Watcher</code> 。</p><p>接下来执行  <code>updateMyComponent</code> 函数。</p></li><li><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> updateMyComponent = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"子组件收到:"</span>, data.inner);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取了 inner 变量。</span></span><br><span class="line"><span class="comment">// data.inner 的 Dep 收集当前 Watcher（保存了 `updateMyComponent` 函数）</span></span><br></pre></td></tr></table></figure></li><li><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> updateParentComponent = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">new</span> Watcher(updateMyComponent);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"父组件收到："</span>, data.text);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 读取了 text 变量。</span></span><br><span class="line"><span class="comment">// data.text 的 Dep 收集当前 Watcher （保存了 `updateMyComponent` 函数）</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p><code>data.text = &quot;hello, liang&quot;;</code></p><p>触发 <code>text</code> 的 <code>set</code> 函数，执行它依赖的 <code>Watcher</code> ，而此时是 <code>updateMyComponent</code> 函数。</p></li></ul><p>所以上边代码最终输出的结果是：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">子组件收到: 内部  <span class="comment">// new Watcher(updateMyComponent); 时候输出</span></span><br><span class="line">父组件收到： hello, world <span class="comment">// new Watcher(updateParentComponent); 时候输出</span></span><br><span class="line">子组件收到: 内部 <span class="comment">// data.text = "hello, liang"; 输出</span></span><br></pre></td></tr></table></figure><p>然而子组件并不依赖 <code>data.text</code>，依赖 <code>data.text</code> 的父组件反而没有执行。</p><h1 id="修复"><a href="#修复" class="headerlink" title="修复"></a>修复</h1><p>上边的问题出在我们保存当前正在执行 <code>Watcher</code> 时候使用的是单个变量 <code>Dep.target = null; // 静态变量，全局唯一</code>。</p><p>回忆一下学习 <code>C</code>  语言或者汇编语言的时候对函数参数的处理：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params">p</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params">p</span>) </span>&#123;</span><br><span class="line">    b(<span class="string">"child"</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a(<span class="string">"parent"</span>);</span><br></pre></td></tr></table></figure><p>当函数发生嵌套调用的时候，执行 <code>a</code> 函数的时候我们会先将参数压入栈中，然后执行 <code>b</code> 函数，同样将参数压入栈中，<code>b</code> 函数执行完毕就将参数出栈。此时回到 <code>a</code> 函数就能正确取到 <code>p</code> 参数的值了。</p><p>对应于 <code>Watcher</code> 的收集，我们同样可以使用一个栈来保存，执行函数前将 <code>Watcher</code> 压入栈，执行函数完毕后将 <code>Watcher</code> 弹出栈即可。其中，<code>Dep.target</code> 始终指向栈顶 <code>Watcher</code> ，代表当前正在执行的函数。</p><p>回到 <code>Dep</code> 代码中，我们提供一个压栈和出栈的方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; remove &#125; <span class="keyword">from</span> <span class="string">"./util"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> uid = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Dep</span> </span>&#123;</span><br><span class="line">    ... 省略</span><br><span class="line">&#125;</span><br><span class="line">Dep.target = <span class="literal">null</span>; <span class="comment">// 静态变量，全局唯一</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// The current target watcher being evaluated.</span></span><br><span class="line"><span class="comment">// This is globally unique because only one watcher</span></span><br><span class="line"><span class="comment">// can be evaluated at a time.</span></span><br><span class="line"><span class="keyword">const</span> targetStack = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">pushTarget</span>(<span class="params">target</span>) </span>&#123;</span><br><span class="line">    targetStack.push(target);</span><br><span class="line">    Dep.target = target;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">popTarget</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    targetStack.pop();</span><br><span class="line">    Dep.target = targetStack[targetStack.length - <span class="number">1</span>]; <span class="comment">// 赋值为栈顶元素</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后 <code>Watcher</code> 中，执行函数之前进行入栈，执行后进行出栈。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; pushTarget, popTarget &#125; <span class="keyword">from</span> <span class="string">"./dep"</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Watcher</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(Fn) &#123;</span><br><span class="line">        <span class="keyword">this</span>.getter = Fn;</span><br><span class="line">        <span class="keyword">this</span>.depIds = <span class="keyword">new</span> <span class="built_in">Set</span>(); <span class="comment">// 拥有 has 函数可以判断是否存在某个 id</span></span><br><span class="line">        <span class="keyword">this</span>.deps = [];</span><br><span class="line">        <span class="keyword">this</span>.newDeps = []; <span class="comment">// 记录新一次的依赖</span></span><br><span class="line">        <span class="keyword">this</span>.newDepIds = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">        <span class="keyword">this</span>.get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Evaluate the getter, and re-collect dependencies.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    get() &#123;</span><br><span class="line">      <span class="comment">/************修改的地方*******************************/</span></span><br><span class="line">        pushTarget(<span class="keyword">this</span>); <span class="comment">// 保存包装了当前正在执行的函数的 Watcher</span></span><br><span class="line">       <span class="comment">/*******************************************/</span></span><br><span class="line">        <span class="keyword">let</span> value;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            value = <span class="keyword">this</span>.getter.call();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">          <span class="comment">/************修改的地方*******************************/</span></span><br><span class="line">            popTarget();</span><br><span class="line">          <span class="comment">/*******************************************/</span></span><br><span class="line">            <span class="keyword">this</span>.cleanupDeps();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">   ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>回到开头的场景，再来执行一下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; observe &#125; <span class="keyword">from</span> <span class="string">"./reactive"</span>;</span><br><span class="line"><span class="keyword">import</span> Watcher <span class="keyword">from</span> <span class="string">"./watcher"</span>;</span><br><span class="line"><span class="keyword">const</span> data = &#123;</span><br><span class="line">    text: <span class="string">"hello, world"</span>,</span><br><span class="line">    inner: <span class="string">"内部"</span>,</span><br><span class="line">&#125;;</span><br><span class="line">observe(data);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> updateMyComponent = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"子组件收到:"</span>, data.inner);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> updateParentComponent = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">new</span> Watcher(updateMyComponent);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"父组件收到："</span>, data.text);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Watcher(updateParentComponent);</span><br><span class="line"></span><br><span class="line">data.text = <span class="string">"hello, liang"</span>;</span><br></pre></td></tr></table></figure><p>执行 <code>new Watcher(updateParentComponent);</code> 的时候将 <code>Watcher</code> 入栈。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220402093847759.png" alt="image-20220402093847759" style="width:50%;"></p><p>进入 <code>updateParentComponent</code> 函数，执行 <code>new Watcher(updateMyComponent);</code> 的时候将 <code>Watcher</code> 入栈。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220402093937896.png" alt="image-20220402093937896" style="width:50%;"></p><p>执行 <code>updateMyComponent</code> 函数，<code>data.inner</code> 收集当前 <code>Dep.target</code> ，执行完毕后 <code>Watcher</code> 出栈。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220402093847759.png" alt="image-20220402093847759" style="width:50%;"></p><p>继续执行 <code>updateParentComponent</code> 函数，<code>data.text</code> 收集当前 <code>Dep.target</code> 。</p><p>此时依赖就变得正常了，<code>data.text</code> 会触发 <code>updateParentComponent</code> 函数，从而输出如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">子组件收到: 内部</span><br><span class="line">父组件收到： hello, world</span><br><span class="line">子组件收到: 内部</span><br><span class="line">父组件收到： hello, liang</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>今天这个相对好理解一些，通过栈解决了嵌套调用的情况。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;接 &lt;a href=&quot;https://windliang.wang/2022/03/27/Vue2%E5%89%A5%E4%B8%9D%E6%8A%BD%E8%8C%A7-%E5%93%8D%E5%BA%94%E5%BC%8F%E7%B3%BB%E7%BB%9F/&quot;&gt;Vue
      
    
    </summary>
    
    
      <category term="前端" scheme="https://windliang.wang/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="vue2" scheme="https://windliang.wang/tags/vue2/"/>
    
  </entry>
  
  <entry>
    <title>Vue2剥丝抽茧-响应式系统之分支切换</title>
    <link href="https://windliang.wang/2022/03/31/Vue2%E5%89%A5%E4%B8%9D%E6%8A%BD%E8%8C%A7-%E5%93%8D%E5%BA%94%E5%BC%8F%E7%B3%BB%E7%BB%9F%E4%B9%8B%E5%88%86%E6%94%AF%E5%88%87%E6%8D%A2/"/>
    <id>https://windliang.wang/2022/03/31/Vue2%E5%89%A5%E4%B8%9D%E6%8A%BD%E8%8C%A7-%E5%93%8D%E5%BA%94%E5%BC%8F%E7%B3%BB%E7%BB%9F%E4%B9%8B%E5%88%86%E6%94%AF%E5%88%87%E6%8D%A2/</id>
    <published>2022-03-30T23:25:57.000Z</published>
    <updated>2022-11-17T00:01:23.932Z</updated>
    
    <content type="html"><![CDATA[<p>接上篇：<a href="https://windliang.wang/2022/03/27/Vue2%E5%89%A5%E4%B8%9D%E6%8A%BD%E8%8C%A7-%E5%93%8D%E5%BA%94%E5%BC%8F%E7%B3%BB%E7%BB%9F/">Vue2剥丝抽茧-响应式系统</a> ，没看的同学需要先看一下。</p><h1 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h1><p>我们考虑一下下边的代码会输出什么。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; observe &#125; <span class="keyword">from</span> <span class="string">"./reactive"</span>;</span><br><span class="line"><span class="keyword">import</span> Watcher <span class="keyword">from</span> <span class="string">"./watcher"</span>;</span><br><span class="line"><span class="keyword">const</span> data = &#123;</span><br><span class="line">    text: <span class="string">"hello, world"</span>,</span><br><span class="line">    ok: <span class="literal">true</span>,</span><br><span class="line">&#125;;</span><br><span class="line">observe(data);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> updateComponent = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"收到"</span>, data.ok ? data.text : <span class="string">"not"</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Watcher(updateComponent); <span class="comment">// updateComponent 执行一次函数，输出 hello, world</span></span><br><span class="line"></span><br><span class="line">data.ok = <span class="literal">false</span>; <span class="comment">// updateComponent 执行一次函数，输出 not</span></span><br><span class="line"></span><br><span class="line">data.text = <span class="string">"hello, liang"</span>; <span class="comment">// updateComponent 会执行吗？</span></span><br></pre></td></tr></table></figure><p>我们来一步一步理清：</p><h2 id="observer-data"><a href="#observer-data" class="headerlink" title="observer(data)"></a><code>observer(data)</code></h2><p>拦截了 <code>data</code> 中 <code>text</code> 和 <code>ok</code> 的 <code>get、set</code>，并且各自初始化了一个 <code>Dep</code> 实例，用来保存依赖它们的 <code>Watcher</code> 对象。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220331073954801.png" alt="image-20220331073954801"></p><h2 id="new-Watcher-updateComponent"><a href="#new-Watcher-updateComponent" class="headerlink" title="new Watcher(updateComponent);"></a><code>new Watcher(updateComponent);</code></h2><p>这一步会执行 <code>updateComponent</code> 函数，执行过程中用到的所有对象属性，会将 <code>Watcher</code> 收集到相应对象属性中的<code>Dep</code> 中。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220331074904131.png" alt="image-20220331074904131"></p><p>当然这里的 <code>Watcher</code> 其实是同一个，所以用了指向的箭头。</p><h2 id="data-ok-false"><a href="#data-ok-false" class="headerlink" title="data.ok = false;"></a><code>data.ok = false;</code></h2><p>这一步会触发 <code>set</code> ，从而执行 <code>Dep</code> 中所有的 <code>Watcher</code> ，此时就会执行一次 <code>updateComponent</code> 。</p><p>执行 <code>updateComponent</code> 就会重新读取 <code>data</code> 中的属性，触发 <code>get</code>，然后继续收集 <code>Watcher</code> 。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220331080258402.png" alt="image-20220331080258402"></p><p>重新执行  <code>updateComponent</code> 函数 的时候：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> updateComponent = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"收到"</span>, data.ok ? data.text : <span class="string">"not"</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>因为 <code>data.ok</code> 的值变为 <code>false</code> ，所以就不会触发 <code>data.text</code> 的 <code>get</code> ，<code>text</code> 的 <code>Dep</code> 就不会变化了。</p><p>而 <code>data.ok</code> 会继续执行，触发 <code>get</code> 收集 <code>Watcher</code> ，但由于我们 <code>Dep</code> 中使用的是数组，此时收集到的两个 <code>Wacher</code> 其实是同一个，这里是有问题，会导致 <code>updateComponent</code> 重复执行，一会儿我们来解决下。</p><h2 id="data-text-quot-hello-liang-quot"><a href="#data-text-quot-hello-liang-quot" class="headerlink" title="data.text = &quot;hello, liang&quot;;"></a><code>data.text = &quot;hello, liang&quot;;</code></h2><p>执行这句的时候，会触发 <code>text</code> 的 <code>set</code>，所以会执行一次 <code>updateComponent</code> 。但从代码来看 <code>updateComponent</code> 函数中由于 <code>data.ok</code> 为 <code>false</code>，<code>data.text</code> 对输出没有任何影响，这次执行其实是没有必要的。</p><p>之所以执行了，是因为第一次执行  <code>updateComponent</code>  读取了 <code>data.text</code> 从而收集了 <code>Watcher</code> ，第二次执行 <code>updateComponent</code> 的时候，<code>data.text</code> 虽然没有读到，但之前的 <code>Watcher</code> 也没有清除掉，所以这一次改变 <code>data.text</code> 的时候  <code>updateComponent</code>  依旧会执行。</p><p>所以我们需要的就是当重新执行 <code>updateComponent</code> 的时候，如果 <code>Watcher</code> 已经不依赖于某个 <code>Dep</code> 了，我们需要将当前 <code>Watcher</code> 从该 <code>Dep</code> 中移除掉。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220331081754535.png" alt="image-20220331081754535"></p><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>总结下来我们需要做两件事情。</p><ol><li>去重，<code>Dep</code> 中不要重复收集 <code>Watcher</code> 。</li><li>重置，如果该属性对 <code>Dep</code> 中的 <code>Wacher</code> 已经没有影响了（换句话就是，<code>Watcher</code> 中的 <code>updateComponent</code> 已经不会读取到该属性了<br>），就将该 <code>Watcher</code> 从该属性的 <code>Dep</code> 中删除。</li></ol><h1 id="去重"><a href="#去重" class="headerlink" title="去重"></a>去重</h1><p>去重的话有两种方案：</p><ol><li><code>Dep</code> 中的 <code>subs</code> 数组换为 <code>Set</code>。</li><li>每个 <code>Dep</code> 对象引入 <code>id</code> ，<code>Watcher</code> 对象中记录所有的 <code>Dep</code> 的 <code>id</code>，下次重新收集依赖的时候，如果 <code>Dep</code> 的 <code>id</code> 已经存在，就不再收集该 <code>Watcher</code> 了。</li></ol><p><code>Vue2</code> 源码中采用的是方案 <code>2</code> 这里我们实现下：</p><p><code>Dep</code> 类的话只需要引入 <code>id</code> 即可。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*************改动***************************/</span></span><br><span class="line"><span class="keyword">let</span> uid = <span class="number">0</span>;</span><br><span class="line"><span class="comment">/****************************************/</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Dep</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> target; <span class="comment">//当前在执行的函数</span></span><br><span class="line">    subs; <span class="comment">// 依赖的函数</span></span><br><span class="line">  id; <span class="comment">// Dep 对象标识</span></span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">      <span class="comment">/**************改动**************************/</span></span><br><span class="line">        <span class="keyword">this</span>.id = uid++;</span><br><span class="line">      <span class="comment">/****************************************/</span></span><br><span class="line">        <span class="keyword">this</span>.subs = []; <span class="comment">// 保存所有需要执行的函数</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    addSub(sub) &#123;</span><br><span class="line">        <span class="keyword">this</span>.subs.push(sub);</span><br><span class="line">    &#125;</span><br><span class="line">    depend() &#123;</span><br><span class="line">        <span class="keyword">if</span> (Dep.target) &#123;</span><br><span class="line">            <span class="comment">// 委托给 Dep.target 去调用 addSub</span></span><br><span class="line">            Dep.target.addDep(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    notify() &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, l = <span class="keyword">this</span>.subs.length; i &lt; l; i++) &#123;</span><br><span class="line">            <span class="keyword">this</span>.subs[i].update();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Dep.target = <span class="literal">null</span>; <span class="comment">// 静态变量，全局唯一</span></span><br></pre></td></tr></table></figure><p>在 <code>Watcher</code> 中，我们引入 <code>this.depIds</code> 来记录所有的 <code>id</code> 。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Dep <span class="keyword">from</span> <span class="string">"./dep"</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Watcher</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(Fn) &#123;</span><br><span class="line">    <span class="keyword">this</span>.getter = Fn;</span><br><span class="line">    <span class="comment">/*************改动***************************/</span></span><br><span class="line">    <span class="keyword">this</span>.depIds = <span class="keyword">new</span> <span class="built_in">Set</span>(); <span class="comment">// 拥有 has 函数可以判断是否存在某个 id</span></span><br><span class="line">    <span class="comment">/****************************************/</span></span><br><span class="line">    <span class="keyword">this</span>.get();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Evaluate the getter, and re-collect dependencies.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">  get() &#123;</span><br><span class="line">    Dep.target = <span class="keyword">this</span>; <span class="comment">// 保存包装了当前正在执行的函数的 Watcher</span></span><br><span class="line">    <span class="keyword">let</span> value;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      value = <span class="keyword">this</span>.getter.call();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      <span class="keyword">throw</span> e;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.cleanupDeps();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Add a dependency to this directive.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">  addDep(dep) &#123;</span><br><span class="line">    <span class="comment">/*************改动***************************/</span></span><br><span class="line">    <span class="keyword">const</span> id = dep.id;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.depIds.has(id)) &#123;</span><br><span class="line">      dep.addSub(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/****************************************/</span></span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Subscriber interface.</span></span><br><span class="line"><span class="comment">     * Will be called when a dependency changes.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">  update() &#123;</span><br><span class="line">    <span class="keyword">this</span>.run();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Scheduler job interface.</span></span><br><span class="line"><span class="comment">     * Will be called by the scheduler.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">  run() &#123;</span><br><span class="line">    <span class="keyword">this</span>.get();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="重置"><a href="#重置" class="headerlink" title="重置"></a>重置</h1><p>同样是两个方案：</p><ol><li>全量式移除，保存 <code>Watcher</code> 所影响的所有 <code>Dep</code> 对象，当重新收集 <code>Watcher</code> 的前，把当前 <code>Watcher</code> 从记录中的所有 <code>Dep</code> 对象中移除。</li><li>增量式移除，重新收集依赖时，用一个新的变量记录所有的 <code>Dep</code> 对象，之后再和旧的 <code>Dep</code> 对象列表比对，如果新的中没有，旧的中有，就将当前 <code>Watcher</code> 从该 <code>Dep</code> 对象中移除。</li></ol><p><code>Vue2</code> 中采用的是方案 <code>2</code>，这里也实现下。</p><p>首先是 <code>Dep</code> 类，我们需要提供一个 <code>removeSub</code> 方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; remove &#125; <span class="keyword">from</span> <span class="string">"./util"</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">export function remove(arr, item) &#123;</span></span><br><span class="line"><span class="comment">    if (arr.length) &#123;</span></span><br><span class="line"><span class="comment">        const index = arr.indexOf(item);</span></span><br><span class="line"><span class="comment">        if (index &gt; -1) &#123;</span></span><br><span class="line"><span class="comment">            return arr.splice(index, 1);</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">let</span> uid = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Dep</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> target; <span class="comment">//当前在执行的函数</span></span><br><span class="line">    subs; <span class="comment">// 依赖的函数</span></span><br><span class="line">    id; <span class="comment">// Dep 对象标识</span></span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">this</span>.id = uid++;</span><br><span class="line">        <span class="keyword">this</span>.subs = []; <span class="comment">// 保存所有需要执行的函数</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    addSub(sub) &#123;</span><br><span class="line">        <span class="keyword">this</span>.subs.push(sub);</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">/*************新增************************/</span></span><br><span class="line">    removeSub(sub) &#123;</span><br><span class="line">        remove(<span class="keyword">this</span>.subs, sub);</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">/****************************************/</span></span><br><span class="line">    depend() &#123;</span><br><span class="line">        <span class="keyword">if</span> (Dep.target) &#123;</span><br><span class="line">            <span class="comment">// 委托给 Dep.target 去调用 addSub</span></span><br><span class="line">            Dep.target.addDep(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    notify() &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, l = <span class="keyword">this</span>.subs.length; i &lt; l; i++) &#123;</span><br><span class="line">            <span class="keyword">this</span>.subs[i].update();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Dep.target = <span class="literal">null</span>; <span class="comment">// 静态变量，全局唯一</span></span><br></pre></td></tr></table></figure><p>然后是 <code>Watcher</code> 类，我们引入 <code>this.deps</code> 来保存所有的旧 <code>Dep</code> 对象，引入 <code>this.newDeps</code> 来保存所有的新 <code>Dep</code> 对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Dep <span class="keyword">from</span> <span class="string">"./dep"</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Watcher</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(Fn) &#123;</span><br><span class="line">        <span class="keyword">this</span>.getter = Fn;</span><br><span class="line">        <span class="keyword">this</span>.depIds = <span class="keyword">new</span> <span class="built_in">Set</span>(); <span class="comment">// 拥有 has 函数可以判断是否存在某个 id</span></span><br><span class="line">      <span class="comment">/*************新增************************/</span></span><br><span class="line">        <span class="keyword">this</span>.deps = [];</span><br><span class="line">        <span class="keyword">this</span>.newDeps = []; <span class="comment">// 记录新一次的依赖</span></span><br><span class="line">        <span class="keyword">this</span>.newDepIds = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">      <span class="comment">/****************************************/</span></span><br><span class="line">        <span class="keyword">this</span>.get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Evaluate the getter, and re-collect dependencies.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    get() &#123;</span><br><span class="line">        Dep.target = <span class="keyword">this</span>; <span class="comment">// 保存包装了当前正在执行的函数的 Watcher</span></span><br><span class="line">        <span class="keyword">let</span> value;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            value = <span class="keyword">this</span>.getter.call();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">          <span class="comment">/*************新增************************/</span></span><br><span class="line">            <span class="keyword">this</span>.cleanupDeps();</span><br><span class="line">          <span class="comment">/****************************************/</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Add a dependency to this directive.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    addDep(dep) &#123;</span><br><span class="line">        <span class="keyword">const</span> id = dep.id;</span><br><span class="line">      <span class="comment">/*************新增************************/</span></span><br><span class="line">        <span class="comment">// 新的依赖已经存在的话，同样不需要继续保存</span></span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">this</span>.newDepIds.has(id)) &#123;</span><br><span class="line">            <span class="keyword">this</span>.newDepIds.add(id);</span><br><span class="line">            <span class="keyword">this</span>.newDeps.push(dep);</span><br><span class="line">            <span class="keyword">if</span> (!<span class="keyword">this</span>.depIds.has(id)) &#123;</span><br><span class="line">                dep.addSub(<span class="keyword">this</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      <span class="comment">/****************************************/</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Clean up for dependency collection.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">  <span class="comment">/*************新增************************/</span></span><br><span class="line">    cleanupDeps() &#123;</span><br><span class="line">        <span class="keyword">let</span> i = <span class="keyword">this</span>.deps.length;</span><br><span class="line">        <span class="comment">// 比对新旧列表，找到旧列表里有，但新列表里没有，来移除相应 Watcher</span></span><br><span class="line">        <span class="keyword">while</span> (i--) &#123;</span><br><span class="line">            <span class="keyword">const</span> dep = <span class="keyword">this</span>.deps[i];</span><br><span class="line">            <span class="keyword">if</span> (!<span class="keyword">this</span>.newDepIds.has(dep.id)) &#123;</span><br><span class="line">                dep.removeSub(<span class="keyword">this</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 新的列表赋值给旧的，新的列表清空</span></span><br><span class="line">        <span class="keyword">let</span> tmp = <span class="keyword">this</span>.depIds;</span><br><span class="line">        <span class="keyword">this</span>.depIds = <span class="keyword">this</span>.newDepIds;</span><br><span class="line">        <span class="keyword">this</span>.newDepIds = tmp;</span><br><span class="line">        <span class="keyword">this</span>.newDepIds.clear();</span><br><span class="line">        tmp = <span class="keyword">this</span>.deps;</span><br><span class="line">        <span class="keyword">this</span>.deps = <span class="keyword">this</span>.newDeps;</span><br><span class="line">        <span class="keyword">this</span>.newDeps = tmp;</span><br><span class="line">        <span class="keyword">this</span>.newDeps.length = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">/****************************************/</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Subscriber interface.</span></span><br><span class="line"><span class="comment">     * Will be called when a dependency changes.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    update() &#123;</span><br><span class="line">        <span class="keyword">this</span>.run();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Scheduler job interface.</span></span><br><span class="line"><span class="comment">     * Will be called by the scheduler.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    run() &#123;</span><br><span class="line">        <span class="keyword">this</span>.get();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>回到开头的代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; observe &#125; <span class="keyword">from</span> <span class="string">"./reactive"</span>;</span><br><span class="line"><span class="keyword">import</span> Watcher <span class="keyword">from</span> <span class="string">"./watcher"</span>;</span><br><span class="line"><span class="keyword">const</span> data = &#123;</span><br><span class="line">    text: <span class="string">"hello, world"</span>,</span><br><span class="line">    ok: <span class="literal">true</span>,</span><br><span class="line">&#125;;</span><br><span class="line">observe(data);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> updateComponent = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"收到"</span>, data.ok ? data.text : <span class="string">"not"</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Watcher(updateComponent); <span class="comment">// updateComponent 执行一次函数，输出 hello, world</span></span><br><span class="line"></span><br><span class="line">data.ok = <span class="literal">false</span>; <span class="comment">// updateComponent 执行一次函数，输出 not</span></span><br><span class="line"></span><br><span class="line">data.text = <span class="string">"hello, liang"</span>; <span class="comment">// updateComponent 会执行吗？</span></span><br></pre></td></tr></table></figure><p>此时 <code>data.text</code> 修改的话就不会再执行 <code>updateComponent</code> 了，因为第二次执行的时候，我们把 <code>data.text</code> 中 <code>Dep</code> 里的 <code>Watcher</code> 清除了。</p><h1 id="总"><a href="#总" class="headerlink" title="总"></a>总</h1><p>今天这个主要就是对响应式系统的一点优化，避免不必要的重新执行。所做的事情就是重新调用函数的时候，把已经没有关联的 <code>Watcher</code> 去除。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220331091857522.png" alt="image-20220331091857522"></p><p>不知道看到这里大家有没有一个疑问，我是一直没想到说服我的点，欢迎一起交流：</p><p>在解决去重问题上，我们是引入了 <code>id</code> ，但如果直接用 <code>set</code> 其实就可以。在  <code>Watcher</code> 类中是用 <code>Set</code> 来存 <code>id</code> ，用数组来存 <code>Dep</code> 对象，为什么不直接用 <code>Set</code> 来存 <code>Dep</code> 对象呢？</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;接上篇：&lt;a href=&quot;https://windliang.wang/2022/03/27/Vue2%E5%89%A5%E4%B8%9D%E6%8A%BD%E8%8C%A7-%E5%93%8D%E5%BA%94%E5%BC%8F%E7%B3%BB%E7%BB%9F/&quot;&gt;V
      
    
    </summary>
    
    
      <category term="前端" scheme="https://windliang.wang/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="vue2" scheme="https://windliang.wang/tags/vue2/"/>
    
  </entry>
  
  <entry>
    <title>Vue2剥丝抽茧-响应式系统</title>
    <link href="https://windliang.wang/2022/03/27/Vue2%E5%89%A5%E4%B8%9D%E6%8A%BD%E8%8C%A7-%E5%93%8D%E5%BA%94%E5%BC%8F%E7%B3%BB%E7%BB%9F/"/>
    <id>https://windliang.wang/2022/03/27/Vue2%E5%89%A5%E4%B8%9D%E6%8A%BD%E8%8C%A7-%E5%93%8D%E5%BA%94%E5%BC%8F%E7%B3%BB%E7%BB%9F/</id>
    <published>2022-03-27T07:14:19.000Z</published>
    <updated>2022-11-17T00:01:23.931Z</updated>
    
    <content type="html"><![CDATA[<p>目前工作中大概有 <code>40%</code> 的需求是在用 <code>Vue2</code> 的技术栈，所谓知其然更要知其所以然，为了更好的使用 <code>Vue</code> 、更快的排查问题，最近学习了源码相关的一些知识，虽然网上总结 <code>Vue</code> 的很多很多了，不少自己一个，但也不多自己一个，欢迎一起讨论学习，发现问题欢迎指出。</p><h1 id="响应式系统要干什么"><a href="#响应式系统要干什么" class="headerlink" title="响应式系统要干什么"></a>响应式系统要干什么</h1><p>回到最简单的代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">data = &#123;</span><br><span class="line">    text: <span class="string">'hello, world'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> updateComponent = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'收到'</span>, data.text);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">updateComponent()</span><br><span class="line"></span><br><span class="line">data.text = <span class="string">'hello, liang'</span></span><br><span class="line"><span class="comment">// 运行结果</span></span><br><span class="line"><span class="comment">// 收到 hello, world</span></span><br></pre></td></tr></table></figure><p>响应式系统要做的事情：某个依赖了 <code>data</code> 数据的函数，当所依赖的 <code>data</code> 数据改变的时候，该函数要重新执行。</p><p>我们期望的效果：当上边 <code>data.text</code> 修改的时候， <code>updateComponent</code> 函数再执行一次。</p><p>为了实现响应式系统，我们需要做两件事情：</p><ol><li><p>知道 <code>data</code> 中的数据被哪些函数依赖</p></li><li><p><code>data</code> 中的数据改变的时候去调用依赖它的函数们</p></li></ol><p>为了实现第 <code>1</code> 点，我们需要在执行函数的时候，将当前函数保存起来，然后在<strong>读取数据</strong>的时候将该函数保存到当前数据中。</p><p>第 <code>2</code> 点就迎刃而解了，当<strong>修改数据</strong>的时候将保存起来的函数执行一次即可。</p><p>在<strong>读取数据</strong>和<strong>修改数据</strong>的时候需要做额外的事情，我们可以通过 <code>Object.defineProperty()</code>  重写对象属性的 <code>get</code> 和 <code>set</code> 函数。</p><h1 id="响应式数据"><a href="#响应式数据" class="headerlink" title="响应式数据"></a>响应式数据</h1><p>我们来写一个函数，重写属性的 <code>get</code> 和 <code>set</code> 函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Define a reactive property on an Object.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">defineReactive</span>(<span class="params">obj, key, val</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> property = <span class="built_in">Object</span>.getOwnPropertyDescriptor(obj, key);</span><br><span class="line">    <span class="comment">// 读取用户可能自己定义了的 get、set</span></span><br><span class="line">    <span class="keyword">const</span> getter = property &amp;&amp; property.get;</span><br><span class="line">    <span class="keyword">const</span> setter = property &amp;&amp; property.set;</span><br><span class="line">    <span class="comment">// val 没有传进来话进行手动赋值</span></span><br><span class="line">    <span class="keyword">if</span> ((!getter || setter) &amp;&amp; <span class="built_in">arguments</span>.length === <span class="number">2</span>) &#123;</span><br><span class="line">        val = obj[key];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Object</span>.defineProperty(obj, key, &#123;</span><br><span class="line">        enumerable: <span class="literal">true</span>,</span><br><span class="line">        configurable: <span class="literal">true</span>,</span><br><span class="line">        get: <span class="function"><span class="keyword">function</span> <span class="title">reactiveGetter</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">const</span> value = getter ? getter.call(obj) : val;</span><br><span class="line">            <span class="comment">/*********************************************/</span></span><br><span class="line">            <span class="comment">// 1.这里需要去保存当前在执行的函数</span></span><br><span class="line">            <span class="comment">/*********************************************/</span></span><br><span class="line">            <span class="keyword">return</span> value;</span><br><span class="line">        &#125;,</span><br><span class="line">        set: <span class="function"><span class="keyword">function</span> <span class="title">reactiveSetter</span>(<span class="params">newVal</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">const</span> value = getter ? getter.call(obj) : val;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (setter) &#123;</span><br><span class="line">                setter.call(obj, newVal);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                val = newVal;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">/*********************************************/</span></span><br><span class="line">            <span class="comment">// 2.将依赖当前数据依赖的函数执行</span></span><br><span class="line">            <span class="comment">/*********************************************/</span></span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了调用更方便，我们把第 <code>1</code> 步和第 <code>2</code> 步的操作封装一个 <code>Dep</code>  类。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Dep</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> target; <span class="comment">//当前在执行的函数</span></span><br><span class="line">    subs; <span class="comment">// 依赖的函数</span></span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">this</span>.subs = []; <span class="comment">// 保存所有需要执行的函数</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    addSub(sub) &#123;</span><br><span class="line">        <span class="keyword">this</span>.subs.push(sub);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    depend() &#123;</span><br><span class="line">        <span class="comment">// 触发 get 的时候走到这里</span></span><br><span class="line">        <span class="keyword">if</span> (Dep.target) &#123;</span><br><span class="line">            <span class="comment">// 委托给 Dep.target 去调用 addSub</span></span><br><span class="line">            Dep.target.addDep(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    notify() &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, l = <span class="keyword">this</span>.subs.length; i &lt; l; i++) &#123;</span><br><span class="line">            <span class="keyword">this</span>.subs[i].update();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Dep.target = <span class="literal">null</span>; <span class="comment">// 静态变量，全局唯一</span></span><br></pre></td></tr></table></figure><p>我们将当前执行的函数保存到 <code>Dep</code> 类的 <code>target</code> 变量上。</p><h1 id="保存当前正在执行的函数"><a href="#保存当前正在执行的函数" class="headerlink" title="保存当前正在执行的函数"></a>保存当前正在执行的函数</h1><p>为了保存当前的函数，我们还需要写一个 <code>Watcher</code> 类，将需要执行的函数传入，保存到 <code>Watcher</code> 类中的 <code>getter</code> 属性中，然后交由 <code>Watcher</code> 类负责执行。</p><p>这样在 <code>Dep</code> 类中， <code>subs</code> 中保存的就不是当前函数了，而是持有当前函数的 <code>Watcher</code> 对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Dep <span class="keyword">from</span> <span class="string">"./dep"</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Watcher</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(Fn) &#123;</span><br><span class="line">        <span class="keyword">this</span>.getter = Fn;</span><br><span class="line">        <span class="keyword">this</span>.get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Evaluate the getter, and re-collect dependencies.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    get() &#123;</span><br><span class="line">        Dep.target = <span class="keyword">this</span>; <span class="comment">// 保存包装了当前正在执行的函数的 Watcher</span></span><br><span class="line">        <span class="keyword">let</span> value;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="comment">// 调用当前传进来的函数，触发对象属性的 get</span></span><br><span class="line">            value = <span class="keyword">this</span>.getter.call();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Add a dependency to this directive.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    addDep(dep) &#123;</span><br><span class="line">      <span class="comment">// 触发 get 后会走到这里，收集当前依赖</span></span><br><span class="line">        <span class="comment">// 当前正在执行的函数的 Watcher 保存到 dep 中的 subs 中</span></span><br><span class="line">        dep.addSub(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Subscriber interface.</span></span><br><span class="line"><span class="comment">     * Will be called when a dependency changes.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">  <span class="comment">// 修改对象属性值的时候触发 set，走到这里</span></span><br><span class="line">    update() &#123;</span><br><span class="line">        <span class="keyword">this</span>.run();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Scheduler job interface.</span></span><br><span class="line"><span class="comment">     * Will be called by the scheduler.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    run() &#123;</span><br><span class="line">        <span class="keyword">this</span>.get();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Watcher</code> 的作用就是将正在执行的函数通过 <code>Watcher</code> 包装后保存到 <code>Dep.target</code> 中，然后调用传进来的函数，此时触发对象属性的 <code>get</code> 函数，会收集当前 <code>Watcher</code> 。</p><p>如果未来修改对象属性的值，会触发对象属性的 <code>set</code> ，接着就会调用之前收集到的 <code>Watcher</code> 对象，通过 <code>Watcher</code> 对象的 <code>uptate</code> 方法，来调用最初执行的函数。</p><h1 id="响应式数据-1"><a href="#响应式数据-1" class="headerlink" title="响应式数据"></a>响应式数据</h1><p>回到我们之前没写完的 <code>defineReactive</code> 函数，按照上边的思路，我们来补全一下。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Dep <span class="keyword">from</span> <span class="string">"./dep"</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Define a reactive property on an Object.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">defineReactive</span>(<span class="params">obj, key, val</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> property = <span class="built_in">Object</span>.getOwnPropertyDescriptor(obj, key);</span><br><span class="line">    <span class="comment">// 读取用户可能自己定义了的 get、set</span></span><br><span class="line">    <span class="keyword">const</span> getter = property &amp;&amp; property.get;</span><br><span class="line">    <span class="keyword">const</span> setter = property &amp;&amp; property.set;</span><br><span class="line">    <span class="comment">// val 没有传进来话进行手动赋值</span></span><br><span class="line">    <span class="keyword">if</span> ((!getter || setter) &amp;&amp; <span class="built_in">arguments</span>.length === <span class="number">2</span>) &#123;</span><br><span class="line">        val = obj[key];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*********************************************/</span></span><br><span class="line">    <span class="keyword">const</span> dep = <span class="keyword">new</span> Dep(); <span class="comment">// 持有一个 Dep 对象，用来保存所有依赖于该变量的 Watcher</span></span><br><span class="line">    <span class="comment">/*********************************************/</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">Object</span>.defineProperty(obj, key, &#123;</span><br><span class="line">        enumerable: <span class="literal">true</span>,</span><br><span class="line">        configurable: <span class="literal">true</span>,</span><br><span class="line">        get: <span class="function"><span class="keyword">function</span> <span class="title">reactiveGetter</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">const</span> value = getter ? getter.call(obj) : val;</span><br><span class="line">            <span class="comment">/*********************************************/</span></span><br><span class="line">            <span class="comment">// 1.这里需要去保存当前在执行的函数</span></span><br><span class="line">            <span class="keyword">if</span> (Dep.target) &#123;</span><br><span class="line">                dep.depend();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">/*********************************************/</span></span><br><span class="line">            <span class="keyword">return</span> value;</span><br><span class="line">        &#125;,</span><br><span class="line">        set: <span class="function"><span class="keyword">function</span> <span class="title">reactiveSetter</span>(<span class="params">newVal</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">const</span> value = getter ? getter.call(obj) : val;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (setter) &#123;</span><br><span class="line">                setter.call(obj, newVal);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                val = newVal;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">/*********************************************/</span></span><br><span class="line">            <span class="comment">// 2.将依赖当前数据依赖的函数执行</span></span><br><span class="line">            dep.notify();</span><br><span class="line">            <span class="comment">/*********************************************/</span></span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Observer-对象"><a href="#Observer-对象" class="headerlink" title="Observer 对象"></a>Observer 对象</h1><p>我们再写一个 <code>Observer</code> 方法，把对象的全部属性都变成响应式的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(value) &#123;</span><br><span class="line">        <span class="keyword">this</span>.walk(value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 遍历对象所有的属性，调用 defineReactive</span></span><br><span class="line"><span class="comment">     * 拦截对象属性的 get 和 set 方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    walk(obj) &#123;</span><br><span class="line">        <span class="keyword">const</span> keys = <span class="built_in">Object</span>.keys(obj);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; keys.length; i++) &#123;</span><br><span class="line">            defineReactive(obj, keys[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们提供一个 <code>observe</code> 方法来负责创建 <code>Observer</code> 对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">observe</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> ob = <span class="keyword">new</span> Observer(value);</span><br><span class="line">    <span class="keyword">return</span> ob;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>将上边的方法引入到文章最开头的例子，来执行一下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; observe &#125; <span class="keyword">from</span> <span class="string">"./reactive"</span>;</span><br><span class="line"><span class="keyword">import</span> Watcher <span class="keyword">from</span> <span class="string">"./watcher"</span>;</span><br><span class="line"><span class="keyword">const</span> data = &#123;</span><br><span class="line">    text: <span class="string">"hello, world"</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 将数据变成响应式的</span></span><br><span class="line">observe(data);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> updateComponent = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"收到"</span>, data.text);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当前函数由 Watcher 进行执行</span></span><br><span class="line"><span class="keyword">new</span> Watcher(updateComponent);</span><br><span class="line"></span><br><span class="line">data.text = <span class="string">"hello, liang"</span>;</span><br></pre></td></tr></table></figure><p>此时就会输出两次了~</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">收到 hello, world</span><br><span class="line">收到 hello, liang</span><br></pre></td></tr></table></figure><p>说明我们的响应式系统成功了。</p><h1 id="总"><a href="#总" class="headerlink" title="总"></a>总</h1><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220329092722630.png" alt="image-20220329092722630"></p><p>先从整体理解了响应式系统的整个流程：</p><p>每个属性有一个 <code>subs</code> 数组，<code>Watcher</code> 会持有当前执行的函数，当读取属性的时候触发 <code>get</code> ，将当前 <code>Watcher</code> 保存到 <code>subs</code> 数组中，当属性值修改的时候，再通过 <code>subs</code> 数组中的 <code>Watcher</code> 对象执行之前保存的函数。</p><p>当然还有亿点点细节需要完善，后边的文章会继续。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;目前工作中大概有 &lt;code&gt;40%&lt;/code&gt; 的需求是在用 &lt;code&gt;Vue2&lt;/code&gt; 的技术栈，所谓知其然更要知其所以然，为了更好的使用 &lt;code&gt;Vue&lt;/code&gt; 、更快的排查问题，最近学习了源码相关的一些知识，虽然网上总结 &lt;code&gt;Vue&lt;/c
      
    
    </summary>
    
    
      <category term="前端" scheme="https://windliang.wang/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="vue2" scheme="https://windliang.wang/tags/vue2/"/>
    
  </entry>
  
  <entry>
    <title>前端js的设计模式系列-总结篇</title>
    <link href="https://windliang.wang/2022/02/06/%E5%89%8D%E7%AB%AFjs%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B3%BB%E5%88%97-%E6%B1%87%E6%80%BB/"/>
    <id>https://windliang.wang/2022/02/06/%E5%89%8D%E7%AB%AFjs%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B3%BB%E5%88%97-%E6%B1%87%E6%80%BB/</id>
    <published>2022-02-06T14:18:48.000Z</published>
    <updated>2022-11-17T00:01:23.941Z</updated>
    
    <content type="html"><![CDATA[<p>从 <code>1</code> 月 <code>6</code> 号的第一篇设计模式文章 <a href="https://pattern.windliang.wang/posts/%E5%89%8D%E7%AB%AF%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B3%BB%E5%88%97-%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F.html" target="_blank" rel="noopener">策略模式</a>，截止到 <code>3</code> 月 <code>8</code>  号的最后一篇 <a href="https://pattern.windliang.wang/posts/%E5%89%8D%E7%AB%AF%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B3%BB%E5%88%97-%E5%9F%BA%E6%9C%AC%E5%8E%9F%E5%88%99.html" target="_blank" rel="noopener">基本原则</a>，利用两个月的时间把二十三个设计模式都过了一遍，其中在平时开发中用到的都结合实际场景总结了一遍。</p><p>之所以开始总结设计模式，还是每篇文章开头所说的：</p><p>代码也写了几年了，设计模式处于看了忘，忘了看的状态，最近对设计模式有了点感觉，索性就再学习总结下吧。</p><p>大部分讲设计模式的文章都是使用的 <code>Java</code>、<code>C++</code> 这样的以类为基础的静态类型语言，作为前端开发者，<code>js</code> 这门基于原型的动态语言，函数成为了一等公民，在实现一些设计模式上稍显不同，甚至简单到不像使用了设计模式，有时候也会产生些困惑。</p><p>设计模式最初的总结来自于 <code>GoF</code> 书，但书讲的比较晦涩，就不建议看了，<code>GoF</code> 名字的来源是：</p><blockquote><p>The authors of the <a href="http://wiki.c2.com/?DesignPatternsBook" target="_blank" rel="noopener">DesignPatternsBook (opens new window)</a>came to be known as the “Gang of Four.” The name of the book (“Design Patterns: Elements of Reusable Object-Oriented Software”) is too long for e-mail, so “book by the gang of four” became a shorthand name for it. After all, it isn’t the ONLY book on patterns. That got shortened to “GOF book”, which is pretty cryptic the first time you hear it.</p></blockquote><p>大意就是本来的书名太长了，然后就简写为 <code>book by the gang of four</code> ，由四个作者共同写的，然后简写为 <code>GoF</code> 了，我们常说的「四人帮」设计模式。</p><p>总结过程中除了搜索出来的零星的文章，看的比较多的是下边几个：</p><ul><li><p><code>Alloy Team</code> 曾探的「JavaScript 设计模式开发与实战」，第一章的基础知识将 <code>js</code> 有别于其他语言的特性讲的很好，其中设计模式的一些例子也是作者业务开发中实际应用的。</p></li><li><p>张容铭的「JavaScript 设计模式」，虽然每个设计模式都讲了，但很多场景是虚构出来的，只是起到理解设计模式的作用，如果要看的话推荐先看曾探的。</p></li></ul><p>上边两本共同的缺点是作者的时代还是在 <code>jQuery</code> ，举的例子也都还是在操纵 <code>dom</code> ， <code>Vue</code>/<code>React</code> 的时代到来后，平常开发中我们已经不去操纵 <code>dom</code> 了，这也是我为什么又总结了一遍的原因之一。</p><ul><li>极客时间王争的 <a href="http://gk.link/a/11c3E" target="_blank" rel="noopener">设计模式之美</a>，总结的很好，但遗憾的是更适合后端来看，很多场景也都是 <code>java</code> 开发中的场景。</li><li>一个 <code>Youtube</code> 帅哥总结的 <a href="https://www.youtube.com/watch?v=BWprw8UHIzA&amp;list=PLZlA0Gpn_vH_CthENcPCM0Dww6a5XYC7f&amp;index=2" target="_blank" rel="noopener">设计模式系列</a>，这个比较新了，都是结合 <code>ES6</code> 语法，缺点还是没有开发中的实际场景。</li><li>还有一个 <a href="https://refactoringguru.cn/design-patterns" target="_blank" rel="noopener">大而全的网站</a>， 各种语言都实现了，很多设计模式总结的也非常棒，配图丰富。</li></ul><p>设计模式的话，在平常开发中，其实都会有意无意的用到过，只是没有专门总结出来。通过总结，当遇到类似场景的时候，我们就可以更快的编写，提升编程效率。</p><p>但设计模式最忌讳的就是过度设计了，但这个度又很难把握，可以结合 <code>KISS</code> 原则，我们先以简单、快速的方式实现需求，然后当后边需要修改的时候，贯彻「再一再二没有再三」的原则，再对原有的代码进行重构。</p><p>我们也没必要完全去套设计模式，而是去理解它们共同的思想，保持初心–提升代码的可读性、可扩展性、可维护性，最终达到「还记着没有，我现在全忘了，忘得干干净净的了」的境界。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220310082243222.png" alt="image-20220310082243222" style="width:50%;"></p><p>我们需要做的就是先有一定理论知识的储备，比如熟练掌握各种设计原则、思想、编码规范、设计模式，然后在平时开发、阅读源码过程中有代码质量意识、设计意识，慢慢的进行巩固、学习。</p><p>为了方便大家更好的阅读，我把之前总结的和没有总结的都放到了  <a href="https://pattern.windliang.wang/" target="_blank" rel="noopener">pattern.windliang.wang/</a>  网站和 <a href="https://github.com/wind-liang/design-pattern" target="_blank" rel="noopener">github</a> 上。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220310090250470.png" alt="image-20220310090250470"></p><p>每个设计模式的原始定义其实很好理解，直接打开维基百科看看定义、看看代码十几分钟估计就能了解一个，最重要的地方在于实际开发场景中的到底有哪些例子。</p><p>这方面的话前端相关的例子很少很少，我自己的力量有限，非常欢迎大家在  <a href="https://github.com/wind-liang/design-pattern/issues" target="_blank" rel="noopener">github</a> 给我提 issues，把大家应用过或者见过的设计模式写一下，一起学习，一起进步！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;从 &lt;code&gt;1&lt;/code&gt; 月 &lt;code&gt;6&lt;/code&gt; 号的第一篇设计模式文章 &lt;a href=&quot;https://pattern.windliang.wang/posts/%E5%89%8D%E7%AB%AF%E7%9A%84%E8%AE%BE%E8%AE%A1
      
    
    </summary>
    
    
      <category term="前端" scheme="https://windliang.wang/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="设计模式" scheme="https://windliang.wang/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>前端的设计模式系列-责任链模式</title>
    <link href="https://windliang.wang/2022/02/04/%E5%89%8D%E7%AB%AF%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B3%BB%E5%88%97-%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F/"/>
    <id>https://windliang.wang/2022/02/04/%E5%89%8D%E7%AB%AF%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B3%BB%E5%88%97-%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-02-04T02:10:46.000Z</published>
    <updated>2022-11-17T00:01:23.942Z</updated>
    
    <content type="html"><![CDATA[<p>代码也写了几年了，设计模式处于看了忘，忘了看的状态，最近对设计模式有了点感觉，索性就再学习总结下吧。</p><p>大部分讲设计模式的文章都是使用的 <code>Java</code>、<code>C++</code> 这样的以类为基础的静态类型语言，作为前端开发者，<code>js</code> 这门基于原型的动态语言，函数成为了一等公民，在实现一些设计模式上稍显不同，甚至简单到不像使用了设计模式，有时候也会产生些困惑。</p><p>下面按照「场景」-「设计模式定义」- 「代码实现」- 「易混设计模式」 -「总」的顺序来总结一下，如有不当之处，欢迎交流讨论。</p><h1 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h1><p><a href="https://leetcode.wang/leetCode-65-Valid-Number.html" target="_blank" rel="noopener">leetcode 65 题</a> 判断是否是合法的数字：</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220204102426236.png" alt="image-20220204102426236"></p><p>部分有效数字列举如下：<code>[&quot;2&quot;, &quot;0089&quot;, &quot;-0.1&quot;, &quot;+3.14&quot;, &quot;4.&quot;, &quot;-.9&quot;, &quot;2e10&quot;, &quot;-90E3&quot;, &quot;3e+7&quot;, &quot;+6e-1&quot;, &quot;53.5e93&quot;, &quot;-123.456e789&quot;]</code><br>部分无效数字列举如下：<code>[&quot;abc&quot;, &quot;1a&quot;, &quot;1e&quot;, &quot;e3&quot;, &quot;99e2.5&quot;, &quot;--6&quot;, &quot;-+3&quot;, &quot;95a54e53&quot;]</code></p><p>我们可以依次遍历给定的字符串，然后各种 <code>if</code> 、<code>else</code> 来解决这个问题：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; s</span></span><br><span class="line"><span class="comment"> * @return &#123;boolean&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> isNumber = <span class="function"><span class="keyword">function</span> (<span class="params">s</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> e = [<span class="string">"e"</span>, <span class="string">"E"</span>];</span><br><span class="line">    s = s.trim();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> pointSeen = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">let</span> eSeen = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">let</span> numberSeen = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">let</span> numberAfterE = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; s.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"0"</span> &lt;= s.charAt(i) &amp;&amp; s.charAt(i) &lt;= <span class="string">"9"</span>) &#123;</span><br><span class="line">            numberSeen = <span class="literal">true</span>;</span><br><span class="line">            numberAfterE = <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (s.charAt(i) === <span class="string">"."</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (eSeen || pointSeen) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            pointSeen = <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e.includes(s.charAt(i))) &#123;</span><br><span class="line">            <span class="keyword">if</span> (eSeen || !numberSeen) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            numberAfterE = <span class="literal">false</span>;</span><br><span class="line">            eSeen = <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (s.charAt(i) === <span class="string">"-"</span> || s.charAt(i) === <span class="string">"+"</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i != <span class="number">0</span> &amp;&amp; !e.includes(s.charAt(i - <span class="number">1</span>))) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> numberSeen &amp;&amp; numberAfterE;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>如果只是为了刷题 <code>AC</code> 也没啥毛病，但如果在业务中写出这么多 <code>if</code>、<code>else</code> 大概就要被打了。</p><p>为了让代码扩展性和可读性更高，我们可以通过责任链模式进行改写。</p><h1 id="责任链模式"><a href="#责任链模式" class="headerlink" title="责任链模式"></a>责任链模式</h1><p><code>GoF</code>  介绍的责任链模式定义：</p><blockquote><p>Avoid coupling the sender of a request to its receiver by giving more than one object a chance to handle the request. Chain the receiving objects and pass the request along the chain until an object handles it.</p></blockquote><p>避免请求者和接收者之间的耦合，让多个接收者都有机会去处理请求。将接收者组成链条，在链条中传递请求直到有接收者可以处理它。</p><p>原始的定义中，当请求被处理后链条就终止了，但很多地方也会将请求一直传递下去，可以看作是责任链模式的变体。</p><p>看一下 <code>UML</code> 类图和时序图：</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220204151213707.png" alt="image-20220204151213707"></p><p><code>Sender</code> 无需关心哪一个 <code>Receiver</code> 去处理它，只需要通过 <code>Handler</code> 接口在 <code>Receiver</code> 链条中进行处理，每一个 <code>Receiver</code> 处理结束后继续传给下一个 <code>Receiver</code> 。</p><p>看起来比较抽象，看一个具体的例子，不同等级的日志进行不同的处理：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Logger</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> ERR = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> NOTICE = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> DEBUG = <span class="number">7</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> mask;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// The next element in the chain of responsibility</span></span><br><span class="line">    <span class="keyword">protected</span> Logger next;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Logger <span class="title">setNext</span><span class="params">( Logger l)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        next = l;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">message</span><span class="params">( String msg, <span class="keyword">int</span> priority )</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ( priority &lt;= mask ) </span><br><span class="line">        &#123;</span><br><span class="line">            writeMessage( msg );</span><br><span class="line">            <span class="keyword">if</span> ( next != <span class="keyword">null</span> )</span><br><span class="line">            &#123;</span><br><span class="line">                next.message( msg, priority );</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">writeMessage</span><span class="params">( String msg )</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StdoutLogger</span> <span class="keyword">extends</span> <span class="title">Logger</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StdoutLogger</span><span class="params">( <span class="keyword">int</span> mask )</span> </span>&#123; <span class="keyword">this</span>.mask = mask; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">writeMessage</span><span class="params">( String msg )</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println( <span class="string">"Writting to stdout: "</span> + msg );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EmailLogger</span> <span class="keyword">extends</span> <span class="title">Logger</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">EmailLogger</span><span class="params">( <span class="keyword">int</span> mask )</span> </span>&#123; <span class="keyword">this</span>.mask = mask; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">writeMessage</span><span class="params">( String msg )</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println( <span class="string">"Sending via email: "</span> + msg );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StderrLogger</span> <span class="keyword">extends</span> <span class="title">Logger</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StderrLogger</span><span class="params">( <span class="keyword">int</span> mask )</span> </span>&#123; <span class="keyword">this</span>.mask = mask; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">writeMessage</span><span class="params">( String msg )</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println( <span class="string">"Sending to stderr: "</span> + msg );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChainOfResponsibilityExample</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">( String[] args )</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// Build the chain of responsibility</span></span><br><span class="line">        Logger l = <span class="keyword">new</span> StdoutLogger( Logger.DEBUG).setNext(</span><br><span class="line">                            <span class="keyword">new</span> EmailLogger( Logger.NOTICE ).setNext(</span><br><span class="line">                            <span class="keyword">new</span> StderrLogger( Logger.ERR ) ) );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Handled by StdoutLogger</span></span><br><span class="line">        l.message( <span class="string">"Entering function y."</span>, Logger.DEBUG );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Handled by StdoutLogger and EmailLogger</span></span><br><span class="line">        l.message( <span class="string">"Step1 completed."</span>, Logger.NOTICE );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Handled by all three loggers</span></span><br><span class="line">        l.message( <span class="string">"An error has occurred."</span>, Logger.ERR );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Writting to <span class="built_in">stdout</span>: Entering function y.</span><br><span class="line">Writting to <span class="built_in">stdout</span>: Step1 completed.</span><br><span class="line">Sending via email: Step1 completed.</span><br><span class="line">Writting to <span class="built_in">stdout</span>: An error has occurred.</span><br><span class="line">Sending via email: An error has occurred.</span><br><span class="line">Sending to <span class="built_in">stderr</span>: An error has occurred.</span><br></pre></td></tr></table></figure><p>每个 <code>logger</code> 都继承了 <code>message</code> 方法，并且拥有的 <code>next</code> 也指向一个 <code>logger</code> 对象，通过 <code>next</code> 去调用下一个的 <code>message</code> 方法。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220204152750255.png" alt="image-20220204152750255"></p><p>让我们用 <code>js</code> 再来改写一下：</p><p>我们先实现一个 <code>Handler</code> 对象，构建链条。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Handler = <span class="function"><span class="keyword">function</span> (<span class="params">fn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.handler = fn;</span><br><span class="line">    <span class="keyword">this</span>.next = <span class="literal">null</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Handler.prototype.setNext = <span class="function"><span class="keyword">function</span> <span class="title">setNext</span>(<span class="params">h</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.next = h;</span><br><span class="line">    <span class="keyword">return</span> h;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Handler.prototype.passRequest = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> ret = <span class="keyword">this</span>.handler.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">    <span class="keyword">this</span>.next &amp;&amp; <span class="keyword">this</span>.next.passRequest.apply(<span class="keyword">this</span>.next, <span class="built_in">arguments</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>接下来实现不同的 <code>Logger</code> 。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ERR = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">const</span> NOTICE = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> DEBUG = <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> StdoutLogger = <span class="function"><span class="keyword">function</span> (<span class="params">msg, level</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 根据等级判断自己是否处理</span></span><br><span class="line">    <span class="keyword">if</span> (level &lt;= DEBUG) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"Writting to stdout: "</span> + msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> EmailLogger = <span class="function"><span class="keyword">function</span> (<span class="params">msg, level</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 根据等级判断自己是否处理</span></span><br><span class="line">    <span class="keyword">if</span> (level &lt;= NOTICE) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"Sending via email: "</span> + msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> StderrLogger = <span class="function"><span class="keyword">function</span> (<span class="params">msg, level</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 根据等级判断自己是否处理</span></span><br><span class="line">    <span class="keyword">if</span> (level &lt;= ERR) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"Sending to stderr: "</span> + msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>然后进行测试：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> StdoutHandler = <span class="keyword">new</span> Handler(StdoutLogger);</span><br><span class="line"><span class="keyword">const</span> EmailHandler = <span class="keyword">new</span> Handler(EmailLogger);</span><br><span class="line"><span class="keyword">const</span> StderrHandler = <span class="keyword">new</span> Handler(StderrLogger);</span><br><span class="line">StdoutHandler.setNext(EmailHandler).setNext(StderrHandler);</span><br><span class="line"></span><br><span class="line">StdoutHandler.passRequest(<span class="string">"Entering function y."</span>, DEBUG);</span><br><span class="line">StdoutHandler.passRequest(<span class="string">"Step1 completed."</span>, NOTICE);</span><br><span class="line">StdoutHandler.passRequest(<span class="string">"An error has occurred."</span>, ERR);</span><br></pre></td></tr></table></figure><p>输出内容和 <code>java</code> 代码是一致的。</p><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><p>回到开头的场景中，判断是否是有效数字。</p><p>我们可以抽离出不同功能，判断是否是整数、是否是科学记数法、是否是浮点数等等，然后通过职责链模式把它们链接起来，如果某一环节返回了 <code>true</code> 就不再判断，直接返回最终结果。</p><p>可以利用上边写的 <code>Handler</code> 对象，构建链条，此外可以通过返回值提前结束传递。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Handler</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.handler = fn;</span><br><span class="line">    <span class="keyword">this</span>.next = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Handler.prototype.setNext = <span class="function"><span class="keyword">function</span> <span class="title">setNext</span>(<span class="params">h</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.next = h;</span><br><span class="line">    <span class="keyword">return</span> h;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Handler.prototype.passRequest = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> ret = <span class="keyword">this</span>.handler.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">    <span class="comment">// 提前结束</span></span><br><span class="line">    <span class="keyword">if</span> (ret) &#123;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 向后传递</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.next) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.next.passRequest.apply(<span class="keyword">this</span>.next, <span class="built_in">arguments</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>数字预处理一下，去掉前后空白和 <code>+</code>、<code>-</code> 便于后续的判断。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">preProcessing</span>(<span class="params">v</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> value = v.trim();</span><br><span class="line">    <span class="keyword">if</span> (value.startsWith(<span class="string">"+"</span>) || value.startsWith(<span class="string">"-"</span>)) &#123;</span><br><span class="line">        value = value.substring(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>判断是否是整数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断是否是整数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isInteger</span>(<span class="params">integer</span>) </span>&#123;</span><br><span class="line">    integer = preProcessing(integer);</span><br><span class="line">    <span class="keyword">if</span> (!integer) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; integer.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="regexp">/[0-9]/</span>.test(integer.charAt(i))) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>判断是否是小数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断是否是小数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isFloat</span>(<span class="params">floatVal</span>) </span>&#123;</span><br><span class="line">    floatVal = preProcessing(floatVal);</span><br><span class="line">    <span class="keyword">if</span> (!floatVal) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">checkPart</span>(<span class="params">part</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (part === <span class="string">""</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (</span><br><span class="line">            !<span class="regexp">/[0-9]/</span>.test(part.charAt(<span class="number">0</span>)) ||</span><br><span class="line">            !<span class="regexp">/[0-9]/</span>.test(part.charAt(part.length - <span class="number">1</span>))</span><br><span class="line">        ) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!isInteger(part)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> pos = floatVal.indexOf(<span class="string">"."</span>);</span><br><span class="line">    <span class="keyword">if</span> (pos === <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (floatVal.length === <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> first = floatVal.substring(<span class="number">0</span>, pos);</span><br><span class="line">    <span class="keyword">const</span> second = floatVal.substring(pos + <span class="number">1</span>, floatVal.length);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (checkPart(first) &amp;&amp; checkPart(second)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>判断是否是科学计数法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断是否是科学计数法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isScienceFormat</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">    s = preProcessing(s);</span><br><span class="line">    <span class="keyword">if</span> (!s) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">checkHeadAndEndForSpace</span>(<span class="params">part</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (part.startsWith(<span class="string">" "</span>) || part.endsWith(<span class="string">" "</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">validatePartBeforeE</span>(<span class="params">first</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!first) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!checkHeadAndEndForSpace(first)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!isInteger(first) &amp;&amp; !isFloat(first)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">validatePartAfterE</span>(<span class="params">second</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!second) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!checkHeadAndEndForSpace(second)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!isInteger(second)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    s = s.toLowerCase();</span><br><span class="line">    <span class="keyword">let</span> pos = s.indexOf(<span class="string">"e"</span>);</span><br><span class="line">    <span class="keyword">if</span> (pos === <span class="number">-1</span>) &#123;</span><br><span class="line">        pos = s.indexOf(<span class="string">"E"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (pos === <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (s.length === <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> first = s.substring(<span class="number">0</span>, pos);</span><br><span class="line">    <span class="keyword">const</span> second = s.substring(pos + <span class="number">1</span>, s.length);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!validatePartBeforeE(first) || !validatePartAfterE(second)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>判断是否是十六进制：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isHex</span>(<span class="params">hex</span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">isValidChar</span>(<span class="params">c</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">const</span> validChar = [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>, <span class="string">"e"</span>, <span class="string">"f"</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; validChar.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (c === validChar[i]) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    hex = preProcessing(hex);</span><br><span class="line">    <span class="keyword">if</span> (!hex) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    hex = hex.toLowerCase();</span><br><span class="line">    <span class="keyword">if</span> (hex.startsWith(<span class="string">"0x"</span>)) &#123;</span><br><span class="line">        hex = hex.substring(<span class="number">2</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; hex.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="regexp">/[0-9]/</span>.test(hex.charAt(<span class="number">0</span>)) &amp;&amp; !isValidChar(hex.charAt(i))) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后通过 <code>Handler</code> 将上边的功能串联起来即可：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; s</span></span><br><span class="line"><span class="comment"> * @return &#123;boolean&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> isNumber = <span class="function"><span class="keyword">function</span> (<span class="params">s</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> isIntegerHandler = <span class="keyword">new</span> Handler(isInteger);</span><br><span class="line">    <span class="keyword">const</span> isFloatHandler = <span class="keyword">new</span> Handler(isFloat);</span><br><span class="line">    <span class="keyword">const</span> isScienceFormatHandler = <span class="keyword">new</span> Handler(isScienceFormat);</span><br><span class="line">    <span class="keyword">const</span> isHexHandler = <span class="keyword">new</span> Handler(isHex);</span><br><span class="line"></span><br><span class="line">    isIntegerHandler</span><br><span class="line">        .setNext(isFloatHandler)</span><br><span class="line">        .setNext(isScienceFormatHandler)</span><br><span class="line">        .setNext(isHexHandler);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> isIntegerHandler.passRequest(s);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>通过责任链的设计模式，每一个函数都可以很好的进行复用，并且未来如果要新增一种类型判断，只需要加到责任链中即可，和之前的判断也完全独立。</p><h1 id="易混设计模式"><a href="#易混设计模式" class="headerlink" title="易混设计模式"></a>易混设计模式</h1><p>说到沿着「链」执行，应该会想到 <a href="https://windliang.wang/2022/01/17/%E5%89%8D%E7%AB%AF%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B3%BB%E5%88%97-%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%A3%85%E9%A5%B0%E5%99%A8%E6%A8%A1%E5%BC%8F/">装饰器模式</a> 。</p><p><img src="https://windliangblog.oss-cn-beijing.aliyuncs.com/windliangblog.oss-cn-beijing.aliyuncs.comimage-20220204202859919.png" alt="image-20220204202859919"></p><p>它和责任链模式看起来结构上是一致的，我的理解上主要有两点不同：</p><ol><li>装饰器模式是对已有功能的增强，依次包装起来形成链式调用。而责任链模式从一开始就抽象出了很多功能，然后形成责任链。</li><li>装饰器模式会依次调用新增的功能直到最初的功能，责任链模式提供了一种中断的能力，调用到某个操作的时候可以直接终止掉，不是所有的功能都会调用。</li></ol><h1 id="总"><a href="#总" class="headerlink" title="总"></a>总</h1><p>当处理一件事情的时候发现会分很多种情况去讨论，此时可以考虑使用责任链模式进行功能的拆分，提高代码的复用性、扩展性以及可读性。</p><p>像 <code>js</code> 中底层的原型链、作用域链、<code>Dom</code> 元素的冒泡机制都可以看作是责任链模式的应用。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;代码也写了几年了，设计模式处于看了忘，忘了看的状态，最近对设计模式有了点感觉，索性就再学习总结下吧。&lt;/p&gt;
&lt;p&gt;大部分讲设计模式的文章都是使用的 &lt;code&gt;Java&lt;/code&gt;、&lt;code&gt;C++&lt;/code&gt; 这样的以类为基础的静态类型语言，作为前端开发者，&lt;co
      
    
    </summary>
    
    
      <category term="前端" scheme="https://windliang.wang/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="设计模式" scheme="https://windliang.wang/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
</feed>
